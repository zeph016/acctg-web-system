global using Microsoft.AspNetCore.Components.Authorization;
using fgciams;
using System.Net.Http;
using Microsoft.AspNetCore.Components.Web;
using Microsoft.AspNetCore.Components.WebAssembly.Hosting;
using Microsoft.Extensions.Configuration;
using Microsoft.Extensions.DependencyInjection;
using MudBlazor.Services;
using Blazored.LocalStorage;
using fgciams.domain.clsAppstate;
using fgciams.service.AccountingStatusServices;
using fgciams.service.UserAccountServices;
using fgciams.service.ModeOfPaymentServices;
using fgciams.service.GlobalServices;
using fgciams.service.RequestForPaymentService;
using fgciams.service.DivisionServices;
using fgciams.service.BankServices;
using fgciams.service.ProjectChargingLineServices;
using fgciams.service.RequestTypeServices;
using fgciams.service.SubContractorCompanyServices;
using fgciams.service.SubContractorPositionServices;
using fgciams.service.SubConGeneralInformationServices;
using fgciams.service.BillingDocumentServices;
using fgciams.service.PayeeCategoryServices;
using fgciams.service.PayeeServices;
using fgciams.service.AccountingPOBillingServices;
using fgciams.service.LiquidationServices;
using fgciams.service.PettyCashServices;
using fgciams.service.ExpenseLineServices;
using fgciams.service.VoucherServices;
using fgciams.service.AccountTypeServices;
using fgciams.service.AccountingLineServices;
using fgciams.service.AccountLineTypeServices;
using fgciams.service.CheckServices;
using fgciams.service.VoucherRouteBatchServices;
using fgciams.service.TaxCodeServices;
using fgciams.service.SupplierServices;
using fgciams.service.TermsOfPaymentServices;
using fgciams.service.MuniCityServices;
using fgciams.service.VATServices;
using fgciams.service.BIRServices;
using fgciams.service.ScopeOfWorkServices;

var builder = WebAssemblyHostBuilder.CreateDefault(args);
builder.RootComponents.Add<App>("#app");
builder.RootComponents.Add<HeadOutlet>("head::after");

builder.Services.AddScoped(sp => new HttpClient { BaseAddress = new Uri(builder.Configuration.GetValue<string>("BaseAPIUrl")) });
builder.Services.AddBlazoredLocalStorage();
builder.Services.AddMudServices();
builder.Services.AddScoped<ApplicationState>();
builder.Services.AddScoped<IAccountingStatusService, AccountingStatusService>();
builder.Services.AddScoped<IModeOfPaymentService, ModeOfPaymentService>();
builder.Services.AddScoped<IUserAccountService, UserAccountService>();
builder.Services.AddScoped<IRequestForPaymentService, RequestForPaymentService>();
builder.Services.AddScoped<IGlobalService, GlobalService>();
builder.Services.AddScoped<IDivisionService, DivisionService>();
builder.Services.AddScoped<IBankService, BankService>();
builder.Services.AddScoped<IProjectChargingLineService, ProjectChargingLineService>();
builder.Services.AddScoped<IRequestTypeService, RequestTypeService>();
builder.Services.AddScoped<ISubContractorCompanyService, SubContractorCompanyService>();
builder.Services.AddScoped<ISubContractorPositionService, SubContractorPositionService>();
builder.Services.AddScoped<ISubConGeneralInformationService, SubConGeneralInformationService>();
builder.Services.AddScoped<IBillingDocumentService, BillingDocumentService>();
builder.Services.AddScoped<IPayeeCategoryService, PayeeCategoryService>();
builder.Services.AddScoped<IPayeeService, PayeeService>();
builder.Services.AddScoped<IAccountingPOBillingService, AccountingPOBillingService>();
builder.Services.AddScoped<ILiquidationService, LiquidationService>();
builder.Services.AddScoped<IPayeeService, PayeeService>();  
builder.Services.AddScoped<IPettyCashService, PettyCashService>();
builder.Services.AddScoped<IExpenseLineService, ExpenseLineService>();
builder.Services.AddScoped<IVoucherService, VoucherService>();
builder.Services.AddScoped<IAccountTypeService, AccountTypeService>();
builder.Services.AddScoped<IAccountingLineService, AccountingLineService>();
builder.Services.AddScoped<IAccountLineTypeService, AccountLineTypeService>();
builder.Services.AddScoped<ICheckService, CheckService>();
builder.Services.AddScoped<IVoucherRouteService, VoucherRouteService>();
builder.Services.AddScoped<IVoucherRouteBatchService, VoucherRouteBatchService>();
builder.Services.AddScoped<ITaxCodeService, TaxCodeService>();
builder.Services.AddScoped<ISupplierService, SupplierService>();
builder.Services.AddScoped<ITermsOfPaymentService, TermsOfPaymentService>();
builder.Services.AddScoped<IMuniCityService, MuniCityService>();
builder.Services.AddScoped<IVATService, VATService>();
builder.Services.AddScoped<IBIRService,BIRService>();
builder.Services.AddScoped<IScopeOfWorkService,ScopeOfWorkService>();

//Microsoft.AspNetCore.Components.Authorization;
builder.Services.AddOptions();
builder.Services.AddAuthorizationCore();
builder.Services.AddScoped<AuthenticationStateProvider, CustomAuthStateProvider>();
//

await builder.Build().RunAsync();
