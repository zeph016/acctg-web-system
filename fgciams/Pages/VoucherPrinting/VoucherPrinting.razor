@page "/voucher/print"
@inject IVoucherService voucherService
@inject IDialogService dialogService
@inject ISnackbar snackBar

<div class='page-cont pa-2'>
    <div>
        <MudPaper Class='d-flex align-stretch flex-column pa-2' Height='calc(100vh - 100px)'>
            <iframe src="@pdfReport"></iframe>
            <div class='d-flex pa-2'>
                <MudSpacer />
                <MudButton Variant='Variant.Text'>Back</MudButton>
                <MudButton OnClick='(()=> SaveVoucher())' Variant='Variant.Filled' Color='Color.Success'>Save</MudButton>
            </div>
        </MudPaper>
    </div>
</div>

@code{
  private string pdfReport;

  protected override async Task OnInitializedAsync()
  {
    Task t = Task.WhenAll(LoadVoucherReport());
    await t;
  }
  private async Task LoadVoucherReport()
  {
    pdfReport = await voucherService.GenerateReport(GlobalClass.forPrintingOrSaveVoucher);
    pdfReport += "#toolbar=0";
  }
  private async Task SaveVoucher()
  {
    var parameters = new DialogParameters();
        string contentText = "Voucher ";
        string dialogTitle = GlobalClass.forPrintingOrSaveVoucher.Id == 0 ? "Create " + contentText : "Update " + contentText;
        parameters.Add("contentText", contentText);
        parameters.Add("actionMode", GlobalClass.forPrintingOrSaveVoucher.Id == 0 ? Enums.ActionMode.Create : Enums.ActionMode.Update);
        var options = new DialogOptions()
        {
            CloseButton = false,
            MaxWidth = MaxWidth.ExtraSmall,
            FullWidth = true,
            NoHeader = false,
            DisableBackdropClick = true
        };
        var resultDialog = await dialogService.Show<Shared.Dialogs.GenericPromptDialogs.GenericPrompt>(dialogTitle, parameters, options).Result;
        if (!resultDialog.Cancelled)
        {
          var SavedVoucher = new VoucherModel();
          if(GlobalClass.forPrintingOrSaveVoucher.Id == 0)
          {
            SavedVoucher = await voucherService.AddVoucher(GlobalClass.forPrintingOrSaveVoucher, GlobalClass.token);
            Extensions.ShowAlert("Voucher successfully added", Variant.Filled, snackBar,Severity.Success);
          }
          else
          {
            SavedVoucher = await voucherService.UpdateVoucher(GlobalClass.forPrintingOrSaveVoucher, GlobalClass.token);
            Extensions.ShowAlert("Voucher successfully updated", Variant.Filled, snackBar,Severity.Success);
          }
          pdfReport = await voucherService.GenerateReport(SavedVoucher);
        }
  }
}
