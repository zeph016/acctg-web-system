@page "/requestForPaymentAuditTrail/{requestForPaymentId:long}"

@inject NavigationManager NavigationManager
@inject IRequestForPaymentService requestForPaymentService
@inject IGlobalService GlobalService

    <div class="audittrail_container">
        @if(dataFetched)
        {
        <MudGrid>
            <MudItem xs="8">
                <MudPaper Elevation="3">
                    <MudCard Elevation="2">
                        <div style="display: flex; align-items: center;">
                            <MudIcon Size="Size.Medium" style="margin-right: 10px;" Icon="@Icons.Filled.Timeline"></MudIcon>
                             <MudText Typo="Typo.body1">Timeline</MudText>
                        </div>
                        <MudButton Size="Size.Small" StartIcon="@Icons.Filled.ArrowBackIos" title="Back" class="btn btn-primary" OnClick="(() => ReturnToList())"><MudText Typo="Typo.caption">Back</MudText></MudButton>
                    </MudCard>
                    <MudTimeline TimelinePosition="TimelinePosition.Start">     
                            <MudTimelineItem Variant="Variant.Filled">
                                <MudAlert Severity="Severity.Success">
                                    <MudText Typo="Typo.caption"><b>Date</b></MudText>
                                    <MudText Typo="Typo.subtitle2"><b>Activity</b></MudText>
                                    <MudText Typo="Typo.caption">by: &nbsp; UserName</MudText>
                                </MudAlert>
                            </MudTimelineItem>     
                            @* @foreach(var auditTrail in GlobalClassList.rfpAuditTrailList)
                            {
                                 <style>
                                    .timeline-container-@AcctgModel(auditTrail).StatusName .mud-timeline-item-dot-inner
                                    {
                                        background-color: @AcctgModel(auditTrail).StatusColor !important;
                                        width:18px !important;
                                        height:18px !important;
                                    }
                                </style>
                                <div class="timeline-container-@AcctgModel(auditTrail).StatusName">
                                    <MudTimelineItem Variant="Variant.Filled">
                                        <MudAlert Severity="Severity.Success" Style="@($"border-left:10px {AcctgModel(auditTrail).StatusColor} solid;")" Icon="@Extensions.Icon(@AcctgModel(auditTrail).StatusIcon)">
                                            <MudText Typo="Typo.caption"><b>@auditTrail.LogDateTime.ToString("MMMM dd, yyyy hh:mm tt")</b></MudText>
                                            <MudText Typo="Typo.subtitle2"><b>@auditTrail.Activity</b></MudText>
                                            <MudText Typo="Typo.caption">by: &nbsp; @auditTrail.UserName</MudText>
                                        </MudAlert>
                                    </MudTimelineItem>
                                </div> 
                            } *@
                    </MudTimeline>
                </MudPaper>
            </MudItem>
            <MudItem xs="4">
                    <MudPaper Elevation="3">
                         sadasdsa
                    </MudPaper>
            </MudItem>
        </MudGrid>
        }
    </div>

@code
{
    [Parameter] public long requestForPaymentId {get;set;}
    private bool dataFetched {get;set;}
    List<LiquidationAuditTrailModel> audiTrailLiquidation = new();

    protected override async Task OnInitializedAsync()
    {
        GlobalClass.pageTitle = "RFP Audit Trail";
        await Task.Delay(1);
        CompletedFetch();
    }
    private void CompletedFetch()
    {
        dataFetched = true;
        StateHasChanged();
    }
    private void ReturnToList()
    {
        NavigationManager.NavigateTo($"/requestpaymentlist");
    }
    private AccountingStatusModel AcctgModel(RequestForPaymentAuditTrailModel auditTrail)
    {
        AccountingStatusModel accountingStatusModel = new();
        accountingStatusModel.StatusName = "Update";
        accountingStatusModel.StatusColor = "LIME";
        accountingStatusModel.StatusIcon = Icons.Filled.CheckCircleOutline;
        if(auditTrail.Activity.Equals("Create RFP"))
            accountingStatusModel = GlobalClassList.accountingStatusList.Find(x=> x.StatusEnumCategoryId == Enums.AccountingStatusEnumCategory.RFPG) ?? accountingStatusModel;
        if(auditTrail.Activity.Equals("Approve RFP"))
            accountingStatusModel = GlobalClassList.accountingStatusList.Find(x=> x.StatusEnumCategoryId == Enums.AccountingStatusEnumCategory.RFPA) ?? accountingStatusModel;
        if(auditTrail.Activity.Equals("Cancel RFP"))
            accountingStatusModel = GlobalClassList.accountingStatusList.Find(x=> x.StatusEnumCategoryId == Enums.AccountingStatusEnumCategory.RFPC) ?? accountingStatusModel;
        return accountingStatusModel;
    }
}