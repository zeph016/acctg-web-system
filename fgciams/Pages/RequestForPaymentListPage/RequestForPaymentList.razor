@page "/requestpaymentlist"

@inject IRequestForPaymentService requestForPaymentService
@inject NavigationManager navigationManager
@inject IDialogService dialogService
@inject ISnackbar snackBar

<div class='page-cont'>
    <div class='drawer-right'>
        <MudDrawer Class='pa-1' @bind-Open='openSideFilter' Fixed='false' Anchor='Anchor.Right' Elevation='0' Variant='DrawerVariant.Mini' OpenMiniOnHover='false'>
            <div class="drawer-right__filtercont">
                <div class="icon-area d-flex align-center">
                    <MudIconButton OnClick='OpenSideFilter' Icon="@Icons.Filled.FilterList" aria-label="Filter" Size='Size.Medium' />
                </div>
                <div class="filter-title d-flex align-center">
                    <p class='title875'>Filter</p>
                    <MudSpacer />
                    <MudIconButton OnClick='OpenSideFilter' Icon="@Icons.Filled.Close" aria-label="Close Filter" Size='Size.Medium' />
                </div>
                <div class="filter-content d-flex flex-column pl-4 pr-4 gap-1 @visibility">
                    <MudTextField Class='txtfield-75' @bind-Value='searchTerm' Placeholder='Control No.'
                                  Adornment='Adornment.Start' AdornmentIcon='@Icons.Material.Filled.Search' IconSize='Size.Small'
                                  Clearable='true' Variant='Variant.Outlined' />

                    <MudSelect Class='selectparent-75 fa-icon-center' @bind-Value='selectedAcctgReqCat' Adornment='Adornment.Start' AdornmentIcon='@Icons.Filled.RequestPage' IconSize='Size.Small'
                               Placeholder='Category' AnchorOrigin='Origin.BottomCenter' Variant='Variant.Outlined' Clearable='true'>
                        @foreach (Enums.AccountingRequestCategory item in Enum.GetValues(typeof(Enums.AccountingRequestCategory)))
                        {
                            <MudSelectItem Class='selectitem-75' Value='@item'>@Extensions.GetEnumDescription(item)</MudSelectItem>
                        }
                    </MudSelect>

                    <MudSelect Class='selectparent-75 fa-icon-center' @bind-Value='selectedTypeName' Adornment='Adornment.Start' AdornmentIcon='fa-solid fa-clipboard-check' IconSize='Size.Small'
                               Placeholder='Type' AnchorOrigin='Origin.BottomCenter' Variant='Variant.Outlined' Clearable='true'>
                        @if (dataFetched)
                        {
                            @foreach (var item in GlobalClassList.requestTypes)
                            {
                                <MudSelectItem Class='selectitem-75' Value='item.TypeName'>@item.TypeName</MudSelectItem>
                            }
                        }
                    </MudSelect>
                    <MudButton OnClick='LoadFilters' Variant='Variant.Filled' Color='Color.Secondary'>Apply Filter</MudButton>
                </div>
            </div>
        </MudDrawer>
    </div>
    <MudContainer Class='requesttypelist' Fixed='false' MaxWidth='MaxWidth.ExtraExtraLarge'>
        @if (!dataFetched)
        {
            <MudPaper Class='ma-1 pa-1' style="height: calc(100vh - 125px);">
                <MudSkeleton SkeletonType='SkeletonType.Rectangle' Height='calc(100vh - 135px)' Animation='Animation.Wave' />
            </MudPaper>
        }
        else
        {
            <MudTable Class='configtables' Items="@GlobalClassList.requestForPaymentsList" Hover="true"
                      Breakpoint='Breakpoint.Sm' FixedHeader='true' FixedFooter='true' Bordered='true' Dense='true'
                      RowsPerPage='30' Striped='false' Filter='new Func<RequestForPaymentModel,bool>(FilterItems)'>
                <ToolBarContent>
                    <MudText Typo='Typo.caption'>
                        @GlobalClassList.requestForPaymentsList.Count()
                        @(GlobalClassList.requestForPaymentsList.Count() == 1 ? "item" : "items")
                        in Total
                    </MudText>
                    <MudSpacer />
                    <MudMenu StartIcon='@Icons.Filled.MoreVert' AnchorOrigin='Origin.BottomLeft'
                             TransformOrigin='Origin.TopCenter' Dense='true' Size='Size.Small' Label='More'>
                        <MudMenuItem OnClick='(()=> AddNewRFP())'>
                            <div class='d-flex align-center gap-2'>
                                <MudIcon Icon='@Icons.Filled.Add' Size='Size.Medium' />
                                <MudText Typo='Typo.body2'>Add</MudText>
                            </div>
                        </MudMenuItem>
                        <MudMenuItem OnClick='OpenSideFilter'>
                            <div class='d-flex align-center gap-2'>
                                <MudIcon Icon='@Icons.Filled.FilterList' />
                                <MudText Typo='Typo.body2'>Filter</MudText>
                            </div>
                        </MudMenuItem>
                    </MudMenu>
                </ToolBarContent>
                <ColGroup>
                    <col style='width: 1%' />
                    <col />
                    <col />
                    <col style='width: 1%' />
                    <col style='width: 50px' />
                </ColGroup>
                <HeaderContent>
                    <MudTh Class='customheader-1'>
                        <MudTableSortLabel Class='lbl75' InitialDirection='SortDirection.Descending'
                        SortBy='new Func<RequestForPaymentModel, object>(x=>x.ControlNumber)'>
                            Control No.
                        </MudTableSortLabel>
                    </MudTh>
                    <MudTh Class='customheader-1'>Payee</MudTh>
                    <MudTh Class='customheader-1'>Requestor</MudTh>
                    <MudTh Class='customheader-1'></MudTh>
                    <MudTh Class='customheader-1 text-center'>Actions</MudTh>
                </HeaderContent>
                <RowTemplate>
                    <MudTd>
                        <div class='d-flex align-center'>
                            <MudChip Class='chip-radius-5 txt-uppercase font-bold font10' Color='Color.Error' Size='Size.Small'>
                                @context.ControlNumber
                            </MudChip>
                            <MudChip Class='chip-radius-5 font-bold font10' Variant='Variant.Text' Icon='@Icons.Filled.CalendarMonth' Color='Color.Dark' Size='Size.Small'>
                                @Convert.ToDateTime(context.RequestDate).ToShortDateString()
                            </MudChip>
                         </div>
                    </MudTd>
                    <MudTd Class='wbreak-breakword font12'>@context.PayeeName</MudTd>
                    <MudTd Class='wbreak-breakword font12'>@context.RequestedByName</MudTd>
                    <MudTd Class='text-left'>
                        <div class='d-flex align-center justify-start'>
                            <MudChip Class='chip-radius-5 font-bold font10' Color='Color.Dark' Variant='Variant.Text' Size='Size.Small'>
                                @context.RFPDetailTypeId
                            </MudChip>
                                <MudChip Class='chip-radius-5 font-bold font10' Color='Color.Dark' Variant='Variant.Text' Size='Size.Small'>
                                @context.RequestTypeName
                            </MudChip>
                            <MudChip Class='chip-radius-5 font-bold font10' Size='Size.Small' Style='@Extensions.GetAcctgStatusColor(context.AccountingStatusId)'>
                                @context.AccountingStaus
                            </MudChip>
                        </div>
                    </MudTd>
                    <MudTd Class='text-center'>
                        <MudMenu Icon="@Icons.Material.Filled.MoreVert" AnchorOrigin='Origin.BottomLeft'
                        TransformOrigin='Origin.TopRight' Size='Size.Small' Dense='true'>
                            @if (!EnableEditApproved(context))
                            {
                            <MudMenuItem OnClick='(() => EditRFP(context))'>
                                <div class='d-flex align-center gap-2'>
                                    <MudIcon Icon='@Icons.Filled.Edit' Size='Size.Small' />
                                    <MudText Typo='Typo.body2'>Edit</MudText>
                                </div>
                            </MudMenuItem>

                            <MudMenuItem OnClick='(()=> ApprovedRFPStatus(context))'>
                                <div class='d-flex align-center gap-2'>
                                    <MudIcon Icon='@Icons.Filled.CheckCircle' Size='Size.Small' />
                                    <MudText Typo='Typo.body2'>Approved</MudText>
                                </div>
                            </MudMenuItem>

                            <MudMenuItem OnClick='(()=> CancelRFPStatus(context))'>
                                <div class='d-flex align-center gap-2'>
                                    <MudIcon Icon='@Icons.Filled.Cancel' Size='Size.Small' />
                                    <MudText Typo='Typo.body2'>Cancel</MudText>
                                </div>
                            </MudMenuItem>
                            }
                            <MudMenuItem OnClick='(()=> navigationManager.NavigateTo($"/requestforpayment-trails/{context.Id}"))'>
                                <div class='d-flex align-center gap-2'>
                                    <MudIcon Icon='@Icons.Filled.ListAlt' Size='Size.Small' />
                                    <MudText Typo='Typo.body2'>Audit Trail</MudText>
                                </div>
                            </MudMenuItem>
                            <MudMenuItem OnClick='(()=> context.ShowReport = ShowReport(context.ShowReport, context))'>
                                <div class='d-flex align-center gap-2'>
                                    <MudIcon Icon='@Icons.Filled.PictureAsPdf' Size='Size.Small' />
                                    <MudText Typo='Typo.body2'> @(context.ShowReport ? "Close" : "Show") Report</MudText>
                                </div>
                            </MudMenuItem>
                        </MudMenu>
                    </MudTd>
                </RowTemplate>
                <ChildRowContent>
                    @if (context.ShowReport)
                        {
                        <td colspan="9">
                            <div class='d-flex align-center pa-2 bgc-f2f2f2'>
                                <MudSpacer />
                                <MudButton OnClick='(() => context.ShowReport = ShowReport(context.ShowReport, context))' EndIcon="@Icons.Rounded.Close" IconColor='Color.Error' Size='Size.Small' >
                                    Close Report
                                </MudButton>
                            </div>
                            <MudTr Class='d-flex align-stretch justify-center default-report-container'>
                                @if (string.IsNullOrWhiteSpace(PDFContent))
                                {
                                    <MudOverlay Visible='true' DarkBackground="false" AutoClose="true">
                                        <MudProgressCircular Color="Color.Primary" Indeterminate="true" />
                                    </MudOverlay>
                                }
                                else
                                {
                                <iframe src='@PDFContent' />
                                }
                            </MudTr>
                        </td>
                        }
                </ChildRowContent>
                <PagerContent>
                    <MudTablePager />
                </PagerContent>
            </MudTable>
        }
    </MudContainer>
</div>

@code{
    private bool dataFetched, openSideFilter;
    private string PDFContent = default!;
    private int[] pageSize = new int[] { 30, 50, 100, 500, 1000 };
    private string searchTerm = string.Empty, visibility = "visibility-animation-hide", selectedTypeName = string.Empty;
    private int selectedFilter;

    private Enums.AccountingRequestCategory selectedAcctgReqCat;
    protected override async Task OnInitializedAsync()
    {
        GlobalClass.pageTitle = "RFP LIST";
        while (GlobalClass.currentUserAccount == null || GlobalClassList.requestTypes == null || GlobalClassList.accountingStatusList == null)
            await Task.Delay(1);
        GlobalClass.requestForPayment = new();
        await LoadRequestPaymentList();
        CompletedFetch();
    }

    void CompletedFetch()
    {
        dataFetched = true;
        StateHasChanged();
    }

    private async Task LoadRequestPaymentList()
    {
      var filterParameter = new FilterParameter()
      {
        isActive = true
      };
      GlobalClassList.requestForPaymentsList = await requestForPaymentService.LoadRequestPayment(filterParameter, GlobalClass.token);
    }
    void AddNewRFP()
    {
        GlobalClass.requestForPayment = new();
        GlobalClassList.requestForPayments = new();
        navigationManager.NavigateTo($"/requestpayment");
    }
    async void EditRFP(RequestForPaymentModel request)
    {
        GlobalClass.requestForPayment = await Task.Run(() => request);
        navigationManager.NavigateTo($"/requestpayment");
    }

    private bool FilterItems(RequestForPaymentModel items)
    {
        if (string.IsNullOrEmpty(searchTerm))
            return true;
        if (items.ControlNumber.Contains(searchTerm, StringComparison.InvariantCultureIgnoreCase))
            return true;
        if (items.RequestTypeName.Contains(searchTerm, StringComparison.InvariantCultureIgnoreCase))
            return true;
        return false;
    }

    private async Task LoadFilters()
    {
        var filterParameter = new FilterParameter()
        {
            isActive = true
        };
        GlobalClassList.requestForPaymentsList = await requestForPaymentService.LoadRequestPayment(filterParameter, GlobalClass.token);
        GlobalClassList.requestForPaymentsList = GlobalClassList.requestForPaymentsList.Where(x => x.RequestTypeName == selectedTypeName).ToList();
    }
    private bool ShowReport(bool isShow, RequestForPaymentModel requestForPayment)
    {
        Task.Run(() => GenerateReport(requestForPayment));
        return isShow = !isShow;
    }
    private async Task GenerateReport(RequestForPaymentModel RFP)
    {
        RFP.RequestForPaymentDetails = await requestForPaymentService.LoadRequestPaymentDetail(RFP.Id, GlobalClass.token);
        PDFContent = await requestForPaymentService.GenerateRFPReport(RFP);
        StateHasChanged();
    }

    private void OpenSideFilter()
    {
        openSideFilter = !openSideFilter;
        if (openSideFilter)
            visibility = "visibility-animation-show";
        if (!openSideFilter)
            visibility = "visibility-animation-hide";
    }
    private async Task<bool> PromptMessage(Enums.ActionMode actionMode)
    {
        bool isNotCancel;
        var parameters = new DialogParameters();
        string contentText = "Request for payment ";
        string dialogTitle = actionMode == Enums.ActionMode.Cancel ? "Cancel " + contentText : "Approve " + contentText;
        parameters.Add("contentText", contentText);
        parameters.Add("actionMode", actionMode == Enums.ActionMode.Cancel ? Enums.ActionMode.Cancel : Enums.ActionMode.Approve);
        var options = new DialogOptions()
        {
            CloseButton = false,
            MaxWidth = MaxWidth.ExtraSmall,
            FullWidth = true,
            NoHeader = false,
            DisableBackdropClick = true
        };
        var resultDialog = await dialogService.Show<Shared.Dialogs.GenericPromptDialogs.GenericPrompt>(dialogTitle, parameters, options).Result;
        if (!resultDialog.Cancelled)
            isNotCancel = true;
        else
            isNotCancel = false;

        StateHasChanged();

        return isNotCancel;
    }
    private async Task ApprovedRFPStatus(RequestForPaymentModel requestForPayment)
    {
        if (await PromptMessage(Enums.ActionMode.Approve))
        {
            requestForPayment.AccountingStatusId = GlobalClassList.accountingStatusList.Where(x => x.StatusEnumCategoryId == Enums.AccountingStatusEnumCategory.RFPA).Select(i => i.Id).FirstOrDefault();
            requestForPayment.Activity = "RFP Status Approved";
            requestForPayment.UserId = GlobalClass.currentUserAccount.EmployeeId;
            await requestForPaymentService.UpdateRFPStatus(requestForPayment, GlobalClass.token);
            Extensions.ShowAlert("Request for payment approved", Variant.Filled, snackBar, Severity.Success);
        }
        else
            Extensions.ShowAlert("Action Cancelled", Variant.Filled, snackBar, Severity.Normal);
    }
    private async Task CancelRFPStatus(RequestForPaymentModel requestForPayment)
    {
        if (await PromptMessage(Enums.ActionMode.Cancel))
        {
            requestForPayment.AccountingStatusId = GlobalClassList.accountingStatusList.Where(x => x.StatusEnumCategoryId == Enums.AccountingStatusEnumCategory.RFPC).Select(i => i.Id).FirstOrDefault();
            requestForPayment.Activity = "RFP Status Cancelled";
            requestForPayment.UserId = GlobalClass.currentUserAccount.EmployeeId;
            await requestForPaymentService.UpdateRFPStatus(requestForPayment, GlobalClass.token);
            Extensions.ShowAlert("Request for payment cancelled", Variant.Filled, snackBar, Severity.Success);
        }
        else
            Extensions.ShowAlert("Action Cancelled", Variant.Filled, snackBar, Severity.Normal);

    }
    private bool EnableEditApproved(RequestForPaymentModel requestForPayment)
    {
        var accountingStatusList = new AccountingStatusModel();
        accountingStatusList = GlobalClassList.accountingStatusList.Where(x => x.Id == requestForPayment.AccountingStatusId).FirstOrDefault();
        return accountingStatusList?.StatusEnumCategoryId == Enums.AccountingStatusEnumCategory.RFPA;
    }
}