@page "/petty-cash"

@inject IGlobalService globalService
@inject IPettyCashService pettyCashService
@inject ISnackbar SnackbarService
@inject IDialogService dialogService
@inject IGlobalService GlobalService
@inject NavigationManager navigationManager
@inject IJSRuntime jsRuntimeService
@inject IAccessLevelService accessLevelService

@attribute [Authorize]

<div class='page-cont d-flex'>
    @if (!dataFetched)
    {
        <div class='flex-1 pa-2'>
            <SkeletonPageList />
        </div>
    }
    else
    {
        <MudContainer Class='pettycashpage pa-2 gap-2 overflow-auto' Fixed='false' MaxWidth='MaxWidth.Large'>
            <MudPaper Class='flex-1' Elevation='1' Height='fit-content'>
                <MudCardContent Class='pa-2'>
                    <div class='pettycashpage__grid'>
                        <div class="pcash-header d-flex align-center pa-2 gap-2 bgc-F4F5FB rounded-tr rounded-tl">
                            <MudGrid Spacing='1'>
                                <MudItem Class='d-flex align-center justify-start gap-1' xs=4>
                                    <MudImage Class='fgcilogocont__imglogo' Src='images/fglogo/fgci1.png' Alt='fgci logo' Height='30' Width='30'/>
                                    <MudText Class='fgcilogocont__lblfirst'>F. GURREA</MudText>
                                    <MudText Class='fgcilogocont__lblsecond'>Construction, Inc.</MudText>
                                </MudItem>
                                <MudItem Class='d-flex align-center justify-center' xs=4>
                                    <MudText Class='txt-uppercase font-1-1rem ff-theramin'>@GlobalClass.pageTitle</MudText>
                                </MudItem>
                                <MudItem Class='d-flex align-center justify-end' xs=4>
                                    <MudTooltip Text="Create new petty cash" Arrow Placement='Placement.Left'>
                                        <MudButton Class='btn-ios-d pa-1 font12' OnClick='New' StartIcon="@Icons.Material.Filled.Add" Variant='Variant.Filled'
                                        Color='Color.Info' Size='Size.Small' DisableElevation>new</MudButton>
                                    </MudTooltip>
                                </MudItem>
                            </MudGrid>
                        </div>
                         <div class="pcash-payee d-flex align-center pa-2 gap-2">
                            <MudText Class='d-flex wspace-nowrap txt-uppercase font-bold font10'>
                                Payee:
                                <MudText Class='font10 font-bold' Color='Color.Error'>*</MudText>
                            </MudText>
                            <BlazoredTypeahead SearchMethod='LoadPayee' DisableClear placeholder='Payee'
                                @bind-Value='payeeName' MinimumLength='3' Debounce="300" MaximumSuggestons='10'>
                                <SelectedTemplate>
                                    <div class='overflow-hidden wspace-nowrap'>
                                        @if (context.ProjectId != 0) {
                                            <MudText Class='font12'>@context.ProjectName</MudText>
                                            GlobalClass.pettyCash.PayeeId = context.ProjectId;
                                            GlobalClass.pettyCash.PayeeName = context.ProjectName;
                                            GlobalClass.pettyCash.PayeeCategoryId = (Enums.ProjectCategory)context.ProjectCategoryId;
                                        } else if (@GlobalClass.pettyCash.PayeeId != 0) {
                                            <MudText Class='font12'>@GlobalClass.pettyCash.PayeeName</MudText>
                                        } 
                                        else if (reqPayee) {
                                            <MudText Class='font12 font-bold txt-uppercase' Color='Color.Error'>Required</MudText>
                                        } else {
                                            <MudText Class='font12'> - </MudText>
                                        }
                                    </div>
                                </SelectedTemplate>
                                <ResultTemplate>
                                    <div class='d-flex flex-column'>
                                        <small class='font-bold'>@context.ProjectName</small>
                                        <small>@context.Location</small>
                                        <small>@Extensions.ProjectReference(context)</small>
                                    </div>
                                </ResultTemplate>
                            </BlazoredTypeahead>
                        </div>
                        <div class='pcash-date'>
                            <MudText Class='d-flex wspace-nowrap txt-uppercase font-bold font10'>
                                date:
                            </MudText>
                            <MudDatePicker Class='txtfield-font12-no-margin txtfield-right' @bind-Date='GlobalClass.pettyCash.RequestDate' IconSize='Size.Small' DisableToolbar
                                Margin='Margin.Dense' MaxDate='@GlobalClass.pettyCash.RequestDate' />
                        </div>
                        <div class="pcash-controlno"> 
                            <MudText Class='wspace-nowrap txt-uppercase font-bold font10'>Control No:</MudText>
                            <MudSpacer />
                            <MudChip Class='chip-radius-5 font-bold font12' Color='Color.Error' Size='Size.Medium' Variant='Variant.Outlined'>
                                @(GlobalClass.pettyCash.Id != 0 ? GlobalClass.pettyCash.ControlNumber:"AUTO")
                            </MudChip>
                        </div>
                        <div class="pcash-details rounded-br rounded-bl">
                            <div class='flex-1 gap-2'>
                                <div class='d-flex align-center justify-end bgc-F4F5FB height32px'>
                                    <MudDivider Vertical />
                                    <MudToggleIconButton Class='mx-1' @bind-Toggled="isSideBarExpanded" Size='Size.Small' ToggledSize='Size.Small'
                                        Icon="@Icons.Material.Filled.ToggleOff" Color="@Color.Tertiary" Title="Expand Sub Details"
                                        ToggledIcon="@Icons.Material.Filled.ToggleOn" ToggledColor="@Color.Info" ToggledTitle="Collapse Details"/>
                                </div>
                                <MudDivider />
                                <MudTextField Class='pa-2' @bind-Value='GlobalClass.pettyCash.Particular' Variant='Variant.Text' Lines=8 Label='Particulars' Error='reqParticulars' ErrorText='Required' DisableUnderLine />
                                <MudDivider />
                                <MudTextField Class='pa-2' @bind-Value='GlobalClass.pettyCash.Remarks' Variant='Variant.Text' Lines=8 Label='Remarks' DisableUnderLine />
                            </div>
                            <div class='d-flex flex-column border-thin-left overflow-hidden blzrtypahead-unset-width transition-05s-ease width300px'
                                style='@(isSideBarExpanded ? "max-width:300px" : "max-width:57px")'>
                                <MudCardHeader Class='d-flex justify-center pa-2 border-thin-bottom bgc-F4F5FB height2-05rem cursor-pointer'
                                    @onclick='(() => isSigExpanded = !isSigExpanded)'>
                                    <div class='d-flex align-center transition-05s-ease overflow-hidden @(isSideBarExpanded ? "fade-in flex-1" : "fade-out")' style='@(isSideBarExpanded ? "max-width:500px" : "max-width:0px")'>
                                        <MudText Class='txt-uppercase font12 font-bold'>Signatories</MudText>
                                    </div>
                                    <MudIconButton OnClick='(() => isSigExpanded = !isSigExpanded)' Icon='@Icons.Material.Filled.PersonPin' Size='Size.Small'
                                        Color='Color.Dark' />
                                </MudCardHeader>
                                <div class='transition-05s-ease @(isSideBarExpanded ? "":"overflow-hidden") @(isSigExpanded ? "fade-in":"overflow-hidden")' style='@(isSigExpanded ? "max-height:245px" : "max-height:0px")'>
                                    <MudCardContent Class='d-flex flex-column pa-2 gap-2'>
                                        <div class='d-flex align-center gap-2'>
                                            @if (requestedBy.Picture.Count() == 0) {
                                                <MudAvatar Class='mb-1' Image='images/fglogo/fgci1-gs.png' Size='Size.Medium' />
                                            } else {
                                                <MudAvatar Class='mb-1' Image='@($"data:image/png;base64, {Convert.ToBase64String(requestedBy.Picture)}")' Size='Size.Medium' />
                                            }
                                            <div class='d-flex flex-grow-1 flex-column blzrthead-disabled-minheight15'>
                                                <BlazoredTypeahead SearchMethod='LoadEmployee' DisableClear Context='reqby' placeholder='Requested By'
                                                    Debounce="300" MaximumSuggestions='5' Disabled MinimumLength='3'
                                                    Value='requestedBy' ValueExpression='(() => requestedBy)'
                                                    ValueChanged='((UserAccount userAccount) =>
                                                    {
                                                        requestedBy = userAccount;
                                                        GlobalClass.pettyCash.RequestedById = userAccount.EmployeeId;
                                                        GlobalClass.pettyCash.RequestedByName = userAccount.EmployeeName;
                                                    })'>
                                                    <SelectedTemplate>
                                                        <div class='overflow-hidden wspace-nowrap'>
                                                            <small>@GlobalClass.pettyCash.RequestedByName</small>
                                                        </div>
                                                    </SelectedTemplate>
                                                    <ResultTemplate>
                                                        <div class='ddavatar width210px'>
                                                            <MudAvatar Image='@($"data:image/png;base64, {Convert.ToBase64String(@reqby.Picture)}")' Size='Size.Small'/>
                                                            @reqby.EmployeeName | @reqby.Designation
                                                        </div>
                                                    </ResultTemplate>
                                                </BlazoredTypeahead>
                                                <MudText Class='d-flex wspace-nowrap txt-uppercase font-bold font10 pl-1'>
                                                    Requested By
                                                    <MudText Class='font10 font-bold' Color='Color.Error'>*</MudText>
                                                </MudText>
                                            </div>
                                        </div>
                                        <div class='d-flex align-center gap-2'>
                                            @if (approvedBy.Picture.Count() == 0) {
                                                <MudAvatar Class='mb-1' Image='images/fglogo/fgci1-gs.png' Size='Size.Medium' />
                                            } else {
                                                <MudAvatar Class='mb-1' Image='@($"data:image/png;base64, {Convert.ToBase64String(approvedBy.Picture)}")' Size='Size.Medium' />
                                            }
                                            <div class='d-flex flex-grow-1 flex-column'>
                                                <BlazoredTypeahead SearchMethod='LoadEmployee' DisableClear Context='aprby' placeholder='Approved By'
                                                    Debounce="300" MaximumSuggestions='10' MinimumLength='3'
                                                    Value="approvedBy" ValueExpression='(() => approvedBy)'  
                                                    ValueChanged="@((UserAccount userAccount) => 
                                                    {
                                                        approvedBy = userAccount;
                                                        GlobalClass.pettyCash.ApprovedById = userAccount.EmployeeId;
                                                        GlobalClass.pettyCash.ApprovedByName = userAccount.EmployeeName;
                                                    })">
                                                    <SelectedTemplate>
                                                        @if(String.IsNullOrEmpty(GlobalClass.pettyCash.ApprovedByName))
                                                        {
                                                            <small>-</small>
                                                        }
                                                        else
                                                        {
                                                        <div class='overflow-hidden wspace-nowrap'>
                                                            <small>@GlobalClass.pettyCash.ApprovedByName</small>
                                                        </div>
                                                        }
                                                    </SelectedTemplate>
                                                    <ResultTemplate>
                                                        <div class='ddavatar width210px'>
                                                            <MudAvatar Image='@($"data:image/png;base64, {Convert.ToBase64String(@aprby.Picture)}")' Size='Size.Small' />
                                                            @aprby.EmployeeName | @aprby.Designation
                                                        </div>
                                                    </ResultTemplate>
                                                </BlazoredTypeahead>
                                                <MudText Class='d-flex wspace-nowrap txt-uppercase font-bold font10 pl-1'>
                                                    Approved By
                                                    <MudText Class='font10 font-bold' Color='Color.Error'>*</MudText>
                                                </MudText>
                                            </div>
                                        </div>
                                        <div class='d-flex align-center gap-2'>
                                            @if (receivedBy.Picture.Count() == 0) {
                                                <MudAvatar Class='mb-1' Image='images/fglogo/fgci1-gs.png' Size='Size.Medium' />
                                            } else {
                                                <MudAvatar Class='mb-1' Image='@($"data:image/png;base64, {Convert.ToBase64String(receivedBy.Picture)}")' Size='Size.Medium' />
                                            }
                                            <div class='d-flex flex-grow-1 flex-column'>
                                                <BlazoredTypeahead SearchMethod='LoadEmployee' DisableClear Context='recby' placeholder='Received By'
                                                    Debounce="300" MaximumSuggestions='10' MinimumLength='3'
                                                    Value='receivedBy' ValueExpression="(()=>receivedBy)" 
                                                    ValueChanged="@((UserAccount userAccount) => 
                                                    {
                                                        receivedBy = userAccount;
                                                        GlobalClass.pettyCash.ReceivedById = userAccount.EmployeeId;
                                                        GlobalClass.pettyCash.ReceivedByName = userAccount.EmployeeName;
                                                    })" >
                                                    <SelectedTemplate>
                                                        @if(String.IsNullOrEmpty(GlobalClass.pettyCash.ReceivedByName))
                                                        {
                                                            <small>-</small>
                                                        }
                                                        else
                                                        {
                                                        <div class='overflow-hidden wspace-nowrap'>
                                                            <small>@GlobalClass.pettyCash.ReceivedByName</small>
                                                        </div>
                                                        }
                                                    </SelectedTemplate>
                                                    <ResultTemplate>
                                                        <div class='ddavatar width210px'>
                                                            <MudAvatar Image='@($"data:image/png;base64, {Convert.ToBase64String(@recby.Picture)}")' Size='Size.Small' />
                                                            @recby.EmployeeName | @recby.Designation
                                                        </div>
                                                    </ResultTemplate>
                                                </BlazoredTypeahead>
                                                <MudText Class='d-flex wspace-nowrap txt-uppercase font-bold font10 pl-1'>
                                                    Received By
                                                    <MudText Class='font10 font-bold' Color='Color.Error'>*</MudText>
                                                </MudText>
                                            </div>
                                        </div>
                                    </MudCardContent>
                                </div>
                                <MudDivider />
                                <MudCardHeader Class='d-flex justify-center pa-2 border-thin-bottom bgc-F4F5FB height2-05rem cursor-pointer'
                                    @onclick='(() => isStatusExpanded = !isStatusExpanded)'>
                                    <div class='d-flex align-center transition-05s-ease overflow-hidden @(isSideBarExpanded ? "fade-in flex-1" : "fade-out")' style='@(isSideBarExpanded ? "max-width:500px" : "max-width:0px")'>
                                        <MudText Class='txt-uppercase font12 font-bold'>Status</MudText>
                                    </div>
                                    <MudIconButton OnClick='(() => isStatusExpanded = !isStatusExpanded)' Icon='@Icons.Material.Filled.FactCheck' Size='Size.Small'
                                        Color='Color.Dark' />
                                </MudCardHeader>
                                <div class='d-flex align-start justify-center overflow-hidden @(isStatusExpanded ? "fade-in" : "fade-out")' style='@(isStatusExpanded && isSideBarExpanded ? "max-height:500px" : "max-height:0px")'>
                                    <MudChip Class='chip-radius-5 font-bold font12' Size='Size.Medium' Style="@Extensions.BorderColor(currentStatus.Id)" Variant='Variant.Outlined'>
                                        @currentStatus.StatusName
                                    </MudChip>
                                </div>
                                <MudDivider />
                                <MudCardHeader Class='d-flex justify-center pa-2 border-thin-bottom bgc-F4F5FB height2-05rem cursor-pointer'
                                    @onclick='(() => isAmountExpanded = !isAmountExpanded)'>
                                    <div class='d-flex align-center transition-05s-ease overflow-hidden @(isSideBarExpanded ? "fade-in flex-1" : "fade-out")' style='@(isSideBarExpanded ? "max-width:500px" : "max-width:0px")'>
                                        <MudText Class='txt-uppercase font12 font-bold'>Amount</MudText>
                                    </div>
                                    <MudIconButton OnClick='(() => isAmountExpanded = !isAmountExpanded)' Icon='@Icons.Material.Filled.Equalizer' Size='Size.Small'
                                        Color='Color.Dark' />
                                </MudCardHeader>
                                <div class='d-flex align-center pa-2 justify-center overflow-hidden @(isSideBarExpanded ? "fade-in" : "fade-out")' style='@(isSideBarExpanded ? "max-height:500px" : "max-height:0px")'>
                                    @if (GlobalClass.pettyCash.Amount > 0) {
                                        <MudIcon Class='color-green' Icon='@Icons.Material.Outlined.LabelImportant' Size='Size.Medium'/>
                                        <MudSpacer />
                                        <div class='d-flex align-center gap-2'>
                                            <MudText Class='font-bold pl-2 color-green'>@Extensions.GetEnumDescription(Enums.BankCurrency.PhilippinePeso)</MudText>
                                            <MudNumericField @ref='@_amount' onclick="this.select();" Class='txt-search-overflow txt-top-0 txtfield-right tfield-color-green' @bind-Value='GlobalClass.pettyCash.Amount' Culture='CultureInfo.GetCultureInfo("en-PH")'
                                            Format='N2' Variant='Variant.Text' HideSpinButtons Error='reqAmount' ErrorText=''/>
                                        </div>
                                    } else {
                                        <MudIcon Icon='@Icons.Material.Outlined.LabelImportant' Size='Size.Medium' Color='Color.Error' />
                                        <MudSpacer />
                                        <div class='d-flex align-center gap-2'>
                                            <MudText  Class='font-bold pl-2' Color='Color.Error'>@Extensions.GetEnumDescription(Enums.BankCurrency.PhilippinePeso)</MudText>
                                            <MudNumericField @ref='@_amount'  onclick="this.select();" Class='txt-search-overflow txt-top-0 txtfield-right tfield-color-red' @bind-Value='GlobalClass.pettyCash.Amount' Culture='CultureInfo.GetCultureInfo("en-PH")'
                                                Format='N2' Variant='Variant.Text' HideSpinButtons Error='reqAmount' ErrorText=''/>
                                        </div>
                                    }
                                </div>
                                <MudSpacer />
                                <div class='@(isSideBarExpanded ? "fade-in" : "fade-out")'>
                                    <MudCardActions Class='d-flex align-center justify-end gap-2 border-thin-top'>
                                        <MudButton Class='btn-ios-d font12' OnClick='(()=> navigationManager.NavigateTo($"/petty-cash/list"))' Variant="Variant.Text" Size='Size.Medium' DisableElevation>Cancel</MudButton>
                                        <MudButton Class='btn-ios-d font12' OnClick='(()=> GenerateReport())' Variant="Variant.Filled" Color='@(currActionMode == Enums.ActionMode.Update ? Color.Info : Color.Primary)' Size='Size.Medium' DisableElevation Disabled='_processing'>
                                            @if (_processing) {
                                                <MudProgressCircular Class="progsize-21" Size="Size.Small" Indeterminate="true"/>
                                                <MudText Class='font12 fweight500 pl-2'>GENERATING</MudText>
                                            } else {
                                                <MudText Class='font12 fweight500'>
                                                    @(currActionMode == Enums.ActionMode.Create ? "GENERATE":"UPDATE")
                                                </MudText> 
                                            }
                                        </MudButton>
                                    </MudCardActions>
                                </div>
                            </div>
                        </div>
                    </div>
                </MudCardContent>
            </MudPaper>
        </MudContainer>
    }
</div>

@code {
    [CascadingParameter] public AppStoreState ApplicationState { get; set; } = new();
    private Project payeeName = new Project();
    private UserAccount requestedBy = new UserAccount(); private UserAccount approvedBy = new UserAccount();
    private UserAccount receivedBy = new UserAccount();
    private string submitText = "GENERATE";
    private bool dataFetched, reqPayee, reqRequestor, reqApprover, reqReceived, reqAmount, reqParticulars, _processing,
    isSideBarExpanded = true, isSigExpanded = true, isStatusExpanded = true, isAmountExpanded = true;
    public static Enums.ActionMode currActionMode { get; set; }
    private AccountingStatusModel currentStatus = new AccountingStatusModel();
    private MudNumericField<decimal> _amount  = new MudNumericField<decimal>();
    public override async Task SetParametersAsync(ParameterView parameters)
    {
        if(GlobalClass.pettyCash == null || GlobalClass.pettyCash.Id == 0)
            currActionMode = Enums.ActionMode.Create;
        else
            currActionMode = Enums.ActionMode.Update;
        await base.SetParametersAsync(parameters);
    }
    protected override async Task OnInitializedAsync()
    {
        GlobalClass.pageTitle = "PETTY CASH ENTRY";
        navigationManager.LocationChanged += OnLocationChanged;
        while (GlobalClass.currentUserAccount == null || string.IsNullOrWhiteSpace(GlobalClass.token) || GlobalVariable.ServerTime == null)
            await Task.Delay(1);
        if (GlobalClass.pettyCash.Id != 0)
            await ReMapDetails();
        else
            await MapDefaultDetails();
        await Common.Privileges.GetAllowedFunctions(accessLevelService, Enums.AISModules.PettyCashEntry);
        CompletedFetch();
    }

    void CompletedFetch()
    {
        dataFetched = true;
        Task.Run(StateHasChanged);
    }
    private void OnLocationChanged(object? sender, LocationChangedEventArgs args)
    {
        GlobalClass.pettyCash = new();
    }

    private async Task<IEnumerable<Project>> LoadPayee(string projectName)
    {
       var filterParameter = new FilterParameter()
        {
            IsProject = true,
            ProjectName = projectName,
            IsId = false
        };
        var projects = await globalService.LoadPayees(filterParameter,GlobalClass.token);
        return projects;
    }

    private async Task<IEnumerable<UserAccount>> LoadEmployee(string employeeName)
    {
        var filterParameter = new FilterParameter()
        {
            IsName = true,
            Name = employeeName,
            IsLookUp = true
        };
        var employee = await globalService.LoadAllEmployee(filterParameter, GlobalClass.token);
        return employee;
    }
    private async Task ReMapDetails()
    {
        GlobalClass.pettyCash = await pettyCashService.GetPettyCash(GlobalClass.pettyCash.Id, GlobalClass.token);
        await LoadEmployeePictures();

        //Audit
        GlobalClass.pettyCash.PettyCashId = GlobalClass.pettyCash.Id;
        GlobalClass.pettyCash.UserId = GlobalClass.currentUserAccount.EmployeeId;
        GlobalClass.pettyCash.UserName = GlobalClass.currentUserAccount.UserName;
        GlobalClass.pettyCash.Department = GlobalClass.currentUserAccount.DepartmentName;
        GlobalClass.pettyCash.Activity = "Update Petty Cash";

        var result = GlobalClassList.accountingStatusList.Find(x=>x.Id == GlobalClass.pettyCash.StatusId);
        if (result != null)
            currentStatus = result;
        GlobalClass.pettyCash.StatusName = currentStatus.StatusName;   
    }
    private async Task MapDefaultDetails()
    {
        requestedBy = await GetEmployeeDetails(GlobalClass.pettyCash.RequestedById);
        GlobalClass.pettyCash = new ();
        GlobalClass.pettyCash.RequestDate = GlobalVariable.ServerTime;
        GlobalClass.pettyCash.IsActive = true;
        GlobalClass.pettyCash.StatusId = (Int64)Enums.AccountingStatusEnumCategory.PCG+1;
        GlobalClass.pettyCash.statusCategoryId = Enums.AccountingStatusEnumCategory.PCG;
        
        GlobalClass.pettyCash.RequestedById = GlobalClass.currentUserAccount.EmployeeId;
        GlobalClass.pettyCash.RequestedByName = GlobalClass.currentUserAccount.EmployeeName;
        GlobalClass.pettyCash.RequestedByDepartment = GlobalClass.currentUserAccount.DepartmentName;
        GlobalClass.pettyCash.RequestedBySection = GlobalClass.currentUserAccount.SectionName;
        GlobalClass.pettyCash.RequestedByPosition = GlobalClass.currentUserAccount.Designation;
        requestedBy = GlobalClass.currentUserAccount;

        //Audit
        GlobalClass.pettyCash.UserId = GlobalClass.currentUserAccount.EmployeeId;
        GlobalClass.pettyCash.UserName = GlobalClass.currentUserAccount.UserName;
        GlobalClass.pettyCash.Department = GlobalClass.currentUserAccount.DepartmentName;
        GlobalClass.pettyCash.LogDateTime = GlobalVariable.ServerTime;
        GlobalClass.pettyCash.Activity = "Create Petty Cash";

        var result = GlobalClassList.accountingStatusList.Where(x=>x.StatusName.Contains("pc-generated", StringComparison.InvariantCultureIgnoreCase)).FirstOrDefault();
        if (result != null)
            currentStatus = result;
        GlobalClass.pettyCash.StatusName = currentStatus.StatusName;   
        StateHasChanged();
    }
    private async Task<UserAccount> GetEmployeeDetails(long employeeId)
    {
        var employeeDetail = await globalService.GetEmployeeById(employeeId, GlobalClass.token);
        return employeeDetail;
    }
    private void GenerateReport()
    {
        _processing = true;
        if (isValidated())
        {
            GlobalClass.pettyCashForPrint = GlobalClass.pettyCash;
            GlobalClass.pettyCash = new();
            _processing = false;
            navigationManager.NavigateTo($"/petty-cash/print");
        }
        else
        {
            _processing = false;
            Extensions.ShowAlert("Cannot create Petty Cash. Incomplete fields.", Variant.Filled, SnackbarService, Severity.Error);
        }
    }
    private async Task New()
    {
        var parameters = new DialogParameters();
        parameters.Add("contentText", "create new petty cash");
        parameters.Add("dialogTitle", "Create New");
        parameters.Add("buttonText", "Create New");
        parameters.Add("actionMode", Enums.ActionMode.Prompt);
        var options = new DialogOptions() { CloseButton = false, MaxWidth = MaxWidth.Small, FullWidth = false, NoHeader = false };
        var resultDialog = await dialogService.Show<Shared.Dialogs.GenericPromptDialogs.GenericPrompt>(string.Empty,parameters,options).Result;
        if(!resultDialog.Canceled)
        {
            currActionMode = Enums.ActionMode.Create;
            GlobalClass.pettyCash = new();
            string thisPage = "pc-create";
            navigationManager.NavigateTo($"/refresh/{thisPage}");
        }
    }
    public async Task LoadEmployeePictures()
    {
        requestedBy = await GetEmployeeDetails(GlobalClass.pettyCash.RequestedById);
        approvedBy = await GetEmployeeDetails(GlobalClass.pettyCash.ApprovedById);
        receivedBy = await GetEmployeeDetails(GlobalClass.pettyCash.ReceivedById);

        if(GlobalClass.pettyCash.Id == 0 )
        {
            var result = GlobalClassList.accountingStatusList.Where(x=>x.StatusName.Contains("pc-generated", StringComparison.InvariantCultureIgnoreCase)).FirstOrDefault();
            if (result != null)
                currentStatus = result;
        }
        GlobalClass.pettyCash.StatusName = currentStatus.StatusName;
    }
    private bool isValidated()
    {
        ResetValidations();
        if (GlobalClass.pettyCash.PayeeId == 0)
            reqPayee = true;
        if (string.IsNullOrEmpty(GlobalClass.pettyCash.Particular))
            reqParticulars = true;
        if (GlobalClass.pettyCash.RequestedById == 0)
            reqRequestor = true;
        if (GlobalClass.pettyCash.ApprovedById == 0)
            reqApprover = true;
        if (GlobalClass.pettyCash.ReceivedById == 0)
            reqReceived = true;
        if(GlobalClass.pettyCash.RequestDate == null)
            return false;
        if(GlobalClass.pettyCash.Amount <= 0)
            reqAmount = true;
        if (reqPayee || reqParticulars || reqRequestor || reqApprover || reqReceived || reqAmount)
            return false;
        return true;
    }

    private void ResetValidations()
    {
        reqPayee = false;
        reqParticulars = false;
        reqRequestor = false;
        reqApprover = false;
        reqReceived = false;
        reqAmount = false;
    }
    private void SelectedReceivedBy(UserAccount ac)
    {
        receivedBy = ac;
        GlobalClass.pettyCash.ReceivedById = ac.EmployeeId;
        GlobalClass.pettyCash.ReceivedByName = ac.EmployeeName;
    }
}