@page "/pettycash-list"

@inject IPettyCashService pettyCashService
@inject IDialogService dialogService
@inject NavigationManager navigationManager
@inject IPettyCashService PettyCashService
@inject ISnackbar snackBarService
@inject IConfiguration configuration

<div class='page-cont'>
    <div class='drawer-right'>
        <MudDrawer Class='pa-1' @bind-Open='openSideFilter' Fixed='false' Anchor='Anchor.Right' Elevation='0' Variant='DrawerVariant.Mini' OpenMiniOnHover='false'>
            <div class='drawer-right__filtercont'>
                <div class='icon-area d-flex align-center'>
                    <MudIconButton OnClick='OpenSideFilter' Icon='@Icons.Filled.FilterList' arial-label='Close Filter' Size='Size.Medium' />
                </div>
                <div class='filter-title d-flex align-center'>
                    <p class='title875'>Filter</p>
                    <MudSpacer />
                    <MudIconButton OnClick='OpenSideFilter' Icon='@Icons.Filled.Close' aria-label='Close Filter' Size='Size.Medium' />
                </div>
                <div class='filter-content d-flex flex-column pl-4 pr-4 gap-2 @visibility'>
                     <div class='d-flex align-center gap-2 @visibility'>
                        <MudCheckBox Class='pt-1' @bind-Checked="@filterParameter.IsControlNumber" Dense Size='Size.Small'/>
                        <MudTextField Class='txtfield-75' Immediate=true @bind-Value='filterParameter.ControlNumber' Placeholder='Control Number'
                        Clearable='true' Disabled="@(!filterParameter.IsControlNumber)" Variant='Variant.Outlined' />
                     </div>
                    <div class='d-flex align-center gap-2 @visibility'>
                        <MudCheckBox Class='pt-1' @bind-Checked="@filterParameter.IsDate" Dense Size='Size.Small' />
                        <MudDateRangePicker Class='txtfield-75' @bind-DateRange=@dateRangeFilter IconSize='Size.Small'
                        Placeholder="Date Range" Disabled="@(!filterParameter.IsDate)" Variant='Variant.Outlined' />
                    </div>
                    <div class='d-flex align-center gap-2 @visibility'>
                        <MudCheckBox Class='pt-1' @bind-Checked="@filterParameter.IsRequestor" Dense Size='Size.Small' />
                        <MudTextField Class='txtfield-75' @bind-Value='requestor.EmployeeName' Placeholder='Requested By' ReadOnly='true'
                            @onclick='(() => LookUp(Enums.LookUpType.Employee, "Requestor"))' IconSize='Size.Small' Disabled="@(!filterParameter.IsRequestor)" Variant='Variant.Outlined' />
                    </div>
                    <div class='d-flex align-center gap-2 @visibility'>
                        <MudCheckBox Class='pt-1' @bind-Checked="@filterParameter.IsPayee" Dense Size='Size.Small' />
                        <MudTextField Class='txtfield-75' @bind-Value='project.ProjectName' Placeholder='Payee' ReadOnly='true'
                            @onclick='(() => LookUp(Enums.LookUpType.Project, "Payee"))' IconSize='Size.Small' Disabled="@(!filterParameter.IsPayee)" Variant='Variant.Outlined' />
                    </div>
                    <div class='d-flex align-center gap-2 @visibility'>
                        <MudCheckBox Class='pt-1' @bind-Checked="@filterParameter.IsAccountingStatus" Dense Size='Size.Small' />
                        <MudSelect Class='txtfield-75' MultiSelectionTextFunc='@(new Func<List<string>, string>(AccountingStatus))' @bind-SelectedValues='hasAccountingStatus' IconSize='Size.Small'
                            @bind-Value="selectedStatus" Dense="true" MultiSelection=true Disabled='!filterParameter.IsAccountingStatus' Placeholder='Accounting Status' Variant='Variant.Outlined'>
                                @if(GlobalClassList.accountingStatusList != null)
                                    @foreach (var item in GlobalClassList.accountingStatusList.Where(x=> (int)x.StatusEnumCategoryId == 0 || 
                                    (int)x.StatusEnumCategoryId == 1 || (int)x.StatusEnumCategoryId == 2 || (int)x.StatusEnumCategoryId == 3 ||
                                    (int)x.StatusEnumCategoryId == 10))
                                    {
                                    <MudSelectItem Value="@item">@item.StatusName</MudSelectItem>
                                    }
                        </MudSelect>
                    </div>
                    <div class='d-flex align-center justify-end pt-1'>
                        <MudButton Class='wspace-nowrap' OnClick="(() => FilterTable())" Variant='Variant.Filled' Color='Color.Secondary'>Apply Filter</MudButton>
                    </div>
                </div>
            </div>
        </MudDrawer>
    </div>
    
    <MudContainer Class='pettycashlist-page' Fixed='false' MaxWidth='MaxWidth.ExtraExtraLarge'>
        @if(!dataFetched)
        {
            <MudPaper Class='ma-1 pa-1' style="height: calc(100vh - 125px);">
                <MudSkeleton SkeletonType='SkeletonType.Text' Height='100px' Animation='Animation.Wave' />
                <MudSkeleton SkeletonType='SkeletonType.Rectangle' Height='71vh' Animation='Animation.Wave' />
            </MudPaper>
        }
        else
        {
            <MudTable Class='configtables' ServerData='new Func<TableState, Task<TableData<PettyCashModel>>>(LoadPettyCashInServer)'  Hover="true"
            Breakpoint="Breakpoint.Sm" FixedHeader='true' FixedFooter='true' Bordered='true' Dense='true'
            RowsPerPage='10' Striped='true' Filter='new Func<PettyCashModel,bool>(FilterItems)' @ref='tableVariable'>
                <ToolBarContent>
                    <MudText Typo='Typo.caption'>
                        @GlobalClassList.pettyCashList.Count() 
                        @(GlobalClassList.pettyCashList.Count() == 1 ? "item" : "items") 
                        in Total
                    </MudText>
                    <MudSpacer />
                    <MudMenu StartIcon='@Icons.Filled.MoreVert' AnchorOrigin='Origin.BottomLeft'
                    TransformOrigin='Origin.TopCenter' Dense='true' Size='Size.Small' Label='More'>
                    @if(GlobalClass.currentUserAccount.AccessLevel != Enums.AccountingAccessLevel.OthersViewer){
                        <MudMenuItem OnClick="(() => CreatePettyCash())"  Class="@style">
                            <div class='d-flex align-center gap-2'>
                                <MudIcon Icon='@Icons.Filled.Add' Size='Size.Medium' />
                                <MudText Typo='Typo.body2'>Add</MudText>
                            </div>
                        </MudMenuItem>
                    }
                        <MudMenuItem OnClick="(() => OpenSideFilter())">
                            <div class='d-flex align-center gap-2'>
                            <MudIcon Icon='@Icons.Filled.FilterList' />
                            <MudText Typo='Typo.body2'>Filter</MudText>
                            </div>
                        </MudMenuItem>
                    </MudMenu>
                </ToolBarContent>
                <ColGroup>
                    <col style='width: 1%' />
                    <col />
                    <col />
                    <col />
                    <col />
                    <col />
                    <col style='width: 20px'/>
                </ColGroup>
                <HeaderContent>
                    <MudTh Class='customheader-1'>
                        <div class='d-flex align-center justify-start'>
                            <MudTableSortLabel SortLabel='SortControlNumber' T='PettyCashModel' 
                            InitialDirection="SortDirection.Descending">
                                Control No.
                            </MudTableSortLabel>
                            <MudSpacer />
                            <MudTableSortLabel SortLabel='SortDate' T='PettyCashModel'
                            InitialDirection='SortDirection.Descending'>
                                Date
                            </MudTableSortLabel>
                        </div>
                    </MudTh>
                    <MudTh Class='customheader-1'>Payee</MudTh>
                    <MudTh Class='customheader-1'>Particulars</MudTh>
                    <MudTh Class='customheader-1 text-center'>Requestor</MudTh>
                    <MudTh Class='customheader-1 text-center'>Status</MudTh>
                    <MudTh Class='customheader-1 text-right'>Amount</MudTh>
                    <MudTh Class='customheader-1'>Action</MudTh>
                </HeaderContent>
                <RowTemplate>
                    <MudTd DataLabel="Control Number">
                        <div class='d-flex align-center'>
                            <MudChip Class='chip-radius-5 txt-uppercase font-bold font10' Color='Color.Error' Size='Size.Small'>
                                @context.ControlNumber
                            </MudChip>
                            <MudChip Class='chip-radius-5 font-bold font10' Variant='Variant.Text' Icon='@Icons.Filled.CalendarMonth' Color='Color.Dark' Size='Size.Small'>
                                @Convert.ToDateTime(context.RequestDate).ToShortDateString()
                            </MudChip>
                        </div>
                    </MudTd>
                    <MudTd Class='wspace-nowrap font12' DataLabel="Payee">@context.PayeeName</MudTd>
                    <MudTd Class='wbreak-breakword font12' DataLabel="Particular">@context.Particular</MudTd>
                    <MudTd Class='wbreak-breakword font12' DataLabel="Requestor">@context.RequestedByName</MudTd>
                    <MudTd DataLabel="Status">
                        <div class='d-flex align-center justify-center'>
                            <MudChip Class='chip-radius-5 font-bold font10' Size='Size.Small' Style='@Extensions.GetAcctgStatusColor(context.StatusId)'>@context.StatusName</MudChip>
                         </div>
                    </MudTd>
                    <MudTd Class='wspace-nowrap text-right' DataLabel="Amount">
                        @if (context.Amount > 0)
                        {
                            <MudText Class='font-bold color-green' Typo='Typo.body2'>
                                @Extensions.GetEnumDescription(Enums.BankCurrency.PhilippinePeso) @context.Amount.ToString("N2")
                            </MudText>
                        }
                        else
                        {
                            <MudText Class='font-bold' Typo='Typo.body2' Color='Color.Error'>
                                @Extensions.GetEnumDescription(Enums.BankCurrency.PhilippinePeso) @context.Amount.ToString("N2")
                            </MudText>
                        }
                    </MudTd>
                    <MudTd Class='text-center pa-0' DataLabel="Action">
                        <MudMenu Icon="@Icons.Material.Filled.MoreVert" AnchorOrigin='Origin.BottomLeft' ActivationEvent='MouseEvent.MouseOver'
                        TransformOrigin='Origin.TopRight' Dense='true' Size='Size.Small' Class="@style">
                            @if(context.StatusEnumCategoryId == Enums.AccountingStatusEnumCategory.PCG)
                            {
                            <MudMenuItem OnClick='(() => EditPettyCash(context))'>
                                <a class='d-flex align-center gap-2'>
                                    <MudIcon Icon='@Icons.Filled.Edit' Size='Size.Small'/>
                                    <MudText Typo='Typo.body2'>Edit</MudText>
                                </a>
                            </MudMenuItem>
                            }
                            @if(context.StatusEnumCategoryId == Enums.AccountingStatusEnumCategory.PCG || context.StatusEnumCategoryId == Enums.AccountingStatusEnumCategory.PCA ||
                            context.StatusEnumCategoryId == Enums.AccountingStatusEnumCategory.PCR && GlobalClass.currentUserAccount.AccessLevel != Enums.AccountingAccessLevel.OthersViewer)
                            {
                                if(context.StatusEnumCategoryId != Enums.AccountingStatusEnumCategory.PCA && 
                                context.StatusEnumCategoryId != Enums.AccountingStatusEnumCategory.PCR)
                                {
                                    <MudMenuItem OnClick='(() => Prompt(Enums.ActionMode.Approve,context))' Class="@style">
                                        <div class='d-flex align-center gap-2'>
                                            <MudIcon Icon='@Icons.Filled.CheckCircle' Size='Size.Small' />
                                            <MudText Typo='Typo.body2'>Approve</MudText>
                                        </div>
                                    </MudMenuItem>
                                }
                                <MudMenuItem OnClick='(() => Prompt(Enums.ActionMode.Cancel,context))'>
                                    <div class='d-flex align-center gap-2'>
                                        <MudIcon Icon='@Icons.Filled.Cancel' Size='Size.Small' />
                                        <MudText Typo='Typo.body2'>Cancel</MudText>
                                    </div>
                                </MudMenuItem>
                                 @if(context.StatusEnumCategoryId == Enums.AccountingStatusEnumCategory.PCA)
                                {
                                    <MudMenuItem OnClick='(() => Prompt(Enums.ActionMode.Receive,context))'>
                                        <div class='d-flex align-center gap-2'>
                                            <MudIcon Icon='@Icons.Filled.GetApp' Size='Size.Small' />
                                            <MudText Typo='Typo.body2'>Receive</MudText>
                                        </div>
                                    </MudMenuItem>
                                }
                                if(context.StatusEnumCategoryId == Enums.AccountingStatusEnumCategory.PCR)
                                {
                                    <MudMenuItem OnClick='(() => Prompt(Enums.ActionMode.Approve,context))'>
                                        <div class='d-flex align-center gap-2'>
                                            <MudIcon Icon='@Icons.Filled.Outbound' Size='Size.Small' />
                                            <MudText Typo='Typo.body2'>Approved (Void)</MudText>
                                        </div>
                                    </MudMenuItem>
                                }
                                if(context.StatusEnumCategoryId == Enums.AccountingStatusEnumCategory.PCA)
                                {
                                    <MudMenuItem OnClick='(() => Prompt(Enums.ActionMode.Update,context))'>
                                        <a class='d-flex align-center gap-2'>
                                            <MudIcon Icon='@Icons.Filled.CancelPresentation' Size='Size.Small'/>
                                            <MudText Typo='Typo.body2'>Generated (Void)</MudText>
                                        </a>
                                    </MudMenuItem>
                                }
                            }
                            <MudMenuItem OnClick='(() => ViewAuditTrail(context))'>
                                <a class='d-flex align-center gap-2'>
                                    <MudIcon Icon='@Icons.Filled.ListAlt' Size='Size.Small' />
                                    <MudText Typo='Typo.body2'>Audit Trail</MudText>
                                </a>
                            </MudMenuItem>
                            <MudMenuItem OnClick='(() => context.ShowReport = ShowReport(context.ShowReport, context))'>
                                <div class='d-flex align-center gap-2'>
                                    <MudIcon Icon='@Icons.Filled.PictureAsPdf' Size='Size.Small' />
                                    <MudText Typo='Typo.body2'>@(context.ShowReport ? "Close" : "Show") Report</MudText>
                                </div>
                            </MudMenuItem>
                        </MudMenu>
                    </MudTd>
                </RowTemplate>
                <NoRecordsContent>
                    <MudText Class='txt-uppercase font-bold font12' Color='Color.Error'>No records found</MudText>
                </NoRecordsContent>
                <ChildRowContent>
                    @if(context.ShowReport)
                    {
                        <td colspan="8">
                            <div class='d-flex align-center pa-2 bgc-f2f2f2'>
                                <MudSpacer />
                                <MudButton OnClick='(() => context.ShowReport = ShowReport(context.ShowReport, context))' EndIcon="@Icons.Rounded.Close" IconColor='Color.Error' Size='Size.Small' >
                                    Close Report
                                </MudButton>
                            </div>
                            <MudTr Class='d-flex align-stretch justify-center default-report-container'>
                                @if (string.IsNullOrWhiteSpace(PDFContent))
                                {
                                    <MudOverlay Visible='true' DarkBackground="false" AutoClose="true">
                                        <MudProgressCircular Color="Color.Primary" Indeterminate="true" />
                                    </MudOverlay>
                                }
                                else
                                {
                                    <iframe src='@PDFContent' />
                                }
                            </MudTr>
                        </td>
                    }
                </ChildRowContent>
                <PagerContent>
                    <MudTablePager />
                </PagerContent>
            </MudTable>
        }
    </MudContainer>
</div>

@code
{
    private bool dataFetched, openSideFilter;
    private int[] pageSize = new int[] { 30, 50, 100, 500, 1000 };
    private string searchTerm = string.Empty, visibility = "visibility-animation-hide";
    private string PDFContent = default!;
    public static Enums.ActionMode currActionMode { get; set; }
    private string style {get;set;} = ".d-flex";
    private IEnumerable<PettyCashModel>? pageData;
    private MudTable<PettyCashModel> tableVariable = new();
    private DateRange dateRangeFilter = new DateRange(DateTime.Now.Date, DateTime.Now.Date);
    public FilterParameter filterParameter = new();
    private UserAccount requestor  = new();
    private Project project = new();
    private AccountingStatusModel selectedStatus = new();
    private IEnumerable<AccountingStatusModel> hasAccountingStatus {get; set;} = new HashSet<AccountingStatusModel>();
    protected override async Task OnInitializedAsync()
    {
        GlobalClass.pageTitle = "PETTY CASH LIST";
        
        while (GlobalClass.currentUserAccount == null || string.IsNullOrEmpty(GlobalClass.token) || GlobalClassList.accountingStatusList == null)
            await Task.Delay(1);
        Task t = Task.WhenAll(LoadPettyCashList());
        await t;
        if (t.Status == TaskStatus.RanToCompletion)
        {
            CompletedFetch();
            SignalR();
        }
    }
    void CompletedFetch()
    {
        dataFetched = true;
        Task.Run(StateHasChanged);
    }
    private void ShowPettyCash(Int64 pettyCashId)
    {
        navigationManager.NavigateTo($"/pettycash/{pettyCashId}");
    }

    private async Task LoadPettyCashList()
    {
        GlobalClassList.pettyCashList = await pettyCashService.LoadPettyCashList(new FilterParameter(), GlobalClass.token);
        StateHasChanged();
    }

    private bool FilterItems(PettyCashModel items)
    {
        if (string.IsNullOrEmpty(searchTerm))
            return true;
        if (items.ControlNumber.Contains(searchTerm, StringComparison.InvariantCultureIgnoreCase))
            return true;
        return false;
    }
    private void OpenSideFilter()
    {
        openSideFilter = !openSideFilter;
        if(openSideFilter)
        visibility = "visibility-animation-show";
        if(!openSideFilter)
        visibility = "visibility-animation-hide";
    }
    private bool ShowReport(bool isShow, PettyCashModel pettyCashModel)
    {
        Task.Run(()=> LoadPettyCash(pettyCashModel));
        GlobalClassList.pettyCashList.ForEach(model => {
            if(model.Id != pettyCashModel.Id)
                model.ShowReport = false;
        });
        return isShow = !isShow;
    }
    private async Task LoadPettyCash(PettyCashModel pettyCashModel)
    {
        PDFContent = await PettyCashService.GetPettyCashReport(pettyCashModel);
        StateHasChanged();
    }
    private void CreatePettyCash(){
        GlobalClass.pettyCash = new();
        currActionMode = Enums.ActionMode.Create;
        navigationManager.NavigateTo($"/pettycash/create");
    }
    private async void EditPettyCash(PettyCashModel pettyCashModel)
    {
        GlobalClass.pettyCash = await Task.Run(()=> pettyCashModel);
        currActionMode = Enums.ActionMode.Update;
        navigationManager.NavigateTo($"/pettycash");
    }
    private async void ViewAuditTrail(PettyCashModel pettyCashModel)
    {
        GlobalClass.pettyCash = await Task.Run(()=> pettyCashModel);
        navigationManager.NavigateTo($"/pettycash-audit-trail");
    }
    private async Task Prompt(Enums.ActionMode actionMode, PettyCashModel model)
    {
       GlobalClass.pettyCash = model;
        var parameters = new DialogParameters();
        string contentText = "Petty Cash";
        string dialogTitle = actionMode == Enums.ActionMode.Approve ? "Approve " + contentText 
                    : (actionMode == Enums.ActionMode.Cancel ? "Cancel " + contentText 
                    : (actionMode == Enums.ActionMode.Receive ? "Receive " + contentText 
                    : (actionMode == Enums.ActionMode.Update ? "Update " + contentText:"")));
        parameters.Add("contentText", contentText);
        parameters.Add("actionMode", actionMode);
        var options = new DialogOptions()
        {
            CloseButton = false,
            MaxWidth = MaxWidth.ExtraSmall,
            FullWidth = true,
            NoHeader = false,
            DisableBackdropClick = true
        };
        var resultDialog = await dialogService.Show<Shared.Dialogs.GenericPromptDialogs.GenericPrompt>(dialogTitle, parameters, options).Result;
        if (!resultDialog.Cancelled) 
        {
            await MapUpdateProps(actionMode, model);
        }
    }

    private async Task MapUpdateProps(Enums.ActionMode actionMode, PettyCashModel model)
    {
         var acctgStatus = new AccountingStatusModel();
        if (actionMode == Enums.ActionMode.Approve)
            acctgStatus = GlobalClassList.accountingStatusList.Where(x => x.StatusEnumCategoryId == Enums.AccountingStatusEnumCategory.PCA).FirstOrDefault();
        else if (actionMode == Enums.ActionMode.Cancel)
            acctgStatus = GlobalClassList.accountingStatusList.Where(x => x.StatusEnumCategoryId == Enums.AccountingStatusEnumCategory.PCC).FirstOrDefault();
        else if (actionMode == Enums.ActionMode.Receive)
            acctgStatus = GlobalClassList.accountingStatusList.Where(x => x.StatusEnumCategoryId == Enums.AccountingStatusEnumCategory.PCR).FirstOrDefault();
        else if (actionMode == Enums.ActionMode.Update)
            acctgStatus = GlobalClassList.accountingStatusList.Where(x => x.StatusEnumCategoryId == Enums.AccountingStatusEnumCategory.PCG).FirstOrDefault();
        
        //Audit Trail
        GlobalClass.pettyCash.PettyCashId = GlobalClass.pettyCash.Id;
        GlobalClass.pettyCash.Activity = "Update Petty Cash";
        GlobalClass.pettyCash.UserId = GlobalClass.currentUserAccount.EmployeeId;

        if (acctgStatus != null) {
            GlobalClass.pettyCash.StatusName = acctgStatus.StatusName;
            GlobalClass.pettyCash.StatusId = (Int64)acctgStatus.Id;
            GlobalClass.pettyCash.Activity = actionMode+" Petty Cash";
            GlobalClass.pettyCash.StatusEnumCategoryId = acctgStatus.StatusEnumCategoryId;
        }
       
        Task t = Task.WhenAll(UpdatePettyCash());
        await t;
        if (t.Status == TaskStatus.RanToCompletion)
            Extensions.ShowAlert("Petty Status updated", Variant.Filled, snackBarService, Severity.Success);
        else
            Extensions.ShowAlert("Something went wrong, Please contact Administrator", Variant.Filled, snackBarService, Severity.Error);
    }

    private async Task UpdatePettyCash()
    {
        await pettyCashService.UpdatePettyCash(GlobalClass.pettyCash,GlobalClass.token);
    }

    private void SignalR()
    {
        try
        {
            if(GlobalVariable.AMSHubConnection != null)
                GlobalVariable.AMSHubConnection.On<PettyCashModel>("SavePettyCash",(pettyCashModel) => 
                {
                    if(GlobalClassList.pettyCashList.Any(pettyCash => pettyCash.Id == pettyCashModel.Id))
                    {
                        tableVariable.ReloadServerData();
                    }
                    else
                    {
                        GlobalClassList.pettyCashList.Insert(0,pettyCashModel);
                    }
                    StateHasChanged();
                });
        }catch (Exception ex)
        {
            Console.WriteLine(ex.Message);
            throw;
        }
    }
    private async Task<TableData<PettyCashModel>> LoadPettyCashInServer(TableState tableState)
    {
        IEnumerable<PettyCashModel> data = await pettyCashService.LoadPettyCashList(filterParameter, GlobalClass.token);
        switch (tableState.SortLabel)
        {
            case "SortControlNumber":
                data = data.OrderByDirection(tableState.SortDirection, x=>x.Id);
                break;
            case "SortDate":
                data = data.OrderByDirection(tableState.SortDirection, x=>x.RequestDate);
                break;
        }

        GlobalClassList.pettyCashList = data.ToList();
        pageData = GlobalClassList.pettyCashList.Skip(tableState.Page * tableState.PageSize).Take(tableState.PageSize).ToArray();
        var total = GlobalClassList.pettyCashList.Count();
        return new TableData<PettyCashModel>()
        {
            TotalItems = total,
            Items = pageData
        };
    }
    private async Task FilterTable()
    {
        filterParameter.DateFrom = dateRangeFilter.Start.GetValueOrDefault();
        filterParameter.DateTo = dateRangeFilter.End.GetValueOrDefault();
        filterParameter.AccountingAccessLevel = GlobalClass.currentUserAccount.AccessLevel;
        filterParameter.AccountingStatusId = string.Join(",", hasAccountingStatus.Select(x => x.Id));
        await tableVariable.ReloadServerData();
    }
    private async void LookUp(Enums.LookUpType type, string lookFor)
    {
        var parameters = new DialogParameters();
        string dialogTitle = string.Empty;
        string searchPlaceholderText = string.Empty;
        dialogTitle = lookFor+" Look Up";
        searchPlaceholderText = lookFor;
        parameters.Add("lookUpType", type);
        parameters.Add("dialogTitle", dialogTitle);
        parameters.Add("buttonText", "Select");
        parameters.Add("searchPlaceholderText", searchPlaceholderText);
        parameters.Add("color", Color.Success);
        var options = new DialogOptions()
        {
            CloseButton = false,
            MaxWidth = MaxWidth.Small,
            FullWidth = true,
            NoHeader = false,
            DisableBackdropClick = false
        };
        var resultDialog = await dialogService.Show<Shared.Dialogs.LookUpDialog.GlobalGenericLookup>(dialogTitle, parameters, options).Result;
        if (!resultDialog.Cancelled) {
            if(type == Enums.LookUpType.Employee)
                requestor = (UserAccount) resultDialog.Data;
            else if (type == Enums.LookUpType.Project)
                project = (Project) resultDialog.Data;
            filterParameter.RequestorId = requestor.EmployeeId;
            filterParameter.PayeeId = project.ProjectId;
            filterParameter.PayeeCategoryId = project.ProjectCategoryId;
        }
        StateHasChanged();
    }
    private string AccountingStatus(List<string> selectedStatus)
    {
        var status = "";
        foreach (var item in hasAccountingStatus)
        {
        status = string.Join(", ", hasAccountingStatus.Select(x => x.StatusName));      
        }
        return $"{status}";
    }
}