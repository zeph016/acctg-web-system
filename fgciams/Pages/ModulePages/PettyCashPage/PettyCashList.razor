@page "/petty-cash/list"

@inject IPettyCashService pettyCashService
@inject IDialogService dialogService
@inject NavigationManager navigationManager
@inject IPettyCashService PettyCashService
@inject ISnackbar snackbarService
@inject IConfiguration configuration
@inject ISnackbar snackbarService
@inject IJSRuntime JSRuntime
@attribute [Authorize]


<div class='page-cont'>
    <div class='drawer-right-min'>
        <MudDrawer Class='pa-1' @bind-Open='openSideFilter' Fixed='false' Anchor='Anchor.Right' Elevation='0' Variant='DrawerVariant.Mini' OpenMiniOnHover='false'>
            <FilterComponent OpenSideFilterClick='(() => openSideFilter = !openSideFilter)' 
                FilterClick='FilterTable' ResetTableClick='ReloadTable'
                contentVisible='openSideFilter' moduleName="pettycash-list"/>
        </MudDrawer>
    </div>

    <MudContainer Class='py-2 pl-2 pr-10  table-toolbar-custom1' Fixed='false' MaxWidth='MaxWidth.ExtraExtraLarge'>
        @if(!dataFetched)
        {
            <MudPaper Class='ma-1 pa-1' style="height: calc(100vh - 125px);">
                <MudSkeleton SkeletonType='SkeletonType.Text' Height='100px' Animation='Animation.Wave' />
                <MudSkeleton SkeletonType='SkeletonType.Rectangle' Height='71vh' Animation='Animation.Wave' />
            </MudPaper>
        }
        else
        {
            <MudTable Class='table-style-1' ServerData='new Func<TableState, Task<TableData<PettyCashModel>>>(LoadPettyCashInServer)' Hover
                Breakpoint="Breakpoint.Xs" FixedHeader FixedFooter Bordered Dense RowsPerPage='15' Filter='new Func<PettyCashModel,bool>(FilterItems)' @ref='tableVariable'
                Loading='isLoading'>
                <ToolBarContent>
                    <MudText Typo='Typo.caption'>
                        @GlobalClassList.pettyCashList.Count() 
                        @(GlobalClassList.pettyCashList.Count() == 1 ? "item" : "items") 
                        in total
                    </MudText>
                    <MudSpacer />
                    <MudTooltip Text="Refresh Table" Arrow Placement='Placement.Top'>
                        <MudIconButton Class='@(isLoading ? "mudbtnico-rotate":"")' Icon="@Icons.Material.Filled.Refresh" Size="Size.Small" OnClick='(()=>ReloadTable())' 
                            Color='@(isLoading ? Color.Info : Color.Default)'/>
                    </MudTooltip>
                    <MudMenu Class='overflow-hidden mudbtnico-rotate-90' StartIcon='@Icons.Material.Filled.MoreVert' AnchorOrigin='Origin.BottomCenter' ActivationEvent="MouseEvent.MouseOver"
                        TransformOrigin='Origin.TopRight' Dense Size='Size.Small' Label='More'>
                        @if(GlobalClass.currentUserAccount.AccessLevel != Enums.AccountingAccessLevel.OthersViewer) 
                        {
                            <MudMenuItem OnClick="(() => CreatePettyCash())"  >
                                <div class='d-flex align-center gap-2 '>
                                    <MudIcon Icon='@Icons.Material.Filled.Add' Size='Size.Small' Color='Color.Dark' />
                                    <MudText Typo='Typo.body2' Color='Color.Dark'>Create Petty Cash</MudText>
                                </div>
                            </MudMenuItem>
                        }
                        <MudMenuItem OnClick="(() => openSideFilter = !openSideFilter)"  >
                            <div class='d-flex align-center gap-2 '>
                                <MudIcon Icon='@Icons.Material.Filled.FilterList' Size='Size.Small' Color='Color.Dark' />
                                <MudText Typo='Typo.body2' Color='Color.Dark'>Filter</MudText>
                            </div>
                        </MudMenuItem>
                    </MudMenu>
                </ToolBarContent>
                <ColGroup>
                    <col style='width: 1%' />
                    <col />
                    <col />
                    <col />
                    <col style='width: 20px' />
                    <col style='width: 110px' />
                    <col style='width: 50px'/>
                </ColGroup>
                <HeaderContent>
                    <MudTh Class='@(isPinnedCtrlNo ? "th-sticky-left customheader-6":"customheader-6")'>
                        <div class='d-flex align-center justify-space-around gap-2'>
                            <MudTooltip Text='Pin control number column' Arrow Placement='Placement.Top'>
                                <MudIconButton Class='ico-15x15' OnClick='(() => isPinnedCtrlNo = !isPinnedCtrlNo)' Color='@(isPinnedCtrlNo ? Color.Info:Color.Dark)' 
                                    Icon='@Icons.Material.Filled.PushPin' Size='Size.Small'/>
                            </MudTooltip>
                            <MudTableSortLabel SortLabel='SortControlNumber' T='PettyCashModel' 
                                InitialDirection="SortDirection.Descending">
                               Control No.
                            </MudTableSortLabel>
                            <MudTableSortLabel SortLabel='SortDate' T='PettyCashModel'
                                InitialDirection='SortDirection.None'>
                                Date
                            </MudTableSortLabel>
                        </div>
                    </MudTh>
                    <MudTh Class='customheader-6'>
                        <MudTableSortLabel SortLabel='SortPayee' T='PettyCashModel'
                            InitialDirection='SortDirection.None'>
                            Payee
                        </MudTableSortLabel>
                    </MudTh>
                    <MudTh Class='customheader-6'>
                        <MudTableSortLabel SortLabel='SortParticulars' T='PettyCashModel'
                            InitialDirection='SortDirection.None'>
                            Particulars
                        </MudTableSortLabel>
                    </MudTh>
                    <MudTh Class='customheader-6 text-center'>
                        <MudTableSortLabel SortLabel='SortRequestor' T='PettyCashModel'
                            InitialDirection='SortDirection.None'>
                            Requestor
                        </MudTableSortLabel>
                    </MudTh>
                    <MudTh Class='customheader-6 text-center'>
                        <MudTableSortLabel SortLabel='SortStatus' T='PettyCashModel'
                            InitialDirection='SortDirection.None'>
                            Status
                        </MudTableSortLabel>
                    </MudTh>
                    <MudTh Class='@(isPinnedAmt ? "th-sticky-amt customheader-6 text-right":"customheader-6 text-right")'>
                        <MudTooltip Text='Pin amount column' Arrow Placement='Placement.Top'>
                            <MudIconButton Class='ico-15x15' OnClick='(() => isPinnedAmt = !isPinnedAmt)' Color='@(isPinnedAmt ? Color.Info:Color.Dark)' 
                                Icon='@Icons.Material.Filled.PushPin' Size='Size.Small'/>
                        </MudTooltip>
                        <MudTableSortLabel SortLabel='SortAmount' T='PettyCashModel'
                            InitialDirection='SortDirection.None'>
                            Amount
                        </MudTableSortLabel>
                    </MudTh>
                    <MudTh Class='@(isPinnedAmt ? "th-sticky-action customheader-6":"customheader-6")'>Actions</MudTh>
                </HeaderContent>
                <RowTemplate>
                    <MudTd Class='@(isPinnedCtrlNo ? "col-sticky-left":"")' DataLabel="Control Number">
                        <div class='d-flex align-center'>
                            <MudChip Class='mudchip-tbl' OnClick='(() => CopyTextToClipboard(context.ControlNumber))' Variant='Variant.Outlined' Color='Color.Error' Size='Size.Small'>
                                @context.ControlNumber
                            </MudChip>
                            <MudChip Class='mudchip-tbl' Variant='Variant.Outlined' Icon='@Icons.Material.Filled.CalendarMonth' Size='Size.Small'>
                                @Convert.ToDateTime(context.RequestDate).ToShortDateString()
                            </MudChip>
                        </div>
                    </MudTd>
                    <MudTd DataLabel="Payee">
                        <div class='dynamic-div-1'>
                            <small>@context.PayeeName</small>
                        </div>
                    </MudTd>
                    <MudTd DataLabel="Particular">
                        <div class='dynamic-div-1'>
                            <small>@context.Particular</small>
                        </div>
                    </MudTd>
                    <MudTd DataLabel="Requestor">
                        <div class='dynamic-div-1'>
                            <small>@context.RequestedByName</small>
                        </div>
                    </MudTd>
                    <MudTd Class='@(isPinnedAmt ? "br-none":"")' DataLabel="Status">
                        <div class='d-flex align-center justify-center'>
                            <MudChip Class='chip-radius-5 font-bold font10' Size='Size.Small' Style='@Extensions.BorderColor(context.StatusId)' Variant='Variant.Outlined'>
                                @context.StatusName
                            </MudChip>
                        </div>
                    </MudTd>
                    <MudTd Class='@(isPinnedAmt ? "col-sticky-amt":"")' DataLabel="Amount">
                        <div class='tooltipw100'>
                            <MudTooltip Class='flex-1' Text='@(Extensions.GetEnumDescription(Enums.BankCurrency.PhilippinePeso) + " " + context.Amount.ToString("N2"))' 
                                Arrow Placement='Placement.Top' Color='@(context.Amount > 0 ? Color.Success:Color.Error)'>
                                <div class='amount-container'>
                                    <small class='@(context.Amount > 0 ? "font-bold color-green":"font-bold color-red")'>
                                        @Extensions.GetEnumDescription(Enums.BankCurrency.PhilippinePeso)
                                    </small>
                                    <MudSpacer />
                                    <small class='@(context.Amount > 0 ? "txt-green":"txt-red")'>
                                        @context.Amount.ToString("N2")
                                    </small>
                                </div>
                            </MudTooltip>
                        </div>
                    </MudTd>
                    <MudTd Class='@(isPinnedAmt ? "col-sticky-action text-center":"text-center")' DataLabel="Action">
                        <MudMenu Class='mudbtnico-rotate-90' Icon="@Icons.Material.Filled.MoreVert" AnchorOrigin='Origin.BottomLeft' ActivationEvent="MouseEvent.MouseOver"
                            TransformOrigin='Origin.TopRight' Dense Size='Size.Small'>
                            <MudMenuItem OnClick='(() => PreviewPettyCash(context))'>
                                <div class='d-flex align-center gap-2'>
                                    <MudIcon Icon='@Icons.Material.Filled.Preview' Size='Size.Small' Color='Color.Dark'/>
                                    <MudText Typo='Typo.body2'>View</MudText>
                                </div>
                            </MudMenuItem>
                            @if(context.StatusEnumCategoryId == Enums.AccountingStatusEnumCategory.PCG)
                            {
                                <MudMenuItem OnClick='(() => EditPettyCash(context))'>
                                    <a class='d-flex align-center gap-2 '>
                                        <MudIcon Icon='@Icons.Material.Filled.Edit' Size='Size.Small' Color='Color.Dark'/>
                                        <MudText Typo='Typo.body2'>Edit</MudText>
                                    </a>
                                </MudMenuItem>
                            }
                            @if(context.StatusEnumCategoryId == Enums.AccountingStatusEnumCategory.PCG || context.StatusEnumCategoryId == Enums.AccountingStatusEnumCategory.PCA ||
                            context.StatusEnumCategoryId == Enums.AccountingStatusEnumCategory.PCR && GlobalClass.currentUserAccount.AccessLevel != Enums.AccountingAccessLevel.OthersViewer)
                            {
                                if(context.StatusEnumCategoryId != Enums.AccountingStatusEnumCategory.PCA && 
                                context.StatusEnumCategoryId != Enums.AccountingStatusEnumCategory.PCR)
                                {
                                    <MudMenuItem OnClick='(() => Prompt(Enums.ActionMode.Approve,context))'>
                                        <div class='d-flex align-center gap-2 '>
                                            <MudIcon Icon='@Icons.Material.Filled.CheckCircle' Size='Size.Small' />
                                            <MudText Typo='Typo.body2'>Approve</MudText>
                                        </div>
                                    </MudMenuItem>
                                }
                                
                                @if(context.StatusEnumCategoryId == Enums.AccountingStatusEnumCategory.PCA)
                                {
                                    <MudMenuItem OnClick='(() => Prompt(Enums.ActionMode.Receive,context))'>
                                        <div class='d-flex align-center gap-2 '>
                                            <MudIcon Icon='@Icons.Material.Filled.GetApp' Size='Size.Small' />
                                            <MudText Typo='Typo.body2'>Receive</MudText>
                                        </div>
                                    </MudMenuItem>
                                }
                                if(context.StatusEnumCategoryId == Enums.AccountingStatusEnumCategory.PCR)
                                {
                                    <MudMenuItem OnClick='(() => Prompt(Enums.ActionMode.Approve,context))'>
                                        <div class='d-flex align-center gap-2 '>
                                            <MudIcon Icon='@Icons.Material.Filled.Outbound' Size='Size.Small' />
                                            <MudText Typo='Typo.body2'>Approved (Void)</MudText>
                                        </div>
                                    </MudMenuItem>
                                }
                                if(context.StatusEnumCategoryId == Enums.AccountingStatusEnumCategory.PCA)
                                {
                                <MudMenuItem OnClick='(() => Prompt(Enums.ActionMode.Create,context))'>
                                        <a class='d-flex align-center gap-2 '>
                                            <MudIcon Icon='@Icons.Material.Filled.CancelPresentation' Size='Size.Small' />
                                            <MudText Typo='Typo.body2'>Generated (Void)</MudText>
                                        </a>
                                    </MudMenuItem>
                                }
                            }
                            <MudMenuItem OnClick='(() => ViewAuditTrail(context))'>
                                <a class='d-flex align-center gap-2 '>
                                    <MudIcon Icon='@Icons.Material.Filled.ListAlt' Size='Size.Small' />
                                    <MudText Typo='Typo.body2'>Audit Trail</MudText>
                                </a>
                            </MudMenuItem>
                            @if(context.StatusEnumCategoryId == Enums.AccountingStatusEnumCategory.PCG)
                            {
                                <MudMenuItem OnClick='(() => Prompt(Enums.ActionMode.Cancel,context))'>
                                    <div class='d-flex align-center gap-2 '>
                                        <MudIcon Icon='@Icons.Material.Filled.Cancel' Size='Size.Small' />
                                        <MudText Typo='Typo.body2'>Cancel</MudText>
                                    </div>
                                </MudMenuItem>
                            }
                            <MudMenuItem OnClick='(() => context.ShowReport = ShowReport(context.ShowReport, context))'>
                                <div class='d-flex align-center gap-2 '>
                                    <MudIcon Icon='@Icons.Material.Filled.PictureAsPdf' Size='Size.Small' />
                                    <MudText Typo='Typo.body2'>@(context.ShowReport ? "Close" : "Show") Report</MudText>
                                </div>
                            </MudMenuItem>
                        </MudMenu>
                    </MudTd>
                </RowTemplate>
                <NoRecordsContent>
                    <MudText Class='txt-uppercase font-bold font12' Color='Color.Error'>No records found</MudText>
                </NoRecordsContent>
                <ChildRowContent>
                    <MudTr>
                        <td colspan="8">
                            <div class='transition-05s-ease overflow-hidden' style='@(context.ShowReport ? "max-height:4000px" : "max-height:0px")'>
                                <div class='rpt-container-listview'>
                                    <MudCard Class='rpt-container-listview__document-cont px-2' Elevation='1'>
                                        <div class='rpt-container-listview__iframe-cont'>
                                            @if(context.ShowReport)
                                            {
                                                @if (string.IsNullOrWhiteSpace(PDFContent))
                                                {
                                                    <MudProgressCircular Color="Color.Primary" Indeterminate Size='Size.Large' />
                                                }
                                                else
                                                {
                                                    <iframe class='rpt-container-listview__iframe-scaled' src='@PDFContent' />
                                                }
                                                <ReportControls 
                                                    controlPosition='rptctrls-side-bottom-list'
                                                    isCloseOnly='true'
                                                    confirmStr='Close Report' 
                                                    BackEventClick='(() => context.ShowReport = !context.ShowReport)'/>
                                            }
                                        </div>
                                    </MudCard>
                                </div>
                            </div>
                        </td>
                    </MudTr>
                </ChildRowContent>
                <PagerContent>
                    <MudTablePager PageSizeOptions='@GlobalVariable.pageSize' />
                </PagerContent>
            </MudTable>
        }
    </MudContainer>
</div>

@code
{
    private bool dataFetched, openSideFilter, isLoading, isPinnedCtrlNo = true, isPinnedAmt = true;
    private string searchTerm = string.Empty;
    private string PDFContent = default!;
    public static Enums.ActionMode currActionMode { get; set; }
    private IEnumerable<PettyCashModel>? pageData;
    private MudTable<PettyCashModel> tableVariable = new();
    public FilterParameter filterParameter = new();
    private UserAccount requestor  = new();
    private Project project = new();
    private AccountingStatusModel selectedStatus = new();
    private IEnumerable<AccountingStatusModel> hasAccountingStatus {get; set;} = new HashSet<AccountingStatusModel>();
    protected override async Task OnInitializedAsync()
    {
        GlobalClass.pageTitle = "PETTY CASH LIST";
        Task t = Task.WhenAll(LoadPettyCashList());
        await t;
        while (GlobalClass.currentUserAccount == null || string.IsNullOrEmpty(GlobalClass.token) || GlobalClassList.accountingStatusList == null)
            await Task.Delay(1);
        if (t.Status == TaskStatus.RanToCompletion)
        {
            CompletedFetch();
            SignalR();
        }
        //Clear entry
        GlobalClass.pettyCash = new();
        PettyCashEntry.currActionMode = Enums.ActionMode.Create;
    }
    void CompletedFetch()
    {
        dataFetched = true;
        Task.Run(StateHasChanged);
    }

    private void ShowPettyCash(Int64 pettyCashId)
    {
        navigationManager.NavigateTo($"/petty-cash/{pettyCashId}");
    }

    private async Task LoadPettyCashList()
    {
        GlobalClassList.pettyCashList = await pettyCashService.LoadPettyCashList(new FilterParameter(), GlobalClass.token);
        StateHasChanged();
    }

    private bool FilterItems(PettyCashModel items)
    {
        if (string.IsNullOrEmpty(searchTerm))
            return true;
        if (items.ControlNumber.Contains(searchTerm, StringComparison.InvariantCultureIgnoreCase))
            return true;
        return false;
    }
    private bool ShowReport(bool isShow, PettyCashModel pettyCashModel)
    {
        Task.Run(()=> LoadPettyCash(pettyCashModel));
        GlobalClassList.pettyCashList.ForEach(model => {
            if(model.Id != pettyCashModel.Id)
                model.ShowReport = false;
        });
        return isShow = !isShow;
    }
    private async Task LoadPettyCash(PettyCashModel pettyCashModel)
    {
        PDFContent = await PettyCashService.GetPettyCashReport(pettyCashModel);
        StateHasChanged();
    }
    private void CreatePettyCash(){
        GlobalClass.pettyCash = new();
        currActionMode = Enums.ActionMode.Create;
        navigationManager.NavigateTo($"/petty-cash");
    }
    private async void EditPettyCash(PettyCashModel pettyCashModel)
    {
        GlobalClass.pettyCash = await Task.Run(()=> pettyCashModel);
        currActionMode = Enums.ActionMode.Update;
        navigationManager.NavigateTo($"/petty-cash");
    }
    private async void ViewAuditTrail(PettyCashModel pettyCashModel)
    {
        GlobalClass.pettyCash = await Task.Run(()=> pettyCashModel);
        navigationManager.NavigateTo($"/petty-cash/audit-trail");
    }
    private async Task Prompt(Enums.ActionMode actionMode, PettyCashModel model)
    {
        GlobalClass.pettyCash = model;
        var parameters = new DialogParameters();
        string contentText = "Petty Cash";
        string dialogTitle = actionMode.ToString();
        parameters.Add("contentText", contentText);
        parameters.Add("dialogTitle", dialogTitle);
        parameters.Add("actionMode", actionMode);
        parameters.Add("controlNumber", model.ControlNumber);
        var options = new DialogOptions() { CloseButton = false, MaxWidth = MaxWidth.ExtraSmall, FullWidth = true, NoHeader = false, DisableBackdropClick = true };
        var resultDialog = await dialogService.Show<Shared.Dialogs.GenericPromptDialogs.GenericPrompt>(dialogTitle, parameters, options).Result;
        if (!resultDialog.Canceled) 
        {
            await MapUpdateProps(actionMode, model);
        }
        else
            Extensions.ShowAlert("Action Cancelled", Variant.Filled, snackbarService, Severity.Normal);
    }

    private async Task MapUpdateProps(Enums.ActionMode actionMode, PettyCashModel model)
    {
        var acctgStatus = new AccountingStatusModel();
        if (actionMode == Enums.ActionMode.Approve)
            acctgStatus = GlobalClassList.accountingStatusList.Where(x => x.StatusEnumCategoryId == Enums.AccountingStatusEnumCategory.PCA).FirstOrDefault();
        else if (actionMode == Enums.ActionMode.Cancel)
            acctgStatus = GlobalClassList.accountingStatusList.Where(x => x.StatusEnumCategoryId == Enums.AccountingStatusEnumCategory.PCC).FirstOrDefault();
        else if (actionMode == Enums.ActionMode.Receive)
            acctgStatus = GlobalClassList.accountingStatusList.Where(x => x.StatusEnumCategoryId == Enums.AccountingStatusEnumCategory.PCR).FirstOrDefault();
        else if (actionMode == Enums.ActionMode.Create)
            acctgStatus = GlobalClassList.accountingStatusList.Where(x => x.StatusEnumCategoryId == Enums.AccountingStatusEnumCategory.PCG).FirstOrDefault();

        //Audit Trail
        GlobalClass.pettyCash.PettyCashId = GlobalClass.pettyCash.Id;
        GlobalClass.pettyCash.Activity = "Update Petty Cash";
        GlobalClass.pettyCash.UserId = GlobalClass.currentUserAccount.EmployeeId;

        if (acctgStatus != null) {
            GlobalClass.pettyCash.StatusName = acctgStatus.StatusName;
            GlobalClass.pettyCash.StatusId = (Int64)acctgStatus.Id;
            GlobalClass.pettyCash.Activity = actionMode+" Petty Cash";
            GlobalClass.pettyCash.StatusEnumCategoryId = acctgStatus.StatusEnumCategoryId;
        }

        Task t = Task.WhenAll(UpdatePettyCash());
        await t;
        if (t.Status == TaskStatus.RanToCompletion)
            Extensions.ShowAlert("Petty updated successfully", Variant.Filled, snackbarService, Severity.Success);
        else
            Extensions.ShowAlert("Something went wrong, Please contact Administrator", Variant.Filled, snackbarService, Severity.Error);
    }

    private async Task UpdatePettyCash()
    {
        await pettyCashService.UpdatePettyCash(GlobalClass.pettyCash,GlobalClass.token);
    }

    private void SignalR()
    {
        try
        {
            if(GlobalVariable.AMSHubConnection != null)
                GlobalVariable.AMSHubConnection.On<PettyCashModel>("SavePettyCash",(pettyCashModel) => 
                {
                    tableVariable.ReloadServerData();
                    StateHasChanged();
                });
        }catch (Exception ex)
        {
            Console.WriteLine(ex.Message);
            throw;
        }
    }
    private async Task<TableData<PettyCashModel>> LoadPettyCashInServer(TableState tableState)
    {
        isLoading = true;
        IEnumerable<PettyCashModel> data = await pettyCashService.LoadPettyCashList(filterParameter, GlobalClass.token);
        switch (tableState.SortLabel)
        {
            case "SortControlNumber":
                data = data.OrderByDirection(tableState.SortDirection, x=>x.Id);
                break;
            case "SortDate":
                data = data.OrderByDirection(tableState.SortDirection, x=>x.RequestDate);
                break;
            case "SortPayee":
                data = data.OrderByDirection(tableState.SortDirection, x=>x.RequestedByName);
                break;
            case "SortParticulars":
                data = data.OrderByDirection(tableState.SortDirection, x=>x.RequestedByName);
                break;
            case "SortRequestor":
                data = data.OrderByDirection(tableState.SortDirection, x=>x.RequestedByName);
                break;
            case "SortStatus":
                data = data.OrderByDirection(tableState.SortDirection, x=>x.StatusName);
                break;
            case "SortAmount":
                data = data.OrderByDirection(tableState.SortDirection, x=>x.Amount);
                break;
        }

        GlobalClassList.pettyCashList = data.ToList();
        pageData = GlobalClassList.pettyCashList.Skip(tableState.Page * tableState.PageSize).Take(tableState.PageSize).ToArray();
        var total = GlobalClassList.pettyCashList.Count();
        //Lazy Loader
        await Task.Delay(1000);
        isLoading = !isLoading;
        return new TableData<PettyCashModel>()
        {
            TotalItems = total,
            Items = pageData
        };
    }
    private async Task FilterTable()
    {
        filterParameter = GlobalVariable.filterParameter;
        filterParameter.AccountingAccessLevel = GlobalClass.currentUserAccount.AccessLevel;
        await tableVariable.ReloadServerData();
    }
    private async void LookUp(Enums.LookUpType type, string lookFor)
    {
        var parameters = new DialogParameters();
        string dialogTitle = string.Empty;
        string searchPlaceholderText = string.Empty;
        dialogTitle = lookFor+" Look Up";
        searchPlaceholderText = lookFor;
        parameters.Add("lookUpType", type);
        parameters.Add("dialogTitle", dialogTitle);
        parameters.Add("buttonText", "Select");
        parameters.Add("searchPlaceholderText", searchPlaceholderText);
        parameters.Add("color", Color.Success);
        var options = new DialogOptions() { CloseButton = false, MaxWidth = MaxWidth.Small, FullWidth = true, NoHeader = false, DisableBackdropClick = false };
        var resultDialog = await dialogService.Show<Shared.Dialogs.LookUpDialog.GlobalGenericLookup>(dialogTitle, parameters, options).Result;
        if (!resultDialog.Canceled) {
            if(type == Enums.LookUpType.Employee)
                requestor = (UserAccount) resultDialog.Data;
            else if (type == Enums.LookUpType.Project)
                project = (Project) resultDialog.Data;
            filterParameter.RequestorId = requestor.EmployeeId;
            filterParameter.PayeeId = project.ProjectId;
            filterParameter.PayeeCategoryId = project.ProjectCategoryId;
        }
        StateHasChanged();
    }
    private string AccountingStatus(List<string> selectedStatus)
    {
        var status = "";
        foreach (var item in hasAccountingStatus)
        {
            status = string.Join(", ", hasAccountingStatus.Select(x => x.StatusName));      
        }
        return $"{status}";
    }
    private async Task ReloadTable()
    {
        filterParameter = new FilterParameter();
        await tableVariable.ReloadServerData();
    }
    private bool EnableClearButton()
    {
      if(filterParameter.IsControlNumber) 
        return true;
      if(filterParameter.IsAccountingStatus)
        return true;
      if(filterParameter.IsDate)
        return true;
      if(filterParameter.IsRequestor)
        return true;
      if(filterParameter.IsPayee)
        return true;
      return false;
    }

    private async Task CopyTextToClipboard(string ctrlNo)
    {
        await Extensions.CopyTextToClipboard(ctrlNo, snackbarService, JSRuntime);
    }

    private async Task PreviewPettyCash(PettyCashModel model)
    {
        var parameters = new DialogParameters();
        parameters.Add("dialogTitle", "Petty Cash");
        parameters.Add("subModuleName", "List");
        parameters.Add("pettyCash", model);
        var options = new DialogOptions() { CloseButton = false, MaxWidth = MaxWidth.Small, FullWidth = true, NoHeader = false, DisableBackdropClick = false };
        var resultDialog = await dialogService.Show<Shared.Dialogs.PreviewInformationDialogs.PreviewPettyCashDialog>("", parameters, options).Result;
        if (!resultDialog.Canceled) 
        {
        
        }
    }
}