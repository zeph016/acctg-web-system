@page "/liquidation"

@inject IGlobalService globalService
@inject IAccountingStatusService accountingStatusService
@inject ILiquidationService liquidationService
@inject IGlobalService globalService
@inject IAccountingStatusService accountingStatusService
@inject IExpenseLineService expenseLineService
@inject IDialogService dialogService
@inject ISnackbar SnackbarService
@inject NavigationManager navigationManager
@inject IJSRuntime JSRuntime
@inject IAccessLevelService accessLevelService
@attribute [Authorize]

<div class='page-cont d-flex'>
    @if (!dataFetched)
    {
      <SkeletonPageList />
    }
    else
    {
      <MudContainer Class='liquidationpage d-flex pa-2 gap-2' Fixed='false' MaxWidth='MaxWidth.ExtraLarge'>
        <MudPaper Class='flex-1' Elevation='1'>
          <MudCardContent Class='pa-2'>
            <div class='liquidationpage__grid'>
              <div class="liq-header d-flex align-center pa-2 gap-1 bgc-F4F5FB rounded-tr rounded-tl">
                <MudGrid Spacing='1'>
                  <MudItem Class='d-flex align-center justify-start gap-2' xs=4>
                    <MudImage Class='fgcilogocont__imglogo' Src='images/fglogo/fgci1.png' Alt='fgci logo' Height='30' Width='30'/>
                    <MudText Class='fgcilogocont__lblfirst'>F. GURREA</MudText>
                    <MudText Class='fgcilogocont__lblsecond'>Construction, Inc.</MudText>
                  </MudItem>
                  <MudItem Class='d-flex align-center justify-center' xs=4>
                     <MudText Class='txt-uppercase font-1-1rem ff-theramin'>@GlobalClass.pageTitle</MudText>
                  </MudItem>
                  <MudItem Class='d-flex align-center justify-end pr-2' xs=4>
                    <MudTooltip Text='Create new liquidation' Arrow Placement='Placement.Left'>
                      <MudButton Class='btn-ios-d pa-1 font12' OnClick='New' StartIcon="@Icons.Material.Filled.Add" Variant='Variant.Filled'
                        Color='Color.Info' Size='Size.Small' DisableElevation>new</MudButton>
                    </MudTooltip>
                  </MudItem>
                </MudGrid>
              </div>
              <div class="liq-period">
                <div class='liq-period__daterange-cont'>
                  <MudText Class='d-flex wspace-nowrap font10 font-bold txt-uppercase'>
                    Period: 
                    <MudText Class='font10 font-bold' Color='Color.Error'>*</MudText>
                  </MudText>
                  <MudDateRangePicker Class='txtfield-font12-no-margin txtfield-right' @bind-DateRange='@periodLiquidation' IconSize='Size.Small' Margin='Margin.Dense' DisableToolbar
                    @ref='@dateRangePeriod'>
                    <PickerActions>
                      <MudButton Class='btn-ios-d font12' OnClick='(() => DateRangeToday(new(), dateRangePeriod))' Size='Size.Small' DisableElevation>
                        Today
                      </MudButton>
                      <MudSpacer />
                      <MudButton Class='btn-ios-d font12' OnClick='(() => CancelDateRangePicker(new(), dateRangePeriod))' Size='Size.Small' DisableElevation>
                        Cancel
                      </MudButton>
                      <MudButton Class='btn-ios-d font12' OnClick='(() => SubmitDateRangePicker(new(), dateRangePeriod))' Size='Size.Small' DisableElevation Color='Color.Primary' Variant='Variant.Filled'>
                        Submit
                      </MudButton>
                    </PickerActions>
                  </MudDateRangePicker>
                </div>
              </div>
              <div class="liq-blank bgc-F4F5FB">
              </div>
              <div class='liq-date'>
                <div class='liq-date__date-cont'>
                  <MudText Class='d-flex txt-uppercase font-bold font10'>Date:</MudText>
                  <MudDatePicker Class='txtfield-font12-no-margin txtfield-right' @bind-Date='@liquidationDate' IconSize='Size.Small' Margin='Margin.Dense' 
                    DisableToolbar ReadOnly MinDate='@Convert.ToDateTime(liquidationDate).AddDays(-1)' MaxDate='@liquidationDate'/>
                </div>
              </div>
              <div class="liq-controlno">
                <MudText Class='wspace-nowrap txt-uppercase font-bold font10'>Control No:</MudText>
                <MudChip Class='chip-radius-5 txt-uppercase font-bold font12' Color='Color.Error' Size='Size.Medium' Variant='Variant.Outlined'>
                   @(currActionMode == Enums.ActionMode.Create ? "Auto":GlobalClass.liquidation.ControlNumber)
                </MudChip>
              </div>
              <div class="liq-remarks d-flex align-center pa-2 gap-2">
                <MudText Class='txt-uppercase font-bold font10'>Remarks:</MudText>
                <MudTextField Class='txtfield-overflow-ellipsis font14-txtfield txt-top-0' @bind-Value=GlobalClass.liquidation.Remarks />
              </div>
              <div class="liq-details">
                <div class='liq-details__grid @(isSideBarExpanded ? "expanded-liqdetside":"collapsed-liqdetside")'>
                  <div class="liqdet-toolbar">
                    <div class='liqdet-toolbar__controls'>
                      <MudText Class='txt-uppercase font-bold font12'>Liquidation Detail :</MudText>
                      <MudText Class='txt-uppercase font-bold font10'>
                        @GlobalClass.liquidation.LiquidationDetails.Count()
                        @(GlobalClass.liquidation.LiquidationDetails.Count() <= 1 ? "item" : "items")
                      </MudText>
                      <MudSpacer />
                      @foreach (var item in GlobalClass.liquidation.LiquidationDetails)
                      {
                        if (item.ExpenseLineId == 0 || item.ChargingId == 0 || item.ChargingCategoryId == 0)
                        {
                            <MudText Class='font12 font-bold txt-uppercase' Color='Color.Error'>
                                Fill in details
                            </MudText>
                            break;
                        }
                      }
                      <MudSpacer />
                      <MudTooltip Text='Add Details' Arrow Placement='Placement.Top'>
                        <MudButton OnClick='AddPettyCash' StartIcon="@Icons.Material.Filled.AddCircle" aria-label="add" 
                          Size='Size.Small' Variant='Variant.Text' DisableElevation Color='Color.Info'>
                          <small>Detail</small>
                        </MudButton>
                      </MudTooltip>
                      <MudTooltip Text='Reset Details' Arrow Placement='Placement.Top'>
                        <MudButton OnClick='ResetLiquidationDetails' StartIcon="@Icons.Material.Filled.Refresh" aria-label="reset" 
                          Size='Size.Small' Variant='Variant.Text' DisableElevation Color='Color.Warning'>
                          <small>Reset</small>
                        </MudButton>
                      </MudTooltip>
                    </div>
                    <MudDivider Vertical/>
                    <MudToggleIconButton @bind-Toggled="isSideBarExpanded" Size='Size.Small' ToggledSize='Size.Small'
                      Icon="@Icons.Material.Filled.ToggleOff" Color="@Color.Tertiary" Title="Expand Sub Details"
                      ToggledIcon="@Icons.Material.Filled.ToggleOn" ToggledColor="@Color.Info" ToggledTitle="Collapse Details"/>
                  </div>
                  <div class="liqdet-sigheader">
                    <MudIcon  Icon='@Icons.Material.Filled.PersonPin' Size='Size.Small' Color='Color.Dark'>
                    </MudIcon>
                    <p class='txt-uppercase font12 font-bold'>Signatories</p>
                  </div>
                  <div class="liqdet-table">
                    <table class='liq-details__table'>
                      <thead>
                        <th>
                          <MudIconButton Class='th-btn-expand' OnClick='EditAllRows' Icon='@Icons.Material.Filled.EditNote' 
                            Color='@(isEditAllRow ? Color.Info:Color.Dark)' Size='Size.Small'/>
                        </th>
                        <th>Expense</th>
                        <th>Charge</th>
                        <th>Remarks</th>
                        <th>Amount</th>
                        <th class='@(isSubRowExpanded ? "mudbtn-rotate-180":"")'>
                          <MudIconButton Class='th-btn-expand' OnClick='ExpandSubRows' Icon='@Icons.Material.Filled.ExpandMore' Size='Size.Small' />
                        </th>
                      </thead>
                      <MudDivider Vertical />
                      <tbody>
                        @foreach (var item in GlobalClass.liquidation.LiquidationDetails)
                        {
                          @if(!item.IsEditRow)
                          {
                            <tr class='liq-details__td-stock'>
                              <td>
                                <MudIconButton Icon='@Icons.Material.Filled.Edit' Size='Size.Small' Color='Color.Dark' 
                                  @onfocus='(() => item.IsEditRow = !item.IsEditRow )'>
                                </MudIconButton>
                                <MudTooltip Text='Remove Detail' Placement='Placement.Bottom'>
                                    <MudIconButton OnClick='(() => RemovePettyCash(item))' Icon='@Icons.Material.Filled.RemoveCircle' 
                                      Color='Color.Error' Size='Size.Small' />
                                </MudTooltip>
                              </td>
                              <td @onclick='(() => item.IsEditRow = !item.IsEditRow)'>
                                <p class='liq-details__td-txt'>@item.ExpenseName</p>
                              </td>
                              <td @onclick='(() => item.IsEditRow = !item.IsEditRow)'>
                                 <p class='liq-details__td-txt'>@item.ChargingName</p>
                              </td>
                              <td @onclick='(() => item.IsEditRow = !item.IsEditRow)'>
                                 <p class='liq-details__td-txt'>@item.Remarks</p>
                              </td>
                              <td @onclick='(() => item.IsEditRow = !item.IsEditRow)'>
                                <div class='td-amount-container @(item.Amount > 0 ? "color-green":"color-red")'>
                                  <p class='liq-details__td-txt'>@Extensions.GetEnumDescription(Enums.BankCurrency.PhilippinePeso)</p>
                                  <MudSpacer />
                                  <p class='liq-details__td-txt'>@item.Amount.ToString("N2")</p>
                                </div>
                              </td>
                              <td>
                                <MudIconButton OnClick='(() => item.ShowSubTable = !item.ShowSubTable)' Icon='@Icons.Material.Filled.Info' Size='Size.Small' Color='Color.Dark' />
                              </td>
                            </tr>
                            <tr class='@(item.ShowSubTable ? "":"collapsed-subrow")' style='@(item.IsEditRow ? "display:none":"")' tabindex='-1'>
                              <td colspan="1" />
                              <td colspan="4">
                                <div class="liq-details__pcdet-grid" tabindex='-1'>
                                  <div class="pcdet-header">
                                    <MudChip Label Size='Size.Small' Color='Color.Error' Variant='Variant.Outlined'>
                                      <small class='font-bold'>@item.ControlNumber</small>
                                    </MudChip>
                                    <MudChip Label Size='Size.Small' Icon='@Icons.Material.Filled.CalendarMonth' Variant='Variant.Outlined'>
                                      @Convert.ToDateTime(item.RequestDate).ToShortDateString()
                                    </MudChip>
                                    <MudChip Label Size='Size.Small' Color='@(item.Amount > 0 ? Color.Success:Color.Error)' Variant='Variant.Outlined'>
                                      @(Extensions.GetEnumDescription(Enums.BankCurrency.PhilippinePeso) + " " + @item.Amount.ToString("N2"))
                                    </MudChip>
                                    <MudChipAcctgStatus moduleName='pettycash' itemId='@item.Id' />
                                  </div>
                                  <div class="pcdet-lblpayee">
                                    <p class='liq-details__label'>Payee:</p>
                                  </div>
                                  <div class="pcdet-lblpart">
                                    <p class='liq-details__label'>Particulars:</p>
                                  </div>
                                  <div class="pcdet-lblrem">
                                    <p class='liq-details__label'>Remarks:</p>
                                  </div>
                                  <div class="pcdet-payee">
                                    <p class='liq-details__txt'>@item.PayeeName</p>
                                  </div>
                                  <div class="pcdet-part">
                                    <p class='liq-details__txt'>@item.Particular</p>
                                  </div>
                                  <div class="pcdet-rem">
                                    <p class='liq-details__txt'>@item.Remarks</p>
                                  </div>
                                  <div class="pcdet-signatories">
                                    <SignatoriesLiquidationDetail LiqDetPCashId='@item.PettyCashId' />
                                  </div>
                                </div>
                              </td>
                              <td class='border-right-none' colspan="1" />
                            </tr>
                          }
                          else
                          {
                            <tr class='@(isEditAllRow ? "liq-details__td-edit-all":"liq-details__td-edit")'>
                              <td />
                              <td>
                                <BlzrTypeAheadExpense ExpenseId='@item.ExpenseLineId'
                                  OnSelectedExpenseValue='((args) => { 
                                    item.selExp = args; 
                                    item.ExpenseLineId = args.Id;
                                    item.ExpenseName = args.ExpenseName; 
                                  })' />
                              </td>
                              <td>
                                <BlzrTypeAheadCharging ChargingName='@item.ChargingName' 
                                  OnSelectedChargingValue='((args) => {
                                    item.selCharge = args;
                                    item.ChargingId = args.ProjectId;
                                    item.ChargingName = args.ProjectName;
                                    item.ChargingCategoryId = args.ProjectCategoryId;
                                  })' />
                              </td>
                              <td>
                                <MudTextField Class='liq-details__td-txtfield' @bind-Value='@item.Remarks' Variant='Variant.Outlined' Margin='Margin.Dense' />
                              </td>
                              <td>
                                <MudNumericField Class='liq-details__td-txtfield--numeric' @bind-Value='@item.Amount' Culture='@GlobalVariable.CulturePh' HideSpinButtons Margin='Margin.Dense' Format='N2' />
                              </td>
                              <td>
                                @if(item.IsEditRow)
                                {
                                   <MudIconButton OnClick='(() => { item.IsEditRow = !item.IsEditRow; TotalAmount(); })' Icon='@Icons.Material.Filled.Check' Size='Size.Small' 
                                     @onfocusout='(() => item.ShowSubTable = !item.ShowSubTable)'></MudIconButton>
                                }
                              </td>
                            </tr>
                            <tr class='@(item.ShowSubTable ? "":"collapsed-subrow")' tabindex='-1'>
                              <td colspan="1" />
                              <td colspan="4">
                                <div class="liq-details__pcdet-grid" tabindex='-1'>
                                  <div class="pcdet-header">
                                    <MudChip Label Size='Size.Small' Color='Color.Error' Variant='Variant.Outlined' tabindex='-1'>
                                      <small class='font-bold'>@item.ControlNumber</small>
                                    </MudChip>
                                    <MudChip Label Size='Size.Small' Icon='@Icons.Material.Filled.CalendarMonth' Variant='Variant.Outlined' tabindex='-1'>
                                      @Convert.ToDateTime(item.RequestDate).ToShortDateString()
                                    </MudChip>
                                    <MudChip Label Size='Size.Small' Color='@(item.Amount > 0 ? Color.Success:Color.Error)' Variant='Variant.Outlined' tabindex='-1'>
                                      @(Extensions.GetEnumDescription(Enums.BankCurrency.PhilippinePeso) + " " + @item.Amount.ToString("N2"))
                                    </MudChip>
                                    <MudChipAcctgStatus moduleName='pettycash' itemId='@item.Id' />
                                  </div>
                                  <div class="pcdet-lblpayee">
                                    <p class='liq-details__label'>Payee:</p>
                                  </div>
                                  <div class="pcdet-lblpart">
                                    <p class='liq-details__label'>Particulars:</p>
                                  </div>
                                  <div class="pcdet-lblrem">
                                    <p class='liq-details__label'>Remarks:</p>
                                  </div>
                                  <div class="pcdet-payee">
                                    <p class='liq-details__txt'>@item.PayeeName</p>
                                  </div>
                                  <div class="pcdet-part">
                                    <p class='liq-details__txt'>@item.Particular</p>
                                  </div>
                                  <div class="pcdet-rem">
                                    <p class='liq-details__txt'>@item.Remarks</p>
                                  </div>
                                  <div class="pcdet-signatories">
                                    <SignatoriesLiquidationDetail LiqDetPCashId='@item.PettyCashId' />
                                  </div>
                                </div>
                              </td>
                              <td class='border-right-none' colspan="1">
                                @if(item.ShowSubTable)
                                {
                                  <MudIconButton OnClick='(() => item.ShowSubTable = !item.ShowSubTable)' Icon='@Icons.Material.Filled.Info' Size='Size.Small' Color='Color.Dark' 
                                      tabindex='-1'/>
                                }
                              </td>
                            </tr>
                          }
                        }
                        @if(isEditAllRow || GlobalClass.liquidation.LiquidationDetails.Where(x=>x.IsEditRow).Count() > 0)
                        {
                          <tr class='liq-details__tr-footer'>
                            <td colspan="6">
                              <div class='d-flex align-center gap-2'>
                                <MudSpacer />
                                <MudButton Class='th-btn-expand' OnClick='DoneAllRows' EndIcon='@Icons.Material.Filled.DoneAll' 
                                  Size='Size.Small' Color='Color.Success' Variant='Variant.Text'>
                                  Done
                                </MudButton>
                              </div>
                            </td>
                          </tr>
                        }
                      </tbody>
                    </table>
                  </div>
                  <div class='liqdet-footer'>
                    <p class='liq-details__label'>Rows: @GlobalClass.liquidation.LiquidationDetails.Count()</p>
                    <MudSpacer />
                    <p class='liqdet-footer__txt-amount'>Total : </p>
                    <p Class='liqdet-footer__txt-amount @(totalAmount > 0 ? "color-green":"color-red")'>
                      @Extensions.GetEnumDescription(Enums.BankCurrency.PhilippinePeso) 
                      @(GlobalClass.liquidation.TotalAmount.ToString("N2"))
                    </p>
                  </div>
                  <div class="liqdet-signatories">
                    <div class='signatory-entry-container'>
                      <div class='signatory-entry-container__signatory-cont'>
                        @if (preparedBy.Picture.Count() == 0) {
                          <MudAvatar Class='mb-1' Image='images/fglogo/fgci1-gs.png' Size='Size.Medium' />
                        } else {
                          <MudAvatar Class='mb-1' Image='@($"data:image/png;base64, {Convert.ToBase64String(preparedBy.Picture)}")' Size='Size.Medium' />
                        }
                        <div class='blzrth-cont-signatories blzrthead-disabled-minheight15'>
                          <BlazoredTypeahead SearchMethod='LoadEmployee' DisableClear placheold='Prepared By'
                            @bind-Value='preparedBy' MinimumLength='3' Debounce="300" MaximumSuggestions='5' Disabled>
                            <SelectedTemplate>
                              @if(!requiredPreparedBy)
                              {
                                <small>@preparedBy.EmployeeName</small>
                              }
                              else
                              {
                                <p Class='blzrth-cont-signatories__txt-required' Color='Color.Error'>Required</p>
                              }
                            </SelectedTemplate>
                            <ResultTemplate>
                              <div class='ddavatar'>
                                <MudAvatar Image='@($"data:image/png;base64, {Convert.ToBase64String(@context.Picture)}")' Size='Size.Small'/>
                                @context.EmployeeName | @context.Designation
                              </div>
                            </ResultTemplate>
                          </BlazoredTypeahead>
                          <MudText Class='d-flex wspace-nowrap txt-uppercase font-bold font10 pl-1'>
                              Prepared By
                              <MudText Class='font10 font-bold' Color='Color.Error'>*</MudText>
                            </MudText>
                        </div>
                      </div>
                      <div class='signatory-entry-container__signatory-cont'>
                        @if (approvedBy.Picture.Count() == 0) {
                          <MudAvatar Class='mb-1' Image='images/fglogo/fgci1-gs.png' Size='Size.Medium' />
                        } else {
                          <MudAvatar Class='mb-1' Image='@($"data:image/png;base64, {Convert.ToBase64String(approvedBy.Picture)}")' Size='Size.Medium' />
                        }
                        <div class='blzrth-cont-signatories'>
                          <BlazoredTypeahead SearchMethod='LoadEmployee' DisableClear placeholder='Approved By'
                            @bind-Value='approvedBy' MinimumLength='3' Debounce="300" MaximumSuggestions='5'>
                            <SelectedTemplate>
                              @if(!requiredApprover)
                              {
                                <small class='overflow-hidden wspace-nowrap'>@approvedBy.EmployeeName</small>
                              }
                             else
                             {
                               <p Class='blzrth-cont-signatories__txt-required' Color='Color.Error'>Required</p>
                             }
                            </SelectedTemplate>
                            <ResultTemplate>
                              <div class='ddavatar'>
                                <MudAvatar Image='@($"data:image/png;base64, {Convert.ToBase64String(@context.Picture)}")' Size='Size.Small' />
                                @context.EmployeeName | @context.Designation
                              </div>
                            </ResultTemplate>
                          </BlazoredTypeahead>
                          <MudText Class='d-flex wspace-nowrap txt-uppercase font-bold font10 pl-1'>
                            Approved By
                            <MudText Class='font10 font-bold' Color='Color.Error'>*</MudText>
                          </MudText>
                        </div>
                      </div>
                    </div>
                  </div>
                  <div class="liqdet-statheader">
                    <MudIcon Icon='@Icons.Material.Filled.FactCheck' Size='Size.Small' Color='Color.Dark'>
                    </MudIcon>
                    <MudText Class='txt-uppercase font12 font-bold'>Status</MudText>
                  </div>
                  <div class="liqdet-status">
                     <MudChip Class='sidebar-chip' Label Size='Size.Medium' Variant='Variant.Outlined'
                        Style='@(Extensions.BorderColor(GlobalClass.liquidation.StatusId))'>
                        @GlobalClass.liquidation.StatusName
                      </MudChip>
                  </div>
                  <div class="liqdet-controls">
                    <div class='entry-module-action'>
                      @if(!isSideBarExpanded)
                      {
                        <MudIconButton OnClick='(()=> navigationManager.NavigateTo($"/liquidation/list"))' Icon='@Icons.Material.Filled.Close' Size='Size.Small'
                            Variant='Variant.Text' />
                        <MudIconButton OnClick='PrintLiquidation' Icon='@Icons.Material.Filled.Save' Color='@(currActionMode == Enums.ActionMode.Update ? Color.Info : Color.Primary)' Size='Size.Small'
                            Variant='Variant.Filled' />
                      }
                      else
                      {
                        <MudButton Class='btn-ios-d font12' OnClick='(()=> navigationManager.NavigateTo($"/liquidation/list"))' Variant="Variant.Text" Size='Size.Medium' DisableElevation>Cancel</MudButton>
                        <MudButton Class='btn-ios-d font12' OnClick='PrintLiquidation' Variant="Variant.Filled" Color='@(currActionMode == Enums.ActionMode.Update ? Color.Info : Color.Primary)' Size='Size.Medium' DisableElevation>
                          @if (_processing) {
                              <MudProgressCircular Class="progsize-21" Size="Size.Small" Indeterminate="true"/>
                              <MudText Class='font12 fweight500 pl-2'>GENERATING</MudText>
                          } else {
                              <MudText Class='font12 fweight500'>
                                @submitText
                              </MudText>
                          }
                        </MudButton>
                      }
                    </div>
                  </div>
                </div>
              </div>
            </div>
          </MudCardContent>
        </MudPaper>
      </MudContainer>
    }
</div>


@code{
    private DateTime? liquidationDate = DateTime.Now;
    private DateRange periodLiquidation = new DateRange(DateTime.Now.Date, DateTime.Now.Date);
    private UserAccount selectedApprover = new();
    private UserAccount preparedBy = new UserAccount(); private UserAccount approvedBy = new UserAccount();
    private Project payee = new(); private Project selectedProj = new Project();
    private decimal totalAmount;
    private bool dataFetched, requiredApprover, requiredPreparedBy, openControlDrawer, isLiqTableCollapsed, modifyRemarks, collapseLiqDetails, 
    openEditDrawer, _processing, isSideBarExpanded = true, isSigExpanded = true, isStatusExpanded = true, isSubRowExpanded = true, isEditAllRow;
    private string _preparedBy = string.Empty, _approvedBy = string.Empty, submitText = "GENERATE", detailCountStatus = string.Empty;
    private string? pettyControl;
    public static Enums.ActionMode currActionMode { get; set; }
    private MudDatePicker datePicker = new MudDatePicker();
    private MudDateRangePicker dateRangePeriod = new MudDateRangePicker();
    public override async Task SetParametersAsync(ParameterView parameters)
    {
        preparedBy = new UserAccount(); approvedBy = new UserAccount();
        await base.SetParametersAsync(parameters);
    }

    protected override async Task OnInitializedAsync()
    {
        GlobalClass.pageTitle = "liquidation entry";
        while (GlobalClass.currentUserAccount == null || preparedBy == null || GlobalVariable.ServerTime == null)
            await Task.Delay(1);
        await Common.Privileges.GetAllowedFunctions(accessLevelService, Enums.AISModules.PettyCashList);
        Task t = Task.WhenAll(InitializeComponents());
        await t;
        if (t.Status == TaskStatus.RanToCompletion)
          CompletedFetch();
    }
    protected override async Task OnParametersSetAsync()
    {
        await Task.Delay(1);
        submitText = GlobalClass.liquidation.Id == 0 ? "GENERATE" : "UPDATE";
    }
    async Task InitializeComponents()
    {
        navigationManager.LocationChanged += OnLocationChanged;
        if (GlobalClass.liquidation == null || GlobalClass.liquidation.Id == 0)
        {
          
          switch(GlobalClass.forPrintingOrSaveLiquidation)
          {
            case null :
                currActionMode = Enums.ActionMode.Create;
                GlobalClass.liquidation = new();
                GlobalClassList.liquidationDetails = new();
                GlobalClassList.liquidationPettyCash = new();
                selectedApprover = new();
                _preparedBy = GlobalClass.currentUserAccount.EmployeeName;
                preparedBy.EmployeeId = GlobalClass.currentUserAccount.EmployeeId;
                preparedBy = GlobalClass.currentUserAccount;
                approvedBy = new();
                var result = GlobalClassList.accountingStatusList.Where(x=>x.StatusName.Equals("l-generated", StringComparison.InvariantCultureIgnoreCase)).FirstOrDefault();
                if (result != null)
                {
                  GlobalClass.liquidation.StatusId = result.Id;   
                  GlobalClass.liquidation.StatusName = result.StatusName;   
                }
             break;

             default :
                _preparedBy = GlobalClass.forPrintingOrSaveLiquidation.PreparedByName;
                preparedBy  = GlobalClass.currentUserAccount;
                approvedBy = await GetEmployeeDetails(GlobalClass.liquidation.ApprovedById);
             break;
          }
            
        }
        else
        {
            await DisplayProperties();
            TotalAmount();
        }
    }
    void CompletedFetch()
    {
        dataFetched = true;
        StateHasChanged();
    }
    void HandleIntervalElapsed(string debouncedText)
    {
      TotalAmount();
    }
    
    #region Location Changed
    private void OnLocationChanged(object? sender, LocationChangedEventArgs args)
    {
        GlobalClass.liquidation = new();
        Dispose();
    }

    public void Dispose()
    {
        navigationManager.LocationChanged -= OnLocationChanged;
    }

  #endregion

  #region Lookup Charging

  private async Task<IEnumerable<Project>> LoadCharging(string chargingName)
  {
    var filterParameter = new FilterParameter()
    {
      IsProject = true,
      ProjectName = chargingName,
      IsId = false
    };
    var charging = await globalService.LoadChargeProjectLine(filterParameter, GlobalClass.token);
    return charging;
  }
  #endregion

  #region Lookup Expense
  private async Task<IEnumerable<ExpenseLineModel>> LoadExpense(string expenseLine)
  {
    var charging = await expenseLineService.LoadExpenseLine(GlobalClass.token);
    return charging.Where(x=>x.ExpenseName.Contains(expenseLine, StringComparison.OrdinalIgnoreCase)).ToList();
  }
  #endregion

  #region Load Employee

  private async Task<IEnumerable<UserAccount>> LoadEmployee(string employeeName)
  {
      var filterParameter = new FilterParameter()
      {
          IsName = true,
          Name = employeeName,
          IsLookUp = true
      };
      return await globalService.LoadAllEmployee(filterParameter, GlobalClass.token);
  }

  #endregion

  #region Add Petty Cash

  async void AddPettyCash()
  {
      var parameters = new DialogParameters();
      string dialogTitle = "Petty Cash look up";
      parameters.Add("dialogTitle", dialogTitle);
      parameters.Add("buttonText", "Select");
      parameters.Add("color", Color.Success);
      parameters.Add("lookUpType", Enums.LookUpType.PettyCash);
      parameters.Add("pettyCashRange", periodLiquidation);
      var options = new DialogOptions()
      {
          CloseButton = false,
          MaxWidth = MaxWidth.Large,
          FullWidth = true,
          NoHeader = false,
          DisableBackdropClick = true
      };
      var resultDialog = await dialogService.Show<Shared.Dialogs.GlobalRFPLiquidationLookUp.GlobalRFPLiquidationLookUp>(dialogTitle, parameters, options).Result;
      if (!resultDialog.Canceled)
      {
          StateHasChanged();
          TotalAmount();
      }
  }

  #endregion

  #region Mapping Liquidation

  LiquidationModel MapProperties()
  {
      GlobalClass.liquidation.LiquidationDate = GlobalVariable.ServerTime;
      GlobalClass.liquidation.PreparedById = preparedBy.EmployeeId;
      GlobalClass.liquidation.PreparedByName = _preparedBy;
      GlobalClass.liquidation.PreparedByPicture = preparedBy.Picture;
      GlobalClass.liquidation.ApprovedById = approvedBy.EmployeeId;
      GlobalClass.liquidation.ApprovedByName = approvedBy.EmployeeName;
      GlobalClass.liquidation.ApprovedByPicture = approvedBy.Picture;
      GlobalClass.liquidation.PayeeId = 1;
      GlobalClass.liquidation.PayeeCategoryId = Enums.ProjectCategory.Project;
      GlobalClass.liquidation.UserId = GlobalClass.currentUserAccount.EmployeeId;
      GlobalClass.liquidation.Activity = GlobalClass.liquidation.Id == 0 ? "Add Liquidation" : "Edit Liquidation";
      GlobalClass.liquidation.StatusId = GlobalClassList.accountingStatusList.Where(x => x.StatusEnumCategoryId == Enums.AccountingStatusEnumCategory.LG).Select(t => t.Id).FirstOrDefault();

      GlobalClass.liquidation.LiquidationDetails.ForEach(liq=> 
        {
          if(liq.Amount > 0)
            liq.StatusId = GlobalClassList.accountingStatusList
            .Where(x=>x.StatusEnumCategoryId == Enums.AccountingStatusEnumCategory.PCL)
            .Select(i=>i.Id)
            .FirstOrDefault();

          liq.UserId = GlobalClass.currentUserAccount.EmployeeId;
          liq.Activity = "Petty Cash Liquidated";
        });

      GlobalClass.liquidation.PeriodFrom = (DateTime)periodLiquidation.Start.GetValueOrDefault();
      GlobalClass.liquidation.PeriodTo = (DateTime)periodLiquidation.End.GetValueOrDefault();

      GlobalClass.liquidation.IsActive = true;
      GlobalClass.liquidation.PreparedByDepartment = preparedBy.DepartmentName;
      _processing = false;
      return GlobalClass.liquidation;
  }

  #endregion

  #region Display Properties

  async Task DisplayProperties()
  {
    currActionMode = Enums.ActionMode.Update;
    var liquidationDetails = await liquidationService.LiquidationDetails(GlobalClass.liquidation.Id, GlobalClass.token);
    GlobalClass.liquidation.LiquidationDetails = liquidationDetails.Select(liquidationDetail => new LiquidationDetailModel()
    {
        Id = liquidationDetail.Id,
        PettyCashId = liquidationDetail.PettyCashId,
        ControlNumber = liquidationDetail.ControlNumber,
        PayeeId = liquidationDetail.PayeeId,
        PayeeName = liquidationDetail.PayeeName,
        PayeeCategoryId = liquidationDetail.PayeeCategoryId,
        Particular = liquidationDetail.Particular,
        RequestedById = liquidationDetail.RequestedById,
        RequestedByName = liquidationDetail.RequestedByName,
        LiquidationId = GlobalClass.liquidation.Id,
        IsActive = liquidationDetail.IsActive,
        StatusId = liquidationDetail.StatusId,
        StatusName = liquidationDetail.StatusName,
        ExpenseLineId = liquidationDetail.ExpenseLineId,
        ExpenseName = liquidationDetail.ExpenseName,
        ChargingCategoryId = liquidationDetail.ChargingCategoryId,
        ChargingId = liquidationDetail.ChargingId,
        ChargingName = liquidationDetail.ChargingName,
        Amount = liquidationDetail.Amount,
        RequestDate = liquidationDetail.RequestDate,
        ActualAmount = liquidationDetail.ActualAmount,
        Remarks = liquidationDetail.Remarks
    }).ToList();

    liquidationDate = GlobalClass.liquidation.LiquidationDate;
    preparedBy.EmployeeId = GlobalClass.liquidation.PreparedById;
    _preparedBy = GlobalClass.liquidation.PreparedByName;
    selectedApprover.EmployeeId = GlobalClass.liquidation.ApprovedById;
    _approvedBy = GlobalClass.liquidation.ApprovedByName;

    payee.ProjectId = GlobalClass.liquidation.PayeeId;
    payee.ProjectName = GlobalClass.liquidation.PayeeName;
    payee.ProjectCategoryId = GlobalClass.liquidation.PayeeCategoryId;

    preparedBy = await GetEmployeeDetails(GlobalClass.liquidation.PreparedById);
    approvedBy = await GetEmployeeDetails(GlobalClass.liquidation.ApprovedById);

    periodLiquidation.Start = GlobalClass.liquidation.PeriodFrom;
    periodLiquidation.End = GlobalClass.liquidation.PeriodTo;
  }

  #endregion

  #region Total Amount

  void TotalAmount()
  {
      totalAmount = GlobalClass.liquidation.LiquidationDetails.Sum(x => x.Amount);
      GlobalClass.liquidation.TotalAmount = totalAmount;
      Console.WriteLine(totalAmount);
  }

  #endregion

  #region Print/Save Liquidation

  void PrintLiquidation()
  {
    _processing = true;
    if (Validation())
    {
      pettyControl = GlobalClass.liquidation.LiquidationDetails.Where(x=>x.ActualAmount > x.Amount).Select(x=>x.ControlNumber).FirstOrDefault();
      switch(GlobalClass.liquidation.LiquidationDetails.Any(x=>x.ActualAmount < x.Amount))
      {
        case true :
          Extensions.ShowAlert(pettyControl + " : Actual amount is greater than Petty Cash amount", Variant.Filled, SnackbarService, Severity.Error);
        break;
        case false :
          GlobalClass.forPrintingOrSaveLiquidation = MapProperties();
          navigationManager.NavigateTo($"liquidation/print");
        break;
      }
    }
    else
      Extensions.ShowAlert("Cannot create liquidation, Incomplete fields.", Variant.Filled, SnackbarService, Severity.Error);
    
    _processing = false;
  }

  #endregion

  #region Remove Petty Cash

  private async void RemovePettyCash(LiquidationDetailModel liquidationDetail)
  {
    if(liquidationDetail.Id != 0)
    {
        var parameters = new DialogParameters();
        string contentText = "Petty Cash ";
        string dialogTitle = "Remove " + contentText;
        parameters.Add("dialogTitle", dialogTitle);
        parameters.Add("contentText", contentText);
        parameters.Add("actionMode", Enums.ActionMode.Delete);
        var options = new DialogOptions()
        {
            CloseButton = false,
            MaxWidth = MaxWidth.ExtraSmall,
            FullWidth = true,
            NoHeader = false,
            DisableBackdropClick = true
        };
        var resultDialog = await dialogService.Show<Shared.Dialogs.GenericPromptDialogs.GenericPrompt>(dialogTitle, parameters, options).Result;
        if(!resultDialog.Canceled)
        {
            liquidationDetail.IsActive = false;
            GlobalClass.liquidation.RemovedLiquidationDetails.Add(liquidationDetail);
            GlobalClass.liquidation.LiquidationDetails = GlobalClass.liquidation.LiquidationDetails.Where(x => x.IsActive == true).ToList();
            StateHasChanged();
        }
    }
    else
    {
        liquidationDetail.IsActive = false;
        GlobalClass.liquidation.RemovedLiquidationDetails.Add(liquidationDetail);
        GlobalClass.liquidation.LiquidationDetails = GlobalClass.liquidation.LiquidationDetails.Where(x => x.IsActive == true).ToList();
        StateHasChanged();
    }
    TotalAmount();
  }
  #endregion

  private bool Validation()
  {
    ResetValidations();
    
    if(GlobalClass.liquidation.LiquidationDetails.Count() == 0)
    {
      detailCountStatus = "No details Added";
    }

    if(preparedBy.EmployeeId == 0)
      requiredPreparedBy = true;

    if(approvedBy.EmployeeId == 0)
      requiredApprover = true;

    if (GlobalClass.liquidation.LiquidationDetails.Count() == 0  || requiredPreparedBy || requiredApprover)
      return false;
    if(GlobalClass.liquidation.LiquidationDetails.Any( x => x.ExpenseLineId == 0) ||
      GlobalClass.liquidation.LiquidationDetails.Any( x => x.ChargingId == 0))
      {
        return false;
      }
    return true;
  }

  private async Task<UserAccount> GetEmployeeDetails(long employeeId)
  {
      var employeeDetail = await globalService.GetEmployeeById(employeeId, GlobalClass.token);
      return employeeDetail;
  }
  
  private async Task New()
  {
    var parameters = new DialogParameters();
    parameters.Add("contentText", "create new liquidaiton");
    parameters.Add("dialogTitle", "Create New");
    parameters.Add("buttonText", "Create New");
    parameters.Add("actionMode", Enums.ActionMode.Prompt);
    var options = new DialogOptions() { CloseButton = false, MaxWidth = MaxWidth.Small, FullWidth = false, NoHeader = false };
    var resultDialog = await dialogService.Show<Shared.Dialogs.GenericPromptDialogs.GenericPrompt>(string.Empty,parameters,options).Result;
    if(!resultDialog.Canceled)
    {
        string thisPage = "liq-create";
        navigationManager.NavigateTo($"/refresh/{thisPage}");
    }
  }

  private void ResetLiquidationDetails()
  {
    GlobalClass.liquidation.LiquidationDetails = new List<LiquidationDetailModel>();
    totalAmount = 0;
  }

  private void ResetValidations()
  {
    detailCountStatus = string.Empty;
    requiredPreparedBy = false;
    requiredApprover = false;
  }

  private void DateRangeToday(MudDatePicker datePickerName, MudDateRangePicker dateRangePickerName)
  {
    if(datePickerName == datePicker)
    {
      liquidationDate = DateTime.Now;
      SubmitDateRangePicker(datePickerName, new());
    }
    if(dateRangePickerName == dateRangePeriod)
    {
      periodLiquidation = new DateRange(DateTime.Now.Date, DateTime.Now.Date);
      SubmitDateRangePicker(new(), dateRangePickerName);
    }
  }
  private void CancelDateRangePicker(MudDatePicker datePickerName, MudDateRangePicker dateRangePickerName)
  {
    if(datePickerName == datePicker)
      datePickerName.Close(false);
    if(dateRangePickerName == dateRangePeriod)
      dateRangePickerName.Close(false);
  }
  private void SubmitDateRangePicker(MudDatePicker datePickerName, MudDateRangePicker dateRangePickerName)
  {
    if(datePickerName == datePicker)
      datePickerName.Close(true);
    if(dateRangePickerName == dateRangePeriod)
      dateRangePickerName.Close(true);
  }

  private void ExpandSubRows()
  {
    isSubRowExpanded = !isSubRowExpanded;
    GlobalClass.liquidation.LiquidationDetails.ForEach(x=>x.ShowSubTable = isSubRowExpanded);
  }

  private void EditAllRows()
  {
    if(!isEditAllRow)
    {
      isEditAllRow = !isEditAllRow;
      GlobalClass.liquidation.LiquidationDetails.ForEach(x=>x.IsEditRow = true);
    }
  }

  private void DoneAllRows()
  {
    TotalAmount();
    if(isEditAllRow)
    {
      isEditAllRow = !isEditAllRow;
      GlobalClass.liquidation.LiquidationDetails.ForEach(x=>x.IsEditRow = false);
    }
    else
    {
       GlobalClass.liquidation.LiquidationDetails.ForEach(x=>x.IsEditRow = false);
    }
  }
}