@page "/liquidation/list"
@inject ILiquidationService liquidationService
@inject NavigationManager navigationManager
@inject ISnackbar snackbarService
@inject IJSRuntime JSRuntime
@inject IDialogService dialogService
@inject IConfiguration config

<div class='page-cont'>
  <div class='drawer-right-min'>
      <MudDrawer Class='pa-1' @bind-Open='openSideFilter' Fixed='false' Anchor='Anchor.Right' Elevation='0' Variant='DrawerVariant.Mini' OpenMiniOnHover='false'>
          <FilterComponent OpenSideFilterClick='(() => openSideFilter = !openSideFilter)' 
            FilterClick='FilterTable' ResetTableClick='ReloadTable'
            contentVisible='openSideFilter' moduleName="liquidation-list"/>
      </MudDrawer>
  </div>

  <MudContainer Class='py-2 pl-2 pr-10  table-toolbar-custom1' Fixed='false' MaxWidth='MaxWidth.ExtraExtraLarge'>
    @if (!dataFetched)
    {
      <MudPaper Class='ma-1 pa-1' style="height: calc(100vh - 125px);">
        <MudSkeleton SkeletonType='SkeletonType.Rectangle' Height='calc(100vh - 135px)' Animation='Animation.Wave' />
      </MudPaper>
    }
    else
    {
      <MudTable Class='table-style-1 ' ServerData='new Func<TableState, Task<TableData<LiquidationModel>>>(LoadLiquidationFromServer)' 
        Breakpoint='Breakpoint.Sm' Hover FixedHeader FixedFooter Bordered Dense RowsPerPage='15' Filter='new Func<LiquidationModel,bool>(FilterItems)' @ref='tableVariable'
          Loading='isLoading'> 
        <ToolBarContent>
          <MudText Typo='Typo.caption'>
            @totalItems
            @(totalItems == 1 ? "item" : "items")
            in total
          </MudText>
          <MudSpacer />
            <MudTooltip Text="Refresh Table" Arrow Placement='Placement.Top'>
                <MudIconButton Class='@(isLoading ? "mudbtnico-rotate":"")' OnClick='ReloadTable' Icon="@Icons.Material.Filled.Refresh" Size="Size.Small" 
                  Color='@(isLoading ? Color.Info : Color.Default)'/>
            </MudTooltip>
            <MudMenu Class='overflow-hidden mudbtnico-rotate-90' StartIcon='@Icons.Material.Filled.MoreVert' AnchorOrigin='Origin.BottomCenter' ActivationEvent='MouseEvent.MouseOver'
                TransformOrigin='Origin.TopRight' Dense Size='Size.Small' Label='More'>
                @if(AccessLevelAddmin() || AccessLevelRequestors())
                  {
                    <MudMenuItem OnClick='(()=> navigationManager.NavigateTo($"/liquidation"))'>
                      <div class='d-flex align-center gap-2 '>
                          <MudIcon Icon='@Icons.Material.Filled.Add' Size='Size.Small' />
                          <MudText Typo='Typo.body2'>Create liquidation</MudText>
                      </div>
                    </MudMenuItem>
                    <MudMenuItem OnClick="(() => openSideFilter = !openSideFilter)"  >
                        <div class='d-flex align-center gap-2 '>
                            <MudIcon Icon='@Icons.Material.Filled.FilterList' Size='Size.Small' Color='Color.Dark' />
                            <MudText Typo='Typo.body2' Color='Color.Dark'>Filter</MudText>
                        </div>
                    </MudMenuItem>                        
                  }
            </MudMenu>
        </ToolBarContent>
        <ColGroup>
          <col style='width: 1%' />
          <col />
          <col />
          <col style='width: 175px'/>
          <col style='width: 20px' />
          <col style='width: 110px' />
          <col style='width: 50px' />
        </ColGroup>
        <HeaderContent>
          <MudTh Class='@(isPinnedCtrlNo ? "th-sticky-left customheader-6":"customheader-6")'>
            <div class='d-flex align-center justify-space-around gap-2'>
               <MudTooltip Text='Pin control number column' Arrow Placement='Placement.Top'>
                <MudIconButton Class='ico-15x15' OnClick='(() => isPinnedCtrlNo = !isPinnedCtrlNo)' Color='@(isPinnedCtrlNo ? Color.Info:Color.Dark)' 
                      Icon='@Icons.Material.Filled.PushPin' Size='Size.Small'/>
                </MudTooltip>
              <MudTableSortLabel SortLabel='SortControlNumber' T='LiquidationModel'
              InitialDirection='SortDirection.None'>
                Control No.
              </MudTableSortLabel>
              <MudTableSortLabel SortLabel='SortDate' T='LiquidationModel' InitialDirection='SortDirection.Descending'>
                Date
              </MudTableSortLabel>
            </div>
          </MudTh>
          <MudTh Class='customheader-6'>Prepared by</MudTh>
          <MudTh Class='customheader-6'>Approver</MudTh>
          <MudTh Class='customheader-6 text-center'>Period</MudTh>
          <MudTh Class='customheader-6 text-center' >Status</MudTh>
          <MudTh Class='@(isPinnedAmt ? "th-sticky-amt customheader-6 text-right":"customheader-6 text-right")'>
            <MudTooltip Text='Pin amount column' Arrow Placement='Placement.Top'>
              <MudIconButton Class='ico-15x15' OnClick='(() => isPinnedAmt = !isPinnedAmt)' Color='@(isPinnedAmt ? Color.Info:Color.Dark)' 
                Icon='@Icons.Material.Filled.PushPin' Size='Size.Small'/>
            </MudTooltip>
            Amount
          </MudTh>
          <MudTh Class='@(isPinnedAmt ? "th-sticky-action customheader-6":"customheader-6")'>Actions</MudTh>
        </HeaderContent>
        <RowTemplate>
          <MudTd Class='@(isPinnedCtrlNo ? "col-sticky-left":"")' DataLabel="Control Number">
            <div class='d-flex align-center'>
              <MudChip Class='mudchip-tbl' Text='@context.ControlNumber' OnClick='(() => CopyTextToClipboard(context.ControlNumber))' 
                Variant='Variant.Outlined' Color='Color.Error' Size='Size.Small'/>
              <MudChip Class='mudchip-tbl' Text='@Convert.ToDateTime(context.LiquidationDate).ToShortDateString()' Icon='@Icons.Material.Filled.CalendarMonth'  
                Variant='Variant.Outlined' Size='Size.Small' Color='Color.Default' />
            </div>
          </MudTd>
          <MudTd>
             <div class='dynamic-div-1'>
                <small>@context.PreparedByName</small>
             </div>
          </MudTd>
          <MudTd>
            <div class='dynamic-div-1'>
              <small>@context.ApprovedByName</small>
            </div>
          </MudTd>
          <MudTd>
            <DateRangeCardComponent dateFrom='@context.PeriodFrom.Date' dateTo='@context.PeriodTo.Date'/>
          </MudTd>
          <MudTd Class='@(isPinnedAmt ? "br-none":"")'>
              <MudChip Class='chip-radius-5 font-bold font10' Size='Size.Small' Style='@Extensions.BorderColor(context.StatusId)' Variant='Variant.Outlined'>
                @context.StatusName
              </MudChip>
          </MudTd>
          <MudTd Class='@(isPinnedAmt ? "col-sticky-amt":"")' >
            <div class='tooltipw100'>
                <MudTooltip Class='flex-1' Text='@(Extensions.GetEnumDescription(Enums.BankCurrency.PhilippinePeso) + " " + context.TotalAmount.ToString("N2"))' 
                    Arrow Placement='Placement.Top' Color='@(context.TotalAmount > 0 ? Color.Success:Color.Error)'>
                    <div class='amount-container'>
                        <small class='@(context.TotalAmount > 0 ? "font-bold color-green":"font-bold color-red")'>
                            @Extensions.GetEnumDescription(Enums.BankCurrency.PhilippinePeso)
                        </small>
                        <MudSpacer />
                        <small class='@(context.TotalAmount > 0 ? "txt-green":"txt-red")'>
                            @context.TotalAmount.ToString("N2")
                        </small>
                    </div>
                </MudTooltip>
            </div>
          </MudTd>
          <MudTd Class='@(isPinnedAmt ? "col-sticky-action text-center":"text-center")'>
            <MudMenu Class='mudbtnico-rotate-90' Icon='@Icons.Material.Filled.MoreVert' AnchorOrigin='Origin.BottomLeft' ActivationEvent='MouseEvent.MouseOver'
              TransformOrigin='Origin.TopRight' Dense Size='Size.Small'>
                @if((!EnableEditApproved(context) && AccessLevelAddmin()) 
                || (!EnableEditApproved(context) && AccessLevelRequestors()))
                {
                  <MudMenuItem OnClick='(()=> EditLiquidation(context))' Disabled='EnableEditApproved(context)'>
                    <a class='d-flex align-center gap-2 '>
                      <MudIcon Icon='@Icons.Material.Filled.Edit' Size='Size.Small'/>
                      <MudText Typo='Typo.body2'>Edit</MudText>
                    </a>
                  </MudMenuItem>

                  if(AccessLevelAddmin())
                  {
                    <MudMenuItem OnClick='(()=> ApproveLiquidation(context))'>
                      <div class='d-flex align-center gap-2 '>
                        <MudIcon Icon='@Icons.Material.Filled.CheckCircle' Size='Size.Small'/>
                        <MudText Typo='Typo.body2'>Approve</MudText>
                      </div>
                    </MudMenuItem>
                    <MudMenuItem OnClick='(()=> CancelLiquidation(context))'>
                      <div class='d-flex align-center gap-2 '>
                        <MudIcon Icon='@Icons.Material.Filled.Cancel' Size='Size.Small'/>
                        <MudText Typo='Typo.body2'>Cancel</MudText>
                      </div>
                    </MudMenuItem>
                  }

                }
                else if(AccountingStatus(Enums.ActionMode.Approve).Id == context.StatusId && AccessLevelAddmin())
                {
                  <MudMenuItem OnClick='(()=> VoidLiquidation(context))'>
                    <a class='d-flex align-center gap-2 '>
                      <MudIcon Icon='@Icons.Material.Filled.CancelPresentation' Size='Size.Small'/>
                      <MudText Typo='Typo.body2'>Generated (Void)</MudText>
                    </a>
                  </MudMenuItem>
                }
                <MudMenuItem OnClick='(()=> navigateAuditTrail(context))'>
                  <a class='d-flex align-center gap-2 '>
                    <MudIcon Icon='@Icons.Material.Filled.ListAlt' Size='Size.Small' />
                    <MudText Typo='Typo.body2'>Audit Trail</MudText>
                  </a>
                </MudMenuItem>
                <MudMenuItem OnClick='(()=> context.ShowReport = ShowReport(context.ShowReport, context))'>
                    <div class='d-flex align-center gap-2 '>
                        <MudIcon Icon='@Icons.Material.Filled.PictureAsPdf' Size='Size.Small' />
                        <MudText Typo='Typo.body2'> @(context.ShowReport ? "Close" : "Show") Report</MudText>
                    </div>
                </MudMenuItem>
            </MudMenu>
          </MudTd>
        </RowTemplate>
        <NoRecordsContent>
          <MudText Class='txt-uppercase font-bold font12' Color='Color.Error'>No records found</MudText>
        </NoRecordsContent>
        <ChildRowContent>
          <MudTr>
              <td colspan="8">
                <div class='transition-05s-ease overflow-hidden' style='@(context.ShowReport ? "max-height:700px" : "max-height:0px")'>
                  <div class='d-flex align-center pa-2 bgc-f2f2f2'>
                      <MudSpacer />
                      <MudButton Class='btn-ios-d' OnClick='(() => context.ShowReport = ShowReport(context.ShowReport, context))' EndIcon="@Icons.Rounded.Close" Size='Size.Small' >
                          Close Report
                      </MudButton>
                  </div>
                  <div class='d-flex align-stretch justify-center default-report-container'>
                    @if (context.ShowReport)
                    {
                      @if (string.IsNullOrWhiteSpace(PDFContent))
                      {
                        <MudOverlay Visible='true' DarkBackground="false" AutoClose="true">
                            <MudProgressCircular Color="Color.Primary" Indeterminate="true" />
                        </MudOverlay>
                      }
                      else
                      {
                      <iframe src='@PDFContent' />
                      }
                      }
                  </div>
                </div>
              </td>
            </MudTr>
        </ChildRowContent>
        <PagerContent>
            <MudTablePager PageSizeOptions="GlobalVariable.pageSize" />
        </PagerContent>
        </MudTable>
    }
  </MudContainer>
</div>

@code{

  private bool dataFetched, openSideFilter, isLoading, isPinnedCtrlNo = true, isPinnedAmt = true;
  private string PDFContent = default!;
  private string searchTerm = string.Empty;
  private int totalItems;
  private FilterParameter filterParameter = new();
  private IEnumerable<LiquidationModel>? pageData;
  private MudTable<LiquidationModel> tableVariable = new MudTable<LiquidationModel>();
  private DateRange dateRange = new DateRange(DateTime.Now.Date, DateTime.Now.Date);
  private DateRange periodRange = new DateRange(DateTime.Now.Date, DateTime.Now.Date);
  private AccountingStatusModel selectedStatus = new();
  private IEnumerable<AccountingStatusModel> hasAccountingStatus {get; set;} = new HashSet<AccountingStatusModel>();
  private List<AccountingStatusModel> statusList = new();
  protected override async Task OnInitializedAsync()
  {
    GlobalClass.pageTitle = "Liquidation List";
    while (GlobalClass.currentUserAccount == null || string.IsNullOrEmpty(GlobalClass.token) 
    || GlobalClassList.accountingStatusList == null)
        await Task.Delay(1);
    
    SignalRHubConnection();
    CompletedFetch();

    statusList = GlobalClassList.accountingStatusList;
  }
  void CompletedFetch()
  {
    dataFetched = true;
    StateHasChanged();
  }
  private async void EditLiquidation(LiquidationModel liquidation)
  {
    GlobalClass.liquidation = await Task.Run(()=> liquidation);
    navigationManager.NavigateTo($"/liquidation");
  }
  private bool ShowReport(bool isShow, LiquidationModel liquidationModel)
  {
    Task.Run(()=> LoadLiquidationDetails(liquidationModel));
    return isShow = !isShow;
  }
  private async Task LoadLiquidationDetails(LiquidationModel liquidationDetail)
  {
    var liquidationDetails = await liquidationService.LiquidationDetails(liquidationDetail.Id, GlobalClass.token);
    liquidationDetail.LiquidationDetails = liquidationDetails.Select(details=> new LiquidationDetailModel()
    {
      Id = details.Id,
      PettyCashId = details.PettyCashId,
      ControlNumber = details.ControlNumber,
      PayeeId = details.PayeeId,
      PayeeName = details.PayeeName,
      PayeeCategoryId = details.PayeeCategoryId,
      Particular = details.Particular,
      RequestedById = details.RequestedById,
      RequestedByName = details.RequestedByName,
      LiquidationId = liquidationDetail.Id,
      IsActive = details.IsActive,
      StatusId = details.StatusId,
      StatusName = details.StatusName,
      ExpenseLineId = details.ExpenseLineId,
      ExpenseName = details.ExpenseName,
      ChargingCategoryId = details.ChargingCategoryId,
      ChargingId = details.ChargingId,
      ChargingName = details.ChargingName,
      Amount = details.Amount,
      ActualAmount = details.ActualAmount,
      Remarks = details.Remarks

      }).ToList();

      PDFContent = await liquidationService.PrintSaveLiquidation(liquidationDetail);
      StateHasChanged();
  }
  private async Task VoidLiquidation(LiquidationModel liquidation)
  {
    if(await PromptMessage(Enums.ActionMode.Void, liquidation))
    {
      liquidation.StatusId = GlobalClassList.accountingStatusList.Where(x => x.StatusEnumCategoryId == Enums.AccountingStatusEnumCategory.LG).Select(x => x.Id).FirstOrDefault();
      liquidation.Activity = "Update liquidation status to generated (void)";
      liquidation.UserId = GlobalClass.currentUserAccount.EmployeeId;
      var updatedStatus = await liquidationService.UpdateLiquidationStatus(liquidation, GlobalClass.token);
      Extensions.ShowAlert("Liquidation voided", Variant.Filled, snackbarService, Severity.Info);
      if(GlobalVariable.AMSHubConnection != null)
        await GlobalVariable.AMSHubConnection.InvokeAsync("SaveLiquidation", updatedStatus);
    }
    else
       Extensions.ShowAlert("Action Cancelled", Variant.Filled, snackbarService, Severity.Normal);
  }
  private async Task ApproveLiquidation(LiquidationModel liquidation)
  {
    if (await PromptMessage(Enums.ActionMode.Approve, liquidation))
    {
      liquidation.StatusId = GlobalClassList.accountingStatusList.Where(x => x.StatusEnumCategoryId == Enums.AccountingStatusEnumCategory.LA).Select(x => x.Id).FirstOrDefault();
      liquidation.Activity = "Approved Status";
      liquidation.UserId = GlobalClass.currentUserAccount.EmployeeId;
      var updatedStatus = await liquidationService.UpdateLiquidationStatus(liquidation, GlobalClass.token);
      Extensions.ShowAlert("Liquidation approved", Variant.Filled, snackbarService, Severity.Info);
      if(GlobalVariable.AMSHubConnection != null)
        await GlobalVariable.AMSHubConnection.InvokeAsync("SaveLiquidation", updatedStatus);
    }
    else
      Extensions.ShowAlert("Action Cancelled", Variant.Filled, snackbarService, Severity.Normal);

  }
  private async Task CancelLiquidation(LiquidationModel liquidation)
  {
    if (await PromptMessage(Enums.ActionMode.Cancel, liquidation))
    {
      liquidation.StatusId = GlobalClassList.accountingStatusList.Where(x => x.StatusEnumCategoryId == Enums.AccountingStatusEnumCategory.LC).Select(x => x.Id).FirstOrDefault();
      liquidation.Activity = "Cancelled Status";
      liquidation.UserId = GlobalClass.currentUserAccount.EmployeeId;
      var cancelLiquidation = await liquidationService.UpdateLiquidationStatus(liquidation, GlobalClass.token);
      GlobalClassList.liquidations = GlobalClassList.liquidations.Where(x => x.StatusId != liquidation.StatusId).OrderByDescending(x => x.ControlNumber).ToList();
      Extensions.ShowAlert("Liquidation cancelled", Variant.Filled, snackbarService, Severity.Info);
      if(GlobalVariable.AMSHubConnection != null)
        await GlobalVariable.AMSHubConnection.InvokeAsync("SaveLiquidation", cancelLiquidation);
    }
    else
      Extensions.ShowAlert("Action Cancelled", Variant.Filled, snackbarService, Severity.Normal);
  }
  private bool EnableEditApproved(LiquidationModel liquidation)
  {
    var accountingStatusList = new AccountingStatusModel();
    accountingStatusList = GlobalClassList.accountingStatusList.Where(x => x.Id == liquidation.StatusId).FirstOrDefault();
    return accountingStatusList?.StatusEnumCategoryId == Enums.AccountingStatusEnumCategory.LA;
  }
  private async Task<TableData<LiquidationModel>> LoadLiquidationFromServer(TableState tableState)
  {
    isLoading = true;
    IEnumerable<LiquidationModel> data = await liquidationService.LiquidationList(filterParameter, GlobalClass.token);
    switch (tableState.SortLabel)
    {
      case "SortControlNumber":
        data = data.OrderByDirection(tableState.SortDirection, x=>x.Id);
        break;
      case "SortDate":
        data = data.OrderByDirection(tableState.SortDirection, x=>x.LiquidationDate);
        break;
    }

    GlobalClassList.liquidations = data.ToList();
    pageData = GlobalClassList.liquidations.Skip(tableState.Page * tableState.PageSize).Take(tableState.PageSize).ToArray();
    totalItems = GlobalClassList.liquidations.Count();
    isLoading = !isLoading;
    return new TableData<LiquidationModel>()
    {
      TotalItems = totalItems,
      Items = pageData
    };
  }
  private async Task FilterTable()
  {
    filterParameter = GlobalVariable.filterParameter;
    filterParameter.ControlNumber = filterParameter.ControlNumber.Replace(" ","");//avoid white space when searching CN
    await tableVariable.ReloadServerData();
  }
  private string AccountingStatus(List<string> selectedStatus)
  {
    var status = "";
    foreach (var item in hasAccountingStatus)
    {
     status = string.Join(", ", hasAccountingStatus.Select(x => x.StatusName));      
    }
    return $"{status}";
  }

  private async Task<bool> PromptMessage(Enums.ActionMode actionMode,LiquidationModel model)
  {
    bool isNotCancel;
    var parameters = new DialogParameters();
    string contentText = "Liquidation ";
    string dialogTitle = actionMode.ToString();
    parameters.Add("actionMode", actionMode);
    parameters.Add("dialogTitle", dialogTitle);
    parameters.Add("contentText", contentText);
    parameters.Add("controlNumber", model.ControlNumber);
    var options = new DialogOptions() { CloseButton = false, MaxWidth = MaxWidth.ExtraSmall, FullWidth = true, NoHeader = false, DisableBackdropClick = true };
    var resultDialog = await dialogService.Show<Shared.Dialogs.GenericPromptDialogs.GenericPrompt>(dialogTitle, parameters, options).Result;
    if (!resultDialog.Canceled)
        isNotCancel = true;
    else
        isNotCancel = false;

    StateHasChanged();

    return isNotCancel;
  }
  private bool FilterItems(LiquidationModel items)
  {
    if (string.IsNullOrEmpty(searchTerm))
        return true;
    if (items.ControlNumber.Contains(searchTerm, StringComparison.InvariantCultureIgnoreCase))
        return true;
    if (items.StatusName.Contains(searchTerm, StringComparison.InvariantCultureIgnoreCase))
        return true;
    return true;
  }
  private void SignalRHubConnection()
  {
      try
      {
        if(GlobalVariable.AMSHubConnection != null)
          GlobalVariable.AMSHubConnection.On<LiquidationModel>("SaveLiquidation", (_liquidation)=> {
          
          tableVariable.ReloadServerData();
          
          StateHasChanged();

          });
      }
      catch (System.Exception ex)
      {
         Console.WriteLine(ex.Message);
         throw;
      }
  }
  private bool AccessLevelAddmin()
  {
    return GlobalClass.currentUserAccount.AccessLevel == Enums.AccountingAccessLevel.Administrator 
    ||GlobalClass.currentUserAccount.AccessLevel == Enums.AccountingAccessLevel.AccountingAdmin;

  }
  private bool AccessLevelRequestors()
  {
    return GlobalClass.currentUserAccount.AccessLevel == Enums.AccountingAccessLevel.OthersRequestor
    || GlobalClass.currentUserAccount.AccessLevel == Enums.AccountingAccessLevel.AccountingRequestor
    || GlobalClass.currentUserAccount.AccessLevel == Enums.AccountingAccessLevel.AccountingIssuer;
    
  }
  private bool AccessLevelViewers()
  {
    return GlobalClass.currentUserAccount.AccessLevel == Enums.AccountingAccessLevel.AccountingViewer
    || GlobalClass.currentUserAccount.AccessLevel == Enums.AccountingAccessLevel.OthersViewer;
  }
  private void navigateAuditTrail(LiquidationModel liquidation)
  {
    GlobalClass.liquidationAudit = liquidation;
    navigationManager.NavigateTo($"/liquidation/audit");
  }
  private AccountingStatusModel AccountingStatus(Enums.ActionMode actionMode)
  {
      var acctgStatus = new AccountingStatusModel();
      if(actionMode == Enums.ActionMode.Approve)
        acctgStatus = GlobalClassList.accountingStatusList.Where(x=>x.StatusEnumCategoryId == Enums.AccountingStatusEnumCategory.LA).FirstOrDefault();
      else if (actionMode == Enums.ActionMode.Cancel)
        acctgStatus = GlobalClassList.accountingStatusList.Where(x=>x.StatusEnumCategoryId == Enums.AccountingStatusEnumCategory.LC).FirstOrDefault();
      else if(actionMode == Enums.ActionMode.Void)
        acctgStatus = GlobalClassList.accountingStatusList.Where(x=>x.StatusEnumCategoryId == Enums.AccountingStatusEnumCategory.LG).FirstOrDefault();
      return acctgStatus?? new();
  }
  private void ClearSearch()
  {
    filterParameter = new();
    hasAccountingStatus = new HashSet<AccountingStatusModel>();
    dateRange = new DateRange(DateTime.Now, DateTime.Now);
    periodRange = new DateRange(DateTime.Now, DateTime.Now); 
    Task.Run(async()=> await tableVariable.ReloadServerData());
  }
  private async Task ReloadTable()
  {
    filterParameter = new FilterParameter();
    await tableVariable.ReloadServerData();
  }
  private bool EnableClearButton()
  {
      if(filterParameter.IsControlNumber) 
        return true;
      if(filterParameter.IsAccountingStatus)
        return true;
      if(filterParameter.IsDate)
        return true;
      if(filterParameter.IsPayee)
        return true;
      if(filterParameter.IsPettyCash)
        return true;
      if(filterParameter.IsPeriodDate)
        return true;
      
      return false;
  }
  private async Task PayeeSearchLookup()
  {
      var parameters = new DialogParameters();
      string dialogTitle = "Payee Look Up";
      parameters.Add("dialogTitle", dialogTitle);
      parameters.Add("buttonText", "Select");
      parameters.Add("color", Color.Success);
      parameters.Add("lookUpType", Enums.LookUpType.Project);
      var options = new DialogOptions()
      {
          CloseButton = false,
          MaxWidth = MaxWidth.Small,
          FullWidth = true,
          NoHeader = false,
          DisableBackdropClick = false
      };
      var resultDialog = await dialogService.Show<Shared.Dialogs.LookUpDialog.GlobalGenericLookup>(dialogTitle, parameters, options).Result;
      if (!resultDialog.Canceled)
      {
          var payee = (Project)resultDialog.Data;
          filterParameter.PayeeId = payee.ProjectId;
          filterParameter.PayeeCategoryId = payee.ProjectCategoryId;
          filterParameter.PayeeName = payee.ProjectName;
          StateHasChanged();
      }
  }
  private async Task CopyTextToClipboard(string ctrlNo)
  {
      await Extensions.CopyTextToClipboard(ctrlNo, snackbarService, JSRuntime);
  }
}