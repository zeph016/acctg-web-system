@page "/liquidation/list"
@page "/liquidation/list/{notificationCNo}"

@inject ILiquidationService liquidationService
@inject NavigationManager navigationManager
@inject ISnackbar SnackbarService
@inject IJSRuntime JSRuntime
@inject IDialogService dialogService
@inject IConfiguration config
@inject IPettyCashService pettyCashService
@inject IAccessLevelService accessLevelService

<div class='page-cont'>
  <div class='drawer-right-min'>
      <MudDrawer Class='pa-1' Open='false' Fixed='false' Anchor='Anchor.Right' Elevation='0' Variant='DrawerVariant.Mini' OpenMiniOnHover='false'>
            <MudTooltip Text='Filter' Arrow Placement='Placement.Left'>
                <MudIconButton OnClick='(() => openFilter = !openFilter)' Icon='@Icons.Material.Filled.FilterList' arial-label='Close Filter' Size='Size.Small' />
            </MudTooltip>
      </MudDrawer>
  </div>

  <MudContainer Class='py-2 pl-2 pr-10  table-toolbar-custom1' Fixed='false' MaxWidth='MaxWidth.ExtraExtraLarge'>
    @if (!dataFetched)
    {
      <SkeletonPageList />
    }
    else
    {
      <MudTable Class='table-style-1 ' ServerData='new Func<TableState, Task<TableData<LiquidationModel>>>(LoadLiquidationFromServer)' 
        Breakpoint='Breakpoint.Sm' Hover FixedHeader FixedFooter Bordered Dense Filter='new Func<LiquidationModel,bool>(FilterItems)' @ref='tableVariable'
          Loading='isLoading'> 
        <ToolBarContent>
          <MudText Typo='Typo.caption'>
            @totalItems
            @(totalItems == 1 ? "item" : "items")
            in total
          </MudText>
          <MudSpacer />
            <MudTooltip Text="Refresh Table" Arrow Placement='Placement.Top'>
                <MudIconButton Class='@(isLoading ? "mudbtnico-rotate":"")' OnClick='ReloadTable' Icon="@Icons.Material.Filled.Refresh" Size="Size.Small" 
                  Color='@(isLoading ? Color.Info : Color.Default)'/>
            </MudTooltip>
            <MudMenu Class='overflow-hidden mudbtnico-rotate-90' StartIcon='@Icons.Material.Filled.MoreVert' AnchorOrigin='Origin.BottomCenter' 
                TransformOrigin='Origin.TopRight' Dense Size='Size.Small' Label='More'>
                <MudMenuItem OnClick='CreateLiquidation'>
                  <div class='d-flex align-center gap-2 '>
                      <MudIcon Icon='@Icons.Material.Filled.Add' Size='Size.Small' />
                      <MudText Typo='Typo.body2'>New Liquidation</MudText>
                  </div>
                </MudMenuItem>
                <MudMenuItem OnClick="(() => openFilter = !openFilter)"  >
                    <div class='d-flex align-center gap-2 '>
                        <MudIcon Icon='@Icons.Material.Filled.FilterList' Size='Size.Small' Color='Color.Dark' />
                        <MudText Typo='Typo.body2' Color='Color.Dark'>Filter</MudText>
                    </div>
                </MudMenuItem>                        
            </MudMenu>
            @if(openFilter)
            {
              <PopoverFilterMainComponent IsOpen='openFilter' CloseFilter='(() => openFilter = !openFilter)' IsMainFilter='true' IsModuleList='true'
                  ModuleName='liquidation-list' ApplyFilter='FilterTable' ResetTableData='ReloadTable'/>
            }
        </ToolBarContent>
        <ColGroup>
          <col style='width: 1%' />
          <col />
          <col />
          <col style='width: 175px'/>
          <col style='width: 20px' />
          <col style='width: 110px' />
          <col style='width: 50px' />
        </ColGroup>
        <HeaderContent>
          <MudTh Class='@(isPinnedCtrlNo ? "th-sticky-left customheader-6":"customheader-6")'>
            <div class='d-flex align-center justify-space-around gap-2'>
               <MudTooltip Text='Pin control number column' Arrow Placement='Placement.Top'>
                <MudIconButton Class='ico-15x15' OnClick='(() => isPinnedCtrlNo = !isPinnedCtrlNo)' Color='@(isPinnedCtrlNo ? Color.Info:Color.Dark)' 
                      Icon='@Icons.Material.Filled.PushPin' Size='Size.Small'/>
                </MudTooltip>
              <MudTableSortLabel SortLabel='SortControlNumber' T='LiquidationModel'
              InitialDirection='SortDirection.None'>
                Control No.
              </MudTableSortLabel>
              <MudTableSortLabel SortLabel='SortDate' T='LiquidationModel' InitialDirection='SortDirection.Descending'>
                Date
              </MudTableSortLabel>
            </div>
          </MudTh>
          <MudTh Class='customheader-6'>Prepared by</MudTh>
          <MudTh Class='customheader-6'>Approver</MudTh>
          <MudTh Class='customheader-6 text-center'>Period</MudTh>
          <MudTh Class='customheader-6 text-center' >Status</MudTh>
          <MudTh Class='@(isPinnedAmt ? "th-sticky-amt customheader-6 text-right":"customheader-6 text-right")'>
            <MudTooltip Text='Pin amount column' Arrow Placement='Placement.Top'>
              <MudIconButton Class='ico-15x15' OnClick='(() => isPinnedAmt = !isPinnedAmt)' Color='@(isPinnedAmt ? Color.Info:Color.Dark)' 
                Icon='@Icons.Material.Filled.PushPin' Size='Size.Small'/>
            </MudTooltip>
            Amount
          </MudTh>
          <MudTh Class='@(isPinnedAmt ? "th-sticky-action customheader-6":"customheader-6")'>Actions</MudTh>
        </HeaderContent>
        <RowTemplate>
          <MudTd Class='@(isPinnedCtrlNo ? "col-sticky-left":"")' DataLabel="Control Number">
            <div class='d-flex align-center'>
              <MudChip Class='mudchip-tbl' Text='@context.ControlNumber' OnClick='(() => CopyTextToClipboard(context.ControlNumber))' 
                Variant='Variant.Outlined' Color='Color.Error' Size='Size.Small'/>
              <MudChip Class='mudchip-tbl' Text='@Convert.ToDateTime(context.LiquidationDate).ToShortDateString()' Icon='@Icons.Material.Filled.CalendarMonth'  
                Variant='Variant.Outlined' Size='Size.Small' Color='Color.Default' />
            </div>
          </MudTd>
          <MudTd>
             <div class='dynamic-div-1'>
                <small>@context.PreparedByName</small>
             </div>
          </MudTd>
          <MudTd>
            <div class='dynamic-div-1'>
              <small>@context.ApprovedByName</small>
            </div>
          </MudTd>
          <MudTd>
            <DateRangeCardComponent dateFrom='@context.PeriodFrom.Date' dateTo='@context.PeriodTo.Date'/>
          </MudTd>
          <MudTd Class='@(isPinnedAmt ? "br-none":"")'>
              <MudChip Class='chip-radius-5 font-bold font10' Size='Size.Small' Style='@Extensions.BorderColor(context.StatusId)' Variant='Variant.Outlined'>
                @context.StatusName
              </MudChip>
          </MudTd>
          <MudTd Class='@(isPinnedAmt ? "col-sticky-amt":"")' >
            <div class='tooltipw100'>
                <MudTooltip Class='flex-1' Text='@(Extensions.GetEnumDescription(Enums.BankCurrency.PhilippinePeso) + " " + context.TotalAmount.ToString("N2"))' 
                    Arrow Placement='Placement.Top' Color='@(context.TotalAmount > 0 ? Color.Success:Color.Error)'>
                    <div class='amount-container'>
                        <small class='@(context.TotalAmount > 0 ? "font-bold color-green":"font-bold color-red")'>
                            @Extensions.GetEnumDescription(Enums.BankCurrency.PhilippinePeso)
                        </small>
                        <MudSpacer />
                        <small class='@(context.TotalAmount > 0 ? "txt-green":"txt-red")'>
                            @context.TotalAmount.ToString("N2")
                        </small>
                    </div>
                </MudTooltip>
            </div>
          </MudTd>
          <MudTd Class='@(isPinnedAmt ? "col-sticky-action text-center":"text-center")'>
            <MudMenu Class='mudbtnico-rotate-90' Icon='@Icons.Material.Filled.MoreVert' AnchorOrigin='Origin.BottomLeft' 
              TransformOrigin='Origin.TopRight' Dense Size='Size.Small'>
              <LiquidationMenuComponent
                  ModuleName="liquidation"
                  LiquidationModel="context"
                  PreviewClick='(() => PreviewLiquidation(context))'
                  EditLiquidationClick='(()=> EditLiquidation(context))'
                  ApproveLiquidationClick='(()=> ApproveLiquidation(context))'
                  EnableEditApproved ='EnableEditApproved(context)'
                  CancelLiquidationClick="(()=> CancelLiquidation(context))"
                  VoidLiquidationClick="(()=> VoidLiquidation(context))"
                  AccountingStatus="AccountingStatus(Enums.ActionMode.Approve).Id == context.StatusId"
                  AuditTrailClick="(()=> ViewAuditTrail(context))"
                  ShowReportClick="( ()=> context.ShowReport = ShowReport(context.ShowReport, context) )"
              />
                @* <MudMenuItem OnClick='(() => PreviewLiquidation(context))'>
                    <div class='d-flex align-center gap-2'>
                        <MudIcon Icon='@Icons.Material.Filled.Preview' Size='Size.Small' Color='Color.Dark'/>
                        <MudText Typo='Typo.body2'>View</MudText>
                    </div>
                </MudMenuItem>
                @if(!EnableEditApproved(context))
                {
                  <MudMenuItem OnClick='(()=> EditLiquidation(context))' Disabled='EnableEditApproved(context)'>
                    <a class='d-flex align-center gap-2 '>
                      <MudIcon Icon='@Icons.Material.Filled.Edit' Size='Size.Small'/>
                      <MudText Typo='Typo.body2'>Edit</MudText>
                    </a>
                  </MudMenuItem>
                  <MudMenuItem OnClick='(()=> ApproveLiquidation(context))'>
                    <div class='d-flex align-center gap-2 '>
                      <MudIcon Icon='@Icons.Material.Filled.CheckCircle' Size='Size.Small'/>
                      <MudText Typo='Typo.body2'>Approve</MudText>
                    </div>
                  </MudMenuItem>
                  <MudMenuItem OnClick='(()=> CancelLiquidation(context))'>
                    <div class='d-flex align-center gap-2 '>
                      <MudIcon Icon='@Icons.Material.Filled.Cancel' Size='Size.Small'/>
                      <MudText Typo='Typo.body2'>Cancel</MudText>
                    </div>
                  </MudMenuItem>
                }
                else 
                if(AccountingStatus(Enums.ActionMode.Approve).Id == context.StatusId)
                {
                  <MudMenuItem OnClick='(()=> VoidLiquidation(context))'>
                    <a class='d-flex align-center gap-2 '>
                      <MudIcon Icon='@Icons.Material.Filled.CancelPresentation' Size='Size.Small'/>
                      <MudText Typo='Typo.body2'>Generated (Void)</MudText>
                    </a>
                  </MudMenuItem>
                }
                <MudMenuItem OnClick='(()=> ViewAuditTrail(context))'>
                  <a class='d-flex align-center gap-2 '>
                    <MudIcon Icon='@Icons.Material.Filled.ListAlt' Size='Size.Small' />
                    <MudText Typo='Typo.body2'>Audit Trail</MudText>
                  </a>
                </MudMenuItem>
                <MudMenuItem OnClick='(()=> context.ShowReport = ShowReport(context.ShowReport, context))'>
                    <div class='d-flex align-center gap-2 '>
                        <MudIcon Icon='@Icons.Material.Filled.PictureAsPdf' Size='Size.Small' />
                        <MudText Typo='Typo.body2'> @(context.ShowReport ? "Close" : "Show") Report</MudText>
                    </div>
                </MudMenuItem> *@
            </MudMenu>
          </MudTd>
        </RowTemplate>
        <NoRecordsContent>
            <MudText Class='txt-uppercase font-bold font12' Color='Color.Error'>@noRecordsStr</MudText>
        </NoRecordsContent>
        <ChildRowContent>
          <MudTr>
              <td colspan="8">
                <div class='rpt-container-trtd' style='@(context.ShowReport ? "max-height:4000px" : "max-height:0px")'>
                  <div class='rpt-container-listview'>
                    <MudCard Class='rpt-container-listview__document-cont px-2' Elevation='1'>
                      <div class='rpt-container-listview__iframe-cont'>
                        @if(context.ShowReport)
                        {
                          @if(string.IsNullOrWhiteSpace(pdfContent))
                          {
                            <MudProgressCircular Color="Color.Primary" Indeterminate Size='Size.Large' />
                          }
                          else
                          {
                            <iframe class='rpt-container-listview__iframe-scaled' src='@pdfContent' />
                          }
                          <ReportControls 
                            Exporting='isExporting'
                            AllowExportEXCEL='true'
                            ExportToEXCEL='ExportToExcel'
                            IsCloseOnly='true'
                            ConfirmStr='Close Report' 
                            BackEventClick='(() => context.ShowReport = !context.ShowReport)' />
                        }
                      </div>
                    </MudCard>
                  </div>
                </div>
              </td>
            </MudTr>
        </ChildRowContent>
        <PagerContent>
          <FooterPaginationComponent
                FilterParameter='filterParameter'
                NextAndPreviousPage='( async (args)=> await NextAndPreviousPage((bool) args.Item1, (bool) args.Item2))'
                OnPageSizeChanged='( async (int s)=> await PageSizeChanged(s) )'
                TotalRow='TotalRow'              />
            @* <MudTablePager PageSizeOptions="GlobalVariable.pageSize" /> *@
        </PagerContent>
        </MudTable>
    }
  </MudContainer>
</div>

@code{
  [Parameter] public string notificationCNo { get; set; } = string.Empty;
  private bool dataFetched, openFilter, isLoading, isPinnedCtrlNo = true, isPinnedAmt = true;
  private string pdfContent = default!;
  private string searchTerm = string.Empty, noRecordsStr = string.Empty;
  private int totalItems;
  private FilterParameter filterParameter = new();
  private IEnumerable<LiquidationModel>? pageData;
  private MudTable<LiquidationModel> tableVariable = new MudTable<LiquidationModel>();
  private DateRange dateRange = new DateRange(DateTime.Now.Date, DateTime.Now.Date);
  private DateRange periodRange = new DateRange(DateTime.Now.Date, DateTime.Now.Date);
  private AccountingStatusModel selectedStatus = new();
  private IEnumerable<AccountingStatusModel> hasAccountingStatus {get; set;} = new HashSet<AccountingStatusModel>();
  private List<AccountingStatusModel> statusList = new();
  private List<PettyCashModel> pettyCashList = new();
  private int TotalRow = 0;
  private bool isExporting = false;
  private LiquidationModel LiquidationToExport = new();
  protected override async Task OnInitializedAsync()
  {
    GlobalClass.pageTitle = "Liquidation List";
    while (GlobalClass.currentUserAccount == null || string.IsNullOrEmpty(GlobalClass.token) 
    || GlobalClassList.accountingStatusList == null)
       await Task.Delay(1);
    await LiquidationListRowCount();
    Task t = Common.Privileges.GetAllowedFunctions(accessLevelService, Enums.AISModules.LiquidationList);
    await t;
    if(t.Status == TaskStatus.RanToCompletion)
    {
        filterParameter = new();
        GlobalVariable.filterParameter = new();
        Extensions.ViewRestrictions(filterParameter);
        filterParameter = GlobalVariable.filterParameter;
        filterParameter.IsPettyCash = false;
        filterParameter.PageSize = 15;
        filterParameter.PageNo = 0;
    }
    //SignalRHubConnection();
    CompletedFetch();

    statusList = GlobalClassList.accountingStatusList;
  }
  void CompletedFetch()
  {
    dataFetched = true;
    StateHasChanged();
  }
  protected override void OnAfterRender(bool firstRender)
  {
      if(firstRender)
      {

      }
  }
  private async void EditLiquidation(LiquidationModel liquidation)
  {
    GlobalClass.liquidation = await Task.Run(()=> liquidation);
    navigationManager.NavigateTo($"/liquidation");
  }
  private bool ShowReport(bool isShow, LiquidationModel liquidationModel)
  {
    Task.Run(()=> LoadLiquidationDetails(liquidationModel));
    return isShow = !isShow;
  }
  private async Task LoadLiquidationDetails(LiquidationModel liquidationDetail)
  {
      Task<LiquidationModel> t = LoadLiquidatonDetails(liquidationDetail);
      await t;
      if(t.Status == TaskStatus.RanToCompletion)
      {
        LiquidationToExport = t.Result;
        pdfContent = await liquidationService.PrintSaveLiquidation(t.Result);
        StateHasChanged();
      }
  }
  private async Task<LiquidationModel> LoadLiquidatonDetails(LiquidationModel model)
  {
    var liquidationDetails = await liquidationService.LiquidationDetails(model.Id, GlobalClass.token);
    model.LiquidationDetails = liquidationDetails.Select(details=> new LiquidationDetailModel()
    {
      Id = details.Id,
      PettyCashId = details.PettyCashId,
      ControlNumber = details.ControlNumber,
      PayeeId = details.PayeeId,
      RequestDate = details.RequestDate,
      PayeeName = details.PayeeName,
      PayeeCategoryId = details.PayeeCategoryId,
      Particular = details.Particular,
      RequestedById = details.RequestedById,
      RequestedByName = details.RequestedByName,
      LiquidationId = model.Id,
      IsActive = details.IsActive,
      StatusId = details.StatusId,
      StatusName = details.StatusName,
      ExpenseLineId = details.ExpenseLineId,
      ExpenseName = details.ExpenseName,
      ChargingCategoryId = details.ChargingCategoryId,
      ChargingId = details.ChargingId,
      ChargingName = details.ChargingName,
      Amount = details.Amount,
      ActualAmount = details.ActualAmount,
      Remarks = details.Remarks

      }).ToList();
      return model;
  }
  private async Task SendNotify(LiquidationModel model, Enums.ActionMode actionMode)
  {
    if( GlobalVariable.AMSHubConnection != null)
    {
        await Task.Run( async ()=> await GlobalVariable.AMSHubConnection.InvokeAsync("SaveLiquidation", model)).
        ContinueWith( async(t) => 
        {   
            if(t.Status == TaskStatus.RanToCompletion) 
            {  
                NotificationModel notification = new();
                notification.SenderId = GlobalClass.currentUserAccount.EmployeeId;
                notification.StatusAction = actionMode;
                notification.ModuleName = "Liquidation";
                notification.ControlNumber = model.ControlNumber;
                notification.PreparedById = model.PreparedById;
                notification.DateNotify = DateTime.Now;
                await Extensions.SendNotification(notification); 
            }
        });
    }
  }
  private async Task VoidLiquidation(LiquidationModel liquidation)
  {
    if(await PromptMessage(Enums.ActionMode.Void, liquidation))
    {
      liquidation.StatusId = GlobalClassList.accountingStatusList.Where(x => x.StatusEnumCategoryId == Enums.AccountingStatusEnumCategory.LG).Select(x => x.Id).FirstOrDefault();
      liquidation.Activity = "Activity: Update liquidation status to generated (void); Remarks: "+GlobalVariable.PromptRemarks;
      liquidation.UserId = GlobalClass.currentUserAccount.EmployeeId;
      var updatedStatus = await liquidationService.UpdateLiquidationStatus(liquidation, GlobalClass.token);
      Extensions.ShowAlert("Liquidation voided", Variant.Filled, SnackbarService, Severity.Info);
      await SendNotify(updatedStatus,Enums.ActionMode.Void);
    }
    else
      Extensions.ShowAlertV2("Action cancelled.", Variant.Filled, SnackbarService, Severity.Normal, Icons.Material.Filled.Cancel, Defaults.Classes.Position.BottomCenter);
  }
  private async Task ApproveLiquidation(LiquidationModel liquidation)
  {
    if (await PromptMessage(Enums.ActionMode.Approve, liquidation))
    {
      liquidation.StatusId = GlobalClassList.accountingStatusList.Where(x => x.StatusEnumCategoryId == Enums.AccountingStatusEnumCategory.LA).Select(x => x.Id).FirstOrDefault();
      liquidation.Activity = "Approved Status";
      liquidation.UserId = GlobalClass.currentUserAccount.EmployeeId;
      var updatedStatus = await liquidationService.UpdateLiquidationStatus(liquidation, GlobalClass.token);
      Extensions.ShowAlert("Liquidation approved", Variant.Filled, SnackbarService, Severity.Success);
      await SendNotify(updatedStatus,Enums.ActionMode.Approve);
    }
    else
      Extensions.ShowAlertV2("Action cancelled.", Variant.Filled, SnackbarService, Severity.Normal, Icons.Material.Filled.Cancel, Defaults.Classes.Position.BottomCenter);

  }
  private async Task CancelLiquidation(LiquidationModel liquidation)
  {
    if (await PromptMessage(Enums.ActionMode.Cancel, liquidation))
    {
      //Revert status of PC to Received due to cancelation of liquidation
      var liquidationDetails = await liquidationService.LiquidationDetails(liquidation.Id, GlobalClass.token);
      var acctgStatus = GlobalClassList.accountingStatusList.Where(x => x.StatusEnumCategoryId == Enums.AccountingStatusEnumCategory.PCR).FirstOrDefault();
      liquidationDetails.ForEach( async (lDetails) => {
        PettyCashModel newDetails = new();
        newDetails = (await pettyCashService.LoadPettyCashList(new FilterParameter()
                      {
                         isActive = true, 
                         PageNo = 0, 
                         PageSize = 15, 
                         IsControlNumber = true,
                         ControlNumber = lDetails.ControlNumber
                      }, GlobalClass.token)).LastOrDefault()?? new();//since query using LIKE operator and descending order
        //newDetails = pettyCashList.Where( pc => lDetails.ControlNumber == pc.ControlNumber).FirstOrDefault()?? new();
        //Audit Trail
        newDetails.Activity = "Liquidation of pettycash has been cancelled.";
        newDetails.UserId = GlobalClass.currentUserAccount.EmployeeId;
        //Status Received
        newDetails.StatusName = acctgStatus.StatusName;
        newDetails.StatusId = (Int64)acctgStatus.Id;
        newDetails.StatusEnumCategoryId = acctgStatus.StatusEnumCategoryId;
        await pettyCashService.UpdatePettyCash(newDetails,GlobalClass.token);
      });

      liquidation.StatusId = GlobalClassList.accountingStatusList.Where(x => x.StatusEnumCategoryId == Enums.AccountingStatusEnumCategory.LC).Select(x => x.Id).FirstOrDefault();
      liquidation.Activity = "Cancelled Status";
      liquidation.UserId = GlobalClass.currentUserAccount.EmployeeId;
      var cancelLiquidation = await liquidationService.UpdateLiquidationStatus(liquidation, GlobalClass.token);
      GlobalClassList.liquidations = GlobalClassList.liquidations.Where(x => x.StatusId != liquidation.StatusId).OrderByDescending(x => x.ControlNumber).ToList();
      Extensions.ShowAlert("Liquidation cancelled", Variant.Filled, SnackbarService, Severity.Info);
      await SendNotify(cancelLiquidation,Enums.ActionMode.Cancel);
    }
    else
      Extensions.ShowAlertV2("Action cancelled.", Variant.Filled, SnackbarService, Severity.Normal, Icons.Material.Filled.Cancel, Defaults.Classes.Position.BottomCenter);
  }
  private bool EnableEditApproved(LiquidationModel liquidation)
  {
    var accountingStatusList = new AccountingStatusModel();
    accountingStatusList = GlobalClassList.accountingStatusList.Where(x => x.Id == liquidation.StatusId).FirstOrDefault();
    return accountingStatusList?.StatusEnumCategoryId == Enums.AccountingStatusEnumCategory.LA;
  }
  private async Task<TableData<LiquidationModel>> LoadLiquidationFromServer(TableState tableState)
  {
    isLoading = true;
    if(!String.IsNullOrEmpty(notificationCNo))
    {
        filterParameter.IsControlNumber = true;
        filterParameter.ControlNumber = notificationCNo;
    }
    IEnumerable<LiquidationModel> data = await liquidationService.LiquidationList(filterParameter, GlobalClass.token);
    switch (tableState.SortLabel)
    {
      case "SortControlNumber":
        data = data.OrderByDirection(tableState.SortDirection, x=>x.Id);
        break;
      case "SortDate":
        data = data.OrderByDirection(tableState.SortDirection, x=>x.LiquidationDate);
        break;
    }

    GlobalClassList.liquidations = data.ToList();
    noRecordsStr = (data.Count() == 0 ? "No records found":string.Empty);
    pageData = GlobalClassList.liquidations.Skip(tableState.Page * GlobalVariable.PageSize).Take(GlobalVariable.PageSize).ToArray();
    totalItems = GlobalClassList.liquidations.Count();
    isLoading = !isLoading;
    return new TableData<LiquidationModel>()
    {
      TotalItems = totalItems,
      Items = pageData
    };
  }
  private async Task FilterTable()
  {
    filterParameter = GlobalVariable.filterParameter;
    filterParameter.PageSize = GlobalVariable.PageSize;
    filterParameter.PageNo = 0;
    filterParameter.ControlNumber = filterParameter.ControlNumber.Replace(" ","");//avoid white space when searching CN
    await tableVariable.ReloadServerData();
  }
  private string AccountingStatus(List<string> selectedStatus)
  {
    var status = "";
    foreach (var item in hasAccountingStatus)
    {
     status = string.Join(", ", hasAccountingStatus.Select(x => x.StatusName));      
    }
    return $"{status}";
  }

  private async Task<bool> PromptMessage(Enums.ActionMode actionMode,LiquidationModel model)
  {
    bool isNotCancel;
    var parameters = new DialogParameters();
    string contentText = "Liquidation ";
    string dialogTitle = actionMode.ToString();
    parameters.Add("actionMode", actionMode);
    parameters.Add("dialogTitle", dialogTitle);
    parameters.Add("contentText", contentText);
    parameters.Add("controlNumber", model.ControlNumber);
    parameters.Add("isVoid", actionMode == Enums.ActionMode.Void ? true : false);
    var options = new DialogOptions() { CloseButton = false, MaxWidth = MaxWidth.ExtraSmall, FullWidth = true, NoHeader = false, DisableBackdropClick = true };
    var resultDialog = await dialogService.Show<Shared.Dialogs.GenericPromptDialogs.GenericPrompt>(dialogTitle, parameters, options).Result;
    if (!resultDialog.Canceled)
        isNotCancel = true;
    else
        isNotCancel = false;

    StateHasChanged();

    return isNotCancel;
  }
  private bool FilterItems(LiquidationModel items)
  {
    if (string.IsNullOrEmpty(searchTerm))
        return true;
    if (items.ControlNumber.Contains(searchTerm, StringComparison.InvariantCultureIgnoreCase))
        return true;
    if (items.StatusName.Contains(searchTerm, StringComparison.InvariantCultureIgnoreCase))
        return true;
    return true;
  }
  private void SignalRHubConnection()
  {
      try
      {
        if(GlobalVariable.AMSHubConnection != null)
          GlobalVariable.AMSHubConnection.On<LiquidationModel>("SaveLiquidation", (_liquidation)=> {
          filterParameter.PageSize = GlobalVariable.PageSize;
          filterParameter.PageNo = 0;
          tableVariable.ReloadServerData();
          
          StateHasChanged();

          });
      }
      catch (System.Exception ex)
      {
         Console.WriteLine(ex.Message);
         throw;
      }
  }
  private void ViewAuditTrail(LiquidationModel liquidation)
  {
    GlobalClass.liquidation = liquidation;
    navigationManager.NavigateTo($"/liquidation/audit");
  }
  private AccountingStatusModel AccountingStatus(Enums.ActionMode actionMode)
  {
      var acctgStatus = new AccountingStatusModel();
      if(actionMode == Enums.ActionMode.Approve)
        acctgStatus = GlobalClassList.accountingStatusList.Where(x=>x.StatusEnumCategoryId == Enums.AccountingStatusEnumCategory.LA).FirstOrDefault();
      else if (actionMode == Enums.ActionMode.Cancel)
        acctgStatus = GlobalClassList.accountingStatusList.Where(x=>x.StatusEnumCategoryId == Enums.AccountingStatusEnumCategory.LC).FirstOrDefault();
      else if(actionMode == Enums.ActionMode.Void)
        acctgStatus = GlobalClassList.accountingStatusList.Where(x=>x.StatusEnumCategoryId == Enums.AccountingStatusEnumCategory.LG).FirstOrDefault();
      return acctgStatus?? new();
  }
  private void ClearSearch()
  {
    filterParameter = new();
    hasAccountingStatus = new HashSet<AccountingStatusModel>();
    dateRange = new DateRange(DateTime.Now, DateTime.Now);
    periodRange = new DateRange(DateTime.Now, DateTime.Now); 
    Task.Run(async()=> await tableVariable.ReloadServerData());
  }
  private async Task ReloadTable()
  {        
    navigationManager.NavigateTo($"/liquidation/list");
    await LiquidationListRowCount();
    filterParameter = new FilterParameter();
    GlobalVariable.filterParameter = new();
    Extensions.ViewRestrictions(filterParameter);
    filterParameter.IsPettyCash = false;
    filterParameter = GlobalVariable.filterParameter;
    filterParameter.PageSize = GlobalVariable.PageSize;
    filterParameter.PageNo = 0;
    await tableVariable.ReloadServerData();
  }
  private bool EnableClearButton()
  {
      if(filterParameter.IsControlNumber) 
        return true;
      if(filterParameter.IsAccountingStatus)
        return true;
      if(filterParameter.IsDate)
        return true;
      if(filterParameter.IsPayee)
        return true;
      if(filterParameter.IsPettyCash)
        return true;
      if(filterParameter.IsPeriodDate)
        return true;
      
      return false;
  }
  private async Task PayeeSearchLookup()
  {
      var parameters = new DialogParameters();
      string dialogTitle = "Payee Look Up";
      parameters.Add("dialogTitle", dialogTitle);
      parameters.Add("buttonText", "Select");
      parameters.Add("color", Color.Success);
      parameters.Add("lookUpType", Enums.LookUpType.Project);
      var options = new DialogOptions()
      {
          CloseButton = false,
          MaxWidth = MaxWidth.Small,
          FullWidth = true,
          NoHeader = false,
          DisableBackdropClick = false
      };
      var resultDialog = await dialogService.Show<Shared.Dialogs.LookUpDialog.GlobalGenericLookup>(dialogTitle, parameters, options).Result;
      if (!resultDialog.Canceled)
      {
          var payee = (Project)resultDialog.Data;
          filterParameter.PayeeId = payee.ProjectId;
          filterParameter.PayeeCategoryId = payee.ProjectCategoryId;
          filterParameter.PayeeName = payee.ProjectName;
          StateHasChanged();
      }
  }
  private async Task CopyTextToClipboard(string ctrlNo) => await Extensions.CopyTextToClipboard(ctrlNo, SnackbarService, JSRuntime);

  private async Task PreviewLiquidation(LiquidationModel model)
  {
      var parameters = new DialogParameters();
      parameters.Add("DialogTitle", "Liquidation");
      parameters.Add("Liquidation", model);
      var options = new DialogOptions() { CloseButton = false, MaxWidth = MaxWidth.Small, FullWidth = true, NoHeader = false, DisableBackdropClick = false };
      var resultDialog = await dialogService.Show<Shared.Dialogs.PreviewInformationDialogs.PreviewLiquidationDialog>("", parameters, options).Result;
  }
  private async Task NextAndPreviousPage(bool next, bool skipNext)
  {
    if(skipNext)
    {
      if(next)
      {
        //Waiting for row count to be calculated
        @* double lastPage = Math.Floor(Convert.ToDouble(GlobalVariable.LastPage) / Convert.ToDouble(GlobalVariable.PageSize));
        int remainder = ((Convert.ToDouble(GlobalVariable.LastPage)) % Convert.ToDouble(GlobalVariable.PageSize)) <= 0? 0 : 1;
        filterParameter.PageNo = Convert.ToInt32(lastPage+ remainder);//Last Page *@
        filterParameter.PageNo++;
      }
      else 
        filterParameter.PageNo = 0;
    } else {
      if(next)
        filterParameter.PageNo++;
      else 
        filterParameter.PageNo--;
    }
    await tableVariable.ReloadServerData();
  }

     private void CreateLiquidation(){
        if(Common.Privileges.IsPrivilegeModule(Enums.AISModules.LiquidationEntry))
       {
           GlobalClass.liquidation = new();
          navigationManager.NavigateTo($"/liquidation");
        } else {
           Extensions.ShowAlert("Account has been restricted to create liquidation.", Variant.Filled, SnackbarService, Severity.Error);
       } 
        
    }
    private async Task LiquidationListRowCount()
    {
      int count = TotalRow = await liquidationService.LiquidationListRowCount(new FilterParameter(){ isActive = true, PageSize = 2000000 , PageNo =0 },GlobalClass.token);
      if(count % GlobalVariable.PageSize == 0)
        GlobalVariable.LastPage = (Convert.ToInt32(Math.Floor(Convert.ToDecimal(count) / Convert.ToDecimal(GlobalVariable.PageSize)))) - 1;
      else
        GlobalVariable.LastPage = Convert.ToInt32(Math.Floor(Convert.ToDecimal(count) / Convert.ToDecimal(GlobalVariable.PageSize)));
    }
    private async Task PageSizeChanged(int s)
    {
      filterParameter.PageSize = GlobalVariable.PageSize = s; 
      await tableVariable.ReloadServerData();
      await LiquidationListRowCount();
    }
    private async Task ExportToExcel()
    {
      isExporting = true;
      Task<byte[]> t1 = liquidationService.LiquidationReportGetExcel(LiquidationToExport, GlobalClass.token);
      await t1;
      if(t1.Status == TaskStatus.RanToCompletion)
      {
          using var streamRef = new DotNetStreamReference(new MemoryStream(t1.Result), true);
          await JSRuntime.InvokeVoidAsync("downloadFileFromStream", "Liquidation.xlsx", streamRef);
      }
      isExporting = false;
    }
}