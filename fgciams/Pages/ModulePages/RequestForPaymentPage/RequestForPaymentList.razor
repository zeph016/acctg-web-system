@page "/requestpayment/list"

@inject IRequestForPaymentService requestForPaymentService
@inject NavigationManager navigationManager
@inject IDialogService dialogService
@inject ISnackbar snackBar

<div class='page-cont'>
    <div class='drawer-right'>
        <MudDrawer Class='pa-1' @bind-Open='openSideFilter' Fixed='false' Anchor='Anchor.Right' Elevation='0' Variant='DrawerVariant.Mini' OpenMiniOnHover='false'>
            <div class="drawer-right__filtercont">
                <div class="icon-area d-flex align-center">
                    <MudIconButton OnClick='OpenSideFilter' Icon="@Icons.Filled.FilterList" aria-label="Filter" Size='Size.Medium' />
                </div>
                <div class="filter-title d-flex align-center">
                    <p class='title875'>Filter</p>
                    <MudSpacer />
                    <MudIconButton OnClick='OpenSideFilter' Icon="@Icons.Filled.Close" aria-label="Close Filter" Size='Size.Medium' />
                </div>
                <div class="filter-content d-flex flex-column pl-4 pr-4 gap-1 @visibility">
                  <div class='d-flex align-center gap-2 @visibility'>
                    <MudCheckBox Class='pt-1' @bind-Checked='filterParameter.IsControlNumber' Dense Size='Size.Small' />
                    <MudTextField Class='txtfield-75' @bind-Value='filterParameter.ControlNumber' Placeholder='Control No.'
                    Immediate Clearable='true' Variant='Variant.Outlined' Disabled=!filterParameter.IsControlNumber/>
                  </div>
                  <div class='d-flex align-center gap-2 @visibility'>
                    <MudCheckBox Class='pt-1' @bind-Checked='filterParameter.IsPOBillingControlNumber' Dense Size='Size.Small' />
                    <MudTextField Class='txtfield-75' @bind-Value='filterParameter.POBillingControlNumber' Placeholder='PO Billing Control No.'
                    Clearable='true' Variant='Variant.Outlined' Disabled=!filterParameter.IsPOBillingControlNumber/>
                  </div>
                  <div class='d-flex align-center gap-2 @visibility'>
                    <MudCheckBox @bind-Checked='filterParameter.IsPOControlNumber' Dense Size='Size.Small' />
                    <MudTextField Class='txtfield-75' @bind-Value='filterParameter.POControlNumber' Placeholder='PO Control No.'
                    Clearable='true' Variant='Variant.Outlined' Disabled=!filterParameter.IsPOControlNumber/>
                  </div>
                  <div class='d-flex align-center gap-2 @visibility'>
                    <MudCheckBox Class='pt-1' @bind-Checked='filterParameter.IsLiqudationControlNumber' Dense Size='Size.Small' />
                    <MudTextField Class='txtfield-75' @bind-Value='filterParameter.LiquidationControlNumber' Placeholder='Liquidation Control No.'
                    Adornment='Adornment.Start' AdornmentIcon='@Icons.Material.Filled.Search' IconSize='Size.Small'
                    Clearable='true' Variant='Variant.Outlined' Disabled=!filterParameter.IsLiqudationControlNumber/>
                  </div>
                  <div class='d-flex align-center gap-2 @visibility'>
                    <MudCheckBox Class='pt-1' @bind-Checked='filterParameter.IsRequestType' Dense Size='Size.Small' />
                    <MudSelect MultiSelectionTextFunc='@(new Func<List<string>, string>(SelectedRFPDetails))' @bind-SelectedValues=hasRFPDetail Class='selectparent-75 fa-icon-center' @bind-Value='selectedRequestType' 
                      Adornment='Adornment.Start' AdornmentIcon='fa-solid fa-clipboard-check' IconSize='Size.Small' Placeholder='Category' AnchorOrigin='Origin.BottomCenter' 
                      Variant='Variant.Outlined' Clearable='true' MultiSelection=true Disabled=!filterParameter.IsRequestType>
                        @if (dataFetched)
                        {
                            @foreach (var item in GlobalClassList.requestTypes)
                            {
                                <MudSelectItem Class='selectitem-75' Value='item'>@item.TypeName</MudSelectItem>
                            }
                        }
                    </MudSelect>
                  </div>
                  <div class='d-flex align-center gap-2 @visibility'>
                    <MudCheckBox Class='pt-1' @bind-Checked='filterParameter.IsAccountingStatus' Dense Size='Size.Small' />
                    <MudSelect Class='selectparent-75 fa-icon-center' MultiSelectionTextFunc='@(new Func<List<string>, string>(AccountingStatus))' @bind-SelectedValues='hasAccountingStatus' 
                      @bind-Value="selectedStatus" Dense="true" MultiSelection=true Disabled='!filterParameter.IsAccountingStatus' PlaceHolder='Accounting Status'
                      Variant='Variant.Outlined' Adornment='Adornment.Start' AdornmentIcon='@Icons.Material.Filled.Search'>
                      @if(dataFetched)
                      {
                        @foreach (var item in GlobalClassList.accountingStatusList.Where(x=> (int)x.StatusEnumCategoryId == 7 || (int)x.StatusEnumCategoryId == 8 || (int)x.StatusEnumCategoryId == 9))
                        {
                          <MudSelectItem Value="@item">@item.StatusName</MudSelectItem>
                        }
                      }
                    </MudSelect>
                  </div>
                  <div class='d-flex align-center gap-2 @visibility'>
                    <MudCheckBox Class='pt-1' @bind-Checked='filterParameter.IsPayee' Dense Size='Size.Small' />
                    <MudTextField Class='txtfield-75' @onclick='PayeeSearchLookup' @bind-Value='filterParameter.PayeeName' Placeholder='Payee' 
                    ReadOnly Disabled='!filterParameter.IsPayee' Clearable Variant='Variant.Outlined' />
                  </div>
                  <div class='d-flex align-center gap-2 @visibility'>
                    <MudCheckBox Class='pt-1' @bind-Checked='filterParameter.IsDate' Dense Size='Size.Small' />
                    <MudDateRangePicker Class='txtfield-75' @bind-DateRange='dateRange' Disabled='!filterParameter.IsDate' Variant='Variant.Outlined' ></MudDateRangePicker>
                  </div>
                  <div class='d-flex align-center justify-end'>
                    <MudButton Class='wspace-nowrap' OnClick='ClearSearch' Variant='Variant.Filled' Color='Color.Secondary' Disabled=!EnableClearButton()>Clear Filter</MudButton>
                    &nbsp;
                    <MudButton Class='wspace-nowrap' OnClick='FilteredItem' Variant='Variant.Filled' Color='Color.Secondary'>Apply Filter</MudButton>
                  </div>
                </div>
            </div>
        </MudDrawer>
    </div>
    <MudContainer Class='requesttypelist' Fixed='false' MaxWidth='MaxWidth.ExtraExtraLarge'>
        @if (!dataFetched)
        {
            <MudPaper Class='ma-1 pa-1' style="height: calc(100vh - 125px);">
                <MudSkeleton SkeletonType='SkeletonType.Rectangle' Height='calc(100vh - 135px)' Animation='Animation.Wave' />
            </MudPaper>
        }
        else
        {
            <MudTable Class='configtables' ServerData='new Func<TableState, Task<TableData<RequestForPaymentModel>>>(LoadRFPFromServer)' Hover="true"
            Breakpoint='Breakpoint.Sm' FixedHeader='true' FixedFooter='true' Bordered='true' Dense='true'
            RowsPerPage='30' Filter='new Func<RequestForPaymentModel,bool>(FilterItems)' @ref='tableVariable'>
                <ToolBarContent>
                    <MudText Typo='Typo.caption'>
                        @totalItems
                        @(totalItems == 1 ? "item" : "items")
                        in Total
                    </MudText>
                    <MudSpacer />
                    <MudTooltip Text="Refresh Table">
                        <MudIconButton Icon="@Icons.Filled.Refresh" Size="Size.Small" OnClick='ClearSearch' ></MudIconButton>
                    </MudTooltip>
                    <MudMenu StartIcon='@Icons.Filled.MoreVert' AnchorOrigin='Origin.TopLeft' ActivationEvent='MouseEvent.MouseOver'
                             TransformOrigin='Origin.TopRight' Dense='true' Size='Size.Small' Label='More'>
                       @if(AccessLevelAddmin() || AccessLevelRequestors())
                       {
                        <MudMenuItem OnClick='(()=> AddNewRFP())'>
                            <div class='d-flex align-center gap-2 menu-grow-anim'>
                                <MudIcon Icon='@Icons.Filled.Add' Size='Size.Small' />
                                <MudText Typo='Typo.body2'>Add</MudText>
                            </div>
                        </MudMenuItem>                        
                       }
                    </MudMenu>
                </ToolBarContent>
                <ColGroup>
                    <col style='width: 1%' />
                    <col />
                    <col />
                    <col style='width: 1%' />
                    <col style='width: 20px' />
                </ColGroup>
                <HeaderContent>
                    <MudTh Class='customheader-1 text-center'>
                        <div class='d-flex align-center justify-start'>
                            <MudTableSortLabel Class='lbl75' SortLabel='SortControlNumber' T='RequestForPaymentModel'
                            InitialDirection='SortDirection.None'>
                                Control No.
                            </MudTableSortLabel>
                            <MudSpacer />
                            <MudTableSortLabel Class='lbl75' SortLabel='SortDate' T='RequestForPaymentModel'
                            InitialDirection='SortDirection.Descending'>
                                Date
                            </MudTableSortLabel>
                        </div>
                    </MudTh>
                    <MudTh Class='customheader-1'>Payee</MudTh>
                    <MudTh Class='customheader-1'>Requestor</MudTh>
                    <MudTh Class='customheader-1'></MudTh>
                    <MudTh Class='customheader-1 text-center pa-2'>Actions</MudTh>
                </HeaderContent>
                <RowTemplate>
                    <MudTd>
                        <div class='d-flex align-center'>
                            <MudChip Class='chip-radius-5 txt-uppercase font-bold font10' Color='Color.Error' Size='Size.Small'>
                                @context.ControlNumber
                            </MudChip>
                            <MudChip Class='chip-radius-5 font-bold font10' Variant='Variant.Text' Icon='@Icons.Filled.CalendarMonth' Color='Color.Dark' Size='Size.Small'>
                                @Convert.ToDateTime(context.RequestDate).ToShortDateString()
                            </MudChip>
                         </div>
                    </MudTd>
                    <MudTd Class='wspace-nowrap font12'>@context.PayeeName</MudTd>
                    <MudTd Class='wspace-nowrap font12'>@context.RequestedByName</MudTd>
                    <MudTd Class='text-left'>
                        <div class='d-flex align-center justify-start'>
                            <MudChip Class='chip-radius-5 font-bold font10' Color='Color.Dark' Variant='Variant.Text' Size='Size.Small'>
                                @context.RFPDetailTypeId
                            </MudChip>
                                <MudChip Class='chip-radius-5 font-bold font10' Color='Color.Dark' Variant='Variant.Text' Size='Size.Small'>
                                @context.RequestTypeName
                            </MudChip>
                            <MudChip Class='chip-radius-5 font-bold font10' Size='Size.Small' Style='@Extensions.GetAcctgStatusColor(context.AccountingStatusId)'>
                                @context.AccountingStaus
                            </MudChip>
                        </div>
                    </MudTd>
                    <MudTd Class='text-center pa-2'>
                        <MudMenu Icon="@Icons.Material.Filled.MoreVert" AnchorOrigin='Origin.TopLeft' ActivationEvent='MouseEvent.MouseOver'
                        TransformOrigin='Origin.TopRight' Size='Size.Small' Dense='true'>
                          @if((!EnableEditApproved(context) && AccessLevelAddmin()) 
                            || (!EnableEditApproved(context) && AccessLevelRequestors()))
                            {
                              <MudMenuItem OnClick='(() => EditRFP(context))'>
                                <div class='d-flex align-center gap-2'>
                                    <MudIcon Icon='@Icons.Filled.Edit' Size='Size.Small' />
                                    <MudText Typo='Typo.body2'>Edit</MudText>
                                </div>
                              </MudMenuItem>

                              if(AccessLevelAddmin())
                              {
                                <MudMenuItem OnClick='(()=> ApprovedRFPStatus(context))'>
                                  <div class='d-flex align-center gap-2'>
                                    <MudIcon Icon='@Icons.Filled.CheckCircle' Size='Size.Small' />
                                    <MudText Typo='Typo.body2'>Approve</MudText>
                                  </div>
                                </MudMenuItem>

                                <MudMenuItem OnClick='(()=> CancelRFPStatus(context))'>
                                  <div class='d-flex align-center gap-2'>
                                    <MudIcon Icon='@Icons.Filled.Cancel' Size='Size.Small' />
                                    <MudText Typo='Typo.body2'>Cancel</MudText>
                                  </div>
                                </MudMenuItem>
                              }

                            }
                            else if(AccountingStatus(Enums.ActionMode.Approve).Id == context.AccountingStatusId && AccessLevelAddmin())
                            {
                              <MudMenuItem OnClick='(()=> VoidRFP(context))'>
                                <div class='d-flex align-center gap-2'>
                                    <MudIcon Icon='@Icons.Filled.CancelPresentation' Size='Size.Small' />
                                    <MudText Typo='Typo.body2'>Generated (Void)</MudText>
                                </div>
                              </MudMenuItem>
                            }
                            <MudMenuItem OnClick='(()=> NavigateToAuditTrail(context))'>
                                <div class='d-flex align-center gap-2'>
                                    <MudIcon Icon='@Icons.Filled.ListAlt' Size='Size.Small' />
                                    <MudText Typo='Typo.body2'>Audit Trail</MudText>
                                </div>
                            </MudMenuItem>
                            <MudMenuItem OnClick='(()=> context.ShowReport = ShowReport(context.ShowReport, context))'>
                                <div class='d-flex align-center gap-2'>
                                    <MudIcon Icon='@Icons.Filled.PictureAsPdf' Size='Size.Small' />
                                    <MudText Typo='Typo.body2'> @(context.ShowReport ? "Close" : "Show") Report</MudText>
                                </div>
                            </MudMenuItem>
                        </MudMenu>
                    </MudTd>
                </RowTemplate>
                <NoRecordsContent>
                    <MudText Class='txt-uppercase font-bold font12' Color='Color.Error'>No records found</MudText>
                </NoRecordsContent>
                <ChildRowContent>
                    @if (context.ShowReport)
                        {
                        <td colspan="9">
                            <div class='d-flex align-center pa-2 bgc-f2f2f2'>
                                <MudSpacer />
                                <MudButton OnClick='(() => context.ShowReport = ShowReport(context.ShowReport, context))' EndIcon="@Icons.Rounded.Close" IconColor='Color.Error' Size='Size.Small' >
                                    Close Report
                                </MudButton>
                            </div>
                            <MudTr Class='d-flex align-stretch justify-center default-report-container'>
                                @if (string.IsNullOrWhiteSpace(PDFContent))
                                {
                                    <MudOverlay Visible='true' DarkBackground="false" AutoClose="true">
                                        <MudProgressCircular Color="Color.Primary" Indeterminate="true" />
                                    </MudOverlay>
                                }
                                else
                                {
                                <iframe src='@PDFContent' />
                                }
                            </MudTr>
                        </td>
                        }
                </ChildRowContent>
                <PagerContent>
                    <MudTablePager />
                </PagerContent>
            </MudTable>
        }
    </MudContainer>
</div>

@code{
    private bool dataFetched, openSideFilter;
    private string PDFContent = default!;
    private int[] pageSize = new int[] { 30, 50, 100, 500, 1000 };
    private string searchTerm = string.Empty, visibility = "visibility-animation-hide", selectedTypeName = string.Empty;
    private int selectedFilter, totalItems;
    private FilterParameter filterParameter = new();
    private RequestTypeModel? selectedRequestType;
    private AccountingStatusModel? selectedStatus;
    private IEnumerable<RequestForPaymentModel>? pageData;
    private MudTable<RequestForPaymentModel>? tableVariable;
    private DateRange dateRange = new DateRange(DateTime.Now, DateTime.Now);
    private IEnumerable<RequestTypeModel> hasRFPDetail {get; set;} = new HashSet<RequestTypeModel>();
    private IEnumerable<AccountingStatusModel> hasAccountingStatus {get; set;} = new HashSet<AccountingStatusModel>();
    protected override async Task OnInitializedAsync()
    {
        GlobalClass.pageTitle = "RFP LIST";
        while (GlobalClass.currentUserAccount == null || GlobalClassList.requestTypes == null 
        || GlobalClassList.accountingStatusList == null
        || GlobalClassList.requestTypes == null)
            await Task.Delay(1);

        //RFPHubConnection();
        SignalR();
        CompletedFetch();
    }

    void CompletedFetch()
    {
        dataFetched = true;
        StateHasChanged();
    }
    private async Task<TableData<RequestForPaymentModel>> LoadRFPFromServer(TableState tableState)
    {
        IEnumerable<RequestForPaymentModel> data = await requestForPaymentService.LoadRequestPayment(filterParameter, GlobalClass.token);
        switch (tableState.SortLabel)
        {
            case "SortControlNumber":
                data = data.OrderByDirection(tableState.SortDirection, x=>x.Id);
                break;
            case "SortDate":
                data = data.OrderByDirection(tableState.SortDirection, x=>x.RequestDate);
                break;
        }
        
        GlobalClassList.requestForPaymentsList = data.ToList();
        pageData = GlobalClassList.requestForPaymentsList.Skip(tableState.Page * tableState.PageSize).Take(tableState.PageSize).ToArray();

        await Task.Delay(3);
        totalItems = GlobalClassList.requestForPaymentsList.Count();

        return new TableData<RequestForPaymentModel>()
        {
            TotalItems = totalItems,
            Items = pageData
        };
    }
    private async void FilteredItem()
    {
      filterParameter.RequestTypeId = string.Join(", ", hasRFPDetail.Select(x=> x.Id));
      filterParameter.AccountingStatusId = string.Join(",", hasAccountingStatus.Select(x=>x.Id));
      filterParameter.DateFrom = dateRange.Start.GetValueOrDefault();
      filterParameter.DateTo = dateRange.End.GetValueOrDefault();
      if(tableVariable != null)
        await tableVariable.ReloadServerData();
    }
    private string SelectedRFPDetails(List<string> selectedDetail)
    {
      var RFP = "";
      foreach (var item in hasRFPDetail)
      {
        RFP = string.Join(", ", hasRFPDetail.Select(x=> x.TypeName));      
      }
      return $"{RFP}";

    }
    private string AccountingStatus(List<string> selectedStatus)
    {
      var status = "";
      foreach (var item in hasAccountingStatus)
      {
        status = string.Join(", ", hasAccountingStatus.Select(x => x.StatusName));      
      }
      return $"{status}";
    }
    void AddNewRFP()
    {
        GlobalClass.requestForPayment = new();
        GlobalClassList.requestForPayments = new();
        navigationManager.NavigateTo($"/requestpayment/create");
    }
    async void EditRFP(RequestForPaymentModel request)
    {
        GlobalClass.requestForPayment = await Task.Run(() => request);
        navigationManager.NavigateTo($"/requestpayment/create");
    }

    private bool FilterItems(RequestForPaymentModel items)
    {
        if (string.IsNullOrEmpty(searchTerm))
            return true;
        if (items.ControlNumber.Contains(searchTerm, StringComparison.InvariantCultureIgnoreCase))
            return true;
        if (items.RequestTypeName.Contains(searchTerm, StringComparison.InvariantCultureIgnoreCase))
            return true;
        return false;
    }

    private bool ShowReport(bool isShow, RequestForPaymentModel requestForPayment)
    {
        Task.Run(() => GenerateReport(requestForPayment));
        return isShow = !isShow;
    }
    private async Task GenerateReport(RequestForPaymentModel RFP)
    {
        RFP.RequestForPaymentDetails = await requestForPaymentService.LoadRequestPaymentDetail(RFP.Id, GlobalClass.token);
        PDFContent = await requestForPaymentService.GenerateRFPReport(RFP);
        StateHasChanged();
    }

    private void OpenSideFilter()
    {
        openSideFilter = !openSideFilter;
        if (openSideFilter)
            visibility = "visibility-animation-show";
        if (!openSideFilter)
            visibility = "visibility-animation-hide";
    }
    private async Task<bool> PromptMessage(Enums.ActionMode actionMode)
    {
        bool isNotCancel;
        var parameters = new DialogParameters();
        string contentText = "Request for payment ";
        string dialogTitle = actionMode == Enums.ActionMode.Cancel ? "Cancel " + contentText 
        : actionMode == Enums.ActionMode.Approve ? "Approve " + contentText 
        : "Void " + contentText;

        parameters.Add("actionMode", actionMode == Enums.ActionMode.Cancel ? Enums.ActionMode.Cancel 
        : actionMode == Enums.ActionMode.Approve ? Enums.ActionMode.Approve
        : Enums.ActionMode.Void );

        parameters.Add("contentText", contentText);

        var options = new DialogOptions()
        {
            CloseButton = false,
            MaxWidth = MaxWidth.ExtraSmall,
            FullWidth = true,
            NoHeader = false,
            DisableBackdropClick = true
        };
        var resultDialog = await dialogService.Show<Shared.Dialogs.GenericPromptDialogs.GenericPrompt>(dialogTitle, parameters, options).Result;
        if (!resultDialog.Cancelled)
            isNotCancel = true;
        else
            isNotCancel = false;

        StateHasChanged();

        return isNotCancel;
    }
    private async Task PayeeSearchLookup()
    {
        var parameters = new DialogParameters();
        string dialogTitle = "Payee Look Up";
        parameters.Add("dialogTitle", dialogTitle);
        parameters.Add("buttonText", "Select");
        parameters.Add("color", Color.Success);
        parameters.Add("lookUpType", Enums.LookUpType.Project);
        var options = new DialogOptions()
        {
            CloseButton = false,
            MaxWidth = MaxWidth.Small,
            FullWidth = true,
            NoHeader = false,
            DisableBackdropClick = false
        };
        var resultDialog = await dialogService.Show<Shared.Dialogs.LookUpDialog.GlobalGenericLookup>(dialogTitle, parameters, options).Result;
        if (!resultDialog.Cancelled)
        {
            var payee = (Project)resultDialog.Data;
            filterParameter.PayeeId = payee.ProjectId;
            filterParameter.PayeeCategoryId = payee.ProjectCategoryId;
            filterParameter.PayeeName = payee.ProjectName;
            StateHasChanged();
        }
    }
    private async Task VoidRFP(RequestForPaymentModel requestForPayment)
    {
      if(await PromptMessage(Enums.ActionMode.Void))
      {
            requestForPayment.AccountingStatusId = AccountingStatus(Enums.ActionMode.Void).Id;
            requestForPayment.Activity = "Update RFP status to generated (void)";
            requestForPayment.UserId = GlobalClass.currentUserAccount.EmployeeId;

            //Audit Trail
            requestForPayment.StatusName = AccountingStatus(Enums.ActionMode.Void).StatusName;
            requestForPayment.StatusEnumCategoryId = AccountingStatus(Enums.ActionMode.Void).StatusEnumCategoryId;

            var updatedStatus = await requestForPaymentService.UpdateRFPStatus(requestForPayment, GlobalClass.token);
            Extensions.ShowAlert("Request for payment voided", Variant.Filled, snackBar, Severity.Success);
            if(GlobalVariable.AMSHubConnection != null)
                await GlobalVariable.AMSHubConnection.InvokeAsync("SaveRequestForPayment", updatedStatus);
      }
      else
            Extensions.ShowAlert("Action Cancelled", Variant.Filled, snackBar, Severity.Normal);
    }
    private async Task ApprovedRFPStatus(RequestForPaymentModel requestForPayment)
    {
        if (await PromptMessage(Enums.ActionMode.Approve))
        {
            requestForPayment.AccountingStatusId = AccountingStatus(Enums.ActionMode.Approve).Id;
            requestForPayment.Activity = "RFP Status Approved";
            requestForPayment.UserId = GlobalClass.currentUserAccount.EmployeeId;

            //Audit Trail
            requestForPayment.StatusName = AccountingStatus(Enums.ActionMode.Approve).StatusName;
            requestForPayment.StatusEnumCategoryId = AccountingStatus(Enums.ActionMode.Approve).StatusEnumCategoryId;

            var updatedStatus = await requestForPaymentService.UpdateRFPStatus(requestForPayment, GlobalClass.token);
            Extensions.ShowAlert("Request for payment approved", Variant.Filled, snackBar, Severity.Info);
            if(GlobalVariable.AMSHubConnection != null)
                await GlobalVariable.AMSHubConnection.InvokeAsync("SaveRequestForPayment", updatedStatus);
        }
        else
            Extensions.ShowAlert("Action Cancelled", Variant.Filled, snackBar, Severity.Normal);
    }
    private async Task CancelRFPStatus(RequestForPaymentModel requestForPayment)
    {
      if (await PromptMessage(Enums.ActionMode.Cancel))
      {
          requestForPayment.AccountingStatusId = AccountingStatus(Enums.ActionMode.Cancel).Id;
          requestForPayment.UserId = GlobalClass.currentUserAccount.EmployeeId;

          //Audit Trail
          requestForPayment.StatusName = AccountingStatus(Enums.ActionMode.Cancel).StatusName;
          requestForPayment.StatusEnumCategoryId = AccountingStatus(Enums.ActionMode.Cancel).StatusEnumCategoryId;

          var updatedStatus = await requestForPaymentService.UpdateRFPStatus(requestForPayment, GlobalClass.token);
          Extensions.ShowAlert("Request for payment cancelled", Variant.Filled, snackBar, Severity.Success);
          if(GlobalVariable.AMSHubConnection != null)
              await GlobalVariable.AMSHubConnection.InvokeAsync("SaveRequestForPayment", updatedStatus);
      }
      else
          Extensions.ShowAlert("Action Cancelled", Variant.Filled, snackBar, Severity.Normal);
    }
    private bool EnableEditApproved(RequestForPaymentModel requestForPayment)
    {
        var accountingStatusList = new AccountingStatusModel();
        accountingStatusList = GlobalClassList.accountingStatusList.Where(x => x.Id == requestForPayment.AccountingStatusId).FirstOrDefault();
        return accountingStatusList?.StatusEnumCategoryId == Enums.AccountingStatusEnumCategory.RFPA;
    }
    
    @* private void RFPHubConnection()
    {
      try
      {
        var StatusId = GlobalClassList.accountingStatusList
        .Where(x=>x.StatusEnumCategoryId == Enums.AccountingStatusEnumCategory.RFPC)
        .Select(x=>x.Id)
        .FirstOrDefault();
        if(GlobalVariable.AMSHubConnection != null)
            GlobalVariable.AMSHubConnection.On<RequestForPaymentModel>("SaveRequestForPayment", (_Request) =>{

            GlobalClassList.requestForPaymentsList.RemoveAll(x=>x.Id == _Request.Id);
            GlobalClassList.requestForPaymentsList.Add(_Request);
            GlobalClassList.requestForPaymentsList = GlobalClassList.requestForPaymentsList
            .Where(x=>x.AccountingStatusId != StatusId)
            .OrderBy(x=>x.ControlNumber).ToList();
          StateHasChanged();
        });
      }
      catch (System.Exception ex)
      {
         // TODO
         Console.WriteLine(ex.Message);
         throw;
      }
    } *@
    private void NavigateToAuditTrail(RequestForPaymentModel requestForPayment)
    {
      GlobalClass.requestForPayment = requestForPayment;
      navigationManager.NavigateTo($"/requestforpayment/trail");
    }
    private bool AccessLevelAddmin()
    {
      return GlobalClass.currentUserAccount.AccessLevel == Enums.AccountingAccessLevel.Administrator 
      ||GlobalClass.currentUserAccount.AccessLevel == Enums.AccountingAccessLevel.AccountingAdmin;

    }
    private bool AccessLevelRequestors()
    {
      return GlobalClass.currentUserAccount.AccessLevel == Enums.AccountingAccessLevel.OthersRequestor
      || GlobalClass.currentUserAccount.AccessLevel == Enums.AccountingAccessLevel.AccountingRequestor
      || GlobalClass.currentUserAccount.AccessLevel == Enums.AccountingAccessLevel.AccountingIssuer;
    
    }
    private bool AccessLevelViewers()
    {
      return GlobalClass.currentUserAccount.AccessLevel == Enums.AccountingAccessLevel.AccountingViewer
      || GlobalClass.currentUserAccount.AccessLevel == Enums.AccountingAccessLevel.OthersViewer;
    }
    private AccountingStatusModel AccountingStatus(Enums.ActionMode actionMode)
    {
      var acctgStatus = new AccountingStatusModel();
      if(actionMode == Enums.ActionMode.Approve)
        acctgStatus = GlobalClassList.accountingStatusList.Where(x=>x.StatusEnumCategoryId == Enums.AccountingStatusEnumCategory.RFPA).FirstOrDefault();
      else if (actionMode == Enums.ActionMode.Cancel)
        acctgStatus = GlobalClassList.accountingStatusList.Where(x=>x.StatusEnumCategoryId == Enums.AccountingStatusEnumCategory.RFPC).FirstOrDefault();
      else if(actionMode == Enums.ActionMode.Void)
        acctgStatus = GlobalClassList.accountingStatusList.Where(x=>x.StatusEnumCategoryId == Enums.AccountingStatusEnumCategory.RFPG).FirstOrDefault();
      return acctgStatus?? new();
    }
    private void ClearSearch()
    {
      filterParameter = new();
      hasAccountingStatus = new HashSet<AccountingStatusModel>();
      hasRFPDetail = new HashSet<RequestTypeModel>();
      dateRange = new DateRange(DateTime.Now, DateTime.Now);
      Task.Run(async()=> await tableVariable!.ReloadServerData());
    }
    private bool EnableClearButton()
    {
      if(filterParameter.IsPOBillingControlNumber)
        return true;
      if(filterParameter.IsControlNumber) 
        return true;
      if(filterParameter.IsPOBillingControlNumber)
        return true;
      if(filterParameter.IsPOControlNumber)
        return true;
      if(filterParameter.IsLiqudationControlNumber)
        return true;
      if(filterParameter.IsRequestType)
        return true;
      if(filterParameter.IsAccountingStatus)
        return true;
      if(filterParameter.IsPayee)
        return true;
      if(filterParameter.IsDate)
        return true;
      
      return false;
    }
    private void SignalR()
    {
        try
        {
            if(GlobalVariable.AMSHubConnection != null)
                GlobalVariable.AMSHubConnection.On<RequestForPaymentModel>("SaveRequestForPayment",(requestModel) => 
                {
                  tableVariable?.ReloadServerData();
                    @* GlobalClassList.requestForPaymentsList.RemoveAll(request => request.Id == requestModel.Id);
                    if(requestModel.IsActive == true)
                        GlobalClassList.requestForPaymentsList.Insert(0,requestModel);
                    StateHasChanged(); *@
                });
        }catch (Exception ex)
        {
            Console.WriteLine(ex.Message);
            throw;
        }
    }
}