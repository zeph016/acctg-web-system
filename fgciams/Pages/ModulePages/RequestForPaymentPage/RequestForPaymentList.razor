@page "/request-payment/list"

@inject IRequestForPaymentService requestForPaymentService
@inject NavigationManager navigationManager
@inject IDialogService dialogService
@inject ISnackbar snackbarService
@inject IJSRuntime JSRuntime
@attribute [Authorize]

<div class='page-cont'>
    <div class='drawer-right-min'>
        <MudDrawer Class='pa-1' @bind-Open='openSideFilter' Fixed='false' Anchor='Anchor.Right' Elevation='0' Variant='DrawerVariant.Mini' OpenMiniOnHover='false'>
          <FilterComponent OpenSideFilterClick='(() => openSideFilter = !openSideFilter)' 
              FilterClick='FilterTable' ResetTableClick='ReloadTable'
               moduleName='rfp-list' contentVisible='openSideFilter'/>
        </MudDrawer>
    </div>
    <MudContainer Class='py-2 pl-2 pr-10  table-toolbar-custom1' Fixed='false' MaxWidth='MaxWidth.ExtraExtraLarge'>
        @if (!dataFetched)
        {
            <MudPaper Class='ma-1 pa-1' style="height: calc(100vh - 125px);">
                <MudSkeleton SkeletonType='SkeletonType.Rectangle' Height='calc(100vh - 135px)' Animation='Animation.Wave' />
            </MudPaper>
        }
        else
        {
            <MudTable Class='table-style-1 ' ServerData='new Func<TableState, Task<TableData<RequestForPaymentModel>>>(LoadRFPFromServer)' 
              Breakpoint='Breakpoint.Xs' Hover FixedHeader FixedFooter Bordered Dense Loading='isLoading'
              RowsPerPage='15' Filter='new Func<RequestForPaymentModel,bool>(FilterItems)' @ref='tableVariable'>
                <ToolBarContent>
                    <MudText Typo='Typo.caption'>
                        @totalItems
                        @(totalItems == 1 ? "item" : "items")
                        in total
                    </MudText>
                    <MudSpacer />
                    <MudTooltip Text="Refresh Table" Arrow Placement='Placement.Top'>
                        <MudIconButton Class='@(isLoading ? "mudbtnico-rotate":"")' OnClick='ReloadTable' Icon="@Icons.Material.Filled.Refresh" Size="Size.Small" 
                           Color='@(isLoading ? Color.Info : Color.Default)'/>
                    </MudTooltip>
                    <MudMenu Class='overflow-hidden mudbtnico-rotate-90' StartIcon='@Icons.Material.Filled.MoreVert' AnchorOrigin='Origin.BottomCenter' ActivationEvent='MouseEvent.MouseOver'
                             TransformOrigin='Origin.TopRight' Dense='true' Size='Size.Small' Label='More'>
                       @if(AccessLevelAddmin() || AccessLevelRequestors())
                       {
                        <MudMenuItem OnClick='(()=> AddNewRFP())'>
                            <div class='d-flex align-center gap-2 '>
                                <MudIcon Icon='@Icons.Material.Filled.Add' Size='Size.Small' />
                                <MudText Typo='Typo.body2'>Create RFP</MudText>
                            </div>
                        </MudMenuItem>                        
                       }
                       <MudMenuItem OnClick="(() => openSideFilter = !openSideFilter)"  >
                          <div class='d-flex align-center gap-2 '>
                              <MudIcon Icon='@Icons.Material.Filled.FilterList' Size='Size.Small' Color='Color.Dark' />
                              <MudText Typo='Typo.body2' Color='Color.Dark'>Filter</MudText>
                          </div>
                        </MudMenuItem>
                    </MudMenu>
                </ToolBarContent>
                <ColGroup>
                    <col style='width: 1%' />
                    <col />
                    <col />
                    <col style='width: 1%' />
                    <col style='width: 50px' />
                </ColGroup>
                <HeaderContent>
                    <MudTh Class='@(isPinnedCtrlNo ? "th-sticky-left customheader-6":"customheader-6")'>
                        <div class='d-flex align-center justify-space-around gap-2'>
                            <MudTooltip Text='Pin control number column' Arrow Placement='Placement.Top'>
                              <MudIconButton Class='ico-15x15' OnClick='(() => isPinnedCtrlNo = !isPinnedCtrlNo)' Color='@(isPinnedCtrlNo ? Color.Info:Color.Dark)' 
                                  Icon='@Icons.Material.Filled.PushPin' Size='Size.Small'/>
                            </MudTooltip>
                            <MudTableSortLabel SortLabel='SortControlNumber' T='RequestForPaymentModel'
                            InitialDirection='SortDirection.None'>
                                Control No.
                            </MudTableSortLabel>
                            <MudTableSortLabel SortLabel='SortDate' T='RequestForPaymentModel'
                            InitialDirection='SortDirection.Descending'>
                                Date
                            </MudTableSortLabel>
                        </div>
                    </MudTh>
                    <MudTh Class='customheader-6'>Payee</MudTh>
                    <MudTh Class='customheader-6'>Requestor</MudTh>
                    <MudTh Class='customheader-6'></MudTh>
                    <MudTh Class='customheader-6 text-center'>Actions</MudTh>
                </HeaderContent>
                <RowTemplate>
                    <MudTd Class='@(isPinnedCtrlNo ? "col-sticky-left":"")'>
                        <div class='d-flex align-center'>
                            <MudChip Class='mudchip-tbl' OnClick='(() => Extensions.CopyTextToClipboard(context.ControlNumber, snackbarService, JSRuntime))' 
                              Variant='Variant.Outlined' Color='Color.Error' Size='Size.Small'>
                                @context.ControlNumber
                            </MudChip>
                            <MudChip Class='mudchip-tbl' Variant='Variant.Outlined' Icon='@Icons.Material.Filled.CalendarMonth' Color='Color.Dark' Size='Size.Small'>
                                @Convert.ToDateTime(context.RequestDate).ToShortDateString()
                            </MudChip>
                         </div>
                    </MudTd>
                    <MudTd>
                      <div class='dynamic-div-1'>
                        <small>@context.PayeeName</small>
                      </div>
                    </MudTd>
                    <MudTd>
                      <div class='dynamic-div-1'>
                        <small>@context.RequestedByName</small>
                      </div>
                    </MudTd>
                    <MudTd Class='text-left'>
                        <div class='d-flex align-center justify-start'>
                            <MudChip Class='mudchip-tbl-nw' Label Color='Color.Default' Variant='Variant.Outlined' Size='Size.Small'>
                                @context.RFPDetailTypeId
                            </MudChip>
                                <MudChip Class='mudchip-tbl-nw' Label Color='Color.Default' Variant='Variant.Outlined' Size='Size.Small'>
                                @context.RequestTypeName
                            </MudChip>
                            <MudChip Class='mudchip-tbl-nw' Label Variant='Variant.Outlined' Size='Size.Small' Style='@Extensions.BorderColor(context.AccountingStatusId)'>
                                @context.AccountingStaus
                            </MudChip>
                        </div>
                    </MudTd>
                    <MudTd Class='text-center pa-2'>
                        <MudMenu Class='mudbtnico-rotate-90' Icon="@Icons.Material.Filled.MoreVert" AnchorOrigin='Origin.BottomLeft' ActivationEvent='MouseEvent.MouseOver'
                          TransformOrigin='Origin.TopRight' Size='Size.Small' Dense='true'>
                          @if((!EnableEditApproved(context) && AccessLevelAddmin()) 
                            || (!EnableEditApproved(context) && AccessLevelRequestors()))
                            {
                              <MudMenuItem OnClick='(() => EditRFP(context))'>
                                <div class='d-flex align-center gap-2'>
                                    <MudIcon Icon='@Icons.Material.Filled.Edit' Size='Size.Small' />
                                    <MudText Typo='Typo.body2'>Edit</MudText>
                                </div>
                              </MudMenuItem>

                              if(AccessLevelAddmin())
                              {
                                <MudMenuItem OnClick='(()=> ApprovedRFPStatus(context))'>
                                  <div class='d-flex align-center gap-2'>
                                    <MudIcon Icon='@Icons.Material.Filled.CheckCircle' Size='Size.Small' />
                                    <MudText Typo='Typo.body2'>Approve</MudText>
                                  </div>
                                </MudMenuItem>

                                <MudMenuItem OnClick='(()=> CancelRFPStatus(context))'>
                                  <div class='d-flex align-center gap-2'>
                                    <MudIcon Icon='@Icons.Material.Filled.Cancel' Size='Size.Small' />
                                    <MudText Typo='Typo.body2'>Cancel</MudText>
                                  </div>
                                </MudMenuItem>
                              }

                            }
                            else if(AccountingStatus(Enums.ActionMode.Approve).Id == context.AccountingStatusId && AccessLevelAddmin())
                            {
                              <MudMenuItem OnClick='(()=> VoidRFP(context))'>
                                <div class='d-flex align-center gap-2'>
                                    <MudIcon Icon='@Icons.Material.Filled.CancelPresentation' Size='Size.Small' />
                                    <MudText Typo='Typo.body2'>Generated (Void)</MudText>
                                </div>
                              </MudMenuItem>
                            }
                            <MudMenuItem OnClick='(()=> NavigateToAuditTrail(context))'>
                                <div class='d-flex align-center gap-2'>
                                    <MudIcon Icon='@Icons.Material.Filled.ListAlt' Size='Size.Small' />
                                    <MudText Typo='Typo.body2'>Audit Trail</MudText>
                                </div>
                            </MudMenuItem>
                            <MudMenuItem OnClick='(()=> context.ShowReport = ShowReport(context.ShowReport, context))'>
                                <div class='d-flex align-center gap-2'>
                                    <MudIcon Icon='@Icons.Material.Filled.PictureAsPdf' Size='Size.Small' />
                                    <MudText Typo='Typo.body2'> @(context.ShowReport ? "Close" : "Show") Report</MudText>
                                </div>
                            </MudMenuItem>
                        </MudMenu>
                    </MudTd>
                </RowTemplate>
                <NoRecordsContent>
                    <MudText Class='txt-uppercase font-bold font12' Color='Color.Error'>No records found</MudText>
                </NoRecordsContent>
                <ChildRowContent>
                   <MudTr>
                        <td colspan="9">
                          <div class='transition-05s-ease overflow-hidden' style='@(context.ShowReport ? "max-height:700px" : "max-height:0px")'>
                            <div class='d-flex align-center pa-2 bgc-f2f2f2'>
                                <MudSpacer />
                                <MudButton Class='btn-ios-d font12' OnClick='(() => context.ShowReport = ShowReport(context.ShowReport, context))' EndIcon="@Icons.Rounded.Close" Size='Size.Small' >
                                    Close Report
                                </MudButton>
                            </div>
                            <div class='d-flex align-stretch justify-center default-report-container'>
                                @if (context.ShowReport)
                                {
                                  @if (string.IsNullOrWhiteSpace(PDFContent))
                                  {
                                      <MudOverlay Visible='true' DarkBackground="false" AutoClose="true">
                                          <MudProgressCircular Color="Color.Primary" Indeterminate="true" />
                                      </MudOverlay>
                                  }
                                  else
                                  {
                                  <iframe src='@PDFContent' />
                                  }
                                }
                            </div>
                          </div>
                        </td>
                       </MudTr>
                </ChildRowContent>
                <PagerContent>
                    <MudTablePager PageSizeOptions='GlobalVariable.pageSize' />
                </PagerContent>
            </MudTable>
        }
    </MudContainer>
</div>

@code{
    private bool dataFetched, openSideFilter, isLoading = true, isPinnedCtrlNo = true;
    private string PDFContent = string.Empty;
    private string searchTerm = string.Empty, selectedTypeName = string.Empty;
    private int selectedFilter, totalItems;
    private FilterParameter filterParameter = new();
    private RequestTypeModel? selectedRequestType;
    private AccountingStatusModel? selectedStatus;
    private IEnumerable<RequestForPaymentModel>? pageData;
    private MudTable<RequestForPaymentModel> tableVariable = new MudTable<RequestForPaymentModel>();
    private DateRange dateRange = new DateRange(DateTime.Now, DateTime.Now);
    private IEnumerable<RequestTypeModel> hasRFPDetail {get; set;} = new HashSet<RequestTypeModel>();
    private IEnumerable<AccountingStatusModel> hasAccountingStatus {get; set;} = new HashSet<AccountingStatusModel>();
    protected override async Task OnInitializedAsync()
    {
        GlobalClass.pageTitle = "RFP LIST";
        while (GlobalClass.currentUserAccount == null || GlobalClassList.requestTypes == null 
        || GlobalClassList.accountingStatusList == null
        || GlobalClassList.requestTypes == null)
            await Task.Delay(1);

        //RFPHubConnection();
        SignalR();
        CompletedFetch();
    }

    void CompletedFetch()
    {
        dataFetched = true;
        StateHasChanged();
    }
    private async Task<TableData<RequestForPaymentModel>> LoadRFPFromServer(TableState tableState)
    {
      isLoading = true;
        IEnumerable<RequestForPaymentModel> data = await requestForPaymentService.LoadRequestPayment(filterParameter, GlobalClass.token);
        switch (tableState.SortLabel)
        {
            case "SortControlNumber":
                data = data.OrderByDirection(tableState.SortDirection, x=>x.Id);
                break;
            case "SortDate":
                data = data.OrderByDirection(tableState.SortDirection, x=>x.RequestDate);
                break;
        }
        
        GlobalClassList.requestForPaymentsList = data.ToList();
        pageData = GlobalClassList.requestForPaymentsList.Skip(tableState.Page * tableState.PageSize).Take(tableState.PageSize).ToArray();
        isLoading = !isLoading;
        totalItems = GlobalClassList.requestForPaymentsList.Count();
        return new TableData<RequestForPaymentModel>()
        {
            TotalItems = totalItems,
            Items = pageData
        };
    }
    private async void FilterTable()
    {
      filterParameter = GlobalVariable.filterParameter;
      await tableVariable.ReloadServerData();
    }
    private string SelectedRFPDetails(List<string> selectedDetail)
    {
      var RFP = "";
      foreach (var item in hasRFPDetail)
      {
        RFP = string.Join(", ", hasRFPDetail.Select(x=> x.TypeName));      
      }
      return $"{RFP}";

    }
    private string AccountingStatus(List<string> selectedStatus)
    {
      var status = "";
      foreach (var item in hasAccountingStatus)
      {
        status = string.Join(", ", hasAccountingStatus.Select(x => x.StatusName));      
      }
      return $"{status}";
    }
    void AddNewRFP()
    {
        GlobalClass.requestForPayment = new();
        GlobalClassList.requestForPayments = new();
        navigationManager.NavigateTo($"/request-payment/create");
    }
    async void EditRFP(RequestForPaymentModel request)
    {
        GlobalClass.requestForPayment = await Task.Run(() => request);
        navigationManager.NavigateTo($"/request-payment");
    }

    private bool FilterItems(RequestForPaymentModel items)
    {
        if (string.IsNullOrEmpty(searchTerm))
            return true;
        if (items.ControlNumber.Contains(searchTerm, StringComparison.InvariantCultureIgnoreCase))
            return true;
        if (items.RequestTypeName.Contains(searchTerm, StringComparison.InvariantCultureIgnoreCase))
            return true;
        return false;
    }

    private bool ShowReport(bool isShow, RequestForPaymentModel requestForPayment)
    {
        Task.Run(() => GenerateReport(requestForPayment));
        return isShow = !isShow;
    }
    private async Task GenerateReport(RequestForPaymentModel RFP)
    {
        RFP.RequestForPaymentDetails = await requestForPaymentService.LoadRequestPaymentDetail(RFP.Id, GlobalClass.token);
        PDFContent = await requestForPaymentService.GenerateRFPReport(RFP);
        StateHasChanged();
    }
    private async Task<bool> PromptMessage(Enums.ActionMode actionMode, RequestForPaymentModel rfp)
    {
        bool isNotCancel;
        var parameters = new DialogParameters();
        string contentText = "Request for payment ";
        string dialogTitle = actionMode.ToString();
        parameters.Add("actionMode", actionMode);
        parameters.Add("dialogTitle", dialogTitle);
        parameters.Add("contentText", contentText);
        parameters.Add("controlNumber", rfp.ControlNumber);
        var options = new DialogOptions() { CloseButton = false, MaxWidth = MaxWidth.ExtraSmall, FullWidth = true, NoHeader = false, DisableBackdropClick = true };
        var resultDialog = await dialogService.Show<Shared.Dialogs.GenericPromptDialogs.GenericPrompt>(dialogTitle, parameters, options).Result;
        if (!resultDialog.Canceled)
            isNotCancel = true;
        else
            isNotCancel = false;

        StateHasChanged();

        return isNotCancel;
    }
    private async Task PayeeSearchLookup()
    {
        var parameters = new DialogParameters();
        string dialogTitle = "Payee Look Up";
        parameters.Add("dialogTitle", dialogTitle);
        parameters.Add("buttonText", "Select");
        parameters.Add("color", Color.Success);
        parameters.Add("lookUpType", Enums.LookUpType.Project);
        var options = new DialogOptions() { CloseButton = false, MaxWidth = MaxWidth.Small, FullWidth = true, NoHeader = false, DisableBackdropClick = false };
        var resultDialog = await dialogService.Show<Shared.Dialogs.LookUpDialog.GlobalGenericLookup>(dialogTitle, parameters, options).Result;
        if (!resultDialog.Canceled)
        {
            var payee = (Project)resultDialog.Data;
            filterParameter.PayeeId = payee.ProjectId;
            filterParameter.PayeeCategoryId = payee.ProjectCategoryId;
            filterParameter.PayeeName = payee.ProjectName;
            StateHasChanged();
        }
    }
    private async Task VoidRFP(RequestForPaymentModel requestForPayment)
    {
      if(await PromptMessage(Enums.ActionMode.Void, requestForPayment))
      {
            requestForPayment.AccountingStatusId = AccountingStatus(Enums.ActionMode.Void).Id;
            requestForPayment.Activity = "Update RFP status to generated (void)";
            requestForPayment.UserId = GlobalClass.currentUserAccount.EmployeeId;

            //Audit Trail
            requestForPayment.StatusName = AccountingStatus(Enums.ActionMode.Void).StatusName;
            requestForPayment.StatusEnumCategoryId = AccountingStatus(Enums.ActionMode.Void).StatusEnumCategoryId;

            var updatedStatus = await requestForPaymentService.UpdateRFPStatus(requestForPayment, GlobalClass.token);
            Extensions.ShowAlert("Request for payment voided", Variant.Filled, snackbarService, Severity.Success);
            if(GlobalVariable.AMSHubConnection != null)
                await GlobalVariable.AMSHubConnection.InvokeAsync("SaveRequestForPayment", updatedStatus);
      }
      else
          Extensions.ShowAlert("Action Cancelled", Variant.Filled, snackbarService, Severity.Normal);
    }
    private async Task ApprovedRFPStatus(RequestForPaymentModel requestForPayment)
    {
        if (await PromptMessage(Enums.ActionMode.Approve,requestForPayment))
        {
            requestForPayment.AccountingStatusId = AccountingStatus(Enums.ActionMode.Approve).Id;
            requestForPayment.Activity = "RFP Status Approved";
            requestForPayment.UserId = GlobalClass.currentUserAccount.EmployeeId;

            //Audit Trail
            requestForPayment.StatusName = AccountingStatus(Enums.ActionMode.Approve).StatusName;
            requestForPayment.StatusEnumCategoryId = AccountingStatus(Enums.ActionMode.Approve).StatusEnumCategoryId;

            var updatedStatus = await requestForPaymentService.UpdateRFPStatus(requestForPayment, GlobalClass.token);
            Extensions.ShowAlert("Request for payment approved", Variant.Filled, snackbarService, Severity.Info);
            if(GlobalVariable.AMSHubConnection != null)
                await GlobalVariable.AMSHubConnection.InvokeAsync("SaveRequestForPayment", updatedStatus);
        }
        else
            Extensions.ShowAlert("Action Cancelled", Variant.Filled, snackbarService, Severity.Normal);
    }
    private async Task CancelRFPStatus(RequestForPaymentModel requestForPayment)
    {
      if (await PromptMessage(Enums.ActionMode.Cancel, requestForPayment))
      {
          requestForPayment.AccountingStatusId = AccountingStatus(Enums.ActionMode.Cancel).Id;
          requestForPayment.UserId = GlobalClass.currentUserAccount.EmployeeId;

          //Audit Trail
          requestForPayment.StatusName = AccountingStatus(Enums.ActionMode.Cancel).StatusName;
          requestForPayment.StatusEnumCategoryId = AccountingStatus(Enums.ActionMode.Cancel).StatusEnumCategoryId;

          var updatedStatus = await requestForPaymentService.UpdateRFPStatus(requestForPayment, GlobalClass.token);
          Extensions.ShowAlert("Request for payment cancelled", Variant.Filled, snackbarService, Severity.Success);
          if(GlobalVariable.AMSHubConnection != null)
              await GlobalVariable.AMSHubConnection.InvokeAsync("SaveRequestForPayment", updatedStatus);
      }
      else
          Extensions.ShowAlert("Action Cancelled", Variant.Filled, snackbarService, Severity.Normal);
    }
    private bool EnableEditApproved(RequestForPaymentModel requestForPayment)
    {
        var accountingStatusList = new AccountingStatusModel();
        accountingStatusList = GlobalClassList.accountingStatusList.Where(x => x.Id == requestForPayment.AccountingStatusId).FirstOrDefault();
        return accountingStatusList?.StatusEnumCategoryId == Enums.AccountingStatusEnumCategory.RFPA;
    }
    
    @* private void RFPHubConnection()
    {
      try
      {
        var StatusId = GlobalClassList.accountingStatusList
        .Where(x=>x.StatusEnumCategoryId == Enums.AccountingStatusEnumCategory.RFPC)
        .Select(x=>x.Id)
        .FirstOrDefault();
        if(GlobalVariable.AMSHubConnection != null)
            GlobalVariable.AMSHubConnection.On<RequestForPaymentModel>("SaveRequestForPayment", (_Request) =>{

            GlobalClassList.requestForPaymentsList.RemoveAll(x=>x.Id == _Request.Id);
            GlobalClassList.requestForPaymentsList.Add(_Request);
            GlobalClassList.requestForPaymentsList = GlobalClassList.requestForPaymentsList
            .Where(x=>x.AccountingStatusId != StatusId)
            .OrderBy(x=>x.ControlNumber).ToList();
          StateHasChanged();
        });
      }
      catch (System.Exception ex)
      {
         // TODO
         Console.WriteLine(ex.Message);
         throw;
      }
    } *@
    private void NavigateToAuditTrail(RequestForPaymentModel requestForPayment)
    {
      GlobalClass.requestForPayment = requestForPayment;
      navigationManager.NavigateTo($"/requestforpayment/trail");
    }
    private bool AccessLevelAddmin()
    {
      return GlobalClass.currentUserAccount.AccessLevel == Enums.AccountingAccessLevel.Administrator 
      ||GlobalClass.currentUserAccount.AccessLevel == Enums.AccountingAccessLevel.AccountingAdmin;

    }
    private bool AccessLevelRequestors()
    {
      return GlobalClass.currentUserAccount.AccessLevel == Enums.AccountingAccessLevel.OthersRequestor
      || GlobalClass.currentUserAccount.AccessLevel == Enums.AccountingAccessLevel.AccountingRequestor
      || GlobalClass.currentUserAccount.AccessLevel == Enums.AccountingAccessLevel.AccountingIssuer;
    
    }
    private bool AccessLevelViewers()
    {
      return GlobalClass.currentUserAccount.AccessLevel == Enums.AccountingAccessLevel.AccountingViewer
      || GlobalClass.currentUserAccount.AccessLevel == Enums.AccountingAccessLevel.OthersViewer;
    }
    private AccountingStatusModel AccountingStatus(Enums.ActionMode actionMode)
    {
      var acctgStatus = new AccountingStatusModel();
      if(actionMode == Enums.ActionMode.Approve)
        acctgStatus = GlobalClassList.accountingStatusList.Where(x=>x.StatusEnumCategoryId == Enums.AccountingStatusEnumCategory.RFPA).FirstOrDefault();
      else if (actionMode == Enums.ActionMode.Cancel)
        acctgStatus = GlobalClassList.accountingStatusList.Where(x=>x.StatusEnumCategoryId == Enums.AccountingStatusEnumCategory.RFPC).FirstOrDefault();
      else if(actionMode == Enums.ActionMode.Void)
        acctgStatus = GlobalClassList.accountingStatusList.Where(x=>x.StatusEnumCategoryId == Enums.AccountingStatusEnumCategory.RFPG).FirstOrDefault();
      return acctgStatus?? new();
    }
    private void ClearSearch()
    {
      filterParameter = new();
      hasAccountingStatus = new HashSet<AccountingStatusModel>();
      hasRFPDetail = new HashSet<RequestTypeModel>();
      dateRange = new DateRange(DateTime.Now, DateTime.Now);
      Task.Run(async()=> await tableVariable.ReloadServerData());
    }

    private async Task ReloadTable()
    {
        filterParameter = new FilterParameter();
        await tableVariable.ReloadServerData();
    }
    private bool EnableClearButton()
    {
      if(filterParameter.IsPOBillingControlNumber)
        return true;
      if(filterParameter.IsControlNumber) 
        return true;
      if(filterParameter.IsPOBillingControlNumber)
        return true;
      if(filterParameter.IsPOControlNumber)
        return true;
      if(filterParameter.IsLiqudationControlNumber)
        return true;
      if(filterParameter.IsRequestType)
        return true;
      if(filterParameter.IsAccountingStatus)
        return true;
      if(filterParameter.IsPayee)
        return true;
      if(filterParameter.IsDate)
        return true;
      
      return false;
    }
    private void SignalR()
    {
        try
        {
            if(GlobalVariable.AMSHubConnection != null)
                GlobalVariable.AMSHubConnection.On<RequestForPaymentModel>("SaveRequestForPayment",(requestModel) => 
                {
                  tableVariable.ReloadServerData();
                  StateHasChanged();
                });
        }catch (Exception ex)
        {
            Console.WriteLine(ex.Message);
            throw;
        }
    }
}