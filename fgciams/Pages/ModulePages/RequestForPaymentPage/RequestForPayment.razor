@page "/request-payment/create"
@page "/request-payment"

@inject IAccountingStatusService accountingStatusService
@inject IGlobalService globalService
@inject IRequestForPaymentService requestForPaymentService
@inject IModeOfPaymentService modeOfPaymentService
@inject IBillingDocumentService billingDocumentService
@inject IBankService bankService
@inject IDivisionService divisionService
@inject IRequestTypeService requestTypeService
@inject IExpenseLineService expenseLineService
@inject IDialogService dialogService
@inject ISnackbar snackbarService
@inject NavigationManager navigationManager

<div class='page-cont'>
    <MudContainer Class='pa-2' Fixed='false' MaxWidth='MaxWidth.ExtraExtraLarge'>
        @if (!dataFetched)
        {
            <SkeletonPageList />
        }
        else
        {
            <MudPaper Class='pa-2 overflow-hidden' Elevation='1'>
                <div class="rfp-container">
                    <div class="rfp-header d-flex align-center rounded-tl rounded-tr pa-2 gap-2 bgc-F4F5FB">
                        <MudGrid Spacing='1'>
                            <MudItem Class='d-flex align-center justify-start gap-1' xs=4>
                                <MudImage Class='fgcilogocont__imglogo' Src='images/fglogo/fgci1.png' Alt='fgci logo' Height='30' Width='30'/>
                                <MudText Class='fgcilogocont__lblfirst'>F. GURREA</MudText>
                                <MudText Class='fgcilogocont__lblsecond'>Construction, Inc.</MudText>
                            </MudItem>
                            <MudItem Class='d-flex align-center justify-center' xs=4>
                                <MudText Class='title-rfp'>@GlobalClass.pageTitle</MudText>
                            </MudItem>
                            <MudItem Class='d-flex align-center justify-end' xs=4>
                                <MudTooltip Text='Create new request for payment' Arrow Placement='Placement.Left'>
                                    <MudButton Class='btn-ios-d pa-1 font12' OnClick='New' StartIcon="@Icons.Material.Filled.Add" Variant='Variant.Filled'
                                    Color='Color.Info' Size='Size.Small' DisableElevation>new</MudButton>
                                </MudTooltip>
                            </MudItem>
                        </MudGrid>
                    </div>
                    <div class="rfp-subheader">
                        <MudText Class='d-flex wspace-nowrap txt-uppercase font-bold font10'>
                            Payee:
                            <MudText Class='font10 font-bold' Color='Color.Error'>*</MudText>
                        </MudText>
                        <div class='blzrthead-disabled-minheight15 blzrth-result-height-rfp-payee flex-1'>
                            <BlazoredTypeahead SearchMethod='LoadProject' DisableClear placeholder='Search'
                                ValueExpression="(() => payee)" Value="payee" ValueChanged="((Project model) => payee = model)" Debounce='500' MaximumSuggestions='10'>
                                <SelectedTemplate>
                                    <small class='blzsmallpayee-rfp'>@(payee.ProjectId != 0 ? context.ProjectName:"-")</small>
                                </SelectedTemplate>
                                <ResultTemplate>
                                    <div class='d-flex flex-column'>
                                        <small class='font-bold'>@context.ProjectName</small>
                                        <small>@context.Location</small>
                                        <small>@Extensions.ProjectReference(context)</small>
                                    </div>
                                </ResultTemplate>
                            </BlazoredTypeahead>
                        </div>
                    </div>
                    <div class='rfp-dateperiod'>
                        <MudText Class='d-flex wspace-nowrap txt-uppercase font-bold font10'>
                            Period Date:
                            <MudText Class='font10 font-bold' Color='Color.Error'>*</MudText>
                        </MudText>
                        <MudDateRangePicker Class='txtfield-font12-no-margin txtfield-right' @bind-DateRange='rfpPeriod' @ref='@dateRangePeriod'
                            IconSize='Size.Small' Margin='Margin.Dense' DisableToolbar>
                            <PickerActions>
                                <MudButton Class='btn-ios-d font12' OnClick='(() => DateRangeToday(new() , dateRangePeriod))' Size='Size.Small' DisableElevation>
                                    Today
                                </MudButton>
                                <MudSpacer />
                                <MudButton Class='btn-ios-d font12' OnClick='(() => CancelDateRangePicker(new(), dateRangePeriod))' Size='Size.Small' DisableElevation>
                                    Cancel
                                </MudButton>
                                <MudButton Class='btn-ios-d font12' OnClick='(() => SubmitDateRangePicker(new(), dateRangePeriod))' Size='Size.Small' DisableElevation Color='Color.Primary' Variant='Variant.Filled'>
                                    Submit
                                </MudButton>
                            </PickerActions>
                        </MudDateRangePicker>
                    </div>
                    <div class='rfp-datereq'>
                        <MudText Class='d-flex wspace-nowrap txt-uppercase font-bold font10'>
                            Request date:
                            <MudText Class='font10 font-bold' Color='Color.Error'>*</MudText>
                        </MudText>
                        <MudDatePicker Class='txtfield-font12-no-margin txtfield-right' @bind-Date='dateReq' @ref='@datePickerReq'
                            IconSize='Size.Small' Margin='Margin.Dense' DisableToolbar>
                            <PickerActions>
                                <MudButton Class='btn-ios-d font12' OnClick='(() => DateRangeToday(datePickerReq , new()))' Size='Size.Small' DisableElevation>
                                    Today
                                </MudButton>
                                <MudSpacer />
                                <MudButton Class='btn-ios-d font12' OnClick='(() => CancelDateRangePicker(datePickerReq, new()))' Size='Size.Small' DisableElevation>
                                    Cancel
                                </MudButton>
                                <MudButton Class='btn-ios-d font12' OnClick='(() => SubmitDateRangePicker(datePickerReq, new()))' Size='Size.Small' DisableElevation Color='Color.Primary' Variant='Variant.Filled'>
                                    Submit
                                </MudButton>
                            </PickerActions>
                        </MudDatePicker>
                    </div>
                    <div class='rfp-dateneed'>
                        <MudText Class='d-flex wspace-nowrap txt-uppercase font-bold font10'>
                            Date needed:
                            <MudText Class='font10 font-bold' Color='Color.Error'>*</MudText>
                        </MudText>
                        <MudDatePicker Class='txtfield-font12-no-margin txtfield-right' @bind-Date='dateNeed' @ref='@datePickerNeed' IconSize='Size.Small' Margin='Margin.Dense' DisableToolbar>
                            <PickerActions>
                                <MudButton Class='btn-ios-d font12' OnClick='(() => DateRangeToday(datePickerNeed , new()))' Size='Size.Small' DisableElevation>
                                    Today
                                </MudButton>
                                <MudSpacer />
                                <MudButton Class='btn-ios-d font12' OnClick='(() => CancelDateRangePicker(datePickerNeed, new()))' Size='Size.Small' DisableElevation>
                                    Cancel
                                </MudButton>
                                <MudButton Class='btn-ios-d font12' OnClick='(() => SubmitDateRangePicker(datePickerNeed, new()))' Size='Size.Small' DisableElevation Color='Color.Primary' Variant='Variant.Filled'>
                                    Submit
                                </MudButton>
                            </PickerActions>
                        </MudDatePicker>
                    </div>
                    <div class='rfp-controlno'>
                        <MudText Class='wspace-nowrap txt-uppercase font-bold font10'>Control No:</MudText>
                        <MudChip Class='chip-radius-5 font-bold font12' Color='Color.Error' Size='Size.Medium' Variant='Variant.Outlined'>
                            @(GlobalClass.requestForPayment.Id != 0 ? GlobalClass.requestForPayment.ControlNumber:"AUTO")
                        </MudChip>
                    </div>
                    <div class="rfp-body overflow-hidden">
                        <div class="rfp-body__grid">
                            <div class="body-content">
                                <MudTable Class='table-style-1 mudtoolbar-bg-F4F5FB table-bottom-border sm-tbar-gutter' Items="GlobalClassList.requestForPayments" Bordered
                                    Dense Elevation='0' FixedHeader FixedFooter CustomFooter Hover Square Height='calc(100vh - 390px)'>
                                    <ToolBarContent>
                                        <div class='d-flex align-center gap-2 mx-1'>
                                            <div class='d-flex align-center gap-2'>
                                                <small>Category:</small>
                                                <MudMenu Class='btn-lbl-font12' Label="@Extensions.GetEnumDescription(rfpTypes)" Dense EndIcon="@Icons.Material.Filled.KeyboardArrowDown" Size='Size.Small' Variant='Variant.Outlined' Color='Color.Default'
                                                    AnchorOrigin='Origin.BottomCenter' TransformOrigin='Origin.TopCenter' ActivationEvent='MouseEvent.MouseOver' DisableElevation>
                                                    @foreach (Enums.RFPDetailTypeId item in Enum.GetValues(typeof(Enums.RFPDetailTypeId)))
                                                    {
                                                        if(item != Enums.RFPDetailTypeId.Reversal)
                                                        {
                                                            <MudMenuItem OnClick='(() => SelectedRFPCat(item))'>@Extensions.GetEnumDescription(item)</MudMenuItem>
                                                        }
                                                    }
                                                </MudMenu>
                                            </div>
                                            <div class='d-flex align-center gap-2'>
                                                <small>Type:</small>
                                                <MudMenu Class='btn-lbl-font12' Label='@(selectedRequestType.TypeName)' Dense EndIcon="@Icons.Material.Filled.KeyboardArrowDown" Size='Size.Small' Variant='Variant.Outlined' Color='Color.Default'
                                                    AnchorOrigin='Origin.BottomCenter' TransformOrigin='Origin.TopCenter' ActivationEvent='MouseEvent.MouseOver' DisableElevation>
                                                    @if (GlobalClass.requestForPayment != null)
                                                    {
                                                        @foreach (var item in GlobalClassList.requestTypes)
                                                        {
                                                            <MudMenuItem OnClick='(() => SelectedReqType(item))'>@item.TypeName</MudMenuItem>
                                                        }
                                                    }
                                                </MudMenu>
                                            </div>
                                        </div>
                                        <MudSpacer />
                                        @if(GlobalClass.requestForPayment?.RFPDetailTypeId != Enums.RFPDetailTypeId.None)
                                        {
                                            <MudTooltip Text='Add Reversal' Arrow Placement='Placement.Bottom'>
                                                <MudButton Class='wspace-nowrap' OnClick='AddReversal' StartIcon="@Icons.Material.Filled.AddCircleOutline" aria-label="add" Color='Color.Error' Variant='Variant.Text' Size='Size.Small'>
                                                    <small>Reversal</small>
                                                </MudButton>
                                            </MudTooltip>
                                        }
                                        <MudTooltip Text='Add details' Arrow Placement='Placement.Bottom'>
                                            <MudButton Class='wspace-nowrap' OnClick='AddNew' StartIcon="@Icons.Material.Filled.AddCircle" aria-label="add" Color='Color.Info' Variant='Variant.Text' Size='Size.Small'>
                                                <small>Details</small>
                                            </MudButton>
                                        </MudTooltip>
                                        <MudTooltip Text='Reset Details' Arrow Placement='Placement.Bottom'>
                                            <MudButton OnClick='RefreshTable' StartIcon="@Icons.Material.Filled.Refresh" aria-label="add" Color='Color.Warning' Variant='Variant.Text' Size='Size.Small'>
                                                <small>Reset</small>
                                            </MudButton>
                                        </MudTooltip>
                                        <MudDivider Class='mr-2' Vertical />
                                        <MudToggleIconButton @bind-Toggled="isSideBarExpanded" Size='Size.Small' ToggledSize='Size.Small'
                                            Icon="@Icons.Material.Filled.ToggleOff" Color="@Color.Tertiary" Title="Expand Sub Details"
                                            ToggledIcon="@Icons.Material.Filled.ToggleOn" ToggledColor="@Color.Info" ToggledTitle="Collapse Details"/>
                                    </ToolBarContent>
                                    <ColGroup>
                                        <col style='width: 10px' />
                                        <col />
                                        <col />
                                        <col />
                                        @* @if (GlobalClass.requestForPayment.RFPDetailTypeId != Enums.RFPDetailTypeId.None)
                                        {
                                            <col style='width: 20px' />
                                        } *@
                                        <col />
                                        <col />
                                        <col />
                                        @if(!selectedRequestType.TypeName.Contains("None",  StringComparison.InvariantCultureIgnoreCase))
                                        {
                                            <col />
                                        }
                                        <col style='width:150px' />
                                    </ColGroup>
                                    <HeaderContent>
                                        <MudTh></MudTh>
                                        <MudTh Class='customheader-6'>Description</MudTh>
                                        <MudTh Class='customheader-6'>
                                            <div class='d-flex align-center'>
                                                Project/Names <MudText Class='font10 font-bold' Color='Color.Error'>*</MudText>
                                            </div>
                                        </MudTh>
                                        <MudTh Class='customheader-6'>Division</MudTh>
                                        <MudTh Class='customheader-6'>
                                              <div class='d-flex align-center'>
                                                Expense <MudText Class='font10 font-bold' Color='Color.Error'>*</MudText>
                                            </div>
                                        </MudTh>
                                        @if (GlobalClass.requestForPayment.RFPDetailTypeId == Enums.RFPDetailTypeId.Liquidation)
                                        {
                                            <MudTd Class='customheader-6'>Liq. Control No.</MudTd>
                                        }
                                        @if (GlobalClass.requestForPayment.RFPDetailTypeId == Enums.RFPDetailTypeId.POBilling)
                                        {
                                            <MudTd Class='customheader-6'>PO-B ControlNo.</MudTd>
                                        }
                                        @if (GlobalClass.requestForPayment.RFPDetailTypeId == Enums.RFPDetailTypeId.PO)
                                        {
                                            <MudTd Class='customheader-6'>PO No.</MudTd>
                                        }
                                        <MudTh Class='customheader-6'>Invoice</MudTh>
                                        <MudTh Class='customheader-6'>Remarks</MudTh>
                                        <MudTh Class='customheader-6 text-right'>Amount</MudTh>
                                    </HeaderContent>
                                    <RowTemplate>
                                        <MudTd Class='text-center pa-0' DataLabel='Remove button'>
                                            <div class='d-flex gap-2 pl-2 pr-2'>
                                                <MudTooltip Text='Remove Detail' Arrow Placement='Placement.Bottom'>
                                                    <MudIconButton OnClick='(()=> RemovedRequestForPaymentDetails(context))' Icon='@Icons.Material.Filled.RemoveCircle' Color='Color.Error' Size='Size.Small' />
                                                </MudTooltip>
                                            </div>
                                        </MudTd>
                                        <MudTd Class='font12 txt-oflow-el' DataLabel='Particulars' Style='max-width: 200px'>
                                            <MudTextField Class='txtfield-font12-no-margin' @bind-Value='@context.Particulars' Margin='Margin.Dense' />
                                        </MudTd>
                                        <MudTd Class='pa-2' DataLabel='Charged To'>
                                            <div class="autocomplete">
                                            <AutoCompleteProjectSearch 
                                                ProjectModel='context.projectModel'
                                                OnProjectValueChanged='( (Project project)=>
                                                {
                                                    context.projectModel = project;
                                                    context.ChargedId = project.ProjectId;
                                                    context.ChargedName = project.ProjectName; 
                                                    context.ChargedCategoryId = project.ProjectCategoryId;
                                                })'/>
                                            </div>
                                        </MudTd>
                                        <MudTd Class='pa-2' DataLabel='Division'>
                                            <div class='autocomplete'>
                                                <AutoCompleteDivisionSearch
                                                    Division='context.divisionModel'
                                                    OnDivisionValueChanged='((DivisionModel division) => 
                                                    { 
                                                        context.divisionModel = division;
                                                        context.DivisionId = division.Id;
                                                        context.DivisionName = division.divisionName; 
                                                        context.DivisionShortcutName = division.shortcutName;
                                                    })'/>
                                            </div>
                                        </MudTd>
                                        <MudTd Class='pa-2'DataLabel='Expense'>
                                            <div class='autocomplete'>
                                                <AutoCompleteExpenseLineSearch
                                                    ExpenseLine='context.expenseLineModel'
                                                    OnExpenseLineValueChanged='((ExpenseLineModel expense) => 
                                                    { 
                                                        context.expenseLineModel = expense;
                                                        context.ExpenseLineId = expense.Id;
                                                        context.ExpenseLineName = expense.ExpenseName; 
                                                    })'/>
                                            
                                            </div>
                                        </MudTd>
                                        @if (GlobalClass.requestForPayment.RFPDetailTypeId == Enums.RFPDetailTypeId.Liquidation)
                                        {
                                            <MudTd Class='text-center' DataLabel='PO Billing'>
                                                <MudChip Class='chip-radius-5 txt-uppercase font-bold font12' Color='Color.Info' Size='Size.Small'>
                                                    @context.LiquidationControlNumber
                                                </MudChip>
                                            </MudTd>
                                        }
                                        @if (GlobalClass.requestForPayment.RFPDetailTypeId == Enums.RFPDetailTypeId.POBilling)
                                        {
                                            <MudTd Class='text-center' DataLabel='PO Billing'>
                                                <MudChip Class='chip-radius-5 txt-uppercase font-bold font12' Color='Color.Info' Size='Size.Small'>
                                                    @context.POBControlNumber
                                                </MudChip>
                                            </MudTd>
                                        }
                                        @if (GlobalClass.requestForPayment.RFPDetailTypeId == Enums.RFPDetailTypeId.PO)
                                        {
                                            <MudTd Class='text-center' DataLabel='PO'>
                                                <MudChip Class='chip-radius-5 txt-uppercase font-bold font12' Color='Color.Info' Size='Size.Small'>
                                                    @context.PONumber
                                                </MudChip>
                                            </MudTd>
                                        }
                                        <MudTd Class='pa-2' DataLabel='Invoice'>
                                            <MudTextField Class='txtfield-font12-no-margin' @bind-Value='@context.InvoiceNo' Margin='Margin.Dense' />
                                        </MudTd>
                                        <MudTd Class='pa-2' DataLabel='Remarks'>
                                            <MudTextField Class='txtfield-font12-no-margin' @bind-Value='@context.Remarks' Margin='Margin.Dense' />
                                        </MudTd>
                                        <MudTd Class='pa-2 wspace-nowrap' DataLabel='Amount'>
                                            <div class='d-flex align-center gap-2'>
                                                <MudText Class='font-bold font12' Style='@(context.Amount > 0 ? "color:green" : "color:red")'>
                                                    @Extensions.GetEnumDescription(Enums.BankCurrency.PhilippinePeso)
                                                </MudText>
                                                <MudSpacer />
                                                <MudNumericField Class='txtfield-overflow-ellipsis txt-top-0 txtfield-right font12-txtfield txt-bold min-width100px' Style='@(context.Amount > 0 ? "color:green" : "color:red")'  
                                                    OnBlur='TotalAmount' 
                                                    @bind-Value='context.Amount' Margin='Margin.Dense' Format='N2' HideSpinButtons Variant='Variant.Text' />
                                            </div>
                                        </MudTd>
                                    </RowTemplate>
                                    <NoRecordsContent>
                                        <MudText Class='txt-uppercase font-bold font12' Color='Color.Error'>No details added</MudText>
                                    </NoRecordsContent>
                                </MudTable>
                                <MudDivider />
                                <div class='d-flex align-center px-2 gap-2 overflow-auto'>
                                    <div class='d-flex align-center gap-2'>
                                        <MudText Class='lbl10'>for labor requests:</MudText>
                                        <MudTextField Class='requestpayment__txtinputs' T='string' Margin='Margin.Dense' />
                                    </div>
                                    <div class='d-flex align-center gap-2'>
                                        <MudText Class='lbl10'>A/R:</MudText>
                                        <MudText Class='lblamount-red-10px' Style='@(GlobalClass.requestForPayment.ARPhp > 0 ? "color:green" : "color:red")'>
                                                @Extensions.GetEnumDescription(Enums.BankCurrency.PhilippinePeso)
                                        </MudText>
                                        <MudTooltip Text='@GlobalClass.requestForPayment.RetentionPhp.ToString("N2")' Placement='Placement.Top' Arrow Color='@(GlobalClass.requestForPayment.ARPhp > 0 ? Color.Success:Color.Error)'>
                                        <MudNumericField Class='numerictxt-right-10px-w75px' @bind-Value='GlobalClass.requestForPayment.ARPhp' Margin='Margin.Dense' Format='N2' HideSpinButtons 
                                            Style='@(GlobalClass.requestForPayment.ARPhp > 0 ? "color:green" : "color:red")' />
                                        </MudTooltip>
                                    </div>
                                    <div class='d-flex align-center gap-2'>
                                        <MudText Class='lbl10'>Retention:</MudText>
                                        <MudText Class='lblamount-red-10px' Style='@(GlobalClass.requestForPayment.RetentionPhp > 0 ? "color:green" : "color:red")'>
                                            @Extensions.GetEnumDescription(Enums.BankCurrency.PhilippinePeso)
                                        </MudText>
                                        <MudTooltip Text='@GlobalClass.requestForPayment.RetentionPhp.ToString("N2")' Placement='Placement.Top' Arrow Color='@(GlobalClass.requestForPayment.RetentionPhp > 0 ? Color.Success:Color.Error)'>
                                            <MudNumericField Class='numerictxt-right-10px-w75px' @bind-Value='GlobalClass.requestForPayment.RetentionPhp' Margin='Margin.Dense' Format='N2' HideSpinButtons 
                                                Style='@(GlobalClass.requestForPayment.RetentionPhp > 0 ? "color:green" : "color:red")' />
                                        </MudTooltip>
                                    </div>
                                    <MudSpacer />
                                    <div class='d-flex align-center gap-2'>
                                        <MudText Class='font-bold font14'>TOTAL: </MudText>
                                        <MudSpacer />
                                        <MudText Class='wspace-nowrap font-bold font12' Style='@(totalAmount > 0 ? "color:green":"color:red")'>
                                            @Extensions.GetEnumDescription(Enums.BankCurrency.PhilippinePeso)  @totalAmount.ToString("N2")
                                        </MudText>
                                    </div>
                                </div>
                            </div>
                            <div class="body-footer">
                                <MudPaper Class='d-flex flex-column rounded-0 border-thin-right' Elevation='0' MaxHeight='100%' Width='200px'>
                                    <div class='d-flex align-center justify-center bgc-F4F5FB'>
                                        <MudText Class='font12 txt-uppercase font-bold'>Mode of payment</MudText>
                                    </div>
                                    <MudDivider />
                                    <div class='d-flex flex-column overflow-auto'>
                                        <MudRadioGroup Class='d-flex flex-column px-2' @bind-SelectedOption='selectedPaymentMode'>
                                            @foreach (var item in GlobalClassList.modeOfPaymentList)
                                            {
                                                <MudRadio Option='@item' Dense Size='Size.Small' Color='Color.Dark'>
                                                    <MudText Class='font10 font-bold txt-uppercase'>@item.ModeName</MudText>
                                                </MudRadio>
                                            }
                                        </MudRadioGroup>        
                                    </div>
                                </MudPaper>
                                <MudPaper Class='rounded-0 flex-1' Elevation='0'>
                                    <div class='d-flex align-center justify-center bgc-F4F5FB'>
                                        <MudText Class='font12 txt-uppercase font-bold'>Bank</MudText>
                                    </div>
                                    <MudDivider /> 
                                    <MudGrid Class='px-2' Spacing='1'>
                                        <MudItem xs='6'>
                                            <MudText Class='d-flex wspace-nowrap txt-uppercase font-bold font10'>Bank:</MudText>
                                            <BlazoredTypeahead SearchMethod='( (string s)=> Extensions.SearchBank(s, true) )'
                                                @bind-Value='bank' Debounce="500" placeholder='BANK'>
                                                <SelectedTemplate>
                                                    @context.BankName
                                                </SelectedTemplate>
                                                <ResultTemplate>
                                                    @context.BankName
                                                </ResultTemplate>
                                            </BlazoredTypeahead>
                                        </MudItem>
                                        <MudItem xs='6'>
                                            <MudText Class='d-flex wspace-nowrap txt-uppercase font-bold font10'>Others Bank/Account No. :</MudText>
                                            <MudTextField Class='txt-top-0 pt-2' @bind-Value='GlobalClass.requestForPayment.BankAccountNo' Margin='Margin.Dense'/>
                                        </MudItem>
                                        <MudItem xs='12'>
                                            <MudText Class='requestpayment__lblinput2'>remarks:</MudText>
                                            <MudTextField @bind-Value='GlobalClass.requestForPayment.Remarks' Class='txt-top-0' T='string' Margin='Margin.Dense'/>
                                        </MudItem>
                                    </MudGrid>
                                </MudPaper>
                            </div>
                            <div class="body-sidebar">
                                <div class="d-flex flex-column transition-05s-ease width260px height100" style='@(isSideBarExpanded ? "max-width:260px" : "max-width:57px")'>
                                    <MudCardHeader Class='d-flex align-center justify-center pa-2 border-thin-bottom bgc-F4F5FB height2-05rem cursor-pointer'
                                        @onclick='(() => isBillReqExpanded = !isBillReqExpanded)'>
                                        <div class='d-flex align-center transition-05s-ease overflow-hidden @(isSideBarExpanded ? "fade-in flex-1" : "fade-out")' style='@(isSideBarExpanded ? "max-width:500px" : "max-width:0px")'>
                                            <MudText Class='wspace-nowrap txt-uppercase font12 font-bold'>Billing Requirements</MudText>
                                        </div>
                                        <MudIconButton OnClick='(() => isBillReqExpanded = !isBillReqExpanded)' Icon='@Icons.Material.Filled.AppRegistration' Size='Size.Small' />
                                    </MudCardHeader>
                                    <div class='d-flex transition-05s-ease overflow-auto' style='@(isBillReqExpanded && isSideBarExpanded ? "max-height:150px" : "max-height:0px")'>
                                        <MudCardContent Class='d-flex flex-column pa-0 gap-2'>
                                            @foreach (var items in billingDocCB)
                                            {
                                                <MudCheckBox @bind-Checked='items.IsChecked' Dense Size='Size.Small' Color='Color.Dark'>
                                                    <MudText Class='font10 font-bold txt-uppercase'>@items.selectedBillingDoc.DocumentName : <h6><u>Attach File</u></h6></MudText>
                                                </MudCheckBox>
                                            }
                                        </MudCardContent>
                                    </div>
                                    <MudDivider/>
                                    <MudCardHeader Class='d-flex align-center justify-center pa-2 border-thin-bottom bgc-F4F5FB height2-05rem cursor-pointer'
                                        @onclick='(() => isSigExpanded = !isSigExpanded)'>
                                        <div class='d-flex align-center transition-05s-ease overflow-hidden @(isSideBarExpanded ? "fade-in flex-1" : "fade-out")' style='@(isSideBarExpanded ? "max-width:500px" : "max-width:0px")'>
                                            <MudText Class='txt-uppercase font12 font-bold'>Signatories</MudText>
                                        </div>
                                        <MudIconButton OnClick='(() => isSigExpanded = !isSigExpanded)' Icon='@Icons.Material.Filled.PersonPin' Size='Size.Small' />
                                    </MudCardHeader>
                                    <div class='transition-05s-ease @(isSideBarExpanded ? "":"overflow-hidden") @(isSigExpanded ? "fade-in":"overflow-hidden")' style='@(isSigExpanded ? "max-height:245px" : "max-height:0px")'>
                                        <MudCardContent Class='d-flex flex-column pa-2 gap-1'>
                                            <div class='d-flex align-center gap-2'>
                                                <MudAvatar Class='mb-1 mr-1' Image='@(preparedBy.Picture.Count() > 0 ? 
                                                    $"data:image/png;base64, {Convert.ToBase64String(@preparedBy.Picture)}":"images/fglogo/fgci1-gs.png")' Size='Size.Medium' />
                                                <div class='blzrthead-disabled-minheight15 blzrth-result-height-rfp-sig flex-1'>
                                                    <BlazoredTypeahead SearchMethod='LoadEmployee' DisableClear placeholder='Prepared by'
                                                        @bind-Value='preparedBy' Debounce='500' MaximumSuggestions='10' Context='prepby' Disabled>
                                                        <SelectedTemplate>
                                                            <small class='blzsmallmain-205px'>@preparedBy.EmployeeName</small>
                                                        </SelectedTemplate>
                                                        <ResultTemplate>
                                                            <div class='d-flex align-center gap-2'>
                                                                <MudAvatar Class='avatar-20px' Image='@(prepby.Picture.Count() > 0 ? 
                                                                    $"data:image/png;base64, {Convert.ToBase64String(@prepby.Picture)}":"images/fglogo/fgci1-gs.png")' Size='Size.Small' />
                                                                <div class='d-flex flex-column'>
                                                                    <small class='font-bold'>@prepby.EmployeeName</small>
                                                                    <small>@prepby.Designation</small>
                                                                </div>
                                                            </div>
                                                        </ResultTemplate>
                                                    </BlazoredTypeahead>
                                                    <MudText Class='d-flex wspace-nowrap txt-uppercase font-bold font10 pl-1'>
                                                        Prepared By
                                                        <MudText Class='font10 font-bold' Color='Color.Error'>*</MudText>
                                                    </MudText>
                                                </div>
                                            </div>
                                            <div class='d-flex align-center gap-2'>
                                                <MudAvatar Class='mb-1 mr-1' Image='@(requestedBy.Picture.Count() > 0 ? 
                                                    $"data:image/png;base64, {Convert.ToBase64String(@requestedBy.Picture)}":"images/fglogo/fgci1-gs.png")' Size='Size.Medium' />
                                                <div class='blzrthead-disabled-minheight15 blzrth-result-height-rfp-sig flex-1'>
                                                    <BlazoredTypeahead SearchMethod='LoadEmployee' DisableClear placeholder='Requested by'
                                                        @bind-Value='requestedBy' Debounce='500' MaximumSuggestions='10' Context='reqby'>
                                                        <SelectedTemplate>
                                                            <small class='blzsmallmain-205px'>@requestedBy.EmployeeName</small>
                                                        </SelectedTemplate>
                                                        <ResultTemplate>
                                                            <div class='d-flex align-center gap-2'>
                                                                <MudAvatar Class='avatar-20px' Image='@(reqby.Picture.Count() > 0 ? 
                                                                    $"data:image/png;base64, {Convert.ToBase64String(@reqby.Picture)}":"images/fglogo/fgci1-gs.png")' Size='Size.Small' />
                                                                <div class='d-flex flex-column'>
                                                                    <small class='font-bold'>@reqby.EmployeeName</small>
                                                                    <small>@reqby.Designation</small>
                                                                </div>
                                                            </div>
                                                        </ResultTemplate>
                                                    </BlazoredTypeahead>
                                                    <MudText Class='d-flex wspace-nowrap txt-uppercase font-bold font10 pl-1'>
                                                        Requested By
                                                        <MudText Class='font10 font-bold' Color='Color.Error'>*</MudText>
                                                    </MudText>
                                                </div>
                                            </div>    
                                            <div class='d-flex align-center gap-2'>
                                                <MudAvatar Class='mb-1 mr-1' Image='@(recommendBy.Picture.Count() > 0 ? 
                                                    $"data:image/png;base64, {Convert.ToBase64String(@recommendBy.Picture)}":"images/fglogo/fgci1-gs.png")' Size='Size.Medium' />        
                                                <div class='blzrthead-disabled-minheight15 blzrth-result-height-rfp-sig flex-1'>
                                                    <BlazoredTypeahead SearchMethod='LoadEmployee' DisableClear placeholder='Recommended by'
                                                        @bind-Value='recommendBy' Debounce='500' Context='recby'>
                                                        <SelectedTemplate>
                                                            <small class='blzsmallmain-205px'>@recommendBy.EmployeeName</small>
                                                        </SelectedTemplate>
                                                        <ResultTemplate>
                                                            <div class='d-flex align-center gap-2'>
                                                                <MudAvatar Class='avatar-20px' Image='@(recby.Picture.Count() > 0 ? 
                                                                    $"data:image/png;base64, {Convert.ToBase64String(@recby.Picture)}":"images/fglogo/fgci1-gs.png")' Size='Size.Small' />
                                                                <div class='d-flex flex-column'>
                                                                    <small class='font-bold'>@recby.EmployeeName</small>
                                                                    <small>@recby.Designation</small>
                                                                </div>
                                                            </div>
                                                        </ResultTemplate>
                                                    </BlazoredTypeahead>
                                                    <MudText Class='d-flex wspace-nowrap txt-uppercase font-bold font10 pl-1'>
                                                        Recommended By
                                                        <MudText Class='font10 font-bold' Color='Color.Error'>*</MudText>
                                                    </MudText>
                                                </div>
                                            </div>
                                            <div class='d-flex align-center gap-2'>
                                                <MudAvatar Class='mb-1 mr-1' Image='@(approvedBy.Picture.Count() > 0 ? 
                                                    $"data:image/png;base64, {Convert.ToBase64String(@approvedBy.Picture)}":"images/fglogo/fgci1-gs.png")' Size='Size.Medium' />        
                                                <div class='blzrthead-disabled-minheight15 blzrth-result-height-rfp-sig flex-1'>
                                                    <BlazoredTypeahead SearchMethod='LoadEmployee' DisableClear placeholder='Approved by'
                                                        @bind-Value='approvedBy' Debounce='500' Context='aprvby'>
                                                        <SelectedTemplate>
                                                            <small class='blzsmallmain-205px'>@approvedBy.EmployeeName</small>
                                                        </SelectedTemplate>
                                                        <ResultTemplate>
                                                            <div class='d-flex align-center gap-2'>
                                                                <MudAvatar Class='avatar-20px' Image='@(aprvby.Picture.Count() > 0 ? 
                                                                    $"data:image/png;base64, {Convert.ToBase64String(@aprvby.Picture)}":"images/fglogo/fgci1-gs.png")' Size='Size.Small' />
                                                                <div class='d-flex flex-column'>
                                                                    <small class='font-bold'>@aprvby.EmployeeName</small>
                                                                    <small>@aprvby.Designation</small>
                                                                </div>
                                                            </div>
                                                        </ResultTemplate>
                                                    </BlazoredTypeahead>
                                                    <MudText Class='d-flex wspace-nowrap txt-uppercase font-bold font10 pl-1'>
                                                        Approved By
                                                        <MudText Class='font10 font-bold' Color='Color.Error'>*</MudText>
                                                    </MudText>
                                                </div>
                                            </div>
                                        </MudCardContent>
                                    </div>
                                    <MudDivider/>
                                    <MudCardHeader Class='d-flex align-center justify-center pa-2 border-thin-bottom bgc-F4F5FB height2-05rem cursor-pointer'
                                        @onclick='(() => isStatusExpanded = !isStatusExpanded)'>
                                        <div class='d-flex align-center transition-05s-ease overflow-hidden @(isSideBarExpanded ? "fade-in flex-1" : "fade-out")' style='@(isSideBarExpanded ? "max-width:500px" : "max-width:0px")'>
                                            <MudText Class='txt-uppercase font12 font-bold'>Status</MudText>
                                        </div>
                                        <MudIconButton OnClick='(() => isStatusExpanded = !isStatusExpanded)' Icon='@Icons.Material.Filled.FactCheck' Size='Size.Small' />
                                    </MudCardHeader>
                                    <div class='d-flex align-start justify-center overflow-hidden @(isStatusExpanded ? "fade-in" : "fade-out")' style='@(isStatusExpanded && isSideBarExpanded ? "max-height:500px" : "max-height:0px")'>                 
                                        <MudChip Class='chip-radius-5 font-bold font12' Size='Size.Medium' Variant='Variant.Outlined' 
                                            Style='@(Extensions.BorderColor(GlobalClass.requestForPayment.AccountingStatusId))'>
                                            @GlobalClass.requestForPayment.AccountingStaus
                                        </MudChip>
                                    </div>
                                    <MudDivider/>
                                    <MudSpacer />
                                    <div class='d-flex align-center justify-end pa-2 @(isSideBarExpanded ? "fade-in" : "fade-out")'>
                                        <MudSpacer />
                                        <div class='d-flex align-center gap-2'>
                                            <MudButton Class='btn-ios-d font12' OnClick='(()=> navigationManager.NavigateTo($"/request-payment/list"))' aria-label="Cancel" Variant='Variant.Text' Size='Size.Medium' DisableElevation>Cancel</MudButton>
                                            <MudButton Class='btn-ios-d font12' OnClick='AddRequest' aria-label="add" Color='@(currActionMode == Enums.ActionMode.Update ? Color.Info : Color.Primary)' Variant='Variant.Filled' Size='Size.Medium' DisableElevation Disabled='_processing'>
                                                @if (_processing)
                                                {
                                                    <MudProgressCircular Class="progsize-21" Size="Size.Medium" Indeterminate="true"/>
                                                    <MudText Class='font12 fweight500 pl-2'>GENERATING</MudText>
                                                } else {
                                                    <MudText Class='font12 fweight500'>
                                                        @(currActionMode == Enums.ActionMode.Update ? "UPDATE" : "GENERATE")
                                                    </MudText>
                                                }
                                            </MudButton>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                      
                    </div>
                </div>
            </MudPaper>
        }
    </MudContainer>
</div>

@code {

    #region Properties

    private string _employeeName = string.Empty, _requestedby = string.Empty,
     _recommendby = string.Empty, _approvedby = string.Empty, editDrawerMargin = string.Empty;
    private bool disableRequestCategory, openEditDrawer, isSideBarExpanded = true, isBillReqExpanded = true, isSigExpanded = true, isStatusExpanded = true, _processing;
    RequestTypeModel selectedRequestType = new RequestTypeModel();
    AccountingPOBillingModel accountingPOBilling = new AccountingPOBillingModel();
    BankModel bank = new BankModel();
    UserAccount preparedBy = new UserAccount();
    UserAccount recommendBy = new UserAccount();
    UserAccount approvedBy = new UserAccount();
    UserAccount requestedBy = new UserAccount();
    Project rowEditChargeTo = new Project();
    Project payee = new Project();
    DivisionModel selectedDivision = new DivisionModel();
    ExpenseLineModel selectedExpense = new ExpenseLineModel();
    ModeOfPaymentModel selectedPaymentMode = new ModeOfPaymentModel();
    BillingDocumentModel selectedBillingDoc = new BillingDocumentModel();
    Project selectedCharge = new Project();
    List<BillingDocumentModelCB> billingDocCB = new List<BillingDocumentModelCB>();
    List<RequestForPaymentDetailModel> removedRFPDetails = new List<RequestForPaymentDetailModel>();
    RequestForPaymentDetailModel selectedRFPDModelEdit = new RequestForPaymentDetailModel();
    private bool dataFetched, requiredApprover, requiredrequest, requiredRecommend, reqCharging, reqAmount, reqDivision, reqExpense, reqNamePayee;
    private decimal totalAmount;
    private DateTime? dateReq = DateTime.Now, dateNeed = DateTime.Now;
    private byte[] preparedByImg = new byte[] { }, requestorImg = new byte[] { }, recommendByImg = new byte[] { }, approvedByImg = new byte[] { };
    private Enums.RFPDetailTypeId rfpTypes {get;set;}
    public static Enums.ActionMode currActionMode { get; set; }
    private DateRange rfpPeriod = new DateRange(DateTime.Now, DateTime.Now);
    private MudDatePicker datePickerReq = new MudDatePicker();
    private MudDatePicker datePickerNeed = new MudDatePicker();
    private MudDateRangePicker dateRangePeriod = new MudDateRangePicker();
    #endregion

    #region Methods

    protected override async Task OnInitializedAsync()
    {
        GlobalClass.pageTitle = "REQUEST FOR PAYMENT/DISBURSEMENT";
        while (GlobalClass.currentUserAccount == null
        || GlobalClassList.modeOfPaymentList == null
        || GlobalClassList.billingDocumentList == null
        || GlobalClassList.requestTypes == null)
            await Task.Delay(1);
        await InitializedComponents();
    }
    void CompletedFetch()
    {
        dataFetched = true;
        StateHasChanged();
    }

    #region Add New RFP Details
    private void AddNew()
    {
        if(payee.ProjectId != 0)
        {
            if (GlobalClass.requestForPayment.RFPDetailTypeId == Enums.RFPDetailTypeId.None)
            {
                var temp = 1;
                var none = new RequestForPaymentDetailModel();
                none.rfpType = Enums.RFPDetailTypeId.None;
                none.expenseLineModel = Extensions.DefaultExpenseNone();
                none.ExpenseLineName = Extensions.DefaultExpenseNone().ExpenseName;
                none.ExpenseLineId = Extensions.DefaultExpenseNone().Id;
                GlobalClassList.requestForPayments.Add(none);
                rowEditChargeTo = new();
                selectedDivision = new();
                accountingPOBilling = new();
                foreach (var item in GlobalClassList.requestForPayments)
                {
                    item.TemporaryId = temp++;
                }
            }
            if (GlobalClass.requestForPayment.RFPDetailTypeId == Enums.RFPDetailTypeId.Liquidation)
                AddLiquidation();
            if (GlobalClass.requestForPayment.RFPDetailTypeId == Enums.RFPDetailTypeId.POBilling)
                AddPOBilling();
            if (GlobalClass.requestForPayment.RFPDetailTypeId == Enums.RFPDetailTypeId.PO)
                AddPO();
            if (GlobalClass.requestForPayment.RFPDetailTypeId == Enums.RFPDetailTypeId.Labor)
            {
                var temp = 1;
                var rfpDetail = new RequestForPaymentDetailModel();
                rfpDetail.rfpType = Enums.RFPDetailTypeId.Labor;
                rfpDetail.expenseLineModel = Extensions.DefaultExpenseNone();
                rfpDetail.ExpenseLineName = Extensions.DefaultExpenseNone().ExpenseName;
                rfpDetail.ExpenseLineId = Extensions.DefaultExpenseNone().Id;
                GlobalClassList.requestForPayments.Add(rfpDetail);
                foreach (var item in GlobalClassList.requestForPayments)
                {
                    item.TemporaryId = temp++;
                }
            }
        } else {
            Extensions.ShowAlert("Please select a payee.",Variant.Filled, snackbarService, Severity.Error);
        }
    }
    #endregion

    #region Add Reversal
    private void AddReversal()
    {
    var rfpDetail = new RequestForPaymentDetailModel();
    rfpDetail.rfpType = Enums.RFPDetailTypeId.Reversal;
    rfpDetail.expenseLineModel = Extensions.DefaultExpenseNone();
    rfpDetail.ExpenseLineName = Extensions.DefaultExpenseNone().ExpenseName;
    rfpDetail.ExpenseLineId = Extensions.DefaultExpenseNone().Id;
    GlobalClassList.requestForPayments.Add(rfpDetail);
    }

    #endregion

    #region Add PO
    private async void AddPO()
    {
        SetParameterSearch();
        var parameters = new DialogParameters();
        string dialogTitle = "PO look up";
        parameters.Add("dialogTitle", dialogTitle);
        parameters.Add("buttonText", "Select");
        parameters.Add("color", Color.Success);
        parameters.Add("lookUpType", Enums.LookUpType.PO);
        var options = new DialogOptions()
        {
            CloseButton = false,
            MaxWidth = MaxWidth.Large,
            FullWidth = true,
            NoHeader = false,
            DisableBackdropClick = true
        };
        var resultDialog = await dialogService.Show<Shared.Dialogs.GlobalRFPLiquidationLookUp.GlobalRFPLiquidationLookUp>(dialogTitle, parameters, options).Result;
        if (!resultDialog.Canceled)
        {
            StateHasChanged();
            TotalAmount();
        }
    }
    #endregion

    #region Add Liquidation Lookup
    async void AddLiquidation()
    {
        var parameters = new DialogParameters();
        string dialogTitle = "Liquidation look up";
        parameters.Add("dialogTitle", dialogTitle);
        parameters.Add("buttonText", "Select");
        parameters.Add("color", Color.Success);
        parameters.Add("lookUpType", Enums.LookUpType.Liquidation);
        var options = new DialogOptions()
        {
            CloseButton = false,
            MaxWidth = MaxWidth.Large,
            FullWidth = true,
            NoHeader = false,
            DisableBackdropClick = true
        };
        var resultDialog = await dialogService.Show<Shared.Dialogs.GlobalRFPLiquidationLookUp.GlobalRFPLiquidationLookUp>(dialogTitle, parameters, options).Result;
        if (!resultDialog.Canceled)
        {
            StateHasChanged();
            TotalAmount();
        }
    }
    #endregion

    #region Add PO Billing Lookup
    private async void AddPOBilling()
    {
        SetParameterSearch();
        var parameters = new DialogParameters();
        string dialogTitle = "PO Billing look up";
        parameters.Add("dialogTitle", dialogTitle);
        parameters.Add("buttonText", "Select");
        parameters.Add("color", Color.Success);
        parameters.Add("lookUpType", Enums.LookUpType.POBilling);
        var options = new DialogOptions()
        {
            CloseButton = false,
            MaxWidth = MaxWidth.Large,
            FullWidth = true,
            NoHeader = false,
            DisableBackdropClick = true
        };
        var resultDialog = await dialogService.Show<Shared.Dialogs.GlobalRFPLiquidationLookUp.GlobalRFPLiquidationLookUp>(dialogTitle, parameters, options).Result;
        if (!resultDialog.Canceled)
        {
            StateHasChanged();
            TotalAmount();
        }
    }
    #endregion

    #region Initialize Components

    private async Task InitializedComponents()
    {
        PopulateBillDocCB();
        navigationManager.LocationChanged += OnLocationChanged;

        if (GlobalClass.requestForPayment == null
        || GlobalClass.requestForPayment.Id == 0)
        {
            currActionMode = Enums.ActionMode.Create;
            selectedPaymentMode = GlobalClassList.modeOfPaymentList.Where( x=> x.ModeName.Equals("None")).FirstOrDefault()?? new();//Defualt MOP 
            selectedRequestType = GlobalClassList.requestTypes.Where( x=> x.TypeName == "None").FirstOrDefault()?? new();
            rfpTypes = Enums.RFPDetailTypeId.None;
            switch (Extensions.CheckUrlType(navigationManager.Uri))
            {
                case true:
                    requestedBy = new();
                    recommendBy = new();
                    approvedBy = new();
                    payee = new();
                    bank = new();
                    requestorImg = new byte[] { };
                    recommendByImg = new byte[] { };
                    approvedByImg = new byte[] { };
                    dateNeed = DateTime.Now;
                    dateReq = DateTime.Now;
                    disableRequestCategory = false;
                    preparedBy = GlobalClass.currentUserAccount;
                    _employeeName = GlobalClass.currentUserAccount.EmployeeName;
                    preparedByImg = GlobalClass.currentUserAccount.Picture;
                    GlobalClass.requestForPayment = new RequestForPaymentModel();
                    GlobalClassList.requestForPayments = new List<RequestForPaymentDetailModel>();
                    var result = GlobalClassList.accountingStatusList.Where(x=>x.StatusName.Equals("rfp-generated", StringComparison.InvariantCultureIgnoreCase)).FirstOrDefault();
                    if (result != null)
                    {
                        GlobalClass.requestForPayment.AccountingStatusId = result.Id;   
                        GlobalClass.requestForPayment.AccountingStaus = result.StatusName;   
                    }
                    rfpPeriod = new DateRange(DateTime.Now,DateTime.Now);
                    break;

                default:

                    if (GlobalClass.forPrintingOrSaveRFP == null)
                        navigationManager.NavigateTo("/request-payment/list");
                    else
                        RemappedProperties();
                    break;
            }
        }
        else
        {
            disableRequestCategory = true;
            await DisplayProperties();
            TotalAmount();
        }
        //Arange Type firstNone
        RequestTypeModel rNone = GlobalClassList.requestTypes.Where( r => r.TypeName.Equals("None")).FirstOrDefault()?? new();
        GlobalClassList.requestTypes.Remove(rNone);
        GlobalClassList.requestTypes.Insert(0, rNone);
        //Arange Mode of payment
        ModeOfPaymentModel mNone = GlobalClassList.modeOfPaymentList.Where( r => r.ModeName.Equals("None")).FirstOrDefault()?? new();
        GlobalClassList.modeOfPaymentList.Remove(mNone);
        GlobalClassList.modeOfPaymentList.Insert(0, mNone);

        CompletedFetch();
    }

    #endregion

    #region Remapping Properties

    async void RemappedProperties()
    {
        @* currActionMode = Enums.ActionMode.Update; *@
        selectedRequestType = GlobalClassList.requestTypes.Where( r => r.Id == GlobalClass.requestForPayment.RequestTypeId).FirstOrDefault()?? new();
        rfpTypes = (Enums.RFPDetailTypeId) GlobalClass.forPrintingOrSaveRFP.RFPDetailTypeId;
        preparedBy.EmployeeId = GlobalClass.forPrintingOrSaveRFP.PreparedById;
        _employeeName = GlobalClass.forPrintingOrSaveRFP.PreparedByName;
        requestedBy.EmployeeId = GlobalClass.forPrintingOrSaveRFP.RequestedById;
        _requestedby = GlobalClass.forPrintingOrSaveRFP.RequestedByName;
        recommendBy.EmployeeId = GlobalClass.forPrintingOrSaveRFP.RecommendedById;
        _recommendby = GlobalClass.forPrintingOrSaveRFP.RecommendedByName;
        approvedBy.EmployeeId = GlobalClass.forPrintingOrSaveRFP.ApprovedById;
        _approvedby = GlobalClass.forPrintingOrSaveRFP.ApprovedByName;
        payee.ProjectId = GlobalClass.forPrintingOrSaveRFP.PayeeId;
        payee.ProjectCategoryId = GlobalClass.forPrintingOrSaveRFP.PayeeCategoryId;
        payee.ProjectName = GlobalClass.forPrintingOrSaveRFP.PayeeName;

        preparedByImg = GlobalClass.forPrintingOrSaveRFP.PreparedByPicture;
        requestorImg = GlobalClass.forPrintingOrSaveRFP.RequestedByPicture;
        recommendByImg = GlobalClass.forPrintingOrSaveRFP.RecommendedByPicture;
        approvedByImg = GlobalClass.forPrintingOrSaveRFP.ApprovedByPicture;

        dateNeed = GlobalClass.forPrintingOrSaveRFP.DateNeeded;
        dateReq = GlobalClass.forPrintingOrSaveRFP.RequestDate;
        rfpPeriod = new DateRange(GlobalClass.forPrintingOrSaveRFP.PeriodDateFrom, GlobalClass.forPrintingOrSaveRFP.PeriodDateTo);
        selectedPaymentMode = GlobalClassList.modeOfPaymentList.Where( mode => mode.Id ==GlobalClass.requestForPayment.ModeOfPaymentId).FirstOrDefault()?? new();
        bank = GlobalClassList.banks.Where( b => GlobalClass.requestForPayment.BankId == b.Id).FirstOrDefault()?? new(); 

        requestedBy = await globalService.GetEmployeeById(GlobalClass.forPrintingOrSaveRFP.RequestedById, GlobalClass.token);
        recommendBy = await globalService.GetEmployeeById(GlobalClass.forPrintingOrSaveRFP.RecommendedById, GlobalClass.token);
        approvedBy = await globalService.GetEmployeeById(GlobalClass.forPrintingOrSaveRFP.ApprovedById, GlobalClass.token);
        preparedBy = await globalService.GetEmployeeById(GlobalClass.forPrintingOrSaveRFP.PreparedById, GlobalClass.token);

        GlobalClass.requestForPayment.RFPBillingDocuments.ForEach(billdocs =>
        {
            billingDocCB.Where(x => x.Id == billdocs.BillingDocumentId).ToList().ForEach(x =>
              {
                  x.IsChecked = true;
                  x.BillingDocumentId = billdocs.Id;
              });
        });

        Task t = Task.WhenAll(RepopulateTableForMapping());
        await t;
        if (t.Status == TaskStatus.RanToCompletion)
            StateHasChanged();
        TotalAmount();
    }

    private async Task RepopulateTableForMapping()
    {
        List<RequestForPaymentDetailModel> RFPList = GlobalClassList.requestForPayments;
        GlobalClassList.requestForPayments = new List<RequestForPaymentDetailModel>();
        foreach (var item in RFPList)
        {
            RequestForPaymentDetailModel rfpPDM = new RequestForPaymentDetailModel();
            var filterParameter = new FilterParameter() { IsProject = true, ProjectName = item.ChargedName, IsId = false };
            rfpPDM = item;
            var project = await globalService.LoadChargeProjectLine(filterParameter, GlobalClass.token);
            //Mapping of details
            rfpPDM.projectModel = project.FirstOrDefault() ?? new();
            item.divisionModel.Id = item.DivisionId;
            item.divisionModel.divisionName = item.DivisionName;
            item.divisionModel.shortcutName = item.DivisionShortcutName;
            item.expenseLineModel.Id = item.ExpenseLineId;
            item.expenseLineModel.ExpenseName = item.ExpenseLineName; 

            GlobalClassList.requestForPayments.Add(rfpPDM);
        }
    }

    #endregion

    #region Location Changed

    private void OnLocationChanged(object? sender, LocationChangedEventArgs args)
    {
        GlobalClass.requestForPayment = new();
        GlobalClassList.requestForPayments = new();
        Dispose();
    }


    public void Dispose()
    {
        navigationManager.LocationChanged -= OnLocationChanged;
    }

    #endregion

    #region Saving/Print RFP

    private void AddRequest()
    {
        _processing = true;
        if (Validation())
        {
            GlobalClass.forPrintingOrSaveRFP = MapProperties();
            navigationManager.NavigateTo($"request-payment/print");
        }
        else
            Extensions.ShowAlert("Cannot create Request fo Payment, Incomplete fields.", Variant.Filled, snackbarService, Severity.Error);
        _processing = false;
    }

    #endregion

    #region Refresh Table

    private void RefreshTable()
    {
        GlobalClassList.requestForPayments = new List<RequestForPaymentDetailModel>();
    }

    #endregion

    #region Display Properties

    async Task DisplayProperties()
    {
        await GetByIdDisplayProperties();
        GlobalClass.requestForPayment.RFPBillingDocuments.ForEach(billdocs =>
        {
            billingDocCB.Where(x => x.Id == billdocs.BillingDocumentId).ToList().ForEach(x =>
        {
              x.IsChecked = true;
              x.BillingDocumentId = billdocs.Id;
          });
        });

        payee.ProjectName = GlobalClass.requestForPayment.PayeeName;
        payee.ProjectId = GlobalClass.requestForPayment.PayeeId;
        payee.ProjectCategoryId = GlobalClass.requestForPayment.PayeeCategoryId;
        dateNeed = GlobalClass.requestForPayment.DateNeeded;
        dateReq = GlobalClass.requestForPayment.RequestDate;
        
        bank = GlobalClassList.banks.Where( b => GlobalClass.requestForPayment.BankId == b.Id).FirstOrDefault()?? new(); 
        rfpPeriod = new DateRange(GlobalClass.requestForPayment.PeriodDateFrom,GlobalClass.requestForPayment.PeriodDateTo);

        _employeeName = GlobalClass.requestForPayment.PreparedByName;
        _requestedby = GlobalClass.requestForPayment.RequestedByName;
        _recommendby = GlobalClass.requestForPayment.RecommendedByName;
        _approvedby = GlobalClass.requestForPayment.ApprovedByName;
        await RepopulateTableForMapping();
    }
    async Task GetByIdDisplayProperties()
    {
        selectedPaymentMode = GlobalClassList.modeOfPaymentList.Where( mode => mode.Id ==GlobalClass.requestForPayment.ModeOfPaymentId).FirstOrDefault()?? new();
        selectedRequestType = await requestTypeService.GetRequestType(GlobalClass.requestForPayment.RequestTypeId, GlobalClass.token);
        rfpTypes = (Enums.RFPDetailTypeId) GlobalClass.requestForPayment.RFPDetailTypeId;
        requestedBy = await globalService.GetEmployeeById(GlobalClass.requestForPayment.RequestedById, GlobalClass.token);
        recommendBy = await globalService.GetEmployeeById(GlobalClass.requestForPayment.RecommendedById, GlobalClass.token);
        approvedBy = await globalService.GetEmployeeById(GlobalClass.requestForPayment.ApprovedById, GlobalClass.token);
        preparedBy = await globalService.GetEmployeeById(GlobalClass.requestForPayment.PreparedById, GlobalClass.token);
        GlobalClassList.requestForPayments = await requestForPaymentService.LoadRequestPaymentDetail(GlobalClass.requestForPayment.Id, GlobalClass.token);

        preparedByImg = await GetEmployeeImg(GlobalClass.requestForPayment.PreparedById);
        requestorImg = await GetEmployeeImg(GlobalClass.requestForPayment.RequestedById);
        recommendByImg = await GetEmployeeImg(GlobalClass.requestForPayment.RecommendedById);
        approvedByImg = await GetEmployeeImg(GlobalClass.requestForPayment.ApprovedById);
    }

    #endregion

    #region Mapping RFP

    RequestForPaymentModel MapProperties()
    {
        MapBillingDocs();

        GlobalClass.requestForPayment.PayeeId = payee.ProjectId;
        GlobalClass.requestForPayment.PayeeName = payee.ProjectName;
        GlobalClass.requestForPayment.PayeeCategoryId = payee.ProjectCategoryId;
        GlobalClass.requestForPayment.RequestDate = dateReq;
        GlobalClass.requestForPayment.DateNeeded = dateNeed;
        //Fix remarks not set when saving
        //GlobalClass.requestForPayment.Remarks = "";

        GlobalClass.requestForPayment.AccountingStatusId = GlobalClassList.accountingStatusList
        .Where(x => x.StatusEnumCategoryId == Enums.AccountingStatusEnumCategory.RFPG)
        .Select(x => x.Id)
        .FirstOrDefault();

        GlobalClass.requestForPayment.PreparedById = preparedBy.EmployeeId;
        GlobalClass.requestForPayment.PreparedByName = preparedBy.EmployeeName;
        GlobalClass.requestForPayment.RequestTypeId = selectedRequestType.Id;
        GlobalClass.requestForPayment.ModeOfPaymentId = selectedPaymentMode.Id;
        GlobalClass.requestForPayment.ModeOfPayment = selectedPaymentMode.ModeName;
        GlobalClass.requestForPayment.BankName = bank.BankName;
        GlobalClass.requestForPayment.ApprovedById = approvedBy.EmployeeId;
        GlobalClass.requestForPayment.ApprovedByName = approvedBy.EmployeeName;
        GlobalClass.requestForPayment.RecommendedById = recommendBy.EmployeeId;
        GlobalClass.requestForPayment.RecommendedByName = recommendBy.EmployeeName;
        GlobalClass.requestForPayment.RequestedById = requestedBy.EmployeeId;
        GlobalClass.requestForPayment.RequestedByName = requestedBy.EmployeeName;
        GlobalClass.requestForPayment.RequestForPaymentDetails = GlobalClassList.requestForPayments;
        if(bank == null)
            bank = new();
        GlobalClass.requestForPayment.BankId = bank.Id;

        GlobalClass.requestForPayment.Activity = GlobalClass.requestForPayment.Id == 0
        ? "New request for payment created" : "Request for payment updated";

        GlobalClass.requestForPayment.UserId = GlobalClass.currentUserAccount.EmployeeId;
        GlobalClass.requestForPayment.LogDateTime = DateTime.Now;
        GlobalClass.requestForPayment.RemovedRequestForPaymentDetails = removedRFPDetails.Count() == 0
        ? new List<RequestForPaymentDetailModel>() : removedRFPDetails.ToList();

        GlobalClass.requestForPayment.PreparedByPicture = preparedByImg;
        GlobalClass.requestForPayment.RequestedByPicture = requestorImg;
        GlobalClass.requestForPayment.RecommendedByPicture = recommendByImg;
        GlobalClass.requestForPayment.ApprovedByPicture = approvedByImg;

        GlobalClass.requestForPayment.PeriodDateFrom = rfpPeriod?.Start;
        GlobalClass.requestForPayment.PeriodDateTo = rfpPeriod?.End;
        Console.WriteLine(selectedRequestType.Id);

        return GlobalClass.requestForPayment;
    }

    void MapBillingDocs()
    {
        var billDocs = new List<RFPBillingDocumentModel>();
        billDocs = billingDocCB.Where(x => x.IsChecked == true).Select(bd => new RFPBillingDocumentModel()
        {
            Id = bd.BillingDocumentId,
            BillingDocumentId = bd.Id,
            DocumentName = bd.selectedBillingDoc.DocumentName,
            IsActive = true

        }).ToList();

        GlobalClass.requestForPayment.RFPBillingDocuments = billDocs.ToList();

        RemovedRFPBillingDocuments();
    }

    void RemovedRFPBillingDocuments()
    {
        var removedDocs = new List<RFPBillingDocumentModel>();
        removedDocs = billingDocCB.Where(x => x.IsChecked == false && x.BillingDocumentId != 0).Select(bd => new RFPBillingDocumentModel()
        {

            Id = bd.BillingDocumentId,
            BillingDocumentId = bd.Id,
            RequestForPaymentId = GlobalClass.requestForPayment.Id,
            IsActive = false

        }).ToList();

        GlobalClass.requestForPayment.RemovedRFPBillingDocuments = removedDocs;
    }

    #endregion

    #region Populate Billing Documents
    private void PopulateBillDocCB()
    {
        foreach (var item in GlobalClassList.billingDocumentList)
        {
            BillingDocumentModelCB cbValue = new BillingDocumentModelCB();
            cbValue.Id = item.Id;
            cbValue.IsChecked = false;
            cbValue.selectedBillingDoc = item;
            billingDocCB.Add(cbValue);
        }
    }
    #endregion

    #region Total Amount

    void TotalAmount()
    {
        var total = GlobalClassList.requestForPayments.Sum(x => x.Amount);
        totalAmount = decimal.Round(total, 2);
    }

    #endregion

    #region Search Bank

    #endregion

    #region Remove RFP

    private async void RemovedRequestForPaymentDetails(RequestForPaymentDetailModel RFPremoved)
    {
        if (openEditDrawer)
        {
            openEditDrawer = !openEditDrawer;
        }

        if (RFPremoved.Id != 0)
        {
            var parameters = new DialogParameters();
            string contentText = "Request for payment details ";
            string dialogTitle = "Remove ";
            parameters.Add("dialogTitle", dialogTitle);
            parameters.Add("contentText", contentText);
            parameters.Add("actionMode", Enums.ActionMode.Delete);
            var options = new DialogOptions()
            {
                CloseButton = false,
                MaxWidth = MaxWidth.ExtraSmall,
                FullWidth = true,
                NoHeader = false,
                DisableBackdropClick = true
            };
            var resultDialog = await dialogService.Show<Shared.Dialogs.GenericPromptDialogs.GenericPrompt>(dialogTitle, parameters, options).Result;
            if (!resultDialog.Canceled)
            {
                RFPremoved.IsActive = false;
                removedRFPDetails.Add(RFPremoved);
                GlobalClassList.requestForPayments.Remove(RFPremoved);
            }
        }
        else
        {
            GlobalClassList.requestForPayments.Remove(RFPremoved);
            GlobalClass.requestForPayment.RemovedRequestForPaymentDetails = removedRFPDetails.ToList();
        }
        TotalAmount();
        StateHasChanged();
    }

    #endregion

    #region Validation

    private bool Validation()
    {
        bool validated = false;
        if (requestedBy.EmployeeId == 0 || requestedBy == null
        || approvedBy.EmployeeId == 0 || recommendBy == null
        || recommendBy.EmployeeId == 0 || recommendBy == null
        || payee.ProjectId == 0)
        {
            requiredApprover = true;
            requiredrequest = true;
            requiredRecommend = true;
            reqNamePayee = true;
            validated = false;
        }
        else
        {
            requiredApprover = false;
            requiredrequest = false;
            requiredRecommend = false;
            validated = true;
        }
        if (selectedPaymentMode.Id == 0)
        {
            validated = false;
            return validated;
        }
        else if (selectedRequestType == null)
        {
            validated = false;
        }
        else if (payee.ProjectId == 0)
        {
            validated = false;
        }
        else if (bank.Id == 0)
        {
            validated = false;
        }

        else if (GlobalClassList.requestForPayments.Count == 0)
        {
            validated = false;
        }
        else
        {
            validated = true;
        }

        if (GlobalClassList.requestForPayments.Count() > 0)
        {
            bool valid = true;
            GlobalClassList.requestForPayments.ForEach(req =>
            {
                if (req.ChargedId == 0)
                {
                    EditRow(req);
                    SaveChanges();
                    valid = false;
                }
            });
            validated = valid;
            return validated;
        }
        if(GlobalClassList.requestForPayments.Any(x => 
            x.ChargedId == 0 || 
            x.DivisionId == 0 || 
            x.ExpenseLineId == 0 ||
            String.IsNullOrEmpty(x.Particulars)))
            validated = false;
        return validated;
    }

    #endregion

    private void Submit()
    {
        ValidateEntries();
    }

    private void ValidateEntries()
    {
        bool isBillingDocs = billingDocCB.Where(x => x.IsChecked).ToList().Count() > 1 ? true : false;
        if (isBillingDocs)
            Console.WriteLine("Multiple Docs");
    }

    private async Task<byte[]> GetEmployeeImg(long employeeId)
    {
        var employeeDetail = await globalService.GetEmployeeById(employeeId, GlobalClass.token);
        return employeeDetail.Picture;
    }

    private void EditRow(RequestForPaymentDetailModel model)
    {
        selectedRFPDModelEdit = new RequestForPaymentDetailModel();
        selectedRFPDModelEdit = model;
        if (!openEditDrawer)
        {
            openEditDrawer = !openEditDrawer;
        }
    }

    private void SaveChanges()
    {
        if (!ValidateEditedEntries())
        {
            Extensions.ShowAlert("Please complete required fields", Variant.Filled, snackbarService, Severity.Error);
            return;
        }

        foreach (var item in GlobalClassList.requestForPayments)
        {
            if (item.TemporaryId == selectedRFPDModelEdit.TemporaryId)
            {
                item.Particulars = selectedRFPDModelEdit.Particulars;
                item.Amount = selectedRFPDModelEdit.Amount;
                selectedRFPDModelEdit.InvoiceNo = string.IsNullOrEmpty(selectedRFPDModelEdit.InvoiceNo) ? "None" : (selectedRFPDModelEdit.InvoiceNo);
                selectedRFPDModelEdit.Remarks = string.IsNullOrEmpty(selectedRFPDModelEdit.Remarks) ? "None" : (selectedRFPDModelEdit.Remarks);
            }
            break;
        }
        openEditDrawer = !openEditDrawer;
        TotalAmount();
    }

    private bool ValidateEditedEntries()
    {
        ResetValidations();
        if (selectedRFPDModelEdit.ChargedId == 0)
        {
            reqCharging = true;
        }
        if (selectedRFPDModelEdit.Amount == 0)
        {
            reqAmount = true;
        }
        if (selectedRFPDModelEdit.DivisionId == 0)
        {
            reqDivision = true;
        }
        if (selectedRFPDModelEdit.ExpenseLineId == 0)
        {
            reqExpense = true;
        }
        if (reqCharging || reqAmount || reqDivision || reqExpense)
            return false;
        return true;
    }

    private void ResetValidations()
    {
        reqCharging = false;
        reqAmount = false;
        reqDivision = false;
        reqExpense = false;
    }
    #endregion

    #region New Entry
    private async Task New()
    {
        var parameters = new DialogParameters();
        parameters.Add("contentText", "create a new request for payment");
        parameters.Add("dialogTitle", "Create New");
        parameters.Add("buttonText", "Create New");
        parameters.Add("actionMode", Enums.ActionMode.Prompt);
        var options = new DialogOptions() { CloseButton = false, MaxWidth = MaxWidth.Small, FullWidth = false, NoHeader = false };
        var resultDialog = await dialogService.Show<Shared.Dialogs.GenericPromptDialogs.GenericPrompt>(string.Empty,parameters,options).Result;
        if(!resultDialog.Canceled)
        {
            string thisPage = "rfp-create";
            navigationManager.NavigateTo($"/refresh/{thisPage}");
        }
    }
    #endregion
    private void AmountChange(decimal amount)
    {
        selectedRFPDModelEdit.Amount = selectedRFPDModelEdit.rfpType == Enums.RFPDetailTypeId.Reversal? -Math.Abs(amount):amount;
        TotalAmount();
    }
    private void PromptValidation(Enums.RFPDetailTypeId rfps)
    {
        if(GlobalClassList.requestForPayments.Count > 0)
        {
            //Initial alert
            Extensions.ShowAlert("Please remove all the details before selecting new request category.",Variant.Filled,snackbarService,Severity.Error);
        } else 
        {
            rfpTypes = rfps;
            GlobalClass.requestForPayment.RFPDetailTypeId = rfps;
        }
    }

    private async Task<IEnumerable<Project>> LoadProject(string projectName)
    {
      var filterParameter = new FilterParameter()
      {
        IsProject = true,
        ProjectName = projectName,
        IsId = false
      };
      var projects = await globalService.LoadPayees(filterParameter,GlobalClass.token);
      return projects;
    }

    private async Task<IEnumerable<UserAccount>> LoadEmployee(string employeeName)
    {
        var filterParameter = new FilterParameter()
        {
            IsName = true,
            Name = employeeName,
            IsLookUp = true
        };
        var employee = await globalService.LoadAllEmployee(filterParameter, GlobalClass.token);
        return employee;
    }

    private void SelectedRFPCat(Enums.RFPDetailTypeId selRFPType)
    {
        rfpTypes = selRFPType;
        GlobalClass.requestForPayment.RFPDetailTypeId = selRFPType;
    } 

    private void SelectedReqType(RequestTypeModel selReqType)
    {
        selectedRequestType = selReqType;
        GlobalClass.requestForPayment.RequestTypeId = selReqType.Id;
    }
    private void SetParameterSearch()
    {
        GlobalClass.requestForPayment.PayeeId = payee.ProjectId;
        GlobalClass.requestForPayment.PayeeCategoryId = payee.ProjectCategoryId;
    }

    private void DateRangeToday(MudDatePicker datePickerName, MudDateRangePicker dateRangePickerName)
    {
        if(datePickerName == datePickerReq || datePickerName == datePickerNeed)
        {
            dateReq = DateTime.Now;
            SubmitDateRangePicker(datePickerName, new());
        }
        if(dateRangePickerName == dateRangePeriod)
        {
            rfpPeriod = new DateRange(DateTime.Now.AddDays(-1), DateTime.Now.Date);
            SubmitDateRangePicker(new(), dateRangePickerName);
        }
    }
    private void CancelDateRangePicker(MudDatePicker datePickerName, MudDateRangePicker dateRangePickerName)
    {
        if (datePickerName == datePickerReq || datePickerName == datePickerNeed)
            datePickerName.Close(false);
        if (dateRangePickerName == dateRangePeriod)
             dateRangePickerName.Close(false);
    }
    private void SubmitDateRangePicker(MudDatePicker datePickerName, MudDateRangePicker dateRangePickerName)
    {
        if (datePickerName == datePickerReq || datePickerName == datePickerNeed)
            datePickerName.Close(true);
        if (dateRangePickerName == dateRangePeriod)
            dateRangePickerName.Close(true);
    }
}