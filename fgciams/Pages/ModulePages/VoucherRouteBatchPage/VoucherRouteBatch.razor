@page "/voucher/batch"
@inject IVoucherService voucherService
@inject IVoucherRouteBatchService voucherBatchRouteService
@inject ISnackbar SnackbarService
@inject IJSRuntime JSRuntime
@inject IGlobalService globalService
@inject NavigationManager navigationManager
@inject IDialogService dialogService

<div class='page-cont d-flex'>
  <MudContainer Class='vroutebatchpage pa-2' Fixed='false' MaxWidth='MaxWidth.Large'>
    @if (!dataFetched)
    {
      <MudPaper Class='d-flex flex-1 flex-column pa-2' style="height: calc(100vh - 125px);">
        <MudSkeleton SkeletonType='SkeletonType.Text' Height='100px' Animation='Animation.Wave' />
        <MudSkeleton SkeletonType='SkeletonType.Rectangle' Height='71vh' Animation='Animation.Wave' />
      </MudPaper>
    }
    else
    {
      <MudGrid Spacing='1'>
        <MudItem xs=6>
          <MudTable Class='small-toolbar-gutter3 toolbar-sm-font12' ServerData='@(new Func<TableState, Task<TableData<VoucherModel>>>(LoadVoucherServer))' 
            Height='calc(100vh - 300px)' FixedHeader FixedFooter Hover Dense  @ref='tableVariable'>
            <ToolBarContent>
              <div class='d-flex flex-1 align-center gap-2'>
                <MudText Typo='Typo.caption'>
                  @showSelectedVouchers.Count() 
                  @(showSelectedVouchers.Count() == 1 ? "item" : "items") 
                  in total
                </MudText>
                <MudSpacer />
                <MudTooltip Text="Refresh Table">
                  <MudIconButton Icon="@Icons.Material.Filled.Refresh" Size="Size.Small" OnClick='(()=> tableVariable!.ReloadServerData())' ></MudIconButton>
                </MudTooltip>
                <MudTextField Class='txtfield-75 width5' T='string' ValueChanged='@(s=>OnSearch(s))' Placeholder='Control Number' Margin='Margin.Dense'
                Adornment='Adornment.Start' AdornmentIcon='@Icons.Material.Filled.Search' IconSize='Size.Small'
                Clearable='true' Variant='Variant.Outlined' />
              </div>
            </ToolBarContent>
            <ColGroup>
              <col style="width:10px"/>
              <col style="width:10px"/>
              <col style="width:10px"/>
              <col style="width:10px"/>
              <col />
              <col style="width:10px"/>
            </ColGroup>
            <HeaderContent>
                <MudTh Class='customheader-6'></MudTh>
                <MudTh Class='customheader-6 text-center'>Date</MudTh>
                <MudTh Class='customheader-6 text-center wspace-nowrap'>Control No.</MudTh>
                <MudTh Class='customheader-6 text-center'>Status</MudTh>
                <MudTh Class='customheader-6 text-center'></MudTh>
                <MudTh Class='customheader-6 text-right'>Amount</MudTh>
            </HeaderContent>
            <RowTemplate>
                <MudTd Class='@(RowState(context,true))'>
                  <MudTooltip Text='Select'>
                    <MudCheckBox Checked='@context.IsSelected' CheckedChanged='( (bool b)=> AllTagIsRouted(context) )'  Size='Size.Small' Color='Color.Info' Dense />
                  </MudTooltip>
                </MudTd>
                <MudTd Class='@(RowState(context,false))' DataLabel="Date">
                  <MudChip Class='chip-radius-5 font-bold font10' OnClick='(() => Extensions.CopyTextToClipboard(context.ControlNumber, SnackbarService, JSRuntime))'
                      Color='Color.Default' Variant='Variant.Outlined' Size='Size.Small'>
                      @context.VoucherDate.ToShortDateString()
                  </MudChip>
                </MudTd>
                <MudTd Class='@(RowState(context,true))' DataLabel="Ctrl #">
                  <MudTooltip Text='@($"See {context.ControlNumber}")' Arrow Placement='Placement.Top'>
                        <MudButton Class='btn-tbl-link' StartIcon='@Icons.Material.Filled.Link'
                        Href='@FindReference(context)' Target='_blank'
                        Color='Color.Error' Variant='Variant.Outlined' Size='Size.Small' DisableElevation>
                            @context.ControlNumber
                        </MudButton>
                    </MudTooltip>
                </MudTd>
                <MudTd Class='@(RowState(context,true))' DataLabel="Status">
                   <MudChip Class='chip-radius-5 font-bold font10' OnClick='(() => Extensions.CopyTextToClipboard(context.ControlNumber, SnackbarService, JSRuntime))'
                      Color='Color.Info' Variant='Variant.Outlined' Size='Size.Small'>
                      @context.StatusName
                    </MudChip>
                </MudTd>
                <MudTd Class='@(RowState(context,true))' DataLabel="Desc">
                  <MudToggleIconButton @bind-Toggled='@context.ShowDesc' Size='Size.Small' ToggledSize='Size.Small'
                    Icon="@Icons.Material.Filled.Description" Color="@Color.Default" Title="Show Description"
                    ToggledIcon="@Icons.Material.Filled.Description" ToggledColor="@Color.Info" ToggledTitle="Show Description"/>
                </MudTd>
                <MudTd Class='@(RowState(context,false))' DataLabel="Amt">
                  <div class='tooltipw100'>
                      <MudTooltip Class='flex-1' Text='@(Extensions.GetEnumDescription(Enums.BankCurrency.PhilippinePeso) + " " + context.TotalAmount.ToString("N2"))' 
                        Arrow Placement='Placement.Top' Color='Color.Success'>
                        <div class='amount-container'>
                          <small class='@(context.TotalAmount > 0 ? "font-bold color-green":"font-bold color-red")'>
                            @Extensions.GetEnumDescription(Enums.BankCurrency.PhilippinePeso)
                          </small>
                          <MudSpacer />
                          <small class='@(context.TotalAmount > 0 ? "txt-green":"txt-red")'>
                            @context.TotalAmount.ToString("N2")
                          </small>
                        </div>
                      </MudTooltip>
                  </div>
                </MudTd>
            </RowTemplate>
            <NoRecordsContent>
              <MudText Class='txt-uppercase font-bold font12' Color='Color.Error'>No records found</MudText>
            </NoRecordsContent>
            <ChildRowContent>
              @if (context.ShowDesc)
              {
                <MudTr>
                    <td colspan='3'></td>
                    <td colspan='3'>
                      <MudPaper Class='ma-2 pa-2'>
                        <small>
                          @(!string.IsNullOrWhiteSpace(context.Description) ? context.Description:"No description")
                        </small> 
                      </MudPaper>
                    </td>
                </MudTr>
              }
            </ChildRowContent>
          </MudTable>
        </MudItem>
        <MudItem xs=6>
          <MudTable Class='small-toolbar-gutter3 toolbar-sm-font12' Items='GlobalClassList.VoucherBatchList' Height='calc(100vh - 300px)' 
            FixedHeader FixedFooter Hover Dense>
            <ToolBarContent>
              <div class='d-flex flex-1 align-center pa-2'>
                <MudGrid Spacing='1'>
                  <MudItem Class='d-flex align-center gap-2' xs=4>
                    <MudText Class='wspace-nowrap txt-uppercase font-bold font10'>date :</MudText>
                    <MudDatePicker Class='txt-top-0 font14-txtfield txtfield-right ' @bind-Date='BatchDate' IconSize='Size.Small' Margin='Margin.Dense' 
                      DisableToolbar ReadOnly MinDate='@Convert.ToDateTime(BatchDate).AddDays(-1)' MaxDate='@BatchDate'/>
                  </MudItem>
                  <MudItem Class='d-flex align-center gap-2' xs=8>
                    <MudText Class='wspace-nowrap txt-uppercase font-bold font10'>remarks :</MudText>
                    <MudTextField Class='txtfield-overflow-ellipsis txtfield-75' @bind-Value='voucherBatchRoute.Remarks' Variant='Variant.Outlined' Margin='Margin.Dense' Placeholder='Remarks' Clearable/>
                  </MudItem>
                </MudGrid>
              </div>
            </ToolBarContent>
            <ColGroup>
              <col style="width:10px"/>
              <col style="width:10px"/>
              <col style="width:10px"/>
              <col />
              <col style="width:10px"/>
            </ColGroup>
            <HeaderContent>
                <MudTh Class='customheader-6'></MudTh>
                <MudTh Class='customheader-6 text-center'>Date</MudTh>
                <MudTh Class='customheader-6 text-center wspace-nowrap'>Control No.</MudTh>
                <MudTh Class='customheader-6 text-center'>Status</MudTh>
                <MudTh Class='customheader-6 text-right'>Amount</MudTh>
            </HeaderContent>
            <RowTemplate>
                <MudTd Class='text-center'>
                  <MudTooltip Text='Remove'>
                    <MudIconButton OnClick='(()=>RemoveBatch(context))' Icon='@Icons.Material.Filled.RemoveCircle' Size='Size.Small' Color='Color.Error' />
                  </MudTooltip>
                </MudTd>
                <MudTd DataLabel="Voucher Date">
                  <MudChip Class='chip-radius-5 txt-uppercase font-bold font10' Icon='@Icons.Material.Filled.CalendarMonth' Variant='Variant.Outlined' Color='Color.Dark' Size='Size.Small'>
                    @context.VoucherDate.ToShortDateString()
                  </MudChip>
                </MudTd>
                <MudTd Class='text-center' DataLabel="Control Number">
                    <MudChip Class='chip-radius-5 font-bold font10' OnClick='(() => Extensions.CopyTextToClipboard(context.ControlNumber, SnackbarService, JSRuntime))'
                      Color='Color.Error' Variant='Variant.Outlined' Size='Size.Small'>
                      @context.ControlNumber
                    </MudChip>
                </MudTd>
                <MudTd Class='text-center' DataLabel="Status">
                  <MudChip Class='chip-radius-5 font-bold font10' OnClick='(() => Extensions.CopyTextToClipboard(context.ControlNumber, SnackbarService, JSRuntime))'
                    Variant='Variant.Outlined' Size='Size.Small' Style="@Extensions.BorderColor(context.AccountingStatusId)">
                    @context.StatusName
                  </MudChip>
                </MudTd>
                <MudTd DataLabel="Amt">
                  <div class='tooltipw100'>
                    <MudTooltip Class='flex-1' Text='@(Extensions.GetEnumDescription(Enums.BankCurrency.PhilippinePeso) + " " + context.TotalAmount.ToString("N2"))' 
                      Arrow Placement='Placement.Top' Color='Color.Success'>
                      <div class='amount-container'>
                        <small class='@(context.TotalAmount > 0 ? "font-bold color-green":"font-bold color-red")'>
                          @Extensions.GetEnumDescription(Enums.BankCurrency.PhilippinePeso)
                        </small>
                        <MudSpacer />
                        <small class='@(context.TotalAmount > 0 ? "txt-green":"txt-red")'>
                          @context.TotalAmount.ToString("N2")
                        </small>
                      </div>
                    </MudTooltip>
                  </div>
                </MudTd>
            </RowTemplate>
            <NoRecordsContent>
              <MudText Class='txt-uppercase font-bold font12' Color='Color.Error'>No records found</MudText>
            </NoRecordsContent>
            <ChildRowContent>
              @if (context.ShowDesc)
              {
                <MudTr>
                    <td colspan='3'></td>
                    <td colspan='3'>
                      <MudPaper Class='ma-2 pa-2'>
                        <MudText Typo='Typo.body2'>@context.Description</MudText> 
                      </MudPaper>
                    </td>
                </MudTr>
              }
            </ChildRowContent>
          </MudTable>
        </MudItem>
        <MudItem xs=12>
          <MudPaper Class='d-flex align-center mx-10 gap-2'>
            <div class='d-flex align-center justify-center gap-2 width300px blzrtypahead-unset-width pa-2'>
              @if(preparedBy.Picture.Count() == 0) {
                <MudAvatar Class='mb-1' Image='images/fglogo/fgci1-gs.png' Size='Size.Medium' />
              } else {
                <MudAvatar Class='mb-1' Image='@($"data:image/png;base64, {Convert.ToBase64String(preparedBy.Picture)}")' Size='Size.Medium' />
              }
              <div class='d-flex flex-grow-1 flex-column blzrthead-disabled-minheight15'>
                <BlazoredTypeahead SearchMethod='LoadEmployee' DisableClear placeholder='Prepared By'
                  @bind-Value='preparedBy' MinimumLength='3' Debounce="300" MaximumSuggestions='5' Disabled>
                    <SelectedTemplate>
                        <div class='overflow-hidden wspace-nowrap'>
                          @if (context.EmployeeId != 0) {
                            <MudText Class='font12'>@context.EmployeeName</MudText>
                          } else {
                            <MudText Class='font12'> - </MudText>
                          }
                        </div>
                    </SelectedTemplate>
                      <ResultTemplate>
                        <div class='ddavatar'>
                          <MudAvatar Image='@($"data:image/png;base64, {Convert.ToBase64String(@context.Picture)}")' Size='Size.Small'/>
                          @context.EmployeeName | @context.Designation
                        </div>
                      </ResultTemplate>
                </BlazoredTypeahead>
                <MudText Class='d-flex wspace-nowrap txt-uppercase font-bold font10 pl-1'>
                  Prepared By
                  <MudText Class='font10 font-bold' Color='Color.Error'>*</MudText>
                </MudText>
              </div>
            </div>
            <MudSpacer />
            <div class='d-flex align-center justify-center gap-1 width300px blzrtypahead-unset-width pa-2'>
              <MudButton Class='btn-ios-d font12' OnClick='(()=> navigationManager.NavigateTo($"/voucher/batch/list"))' Variant='Variant.Text' Color='Color.Transparent' Size='Size.Small' DisableElevation>Cancel</MudButton>
              <MudButton Class='btn-ios-d font12' OnClick='MoveToBatch' Variant='Variant.Filled' Color='Color.Info' Size='Size.Small' DisableElevation>Move</MudButton>
              <MudText>&#x2192;</MudText>
              <MudButton Class='btn-ios-d font12' OnClick='SaveVoucherRouteBatch' Disabled=isDisableSave Variant='Variant.Filled' Color='Color.Primary' Size='Size.Small' DisableElevation>Save</MudButton>
            </div>
          </MudPaper>  
        </MudItem>
      </MudGrid>
    }
  </MudContainer>
</div>

@code{
  private bool isDisableSave = true, dataFetched, isSelectAll;
  private VoucherRouteBatchModel voucherBatchRoute = new();
  private IEnumerable<VoucherModel> pageData = new List<VoucherModel>();
  private List<VoucherModel> selectedVoucher = new List<VoucherModel>();
  private List<VoucherModel> showSelectedVouchers = new List<VoucherModel>();
  private UserAccount preparedBy = new UserAccount();
  private DateTime? BatchDate = DateTime.Now;
  private FilterParameter filterParameter = new();
  private string searchTerm = string.Empty;
  private MudTable<VoucherModel> tableVariable = new MudTable<VoucherModel>();
  protected override async Task OnInitializedAsync()
  {
    while(GlobalClass.currentUserAccount == null)
     await Task.Delay(1);

    Task t = Task.WhenAll(InitializeComponent());
    await t;
    if(t.Status == TaskStatus.RanToCompletion)
      CompletedFetch();
  }
  protected override void OnAfterRender(bool firstRender)
  {
    if(firstRender)
    {
      filterParameter.PageSize = 15;
      filterParameter.PageNo = 0;
    }
  }
  private async Task InitializeComponent()
  {
    Console.WriteLine("Initialized Component");
    navigationManager.LocationChanged += OnLocationChanged;
    GlobalClass.pageTitle = "voucher batch entry";
    GlobalClassList.BatchVouchers = new List<VoucherModel>();

    if(GlobalClass.voucherRouteBatch != null) {
      await DisplayProperties();
      isDisableSave = false;
    } else {
      GlobalClassList.VoucherBatchList = new();
      preparedBy = GlobalClass.currentUserAccount;
    }
  }

  private void CompletedFetch()
  {
    dataFetched = true;
    StateHasChanged();
  }
  private void OnLocationChanged(object? sender, LocationChangedEventArgs args)
  {
    GlobalClass.voucherRouteBatch = default!;
    Dispose();
  }
  public void Dispose()
  {
    navigationManager.LocationChanged -= OnLocationChanged;
  }
  private async Task DisplayProperties()
  {
    voucherBatchRoute = GlobalClass.voucherRouteBatch;
    GlobalClassList.VoucherBatchList = await voucherBatchRouteService.GetVoucherRouteBatchDetails(GlobalClass.voucherRouteBatch.Id, GlobalClass.token);
    BatchDate = GlobalClass.voucherRouteBatch.BatchDate;
    preparedBy = await GetEmployeeDetails(voucherBatchRoute.PreparedById);
    StateHasChanged();
  }
  private async Task<UserAccount> GetEmployeeDetails(long employeeId)
  {
    var employeeDetail = await globalService.GetEmployeeById(employeeId, GlobalClass.token);
    return employeeDetail;
  }
  private void MoveToBatch()
  {
    foreach (var item in showSelectedVouchers.Where(x=>x.IsSelected))
    {
      if(!GlobalClassList.VoucherBatchList.Any(x=>x.VoucherId == item.Id)) {
        var routeBatch = new VoucherRouteBatchDetailModel();
        routeBatch.VoucherId = item.Id;
        routeBatch.VoucherDate = item.VoucherDate;
        routeBatch.ControlNumber = item.ControlNumber;
        routeBatch.Description = item.Description;
        routeBatch.StatusName = item.StatusName;
        routeBatch.TotalAmount = item.TotalAmount;
        routeBatch.IsActive = true;
        routeBatch.IsFiled = true;
        GlobalClassList.VoucherBatchList.Add(routeBatch);
      }
    }
    Task.Run(async()=> await tableVariable!.ReloadServerData());
    if(GlobalClassList.VoucherBatchList.Count > 0)
    isDisableSave = false;
  }
  private VoucherRouteBatchModel MapProperties()
  {
    voucherBatchRoute.BatchDate = BatchDate.GetValueOrDefault();
    voucherBatchRoute.VoucherRouteBatchDetails = GlobalClassList.VoucherBatchList;
    voucherBatchRoute.IsActive = true;
    voucherBatchRoute.UserId = GlobalClass.currentUserAccount.EmployeeId;
    voucherBatchRoute.PreparedById = preparedBy.EmployeeId;
    voucherBatchRoute.PreparedByName = preparedBy.EmployeeName;
    voucherBatchRoute.Activity = GlobalClass.voucherRouteBatch == null ? "Save Voucher Route Batch" : "Update Voucher Route Batch";

    return voucherBatchRoute;
  }
  private async Task SaveVoucherRouteBatch()
  {
    var parameters = new DialogParameters();
    string contentText = "Voucher Route Batch ";
    string dialogTitle = GlobalClass.voucherRouteBatch == null ? "Create " + contentText : "Update " + contentText;
    parameters.Add("dialogTitle", dialogTitle);
    parameters.Add("contentText", contentText);
    parameters.Add("actionMode", GlobalClass.voucherRouteBatch == null ? Enums.ActionMode.Create : Enums.ActionMode.Update);
    var options = new DialogOptions()
    {
        CloseButton = false,
        MaxWidth = MaxWidth.ExtraSmall,
        FullWidth = true,
        NoHeader = false,
        DisableBackdropClick = true
    };
    var resultDialog = await dialogService.Show<Shared.Dialogs.GenericPromptDialogs.GenericPrompt>(dialogTitle, parameters, options).Result;

    if (!resultDialog.Canceled) 
    {
      VoucherRouteBatchModel voucherBatch = new VoucherRouteBatchModel();
      if(GlobalClass.voucherRouteBatch != null) {
        voucherBatch = await voucherBatchRouteService.UpdateVoucherRouteBatch(MapProperties(), GlobalClass.token);
        Extensions.ShowAlert("Voucher batch Successfully updated.", Variant.Filled, SnackbarService,Severity.Success);
        navigationManager.NavigateTo($"/voucher/batch/list");
      } else {
        voucherBatch = await voucherBatchRouteService.AddVoucherRouteBatch(MapProperties(), GlobalClass.token);
        Extensions.ShowAlert("Voucher batch Successfully saved.", Variant.Filled, SnackbarService,Severity.Success);
        navigationManager.NavigateTo($"/voucher/batch/list");
      }
      if(GlobalVariable.AMSHubConnection != null)
        await GlobalVariable.AMSHubConnection.InvokeAsync("SaveVoucherRouteBatch",voucherBatch);
    }
    GlobalClass.voucherRouteBatch = default!;
  }
  private void RemoveBatch(VoucherRouteBatchDetailModel voucherRouteBatchDetail)
  {
    var voucher = new VoucherModel();

    GlobalClassList.VoucherBatchList.Remove(voucherRouteBatchDetail);
    if(voucherBatchRoute.Id != 0) {

      voucherRouteBatchDetail.IsActive = false;
      voucherBatchRoute.RemovedVoucherRouteBatchDetails.Add(voucherRouteBatchDetail);
      Task.Run(async()=> await tableVariable!.ReloadServerData());
    }

    voucher.VoucherDate = voucherRouteBatchDetail.VoucherDate;
    voucher.ControlNumber = voucherRouteBatchDetail.ControlNumber;
    voucher.Description = voucherRouteBatchDetail.Description;
    voucher.StatusName = voucherRouteBatchDetail.StatusName;
    voucher.TotalAmount = voucherRouteBatchDetail.TotalAmount;
    voucher.IsActive = voucherRouteBatchDetail.IsActive;
    selectedVoucher = new();
    Task.Run(async()=> await tableVariable!.ReloadServerData());

    if(GlobalClassList.VoucherBatchList.Count <= 0) {
       isDisableSave = true;
    }
  }
  private async Task<TableData<VoucherModel>> LoadVoucherServer(TableState state)
  {
    if(GlobalClass.currentUserAccount == null)
      await Task.Delay(1);
    IEnumerable<VoucherModel> data = await voucherBatchRouteService.VoucherList(filterParameter, GlobalClass.token);
    data = data.Where(VoucherModel =>
    {
      if (string.IsNullOrWhiteSpace(searchTerm))
        return true;
      if(VoucherModel.ControlNumber.Contains(searchTerm, StringComparison.OrdinalIgnoreCase))
        return true;
      return false;      
    }).ToArray();

    GlobalClassList.BatchVouchers = data.Union(selectedVoucher).OrderByDescending(x=>x.IsSelected).ToList();
    
    showSelectedVouchers = GlobalClassList.BatchVouchers.ToList();

    foreach (var item in GlobalClassList.VoucherBatchList) {
      showSelectedVouchers.RemoveAll(x=>x.Id == item.VoucherId);
    }
    
    pageData = showSelectedVouchers.Skip(state.Page * state.PageSize).Take(state.PageSize).ToList();
    return new TableData<VoucherModel>() {TotalItems = showSelectedVouchers.Count(), Items = pageData};
  }
   
  private async Task<IEnumerable<UserAccount>> LoadEmployee(string employeeName)
  {
      var filterParameter = new FilterParameter()
      {
        IsName = true,
        Name = employeeName,
        IsLookUp = true
      };
      var employee = await globalService.LoadAllEmployee(filterParameter, GlobalClass.token);
      return employee;
  }

  private void OnSearch(string text)
  {
    searchTerm = text;
    selectedVoucher = GlobalClassList.BatchVouchers.Where(x=>x.IsSelected).ToList();

    tableVariable.ReloadServerData();
  }

  private void SelectAllVoucher()
  {
    Console.WriteLine("Selected all");
    isSelectAll = !isSelectAll;
  }
  private void AllTagIsRouted(VoucherModel voucher)
  {
    if(voucher.VoucherRouteTags.All( tags => tags.IsRouted ))
    {
      voucher.IsSelected = !voucher.IsSelected;
    } else
      Extensions.ShowAlert("Voucher tags was not yet approve, please go to voucher route to see which tags are not approve.", Variant.Filled, SnackbarService, Severity.Error);
  }
  private string RowState(VoucherModel voucher, bool isCenter)
  {
    if(voucher.VoucherRouteTags.All( tags => tags.IsRouted ))
    {
      return isCenter == true ? "text-center" :"";
    } else
      return isCenter == true ? "text-center unselectable-row" : "unselectable-row";
  }
  private string FindReference(VoucherModel voucher)
  {
    return  String.Format("{0}voucher/list/{1}", navigationManager.BaseUri, voucher.ControlNumber);
  }
}