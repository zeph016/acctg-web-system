@page "/voucher/batch/list"
@inject IVoucherRouteBatchService voucherRouteBatchService
@inject NavigationManager navigationManager

<div class='page-cont'>
  <div class='drawer-right'>
    <MudDrawer Class='pa-1' @bind-Open='openSideFilter' Fixed='false' Anchor='Anchor.Right' Elevation='0' Variant='DrawerVariant.Mini' OpenMiniOnHover='false'>
      <div class='drawer-right__filtercont'>
        <div class="icon-area d-flex align-center">
          <MudIconButton OnClick='OpenSideFilter' Icon="@Icons.Filled.FilterList" aria-label="Filter" Size='Size.Medium' />
        </div>
        <div class='filter-title d-flex align-center'>
          <p class='title875'>Filter</p>
          <MudSpacer />
          <MudIconButton OnClick='OpenSideFilter' Icon='@Icons.Filled.Close' aria-label='Close Filter' Size='Size.Medium' />
        </div>
        <div class='filter-content d-flex flex-column pl-4 pr-4 gap-2 @visibility'>
          <MudTextField Class='txtfield-75' T='string' ValueChanged='@(s=>OnSearch(s))' Placeholder='Control Number'
            Adornment='Adornment.Start' AdornmentIcon='@Icons.Material.Filled.Search' IconSize='Size.Small'
            Clearable='true' Variant='Variant.Outlined' />
          <MudButton Class='wspace-nowrap' Variant='Variant.Filled' Color='Color.Secondary'>Apply Filter</MudButton>
        </div>
      </div>
    </MudDrawer>
  </div>
  <MudContainer Class='vbatchlistpage' Fixed='false' MaxWidth='MaxWidth.ExtraExtraLarge'>
    @if (!dataFetched)
    {
      <MudPaper Class='ma-1 pa-1' style="height: calc(100vh - 125px);">
        <MudSkeleton SkeletonType='SkeletonType.Rectangle' Height='calc(100vh - 135px)' Animation='Animation.Wave' />
      </MudPaper>
    }
    else
    {
      <MudTable Class='configtables row-popup-anim-2px' ServerData='@(new Func<TableState, Task<TableData<VoucherRouteBatchModel>>>(LoadVoucherServer))' Bordered
        Height='calc(100vh - 185px)' Breakpoint='Breakpoint.Xs' FixedHeader FixedFooter Hover Dense @ref='vRouteBModelTable'>
        <ToolBarContent>
            <MudText Typo='Typo.caption'>
              @GlobalClassList.VoucherBatches.Count()
              @(GlobalClassList.VoucherBatches.Count() == 1 ? "item" : "items")
              in Total
            </MudText>
            <MudSpacer/>
            <MudTooltip Text="Refresh Table">
                <MudIconButton Icon="@Icons.Filled.Refresh" Size="Size.Small" OnClick='(()=> vRouteBModelTable!.ReloadServerData())'></MudIconButton>
            </MudTooltip>
            <MudMenu StartIcon='@Icons.Filled.MoreVert' AnchorOrigin='Origin.TopLeft' ActivationEvent='MouseEvent.MouseOver'
                TransformOrigin='Origin.TopRight' Dense='true' Size='Size.Small' Label='More'>
                  <MudMenuItem OnClick='(()=> navigationManager.NavigateTo($"/voucher/batch"))'>
                    <div class='d-flex align-center gap-2 menu-grow-anim'>
                        <MudIcon Icon='@Icons.Filled.Add' Size='Size.Small' />
                        <MudText Typo='Typo.body2'>Add</MudText>
                    </div>
                  </MudMenuItem>        
            </MudMenu>
        </ToolBarContent>
        <ColGroup>
          <col style="width: 1%" />
          <col style="width: 58%"/>
          <col style="width: 40%" />
          <col style="width: 20px" />
        </ColGroup>
        <HeaderContent>
            <MudTh Class='customheader-1'>
              <div class='d-flex align-center justify-start'>
                <MudTableSortLabel SortLabel='SortControlNumber' T='VoucherRouteBatchModel'
                InitialDirection='SortDirection.None'>
                  Control No.
                </MudTableSortLabel>
                 <MudTableSortLabel SortLabel='SortDate' T='VoucherRouteBatchModel'
                InitialDirection='SortDirection.Descending'>
                 Date
                </MudTableSortLabel>
              </div>
            </MudTh>
            <MudTh Class='customheader-1'>Remarks</MudTh>
            <MudTh Class='customheader-1'>
              Prepared By
            </MudTh>
            <MudTh Class='customheader-1 pa-2'>Actions</MudTh>
        </HeaderContent>
        <RowTemplate>
            <MudTd DataLabel="Ctrl #">
              <div class='d-flex align-center'>
                <MudChip Class='chip-radius-5 txt-uppercase font-bold font10' Color='Color.Error' Size='Size.Small'>
                  @context.ControlNumber
                </MudChip>
                <MudChip Class='chip-radius-5 font-bold font10' Variant='Variant.Text' Icon='@Icons.Filled.CalendarMonth' Color='Color.Dark' Size='Size.Small'>
                  @context.BatchDate.GetValueOrDefault().ToShortDateString()
                </MudChip>
              </div>
            </MudTd>
            <MudTd Class='wbreak-breakword font12' DataLabel='Remarks'>@context.Remarks</MudTd>
            <MudTd Class='wbreak-breakword font12' DataLabel='Prepared By'>
              <SignatoriesComponent employeeId='context.PreparedById' isSingleLine='true' />
            </MudTd>
            <MudTd Class='text-center pa-2'>
              <MudMenu Icon='@Icons.Filled.MoreVert' AnchorOrigin='Origin.BottomLeft' ActivationEvent='MouseEvent.MouseOver'
                  TransformOrigin='Origin.TopRight' Dense='true' Size='Size.Small'>
                <MudMenuItem OnClick='(()=> EditView(context))'>
                  <a class='d-flex align-center gap-2 menu-grow-anim'>
                    <MudIcon Icon='@Icons.Filled.Edit' Size='Size.Small'/>
                    <MudText Typo='Typo.body2'>Edit</MudText>
                  </a>
                </MudMenuItem>
                <MudMenuItem OnClick='(()=> NavigateAuditrail(context))'>
                  <a class='d-flex align-center gap-2 menu-grow-anim'>
                    <MudIcon Icon='@Icons.Filled.ListAlt' Size='Size.Small'/>
                    <MudText Typo='Typo.body2'>Audit Trail</MudText>
                  </a>
                </MudMenuItem>
                <MudMenuItem OnClick='(()=> context.ShowReport = ShowReport(context.ShowReport, context))'>
                  <a class='d-flex align-center gap-2 menu-grow-anim'>
                    <MudIcon Icon='@Icons.Filled.PictureAsPdf' Size='Size.Small'/>
                    <MudText Typo='Typo.body2'>Show Report</MudText>
                  </a>
                </MudMenuItem>
              </MudMenu>
            </MudTd>
        </RowTemplate>
        <NoRecordsContent>
          <MudText Class='txt-uppercase font-bold font12' Color='Color.Error'>No records found</MudText>
        </NoRecordsContent>
        <ChildRowContent>
            @if(context.ShowReport)
            {
                <td colspan="8">
                    <div class='d-flex align-center pa-2 bgc-f2f2f2'>
                        <MudSpacer />
                        <MudButton OnClick='(() => context.ShowReport = ShowReport(context.ShowReport, context))' EndIcon="@Icons.Rounded.Close" IconColor='Color.Error' Size='Size.Small' >
                            Close Report
                        </MudButton>
                    </div>
                    <MudTr Class='d-flex align-stretch justify-center default-report-container'>
                        @if (string.IsNullOrWhiteSpace(PDFContent))
                        {
                            <MudOverlay Visible='true' DarkBackground="false" AutoClose="true">
                                <MudProgressCircular Color="Color.Primary" Indeterminate="true" />
                            </MudOverlay>
                        }
                        else
                        {
                            <iframe src='@PDFContent' />
                        }
                    </MudTr>
                </td>
            }
          </ChildRowContent>
        <PagerContent>
            <MudTablePager />
        </PagerContent>
      </MudTable>
    }
  </MudContainer>
</div>

@code{
  private bool dataFetched, openSideFilter;
  private FilterParameter filterParameter = new();
  private IEnumerable<VoucherRouteBatchModel>? pageData;
  private string searchTerm  = string.Empty, visibility = "visibility-animation-hide";
  private MudTable<VoucherRouteBatchModel> vRouteBModelTable = new MudTable<VoucherRouteBatchModel>();
  private string PDFContent = default!;
  protected override async Task OnInitializedAsync()
  {
    GlobalClass.pageTitle = "voucher batch list";
    if(GlobalClass.currentUserAccount == null)
      await Task.Delay(1);

    GlobalClassList.VoucherBatches = new();
    CompletedFetch();
  }
  void CompletedFetch()
  {
    dataFetched = true;
    Task.Run(StateHasChanged);
  }
  private void EditView(VoucherRouteBatchModel voucherRoute)
  {
    GlobalClass.voucherRouteBatch = voucherRoute;
    navigationManager.NavigateTo($"/voucher/batch");
  }
  private void NavigateAuditrail(VoucherRouteBatchModel voucherRoute)
  {
    GlobalClass.voucherRouteBatch = voucherRoute;
    navigationManager.NavigateTo($"/voucher/batch/trail");
  }
  private async Task<TableData<VoucherRouteBatchModel>> LoadVoucherServer(TableState state)
  {
    if(GlobalClass.currentUserAccount == null)
      await Task.Delay(1);

    filterParameter.ControlNumber = searchTerm;
    IEnumerable<VoucherRouteBatchModel> data = await voucherRouteBatchService.LoadAllBatchVoucher(filterParameter, GlobalClass.token);
      
    @* data = data.Where(VoucherRouteBatchModel =>
    {
      if(string.IsNullOrWhiteSpace(searchTerm))
        return true;

      if(VoucherRouteBatchModel.ControlNumber.Contains(searchTerm, StringComparison.OrdinalIgnoreCase))
        return true;
      return false;
    }).ToArray();; *@
    
    GlobalClassList.VoucherBatches = data.ToList();
    pageData = GlobalClassList.VoucherBatches.Skip(state.Page * state.PageSize).Take(state.PageSize).ToList();
    return new TableData<VoucherRouteBatchModel>() {TotalItems = GlobalClassList.VoucherBatches.Count(), Items = pageData};
  }

  private void OnSearch(string text)
  {
      if(!string.IsNullOrEmpty(text))
        filterParameter.IsControlNumber = true;

      searchTerm = text;
      vRouteBModelTable.ReloadServerData();
  }
  private void OpenSideFilter()
  {
    openSideFilter = !openSideFilter;
    if(openSideFilter)
    visibility = "visibility-animation-show";
    if(!openSideFilter)
    visibility = "visibility-animation-hide";
  }
  //Batch Report
  private bool ShowReport(bool isShow, VoucherRouteBatchModel batch)
  {
    Task.Run(()=> LoadBatchVouchersReport(batch));
    return isShow = !isShow;
  }
  private async Task LoadBatchVouchersReport(VoucherRouteBatchModel batch)
  {
      batch.VoucherRouteBatchDetails = await voucherRouteBatchService.GetVoucherRouteBatchDetails(batch.Id, GlobalClass.token);
      PDFContent = await voucherRouteBatchService.GetBatchVouchersReport(batch);
      StateHasChanged();
  }
}