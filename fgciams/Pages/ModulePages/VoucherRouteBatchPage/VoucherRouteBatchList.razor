@page "/voucher/batch/list"

@inject IVoucherRouteBatchService voucherRouteBatchService
@inject NavigationManager navigationManager
@inject ISnackbar snackbarService
@inject IJSRuntime JSRuntime

<div class='page-cont'>
  <div class='drawer-right-min'>
    <MudDrawer Class='pa-1' @bind-Open='openSideFilter' Fixed='false' Anchor='Anchor.Right' Elevation='0' Variant='DrawerVariant.Mini' OpenMiniOnHover='false'>
      <CtrlNumberOnlyFilter OpenSideFilterClick='(() => openSideFilter = !openSideFilter)' 
        FilterClick='FilterTable' ResetTableClick='ReloadTable'
        contentVisible='openSideFilter' moduleName="voucherbatchroute-list"/>
    </MudDrawer>
  </div>
  <MudContainer Class='py-2 pl-2 pr-10  table-toolbar-custom1' Fixed='false' MaxWidth='MaxWidth.ExtraExtraLarge'>
    @if (!dataFetched)
    {
      <MudPaper Class='ma-1 pa-1' style="height: calc(100vh - 125px);">
        <MudSkeleton SkeletonType='SkeletonType.Rectangle' Height='calc(100vh - 135px)' Animation='Animation.Wave' />
      </MudPaper>
    }
    else
    {
      <MudTable Class='table-style-1 ' ServerData='@(new Func<TableState, Task<TableData<VoucherRouteBatchModel>>>(LoadVoucherServer))' Bordered
        Height='calc(100vh - 185px)' Breakpoint='Breakpoint.Xs' FixedHeader FixedFooter Hover Dense @ref='tableVariable'>
        <ToolBarContent>
            <MudText Typo='Typo.caption'>
              @GlobalClassList.VoucherBatches.Count()
              @(GlobalClassList.VoucherBatches.Count() == 1 ? "item" : "items")
              in total
            </MudText>
            <MudSpacer/>
            <MudTooltip Text="Refresh Table">
               <MudIconButton Class='@(isLoading ? "mudbtnico-rotate":"")' OnClick='ReloadTable' Icon="@Icons.Material.Filled.Refresh" Size="Size.Small" 
                  Color='@(isLoading ? Color.Info : Color.Default)'/>
            </MudTooltip>
            <MudMenu Class='overflow-hidden mudbtnico-rotate-90' StartIcon='@Icons.Material.Filled.MoreVert' AnchorOrigin='Origin.BottomCenter' ActivationEvent='MouseEvent.MouseOver'
                TransformOrigin='Origin.TopRight' Dense Size='Size.Small' Label='More'>
                  <MudMenuItem OnClick='(()=> navigationManager.NavigateTo($"/voucher/batch"))'>
                    <div class='d-flex align-center gap-2 '>
                        <MudIcon Icon='@Icons.Material.Filled.Add' Size='Size.Small' Color='Color.Dark'/>
                        <MudText Typo='Typo.body2' Color='Color.Dark'>Add</MudText>
                    </div>
                  </MudMenuItem>        
            </MudMenu>
        </ToolBarContent>
        <ColGroup>
          <col style="width: 1%" />
          <col style="width: 40%"/>
          <col />
          <col style="width: 50px" />
        </ColGroup>
        <HeaderContent>
            <MudTh Class='@(isPinnedCtrlNo ? "th-sticky-left customheader-6":"customheader-6")'>
              <div class='d-flex align-center justify-space-around'>
                <MudTooltip Text='Pin control number column' Arrow Placement='Placement.Top'>
                  <MudIconButton Class='ico-15x15' OnClick='(() => isPinnedCtrlNo = !isPinnedCtrlNo)' Color='@(isPinnedCtrlNo ? Color.Info:Color.Dark)' 
                      Icon='@Icons.Material.Filled.PushPin' Size='Size.Small'/>
                </MudTooltip>
                <MudTableSortLabel SortLabel='SortControlNumber' T='VoucherRouteBatchModel'
                  InitialDirection='SortDirection.None'>
                  Control No.
                </MudTableSortLabel>
                <MudTableSortLabel SortLabel='SortDate' T='VoucherRouteBatchModel'
                  InitialDirection='SortDirection.Descending'>
                 Date
                </MudTableSortLabel>
              </div>
            </MudTh>
            <MudTh Class='customheader-6'>Remarks</MudTh>
            <MudTh Class='customheader-6'>
              Prepared By
            </MudTh>
            <MudTh Class='customheader-6'>Actions</MudTh>
        </HeaderContent>
        <RowTemplate>
            <MudTd Class='@(isPinnedCtrlNo ? "col-sticky-left":"")' DataLabel="Control No.">
              <div class='d-flex align-center'>
                 <MudChip Class='mudchip-tbl' OnClick='(() => Extensions.CopyTextToClipboard(context.ControlNumber, snackbarService, JSRuntime))' Variant='Variant.Outlined'
                    Color='Color.Error' Size='Size.Small'>
                  @context.ControlNumber
                </MudChip>
                <MudChip Class='mudchip-tbl' Variant='Variant.Outlined' Icon='@Icons.Material.Filled.CalendarMonth' Color='Color.Dark' Size='Size.Small'>
                  @context.BatchDate.GetValueOrDefault().ToShortDateString()
                </MudChip>
              </div>
            </MudTd>
            <MudTd DataLabel='Remarks'>
              <div class='dynamic-div-1'>
                <small>@context.Remarks</small>
              </div>
            </MudTd>
            <MudTd DataLabel='Prepared By'>
              <div class='dynamic-div-1'>
                <small>
                  <SignatoriesComponent employeeId='context.PreparedById' isSingleLine='true' />
                </small>
              </div>
            </MudTd>
            <MudTd Class='text-center'>
              <MudMenu Class='mudbtnico-rotate-90' Icon='@Icons.Material.Filled.MoreVert' AnchorOrigin='Origin.BottomLeft' ActivationEvent='MouseEvent.MouseOver'
                  TransformOrigin='Origin.TopRight' Dense Size='Size.Small'>
                <MudMenuItem OnClick='(()=> EditView(context))'>
                  <a class='d-flex align-center gap-2 '>
                    <MudIcon Icon='@Icons.Material.Filled.Edit' Size='Size.Small' Color='Color.Dark'/>
                    <MudText Typo='Typo.body2' Color='Color.Dark'>Edit</MudText>
                  </a>
                </MudMenuItem>
                <MudMenuItem OnClick='(()=> NavigateAuditrail(context))'>
                  <a class='d-flex align-center gap-2 '>
                    <MudIcon Icon='@Icons.Material.Filled.ListAlt' Size='Size.Small' Color='Color.Dark'/>
                    <MudText Typo='Typo.body2' Color='Color.Dark'>Audit Trail</MudText>
                  </a>
                </MudMenuItem>
                <MudMenuItem OnClick='(()=> context.ShowReport = ShowReport(context.ShowReport, context))'>
                  <a class='d-flex align-center gap-2 '>
                    <MudIcon Icon='@Icons.Material.Filled.PictureAsPdf' Size='Size.Small' Color='Color.Dark'/>
                    <MudText Typo='Typo.body2' Color='Color.Dark'>Show Report</MudText>
                  </a>
                </MudMenuItem>
              </MudMenu>
            </MudTd>
        </RowTemplate>
        <NoRecordsContent>
          <MudText Class='txt-uppercase font-bold font12' Color='Color.Error'>No records found</MudText>
        </NoRecordsContent>
        <ChildRowContent>
          <MudTr>
            <td colspan="8">
              <div class='transition-05s-ease overflow-hidden' style='@(context.ShowReport ? "max-height:700px" : "max-height:0px")'>
                <div class='d-flex align-center pa-2 bgc-f2f2f2'>
                    <MudSpacer />
                    <MudButton Class='btn-ios-d font12' OnClick='(() => context.ShowReport = ShowReport(context.ShowReport, context))' EndIcon="@Icons.Rounded.Close" Size='Size.Small' >
                        Close Report
                    </MudButton>
                </div>
                <MudTr Class='d-flex align-stretch justify-center default-report-container'>
                  @if(context.ShowReport)
                  {
                    @if (string.IsNullOrWhiteSpace(PDFContent))
                    {
                        <MudOverlay Visible='true' DarkBackground="false" AutoClose="true">
                            <MudProgressCircular Color="Color.Primary" Indeterminate="true" />
                        </MudOverlay>
                    }
                    else
                    {
                        <iframe src='@PDFContent' />
                    }
                  }
                </MudTr>
              </div>
            </td>
          </MudTr>
          </ChildRowContent>
        <PagerContent>
            <MudTablePager PageSizeOptions='@GlobalVariable.pageSize' />
        </PagerContent>
      </MudTable>
    }
  </MudContainer>
</div>

@code{
  private bool dataFetched, openSideFilter, isLoading, isPinnedCtrlNo = true;
  private FilterParameter filterParameter = new();
  private IEnumerable<VoucherRouteBatchModel> pageData = new List<VoucherRouteBatchModel>();
  private MudTable<VoucherRouteBatchModel> tableVariable = new MudTable<VoucherRouteBatchModel>();
  private string PDFContent = default!;
  protected override async Task OnInitializedAsync()
  {
    GlobalClass.pageTitle = "voucher batch list";
    while(GlobalClass.currentUserAccount == null)
      await Task.Delay(1);

    GlobalClassList.VoucherBatches = new();
    CompletedFetch();
    SignalR();
  }
  void CompletedFetch()
  {
    dataFetched = true;
    Task.Run(StateHasChanged);
  }
  private void EditView(VoucherRouteBatchModel voucherRoute)
  {
    GlobalClass.voucherRouteBatch = voucherRoute;
    navigationManager.NavigateTo($"/voucher/batch");
  }
  private void NavigateAuditrail(VoucherRouteBatchModel voucherRoute)
  {
    GlobalClass.voucherRouteBatch = voucherRoute;
    navigationManager.NavigateTo($"/voucher/batch/trail");
  }
  private async Task<TableData<VoucherRouteBatchModel>> LoadVoucherServer(TableState state)
  {
    isLoading = true;
    IEnumerable<VoucherRouteBatchModel> data = await voucherRouteBatchService.LoadAllBatchVoucher(filterParameter, GlobalClass.token);
    GlobalClassList.VoucherBatches = data.ToList();
    pageData = GlobalClassList.VoucherBatches.Skip(state.Page * state.PageSize).Take(state.PageSize).ToList();
    isLoading = !isLoading;
    return new TableData<VoucherRouteBatchModel>() 
    {
      TotalItems = GlobalClassList.VoucherBatches.Count(), 
      Items = pageData
    };
  }

  private async Task FilterTable()
  {
      filterParameter = GlobalVariable.filterParameter;
      await tableVariable.ReloadServerData();
  }
  //Batch Report
  private bool ShowReport(bool isShow, VoucherRouteBatchModel batch)
  {
    Task.Run(()=> LoadBatchVouchersReport(batch));
    return isShow = !isShow;
  }
  private async Task LoadBatchVouchersReport(VoucherRouteBatchModel batch)
  {
      batch.VoucherRouteBatchDetails = await voucherRouteBatchService.GetVoucherRouteBatchDetails(batch.Id, GlobalClass.token);
      PDFContent = await voucherRouteBatchService.GetBatchVouchersReport(batch);
      StateHasChanged();
  }

  private async Task ReloadTable()
  {
    filterParameter = new FilterParameter();
    await tableVariable.ReloadServerData();
  }
  private void SignalR()
  {
      try
      {
          if(GlobalVariable.AMSHubConnection != null)
              GlobalVariable.AMSHubConnection.On<VoucherRouteBatchModel>("SaveVoucherRouteBatch", async (batchModel) => 
              {
                  await tableVariable.ReloadServerData();
                  StateHasChanged();
              });
      }catch (Exception ex)
      {
          Console.WriteLine(ex.Message);
          throw;
      }
  }
}