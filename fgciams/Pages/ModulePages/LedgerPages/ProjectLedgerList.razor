@page "/project-ledger/list"

@inject ILedgerService LedgerService
@inject IGlobalService globalService
@inject NavigationManager navigationManager
@inject IBankDepositService bankDepositService

<div class='page-cont'>
    <div class='drawer-right-min'>
        <MudDrawer Class='pa-1' Open='false' Fixed='false' Anchor='Anchor.Right' Elevation='0' Variant='DrawerVariant.Mini' OpenMiniOnHover='false'>
            <MudTooltip Text='Filter' Arrow Placement='Placement.Left'>
                <MudIconButton OnClick='(() => openFilter = !openFilter)' Icon='@Icons.Material.Filled.FilterList' arial-label='Close Filter' Size='Size.Small' />
            </MudTooltip>
      </MudDrawer>
    </div>
    <MudContainer Class='py-2 pl-2 pr-10  table-toolbar-custom1' Fixed='false' MaxWidth='MaxWidth.ExtraExtraLarge'>
        @if (!dataFetched)
        {
            <SkeletonPageList />
        }
        else
        {
            @if(isPrint)
            {
                <div class="d-flex align-items-end flex-column mb-2">
                    <MudButton Class='align-self-end mb-2' OnClick='( ()=> isPrint = false )' EndIcon='@Icons.Material.Filled.Close' Variant='Variant.Filled' Color='Color.Default' Size='Size.Small' DisableElevation>
                        Close Report
                    </MudButton>
                    <iframe style='height:calc(100vh - 235px);' src='@PDFContent'/>
                </div>
            }
            else 
            {
            <MudTable Class='table-style-1' ServerData='new Func<TableState, Task<TableData<CollectionModel>>>(LoadProjectLedgers)' 
                Breakpoint='Breakpoint.Sm' @ref='@tableVariable' Hover FixedHeader FixedFooter Bordered Dense RowsPerPage='15'  Loading='isLoading'
                Height='calc(100vh - 185px)'> 
                <ToolBarContent>
                    <MudText Typo='Typo.caption'>
                        @totalItems
                        @(totalItems == 1 ? "item" : "items")
                        in total
                    </MudText>
                    <MudSpacer />
                    <MudTooltip Text="Refresh Table" Arrow Placement='Placement.Top'>
                    <MudIconButton Class='@(isLoading ? "mudbtnico-rotate":"")' Icon="@Icons.Material.Filled.Refresh" Size="Size.Small" OnClick='(()=>ReloadTable())' 
                        Color='@(isLoading ? Color.Info : Color.Default)'/>
                    </MudTooltip>
                    <MudMenu Class='overflow-hidden mudbtnico-rotate-90' StartIcon='@Icons.Material.Filled.MoreVert' AnchorOrigin='Origin.BottomCenter' 
                        TransformOrigin='Origin.TopRight' Dense Size='Size.Small' Label='More'>
                        <MudMenuItem OnClick="( async () => await GetReport() )"  >
                            <div class='d-flex align-center gap-2 '>
                                <MudIcon Icon='@Icons.Material.Filled.PictureAsPdf' Size='Size.Small' Color='Color.Dark' />
                                <MudText Typo='Typo.body2' Color='Color.Dark'>Print</MudText>
                            </div>
                        </MudMenuItem>
                        <MudMenuItem OnClick="(() => openFilter = !openFilter)"  >
                            <div class='d-flex align-center gap-2 '>
                                <MudIcon Icon='@Icons.Material.Filled.FilterList' Size='Size.Small' Color='Color.Dark' />
                                <MudText Typo='Typo.body2' Color='Color.Dark'>Filter</MudText>
                            </div>
                        </MudMenuItem>
                    </MudMenu>
                    @if(openFilter)
                    {
                        <PopoverFilterMainComponent IsOpen='openFilter' CloseFilter='(() => openFilter = !openFilter)' IsMainFilter='true' IsModuleList='true'
                            ModuleName='projectLedger-list' ApplyFilter='FilterTable' ResetTableData='ReloadTable'/>
                    }
                </ToolBarContent>
                <ColGroup>
                    <col style='width:1%'/>
                    <col />
                    <col  style='width:1%'/>
                    <col />
                    <col />
                    <col />
                    <col style="width:20px" />
                </ColGroup>
                <HeaderContent>
                    <MudTh Class='customheader-6'>
                        <div class='d-flex align-center justify-space-around'>
                            <MudTableSortLabel SortLabel='SortDate' T='CollectionModel'
                                InitialDirection='SortDirection.Descending'>
                                Date
                            </MudTableSortLabel>
                            <MudTableSortLabel SortLabel='SortControlNumber' T='CollectionModel'
                            InitialDirection='SortDirection.None'>
                                Control No.
                        </MudTableSortLabel>
                        </div>
                    </MudTh>
                    <MudTh Class='customheader-6 text-center'>Project</MudTh>
                    <MudTh Class='customheader-6 text-center'>Expense</MudTh>
                    <MudTh Class='customheader-6 text-right'>Debit</MudTh>
                    <MudTh Class='customheader-6 text-right'>Credit</MudTh>
                    <MudTh Class='customheader-6 text-right'>Running Bal.</MudTh>
                    <MudTh Class='customheader-6 text-center'>Action</MudTh>
                </HeaderContent>
                <RowTemplate>
                    <MudTd  DataLabel='Control No.'>
                        <div class='d-flex align-center justify-space-around'>
                            <MudChip Class='chip-radius-5 txt-uppercase font-bold font10' Icon='@Icons.Material.Filled.CalendarMonth' Variant='Variant.Outlined' Size='Size.Small'>
                                @Convert.ToDateTime(context.TransactionDate).ToShortDateString()
                            </MudChip>
                            <MudTooltip Text='@($"See {context.ControlNumber}")' Arrow Placement='Placement.Top'>
                                <MudButton Class='btn-tbl-link' StartIcon='@Icons.Material.Filled.Link'
                                    Href='@FindReference(context.ControlNumber)' Target='_blank'
                                    Color='Color.Info' Variant='Variant.Outlined' Size='Size.Small' DisableElevation>
                                        @context.ControlNumber
                                </MudButton>
                            </MudTooltip>
                        </div>
                    </MudTd>
                    <MudTd DataLabel='Charge Name'>
                        <div class='dynamic-div-1'>
                            <small>@context.ChargeName</small>
                        </div>
                    </MudTd>
                    <MudTd DataLabel='Expense Name'>
                        <MudChip Class='chip-radius-5 txt-uppercase font-bold font10' Color='Color.Default' Size='Size.Small' Variant='Variant.Outlined'>
                            @context.ExpenseName
                        </MudChip>
                    </MudTd>
                    <MudTd Class='text-right' DataLabel='Debit'>
                        <MudText Class='font-bold font12' Style='@(context.Debit > 0 ? "color:green":"color:red")'>
                            @Extensions.GetEnumDescription(Enums.BankCurrency.PhilippinePeso)  @context.Debit.ToString("N2")
                        </MudText>
                    </MudTd>
                    <MudTd Class='text-right' DataLabel='Credit'>
                        <MudText Class='font-bold font12' Style='@(context.Credit > 0 ? "color:green":"color:red")'>
                            @Extensions.GetEnumDescription(Enums.BankCurrency.PhilippinePeso)  @context.Credit.ToString("N2")
                        </MudText>
                    </MudTd>
                    <MudTd Class='text-right' DataLabel='Running Balance'>
                        <MudText Class='font-bold font12' Style='@(context.RunningBalance > 0 ? "color:green":"color:red")'>
                            @Extensions.GetEnumDescription(Enums.BankCurrency.PhilippinePeso)  @context.RunningBalance.ToString("N2")
                        </MudText>
                    </MudTd>
                    <MudTd Class='text-center' DataLabel='Action'>
                        <MudMenu Class='mudbtnico-rotate-90' Icon='@Icons.Material.Filled.MoreVert' AnchorOrigin='Origin.BottomLeft' 
                            TransformOrigin='Origin.TopRight' Dense Size='Size.Small'>
                            <MudMenuItem OnClick="(() => ShowCollectionsExpenses(context) )">
                                <div class='d-flex align-center gap-2 menu-grow-anim'>
                                    <MudIcon Icon='@Icons.Material.Filled.ViewList' Size='Size.Small' Color='Color.Dark' />
                                    <MudText Typo='Typo.body2' Color='Color.Dark'>View Expenses</MudText>
                                </div>
                            </MudMenuItem>
                        </MudMenu>
                    </MudTd>
                </RowTemplate>
                <ChildRowContent>
                    <MudTr>
                        <td colspan="7">
                            <div class='d-flex justify-center transition-05s-ease bgc-4d43521a overflow-hidden
                                @(context.IsShowCollectionsExpenses ? "fade-in":"")' 
                                style='@(context.IsShowCollectionsExpenses ? "max-height:300px":"max-height:0px")'>
                                <div class='d-flex flex-column align-start pa-2'>
                                    <div class='d-flex width100'>
                                        <MudSpacer />
                                        <MudButton OnClick='(() => context.IsShowCollectionsExpenses = !context.IsShowCollectionsExpenses)'  EndIcon="@Icons.Rounded.Close" 
                                            IconColor='Color.Error' Size='Size.Small' Variant='Variant.Text'>
                                            Close
                                        </MudButton>
                                    </div>
                                    <CollectionExpensesComponent TableHeight='150px' IsShowActionButtons='false'
                                        collection='context' />
                                </div>
                            </div>
                        </td>
                    </MudTr>
                </ChildRowContent>
                <PagerContent>
                    <MudTablePager PageSizeOptions='@GlobalVariable.pageSize'/>
                </PagerContent>
            </MudTable>
            }
        }
    </MudContainer>
</div>
@code{
    private bool dataFetched,isLoading,openFilter;
    private string searchTerm = string.Empty, visibility = "visibility-animation-hide";
    private int totalItems;
    private FilterParameter filterParameter = new();
    private IEnumerable<CollectionModel>? pageData;
    private Project currentProject = new();
    private MudTable<CollectionModel> tableVariable = new MudTable<CollectionModel>();
    private bool isPrint = false;
    private string PDFContent = default!;
    protected override void OnInitialized()
    {
        GlobalClass.pageTitle = "Project Ledger List";
        dataFetched = true;
    }
    private async Task<TableData<CollectionModel>> LoadProjectLedgers(TableState tableState)
    {
        isLoading = true;
        totalItems = 0;
        pageData = GlobalClassList.projectLedgerList.ToArray();
        if(filterParameter.ProjectId != 0)
        {
            IEnumerable<CollectionModel> data = await LedgerService.GetProjectLeger(filterParameter, GlobalClass.token);
            switch (tableState.SortLabel)
            {
                case "SortControlNumber":
                data = data.OrderByDirection(tableState.SortDirection, x=>x.Id);
                break;
            }

            GlobalClassList.projectLedgerList = data.ToList();
            pageData = GlobalClassList.projectLedgerList.Skip(tableState.Page * tableState.PageSize).Take(tableState.PageSize).ToArray();
            totalItems = GlobalClassList.projectLedgerList.Count();
        }
        isLoading = !isLoading;
        dataFetched = true;
        return new TableData<CollectionModel>()
        {
            TotalItems = totalItems,
            Items = pageData
        };
    }
    private async Task OnProjectValueChanged(Project project)
    {
        currentProject = project;
        filterParameter.IsCharged = true;
        filterParameter.ProjectId = project.ProjectId;
        filterParameter.ProjectCategoryId = project.ProjectCategoryId;
        await GetProjectLedgers();
    }
    private async Task<IEnumerable<Project>> LoadCharging(string chargingName)
    {
      var filterParameter = new FilterParameter()
      {
        IsProject = true,
        ProjectName = chargingName,
        IsId = false
      };
      var charging = await globalService.LoadChargeProjectLine(filterParameter, GlobalClass.token);
      return charging;
    }
    private async Task FilterTable()
    {
        filterParameter = GlobalVariable.filterParameter;
        filterParameter.PageSize = GlobalVariable.PageSize;
        filterParameter.PageNo = 0;
        await tableVariable.ReloadServerData();
    }
    private async Task ReloadTable()
    {
        filterParameter = new();
        GlobalClassList.projectLedgerList.Clear();
        await tableVariable.ReloadServerData();
    }
    private string FindReference(string voucherControlNumber)
    {
        string url = string.Empty;
        if(voucherControlNumber.StartsWith("CL"))
        {
            url = String.Format("{0}collection/list/{1}", navigationManager.BaseUri, voucherControlNumber);
        }
        else
        {
            url = String.Format("{0}billing/list/{1}", navigationManager.BaseUri, voucherControlNumber);
        }
        return url;
    }
    private async Task GetProjectLedgers()
    {
        await tableVariable.ReloadServerData();
    }
    private void ShowCollectionsExpenses(CollectionModel context)
    {
        GlobalClassList.projectLedgerList.ForEach(coll => 
            {
                if(coll.Id != context.Id)
                    coll.IsShowCollectionsExpenses = false;
            }
        );
        context.IsShowCollectionsExpenses = !context.IsShowCollectionsExpenses;
    }
    private async Task GetReport()
    {
        PDFContent = await LedgerService.GetProjectLedgerReport(GlobalClassList.projectLedgerList);
        isPrint = true;
    }
}