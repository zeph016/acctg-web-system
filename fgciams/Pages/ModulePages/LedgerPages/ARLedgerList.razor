@page "/ar-ledger/list"

@inject IGlobalService globalService
@inject IVoucherService voucherService
@inject ISnackbar SnackbarService
@inject ILedgerService ledgerService
@inject NavigationManager navigationManager
@inject IJSRuntime JSRuntime

<div class='page-cont'>
    <div class='drawer-right-min'>
        <MudDrawer Class='pa-1' Open='false' Fixed='false' Anchor='Anchor.Right' Elevation='0' Variant='DrawerVariant.Mini' OpenMiniOnHover='false'>
            <MudTooltip Text='Filter' Arrow Placement='Placement.Left'>
                <MudIconButton OnClick='(() => openFilter = !openFilter)' Icon='@Icons.Material.Filled.FilterList' arial-label='Close Filter' Size='Size.Small' />
            </MudTooltip>
        </MudDrawer>
    </div>
    <MudContainer Class='py-2 pl-2 pr-10  table-toolbar-custom1' Fixed='false' MaxWidth='MaxWidth.ExtraExtraLarge'>
        @if(isPrint)
        {
            <div class="d-flex align-items-end flex-column mb-2">
                <MudButton Class='align-self-end mb-2' OnClick='( ()=> isPrint = false )' EndIcon='@Icons.Material.Filled.Close' Variant='Variant.Filled' Color='Color.Default' Size='Size.Small' DisableElevation>
                    Close Report
                </MudButton>
                <iframe  style='height:83vh;' src='@PDFContent'/>
            </div>
        }
        else 
        {
            <MudTable Class='table-style-1 overflow-hidden' ServerData='new Func<TableState, Task<TableData<CollectionModel>>>(LoadARLedgerLists)' @ref='tableVariable' Hover Loading='isLoading'
                Breakpoint="Breakpoint.Xs" FixedHeader FixedFooter CustomFooter Bordered Dense Virtualize Height='calc(100vh - 235px)'
                Elevation='1'>
                <ToolBarContent>
                    <MudText Typo='Typo.caption'>
                        @listOfARLedgers.Count() 
                        @(listOfARLedgers.Count() == 1 ? "item" : "items") 
                        in total
                    </MudText>
                    <MudSpacer/>
                    <MudTooltip Text="Refresh Table" Arrow Placement='Placement.Top'>
                        <MudIconButton Class='@(isLoading ? "mudbtnico-rotate":"")' Icon="@Icons.Material.Filled.Refresh" Size="Size.Small" OnClick='(()=>ReloadTable())' 
                            Color='@(isLoading ? Color.Info : Color.Default)'/>
                    </MudTooltip>
                    <MudMenu Class='overflow-hidden mudbtnico-rotate-90' StartIcon='@Icons.Material.Filled.MoreVert' AnchorOrigin='Origin.BottomCenter' 
                        TransformOrigin='Origin.TopRight' Dense Size='Size.Small' Label='More'>
                        @* <MudMenuItem OnClick="( async () => await GetReport() )"  >
                            <div class='d-flex align-center gap-2 '>
                                <MudIcon Icon='@Icons.Material.Filled.PictureAsPdf' Size='Size.Small' Color='Color.Dark' />
                                <MudText Typo='Typo.body2' Color='Color.Dark'>Print</MudText>
                            </div>
                        </MudMenuItem> *@
                        <MudMenuItem OnClick="(() => openFilter = !openFilter)"  >
                            <div class='d-flex align-center gap-2 '>
                                <MudIcon Icon='@Icons.Material.Filled.FilterList' Size='Size.Small' Color='Color.Dark' />
                                <MudText Typo='Typo.body2' Color='Color.Dark'>Filter</MudText>
                            </div>
                        </MudMenuItem>
                    </MudMenu>
                    @if(openFilter)
                    {
                        <PopoverFilterMainComponent IsOpen='openFilter' CloseFilter='(() => openFilter = !openFilter)' IsMainFilter='true' IsLedgerList='true' 
                            ModuleName='arledger-list' ResetTableData='ReloadTable' ApplyFilter='FilterTable'/>
                    }
                </ToolBarContent>
                <ColGroup>
                    <col style="width:1%" />
                    <col style="width:1%" />
                    <col />
                    <col style="width:1%" />
                    <col style="width:1%" />
                    <col style='width:20px' />
                </ColGroup>
                <HeaderContent>
                    <MudTh Class='customheader-6'>
                        <div class='d-flex align-center justify-start'>
                            <MudTableSortLabel SortLabel='SortDate' T='CollectionModel'
                                InitialDirection='SortDirection.Descending'>
                                Date
                            </MudTableSortLabel>
                        </div>
                    </MudTh>
                    <MudTh Class='customheader-6 text-center'>
                        <MudTableSortLabel SortLabel='SortRefNo' T='CollectionModel'
                            InitialDirection='SortDirection.None'>
                                Control No.
                        </MudTableSortLabel>
                    </MudTh>
                    <MudTh Class='customheader-6'>Charging</MudTh>
                    <MudTh Class='customheader-6'>Payee</MudTh>
                    <MudTh Class='customheader-6 text-center'>Description</MudTh>
                    <MudTh Class='customheader-6 text-center'>Debit</MudTh>
                    <MudTh Class='customheader-6 text-right'>Credit</MudTh>
                    <MudTh Class='customheader-6 text-right'>
                        <MudTooltip Text='Running Balance'>
                            Running Bal.
                        </MudTooltip>
                    </MudTh>
                </HeaderContent>
                <RowTemplate>
                    <MudTd Class='text-center pa-2' DataLabel='Control No.'>
                        <div class='d-flex align-center justify-center'>
                            <MudChip Class='chip-radius-5 txt-uppercase font-bold font10' Icon='@Icons.Material.Filled.CalendarMonth' Variant='Variant.Outlined' Size='Size.Small'>
                                @Convert.ToDateTime(context.TransactionDate).ToShortDateString()
                            </MudChip>
                        </div>
                    </MudTd>
                    <MudTd Class='text-center pa-2' DataLabel="Reference Number">
                        <MudTooltip Text='@($"See {context.ControlNumber}")' Arrow Placement='Placement.Top'>
                            <MudButton Class='btn-tbl-link width90 ctrlno-min' StartIcon='@Icons.Material.Filled.Link'
                                Href='@FindReference(context)' Target='_blank'
                                Color='Color.Info' Variant='Variant.Outlined' Size='Size.Small' DisableElevation>
                                    @context.ControlNumber
                            </MudButton>
                        </MudTooltip>
                    </MudTd>
                    <MudTd Class='text-left pa-2 mudtd-mw-30vw300px' DataLabel='Charge Name'>
                        <div class='dynamic-div-1'>
                           <small>@context.ChargeName</small>
                        </div>
                    </MudTd>
                    <MudTd Class='text-left pa-2 mudtd-mw-30vw300px' DataLabel='Charge Name'>
                        <div class='dynamic-div-1'>
                            <small>@context.PayeeName</small>
                        </div>
                    </MudTd>
                    <MudTd Class='text-left pa-2 mudtd-mw-30vw300px' DataLabel='Charge Name'>
                        <div class='dynamic-div-1'>
                            <small>@context.Description</small>
                        </div>
                    </MudTd>
                    <MudTd Class='wspace-nowrap text-right pa-2' DataLabel='Amount'>
                        <MudText Class='font-bold font12' Style='@(context.Debit > 0 ? "color:green":"color:red")'>
                            @Extensions.GetEnumDescription(Enums.BankCurrency.PhilippinePeso)  @context.Debit.ToString("N2")
                        </MudText>
                    </MudTd>
                    <MudTd Class='wspace-nowrap text-right pa-2' DataLabel='Amount'>
                        <MudText Class='font-bold font12' Style='@(context.Credit > 0 ? "color:green":"color:red")'>
                            @Extensions.GetEnumDescription(Enums.BankCurrency.PhilippinePeso)  @context.Credit.ToString("N2")
                        </MudText>
                    </MudTd>
                    <MudTd Class='wspace-nowrap text-right pa-2' DataLabel='Amount'>
                        <MudText Class='font-bold font12' Style='@(context.RunningBalance > 0 ? "color:green":"color:red")'>
                            @Extensions.GetEnumDescription(Enums.BankCurrency.PhilippinePeso)  @context.RunningBalance.ToString("N2")
                        </MudText>
                    </MudTd>
                </RowTemplate>
                <NoRecordsContent>
                        <MudText Class='txt-uppercase font-bold font12' Color='Color.Error'>No records found</MudText>
                </NoRecordsContent>
                <PagerContent>
                    <div class='d-flex align-center gap-4 overflow-auto border-thin-top bgc-F4F5FB'>
                        <MudSpacer />
                        <div class='d-flex align-center justify-end'>
                            <MudText Class='d-flex wspace-nowrap txt-uppercase font-bold font10'>Total Debit: </MudText>
                            <div class='d-flex align-center gap-2'>
                                <MudChip Class='rounded' Color='Color.Default' Size='Size.Small'>
                                    <MudText Class='font-bold color-green font12'>
                                        @(Extensions.GetEnumDescription(Enums.BankCurrency.PhilippinePeso) + " " + @Debit().ToString("N2"))
                                    </MudText>
                                </MudChip>
                            </div>
                        </div>
                        <div class='d-flex align-center justify-end'>
                            <MudText Class='d-flex wspace-nowrap txt-uppercase font-bold font10'>Total Credit: </MudText>
                            <div class='d-flex align-center gap-2'>
                                <MudChip Class='rounded' Color='Color.Default' Size='Size.Small'>
                                    <MudText Class='font-bold color-green font12'>
                                        @(Extensions.GetEnumDescription(Enums.BankCurrency.PhilippinePeso) + " " + @Credit().ToString("N2"))
                                    </MudText>
                                </MudChip>
                            </div>
                        </div>
                        <div class='d-flex align-center justify-end'>
                            <MudText Class='d-flex wspace-nowrap txt-uppercase font-bold font10'>Total AR Balance: </MudText>
                            <div class='d-flex align-center gap-2'>
                                <MudChip Class='rounded' Color='Color.Default' Size='Size.Small'>
                                    <MudText Class='font-bold color-green font12'>
                                        @(Extensions.GetEnumDescription(Enums.BankCurrency.PhilippinePeso) + " " + @TotalBalance().ToString("N2"))
                                    </MudText>
                                </MudChip>
                            </div>
                        </div>
                    </div>
                    <MudTablePager PageSizeOptions='@GlobalVariable.pageSize' />
                </PagerContent>
            </MudTable>
        }
    </MudContainer>
</div>

@code
{
    private bool isLoading, toggleSidebar = true, openFilter;
    private Project currentProject = new();
    private ExpenseLineModel currentExpLine = new();
    private SubContractorProjectModel contractAmount = new();
    private FilterParameter filterParameter = new();
    private List<CollectionModel> listOfARLedgers = new();
    private DateRange? dateRange = new DateRange(DateTime.Now, DateTime.Now);
    private IEnumerable<CollectionModel>? pageData;
    private MudTable<CollectionModel> tableVariable = new MudTable<CollectionModel>();
    private bool isPrint = false;
    private string PDFContent = default!;
    protected override void OnInitialized()
    {
        GlobalClass.pageTitle = "ACCOUNTS RECEIVABLE LEDGERS";
        StateHasChanged();
        //Pass validation not required by AR
        filterParameter.ScopeOfWorkId = 1;
        filterParameter.SubledgerId = 1;
        filterParameter.BankId = "1";
    }
    private async Task<IEnumerable<Project>> LoadCharging(string chargingName)
    {
      var filterParameter = new FilterParameter()
      {
        IsProject = true,
        ProjectName = chargingName,
        IsId = false
      };
      var charging = await globalService.LoadChargeProjectLine(filterParameter, GlobalClass.token);
      return charging;
    }
    private void OnProjectValueChanged(Project p)
    {
        contractAmount = new();
        currentProject = p;
        filterParameter.ProjectId = p.ProjectId;
        filterParameter.ProjectCategoryId = p.ProjectCategoryId;
    }
    private async Task<IEnumerable<ExpenseLineModel>> SearchExpenseLine(string expLine)
    {
        return await Task.Run(() => GlobalClassList.expenseLineList.Where(x=> x.WithLedger && x.AccountLineGroupName == "Accounts Receivable" && x.ExpenseName.Contains(expLine, StringComparison.InvariantCultureIgnoreCase)));
    }
    private async Task OnExpenseLineValueChanged(ExpenseLineModel exp)
    {
        currentExpLine = exp;
        filterParameter.ExpenseId = exp.Id;
        await Search();
    }
    private async Task Search()
    {
        isLoading = true;
        //This will work if filterParameter isDate = true
        @* filterParameter.DateFrom = dateRange.Start.GetValueOrDefault();
        filterParameter.DateTo = dateRange.End.GetValueOrDefault(); *@

        listOfARLedgers = await ledgerService.GetARLedger(filterParameter, GlobalClass.token);
        StateHasChanged();
        isLoading = !isLoading;
    }
    private async Task FilterTable()
    {
        filterParameter = GlobalVariable.filterParameter;
        if(IsValidate(filterParameter))
        {
            Task t = tableVariable.ReloadServerData();
            await t;
            if(t.Status == TaskStatus.RanToCompletion)
                if(GlobalVariable.filterParameter.IsExport)
                    await GetReport();
        } else {
            Extensions.ShowAlert("Please fill in the required field.", Variant.Filled, SnackbarService , Severity.Error);
        }
    }

    private async Task ReloadTable()
    {
        filterParameter = new FilterParameter();
        await tableVariable.ReloadServerData();
    }

    private async Task<TableData<CollectionModel>> LoadARLedgerLists(TableState tableState)
    {
        isLoading = true;
        filterParameter.ScopeOfWorkId = 1;
        filterParameter.SubledgerId = 1;
        filterParameter.BankId = "1";
        IEnumerable<CollectionModel> data = await ledgerService.GetARLedger(filterParameter, GlobalClass.token);
        listOfARLedgers = data.ToList();
        pageData = data.Skip(tableState.Page * tableState.PageSize).Take(tableState.PageSize).ToArray();
        var total = data.Count();
        isLoading = !isLoading;
        StateHasChanged();
        return new TableData<CollectionModel>()
        {
            TotalItems = total,
            Items = pageData
        };
      
    }
    
    private decimal Credit()
    {
        return  listOfARLedgers.Sum(amount => amount.Credit);
    }
    private decimal TotalBalance()
    {
        return  listOfARLedgers.Sum(amount => amount.Debit)-listOfARLedgers.Sum(amount => amount.Credit);
    }
    private decimal Debit()
    {
        return  listOfARLedgers.Sum(amount => amount.Debit);
    }
    private void ResetValues()
    {
        currentProject = new Project();
        currentExpLine = new ExpenseLineModel();
    }
    private void InvalidSearch()
    {
        Extensions.ShowAlert("Please complete search filters", Variant.Filled,SnackbarService,Severity.Error);
    }
    private string FindReference(CollectionModel collectionModel)
    {
        string url = "";
        if(collectionModel.ControlNumber.StartsWith("CL"))
        {
            url = String.Format("{0}collection/list/{1}", navigationManager.BaseUri, collectionModel.ControlNumber);
        }
        else
        {
            url = String.Format("{0}voucher/list/{1}", navigationManager.BaseUri, collectionModel.ControlNumber);
        }
        return url;
    }
     private async Task GetReport()
    {
        (listOfARLedgers.FirstOrDefault()?? new()).ReportTitle = "ACCOUNTS RECEIVABLES";
        if(GlobalVariable.FileType == Enums.FileType.PDF)
        {
            GlobalVariable.FileDownloading = true;
            Task<string> t = ledgerService.GenerateARAPSOA(listOfARLedgers, GlobalClass.token);
            await t;
            if(t.Status == TaskStatus.RanToCompletion)
            {
                PDFContent = t.Result;
                GlobalVariable.FileDownloading = true;
                isPrint = true;
            } else {
                GlobalVariable.FileDownloading = true;
                Extensions.ShowAlert("There was a problem while exporting your file", Variant.Filled, SnackbarService, Severity.Error);
            }
        } else {
            await ExportToExcel();
        }
    }
    private bool IsValidate(FilterParameter param)
    {
        if(param.ProjectId == 0)
            return false;
        if(param.ExpenseId == 0)
            return false;
        return true;
    }
    private async Task ExportToExcel()
    {
        GlobalVariable.FileDownloading = true;
        Task<byte[]> t1 = ledgerService.GetAPReportExcel(listOfARLedgers, GlobalClass.token);
        await t1;
        if(t1.Status == TaskStatus.RanToCompletion)
        {
            using var streamRef = new DotNetStreamReference(new MemoryStream(t1.Result), true);
            await JSRuntime.InvokeVoidAsync("downloadFileFromStream", "ARLedger.xls", streamRef);
        }
        GlobalVariable.FileDownloading = false;
    }
}