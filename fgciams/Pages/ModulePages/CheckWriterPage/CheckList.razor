@page "/check/list"
@inject ICheckService checkService
@inject NavigationManager navigationManager
@inject IDialogService dialogService
@inject ISnackbar snackBarService

<div class='page-cont'>
    <div class='drawer-right'>
        <MudDrawer Class='pa-1' @bind-Open='openSideFilter' Fixed='false' Anchor='Anchor.Right' Elevation='0' Variant='DrawerVariant.Mini' OpenMiniOnHover='false'>
            <div class='drawer-right__filtercont'>
                <div class="icon-area d-flex align-center">
                    <MudIconButton OnClick='OpenSideFilter' Icon="@Icons.Filled.FilterList" aria-label="Filter" Size='Size.Medium' />
                </div>
                <div class="filter-title d-flex align-center">
                    <p class='title875'>Filter</p>
                    <MudSpacer />
                    <MudIconButton OnClick='OpenSideFilter' Icon="@Icons.Filled.Close" aria-label="Close Filter" Size='Size.Medium' />
                </div>
                <div class='filter-content d-flex flex-column pl-4 pr-4 gap-2 @visibility'>
                    <div class='d-flex align-center gap-2 @visibility'>
                        <MudCheckBox Class='pt-1' @bind-Checked="@filterParameter.IsCheckNumber" Dense Size='Size.Small'/>
                        <MudTextField Class='txtfield-75' Immediate=true @bind-Value='filterParameter.CheckNumber' Placeholder='Check No'
                        Clearable='true' Disabled="@(!filterParameter.IsCheckNumber)" Variant='Variant.Outlined' />
                     </div>
                     <div class='d-flex align-center gap-2 @visibility'>
                        <MudCheckBox Class='pt-1' @bind-Checked="@filterParameter.IsControlNumber" Dense Size='Size.Small'/>
                        <MudTextField Class='txtfield-75' Immediate=true @bind-Value='filterParameter.ControlNumber' Placeholder='Control Number'
                        Clearable='true' Disabled="@(!filterParameter.IsControlNumber)" Variant='Variant.Outlined' />
                     </div>
                    <div class='d-flex align-center gap-2 @visibility'>
                        <MudCheckBox Class='pt-1' @bind-Checked="@filterParameter.IsDate" Dense Size='Size.Small' />
                        <MudDateRangePicker Class='txtfield-75' @bind-DateRange=@dateRangeFilter IconSize='Size.Small'
                        Placeholder="Date Range" Disabled="@(!filterParameter.IsDate)" Variant='Variant.Outlined' />
                    </div>
                    <div class='d-flex align-center gap-2 @visibility'>
                        <MudCheckBox Class='pt-1' @bind-Checked="@filterParameter.IsPayee" Dense Size='Size.Small' />
                        <MudTextField Class='txtfield-75' @bind-Value='project.ProjectName' Placeholder='Payee' ReadOnly='true'
                            @onclick='(() => LookUp(Enums.LookUpType.Project, "Payee"))' IconSize='Size.Small' Disabled="@(!filterParameter.IsPayee)" Variant='Variant.Outlined' />
                    </div>
                    <div class='d-flex align-center gap-2 @visibility'>
                        <MudCheckBox Class='pt-1' @bind-Checked="@filterParameter.IsBank" Dense Size='Size.Small' />
                        <MudSelect Class='txtfield-75' MultiSelectionTextFunc='@(new Func<List<string>, string>(Banks))' @bind-SelectedValues='hasBanks' IconSize='Size.Small'
                            @bind-Value="selectedBanks" Dense="true" MultiSelection=true Disabled='!filterParameter.IsBank' Placeholder='Bank/s' Variant='Variant.Outlined'>
                                @if(GlobalClassList.banks != null)
                                    @foreach (var bank in GlobalClassList.banks)
                                    {
                                    <MudSelectItem Value="@bank">@bank.BankName</MudSelectItem>
                                    }
                        </MudSelect>
                    </div>
                    <div class='d-flex align-center gap-2 @visibility'>
                        <MudCheckBox Class='pt-1' @bind-Checked="@filterParameter.IsAccountingStatus" Dense Size='Size.Small' />
                        <MudSelect Class='txtfield-75' MultiSelectionTextFunc='@(new Func<List<string>, string>(AccountingStatus))' @bind-SelectedValues='hasAccountingStatus' IconSize='Size.Small'
                            @bind-Value="selectedStatus" Dense="true" MultiSelection=true Disabled='!filterParameter.IsAccountingStatus' Placeholder='Accounting Status' Variant='Variant.Outlined'>
                                @if(GlobalClassList.accountingStatusList != null)
                                    @foreach (var item in GlobalClassList.accountingStatusList.Where(x=> (int)x.StatusEnumCategoryId == 14 || 
                                    (int)x.StatusEnumCategoryId == 15 || (int)x.StatusEnumCategoryId == 16 || (int)x.StatusEnumCategoryId == 17))
                                    {
                                    <MudSelectItem Value="@item">@item.StatusName</MudSelectItem>
                                    }
                        </MudSelect>
                    </div>
                    <div class='d-flex align-center justify-end pt-1'>
                        <div class='d-flex align-center justify-end'>
                            <MudButton Class='wspace-nowrap' Variant='Variant.Filled' Color='Color.Secondary' OnClick='(()=> ReloadTable())' Disabled=!EnableClearButton()>Clear filter</MudButton> 
                        </div>
                        &nbsp;
                        <MudButton Class='wspace-nowrap' OnClick="(() => FilterTable())" Variant='Variant.Filled' Color='Color.Secondary'>Apply Filter</MudButton>
                    </div>
                </div>
            </div>
        </MudDrawer>
    </div>
    <MudContainer Class='checklistpage' Fixed='false' MaxWidth='MaxWidth.ExtraExtraLarge'>
        @if(!dataFetched)
        {
            <MudPaper Class='ma-1 pa-1' style="height: calc(100vh - 125px);">
                <MudSkeleton SkeletonType='SkeletonType.Text' Height='100px' Animation='Animation.Wave' />
                <MudSkeleton SkeletonType='SkeletonType.Rectangle' Height='71vh' Animation='Animation.Wave' />
            </MudPaper>
        }
        else
        {
            <MudTable Class='configtables row-popup-anim-2px' ServerData='new Func<TableState, Task<TableData<CheckModel>>>(LoadCheck)' Hover="true" 
            Breakpoint="Breakpoint.Sm" FixedHeader='true' FixedFooter='true' Bordered='true' Dense='true'
            RowsPerPage='10' Filter='new Func<CheckModel,bool>(FilterItems)' @ref='tableVariable'>
                <ToolBarContent>
                    <MudText Typo='Typo.caption'>
                        @GlobalClassList.listOfChecks.Count() 
                        @(GlobalClassList.listOfChecks.Count() == 1 ? "Item" : "Items") 
                        in Total
                    </MudText>
                    <MudSpacer/>
                    <MudTooltip Text="Refresh Table">
                        <MudIconButton Icon="@Icons.Filled.Refresh" Size="Size.Small" OnClick='(()=>ReloadTable())' ></MudIconButton>
                    </MudTooltip>
                    <MudMenu StartIcon='@Icons.Filled.MoreVert' AnchorOrigin='Origin.TopLeft' ActivationEvent="MouseEvent.MouseOver"
                    TransformOrigin='Origin.TopRight' Dense='true' Size='Size.Small' Label='More'>
                         <MudMenuItem OnClick='(() => AddCheck())'>
                            <div class='d-flex align-center gap-2 menu-grow-anim'>
                                <MudIcon Icon='@Icons.Filled.Add' Size='Size.Small' />
                                <MudText Typo='Typo.body2'>Add</MudText>
                            </div>
                        </MudMenuItem>
                    </MudMenu>
                </ToolBarContent>
                <ColGroup>
                    <col style='width:1%;'/>
                    <col />
                    <col />
                    <col />
                    <col />
                    <col style='width:1%;' />
                    <col style='width:1%;' />
                    <col style='width:20px;' />
                </ColGroup>
                <HeaderContent>
                    <MudTh Class='customheader-1 pa-2'>
                        <MudTableSortLabel SortLabel='SortControlNumber' T='CheckModel' InitialDirection="SortDirection.Descending">
                            Check No.
                        </MudTableSortLabel>
                    </MudTh>
                    <MudTh Class='customheader-1 text-center pa-2'>
                        <MudTableSortLabel SortLabel='SortDate' T='CheckModel' InitialDirection="SortDirection.Descending">
                            Check Date
                        </MudTableSortLabel>
                    </MudTh>
                    <MudTh Class='customheader-1 text-center pa-2'>
                        <MudTableSortLabel InitialDirection="SortDirection.Descending" 
                            SortBy="new Func<CheckModel, object>(x=>x.IssuedDate != null)">
                            Issued
                        </MudTableSortLabel>
                    </MudTh>
                    <MudTh Class='customheader-1 text-center pa-2'>Payee</MudTh>
                    <MudTh Class='customheader-1 text-center pa-2'>Bank</MudTh>
                    <MudTh Class='customheader-1 text-center pa-2'>Status</MudTh>
                    <MudTh Class='customheader-1 text-right pa-2'>Amount</MudTh>
                    <MudTh Class='customheader-1 text-center pa-2'>Action</MudTh>
                </HeaderContent>
                <RowTemplate>
                    <MudTd Class='wspace-nowrap pa-2' DataLabel='Check No.'>
                        <div class='d-flex align-center justify-center gap-2'>
                            <MudChip Class='chip-radius-5 txt-uppercase font-bold font10' Color='Color.Error' Size='Size.Small'>@context.CheckNo</MudChip>
                        </div>
                    </MudTd>
                    <MudTd Class='text-center pa-2' DataLabel='Date'>
                        <MudText Class='font12 wspace-nowrap'>@(context.CheckDate?.ToString("MM/dd/yyyy"))</MudText>
                    </MudTd>
                    <MudTd Class='pa-2 text-center' DataLabel='Date Issued'>
                         <MudText Class='font12 wspace-nowrap'>@context.IssuedDate?.ToString("MM/dd/yyyy")</MudText>          
                    </MudTd>
                    <MudTd Class='pa-2' DataLabel='Payee Name'>
                        <MudText Class='font12 wspace-nowra pt-1'>@context.PayeeName</MudText>
                    </MudTd>
                    <MudTd Class='pa-2' DataLabel='Bank Name'>
                        <MudText Class='font12 wspace-nowra pt-1'>@context.BankName</MudText>
                    </MudTd>
                    <MudTd Class='pa-2' DataLabel='Status'>
                        <div class='d-flex align-center'>
                            @if(GlobalClassList.accountingStatusList != null)
                            {
                                <MudChip Class='chip-radius-5 font-bold font10' Size='Size.Small' Color='Color.Info'>
                                    @context.CheckCategory
                                </MudChip>
                                <MudChip Class='chip-radius-5 font-bold font10' Size='Size.Small' Style='@GetAcctgStatusColor(context.AccountingStatusId)'>
                                    @GlobalClassList.accountingStatusList.Where(x=>(int)x.StatusEnumCategoryId == context.AccountingStatusId).Select(y=>y.StatusName).FirstOrDefault()
                                </MudChip>
                            }
                        </div>
                    </MudTd>
                    <MudTd Class='pa-2' DataLabel='Amount'>
                        <div class='d-flex align-center gap-2'>
                            @if (context.Amount > 0) {
                                <MudText Class='wspace-nowrap font-bold color-green font12'>
                                    @Extensions.GetEnumDescription(Enums.BankCurrency.PhilippinePeso)
                                </MudText>
                                <MudSpacer />
                                <MudText Class='wspace-nowrap font-bold color-green font12'>
                                    @context.Amount.ToString("N2")
                                </MudText>
                            } else {
                                <MudText Class='wspace-nowrap font-bold font12' Color='Color.Error'>
                                    @Extensions.GetEnumDescription(Enums.BankCurrency.PhilippinePeso)
                                </MudText>
                                <MudSpacer />
                                <MudText Class='wspace-nowrap font-bold font12' Color='Color.Error'>
                                    @context.Amount.ToString("N2")
                                </MudText>
                            }
                        </div>
                    </MudTd>
                    <MudTd Class='text-center pa-2' DataLabel='Actions'>
                        <MudMenu Icon='@Icons.Filled.MoreVert' AnchorOrigin='Origin.TopLeft' ActivationEvent="MouseEvent.MouseOver"
                            TransformOrigin='Origin.TopRight' Dense='true' Size='Size.Small'>
                            @if(context.StatusName == "C-Issued")
                            {
                            <MudMenuItem OnClick="(()=>EditCheck(context))">
                                <div class='d-flex align-center gap-2 menu-grow-anim'>
                                    <MudIcon Icon='@Icons.Filled.Edit' Size='Size.Small' />
                                    <MudText Typo='Typo.body2'>Edit</MudText>
                                </div>
                            </MudMenuItem>
                            }
                             <MudMenuItem OnClick="(()=>UpdateStatus(context,Enums.AccountingStatusEnumCategory.CCLRD,Enums.ActionMode.Cleared))">
                                <div class='d-flex align-center gap-2 menu-grow-anim'>
                                    <MudIcon Icon='@Icons.Filled.ClearAll' Size='Size.Small' />
                                    <MudText Typo='Typo.body2'>Clear Check</MudText>
                                </div>
                            </MudMenuItem>
                            <MudMenuItem OnClick="(()=>UpdateStatus(context,Enums.AccountingStatusEnumCategory.CC,Enums.ActionMode.Cancel))">
                                <div class='d-flex align-center gap-2 menu-grow-anim'>
                                    <MudIcon Icon='@Icons.Filled.Cancel' Size='Size.Small' />
                                    <MudText Typo='Typo.body2'>Cancel</MudText>
                                </div>
                            </MudMenuItem>
                            <MudMenuItem OnClick="(()=>UpdateStatus(context,Enums.AccountingStatusEnumCategory.CR,Enums.ActionMode.Released))">
                                <div class='d-flex align-center gap-2 menu-grow-anim'>
                                    <MudIcon Icon='fa-solid fa-check-double' Size='Size.Small' />
                                    <MudText Typo='Typo.body2'>Release</MudText>
                                </div>
                            </MudMenuItem>
                            <MudMenuItem OnClick="(() => context.showReport = ShowReport(context.showReport,context))">
                                <div class='d-flex align-center gap-2 menu-grow-anim'>
                                    <MudIcon Icon='@Icons.Filled.PictureAsPdf' Size='Size.Small' />
                                    <MudText Typo='Typo.body2'>Show Report</MudText>
                                </div>
                            </MudMenuItem>
                        </MudMenu>
                    </MudTd>
                </RowTemplate>
                <NoRecordsContent>
                    <MudText Class='txt-uppercase font-bold font12' Color='Color.Error'>No records found</MudText>
                </NoRecordsContent>
                <ChildRowContent>
                    @if(context.isShowChild)
                    {
                        <td colspan='5'>
                            <MudTr Class='d-flex justify-end align-center'>
                                <MudCard Class='pa-2 ma-2 d-flex align-center gap-6'>
                                <div class='d-flex align-center gap-2'>
                                    <MudIcon Icon="@Icons.Filled.Message" Title="Account type" />
                                    <MudText Typo='Typo.body2'>
                                   
                                    </MudText>
                                </div>
                                </MudCard>
                            </MudTr>
                        </td>
                    }
                    @if(context.showReport)
                    {
                        <td colspan="8">
                            <div class='d-flex align-center pa-2 bgc-f2f2f2'>
                                <MudSpacer />
                                <MudButton OnClick='(() => context.showReport = ShowReport(context.showReport, context))' EndIcon="@Icons.Rounded.Close" IconColor='Color.Error' Size='Size.Small' >
                                    Close Report
                                </MudButton>
                            </div>
                            <MudTr Class='d-flex align-stretch justify-center default-report-container'>
                                @if (string.IsNullOrWhiteSpace(PDFContent))
                                {
                                    <MudOverlay Visible='true' DarkBackground="false" AutoClose="true">
                                        <MudProgressCircular Color="Color.Primary" Indeterminate="true" />
                                    </MudOverlay>
                                }
                                else
                                {
                                    <iframe src='@PDFContent' />
                                }
                            </MudTr>
                        </td>
                    }
                </ChildRowContent>
                <PagerContent>
                    <MudTablePager PageSizeOptions='@pageSize' />
                </PagerContent>
            </MudTable>
        }
    </MudContainer>
</div>

@code
{
    private bool dataFetched, openSideFilter;
    private int[] pageSize = new int[] {30, 50, 100, 500, 1000 };
    private string searchTerm = string.Empty, visibility = "visibility-animation-hide";
    private string PDFContent  = default!;
    private IEnumerable<CheckModel>? pageData;
    private MudTable<CheckModel> tableVariable = new();
    private FilterParameter filterParameter = new();
    private DateRange dateRangeFilter = new DateRange(DateTime.Now.Date, DateTime.Now.Date);
    private UserAccount requestor  = new();
    private Project project = new();
    private AccountingStatusModel selectedStatus = new();
    private IEnumerable<AccountingStatusModel> hasAccountingStatus {get; set;} = new HashSet<AccountingStatusModel>();
    private BankModel selectedBanks = new();
    private IEnumerable<BankModel> hasBanks {get; set;} = new HashSet<BankModel>();
    protected override async Task OnInitializedAsync()
    {
        GlobalClass.pageTitle = "Check List";
        while (GlobalClass.currentUserAccount == null || GlobalClassList.listOfChecks == null)
            await Task.Delay(1);
        GlobalClass.checkModel = new();
        SignalR();
        CompletedFetch();
    }
    private void CompletedFetch()
    {
        dataFetched = true;
        StateHasChanged();
    }
    private void OpenSideFilter()
    {
        openSideFilter = !openSideFilter;
        if(openSideFilter)
        visibility = "visibility-animation-show";
        if(!openSideFilter)
        visibility = "visibility-animation-hide";
    }
    private async Task CheckReport(CheckModel check)
    {
        PDFContent = await checkService.GetCheckReport(check);
        StateHasChanged();
    }
    private bool FilterItems(CheckModel check)
    {
        if (string.IsNullOrEmpty(searchTerm))
            return true;
        if (check.CheckNo.Contains(searchTerm, StringComparison.InvariantCultureIgnoreCase))
            return true;
        return false;
    }
    private void EditCheck(CheckModel model)
    {
        GlobalClass.checkModel = model;
        navigationManager.NavigateTo($"/check/create");
        CheckWriter.currentActionMode = Enums.ActionMode.Update;
    }
    private async Task UpdateStatus(CheckModel check, Enums.AccountingStatusEnumCategory status,Enums.ActionMode actionMode)
    {
      
        //Prompt confirmation
        var parameters = new DialogParameters();
        string contentText = "Check";
        string dialogTitle = actionMode == Enums.ActionMode.Released ? "RELEASE " + contentText 
                    : (actionMode == Enums.ActionMode.Cleared ? "CLEAR " + contentText :"CANCEL " + contentText );
        parameters.Add("contentText", contentText);
        parameters.Add("actionMode", actionMode);
        var options = new DialogOptions()
        {
            CloseButton = false,
            MaxWidth = MaxWidth.ExtraSmall,
            FullWidth = true,
            NoHeader = false,
            DisableBackdropClick = true
        };
        var resultDialog = await dialogService.Show<Shared.Dialogs.GenericPromptDialogs.GenericPrompt>(dialogTitle, parameters, options).Result;
        if (!resultDialog.Cancelled) 
        {
            //Audit Trail
            check.UserId = GlobalClass.currentUserAccount.EmployeeId;
            check.Activity = status == Enums.AccountingStatusEnumCategory.CR ? "Released"
            :(status == Enums.AccountingStatusEnumCategory.CCLRD ? "Clear Check":"Cancel Check");
            check.StatusName = status.ToString();
            check.AccountingStatusId = (int) status;
            await UpdateCheckStatus(check);
            Extensions.ShowAlert("Check updated successfully.",Variant.Filled,snackBarService,Severity.Success);
        }
    }
    private async Task UpdateCheckStatus(CheckModel check)
    {
        await checkService.UpdateCheckStatus(check,GlobalClass.token);
    }
    public static string GetAcctgStatusColor(long acctgStatusId)
    {
        var acctgStatus = new AccountingStatusModel();
        acctgStatus = GlobalClassList.accountingStatusList.Where(x => (int)x.StatusEnumCategoryId == acctgStatusId).FirstOrDefault();
        return "background-color:" + acctgStatus?.StatusColor;
    }
    private bool ShowReport(bool isShow, CheckModel check)
    {
        check.AmountInWords = Common.AmountToWords.DecimalToWords(check.Amount);
        Task.Run(()=> CheckReport(check));
        GlobalClassList.listOfChecks.ForEach(model => {
            if(model.Id != check.Id)
                model.showReport = false;
        });
        return isShow = !isShow;
    }
    private async Task<TableData<CheckModel>> LoadCheck(TableState tableState)
    {
        IEnumerable<CheckModel> data = await checkService.LoadCheck(filterParameter, GlobalClass.token);
        switch (tableState.SortLabel)
        {
            case "SortControlNumber":
                data = data.OrderByDirection(tableState.SortDirection, x=>x.Id);
                break;
            case "SortDate":
                data = data.OrderByDirection(tableState.SortDirection, x=>x.CheckDate);
                break;
            case "SortDateIssued":
                data = data.OrderByDirection(tableState.SortDirection, x=>x.IssuedDate);
                break;
        }

        GlobalClassList.listOfChecks = data.ToList();
        pageData = GlobalClassList.listOfChecks.Skip(tableState.Page * tableState.PageSize).Take(tableState.PageSize).ToArray();
        var total = GlobalClassList.listOfChecks.Count();
        return new TableData<CheckModel>()
        {
            TotalItems = total,
            Items = pageData
        };
    }
    private void AddCheck()
    {
        GlobalClass.checkModel = new();
        navigationManager.NavigateTo("/check/create");
        CheckWriter.currentActionMode = Enums.ActionMode.Create;
    }
    private void SignalR()
    {
        try
        {
            if(GlobalVariable.AMSHubConnection != null)
                GlobalVariable.AMSHubConnection.On<CheckModel>("SaveCheck",(checkModel) => 
                {
                    if(GlobalClassList.listOfChecks.Any(check => check.Id == checkModel.Id))
                        tableVariable.ReloadServerData();
                    else
                        GlobalClassList.listOfChecks.Insert(0,checkModel);
                    StateHasChanged();
                });
        }catch (Exception ex)
        {
            Console.WriteLine(ex.Message);
            throw;
        }
    }
    private string AccountingStatus(List<string> selectedStatus)
    {
        var status = "";
        foreach (var item in hasAccountingStatus)
        {
        status = string.Join(", ", hasAccountingStatus.Select(x => x.StatusName));      
        }
        return $"{status}";
    }
    private string Banks(List<string> selectedBanks)
    {
        var status = "";
        foreach (var item in hasBanks)
        {
        status = string.Join(", ", hasBanks.Select(x => x.BankName));      
        }
        return $"{status}";
    }
    private async void LookUp(Enums.LookUpType type, string lookFor)
    {
        var parameters = new DialogParameters();
        string dialogTitle = string.Empty;
        string searchPlaceholderText = string.Empty;
        dialogTitle = lookFor+" Look Up";
        searchPlaceholderText = lookFor;
        parameters.Add("lookUpType", type);
        parameters.Add("dialogTitle", dialogTitle);
        parameters.Add("buttonText", "Select");
        parameters.Add("searchPlaceholderText", searchPlaceholderText);
        parameters.Add("color", Color.Success);
        var options = new DialogOptions()
        {
            CloseButton = false,
            MaxWidth = MaxWidth.Small,
            FullWidth = true,
            NoHeader = false,
            DisableBackdropClick = false
        };
        var resultDialog = await dialogService.Show<Shared.Dialogs.LookUpDialog.GlobalGenericLookup>(dialogTitle, parameters, options).Result;
        if (!resultDialog.Cancelled) {
            if(type == Enums.LookUpType.Employee)
                requestor = (UserAccount) resultDialog.Data;
            else if (type == Enums.LookUpType.Project)
                project = (Project) resultDialog.Data;
            filterParameter.RequestorId = requestor.EmployeeId;
            filterParameter.PayeeId = project.ProjectId;
            filterParameter.PayeeCategoryId = project.ProjectCategoryId;
        }
        StateHasChanged();
    }
    private async Task FilterTable()
    {
        filterParameter.DateFrom = dateRangeFilter.Start.GetValueOrDefault();
        filterParameter.DateTo = dateRangeFilter.End.GetValueOrDefault();
        filterParameter.AccountingAccessLevel = GlobalClass.currentUserAccount.AccessLevel;
        filterParameter.AccountingStatusId = string.Join(",", hasAccountingStatus.Select(x => x.Id));
        filterParameter.BankId = string.Join(",", hasBanks.Select(x => x.Id));
        await tableVariable.ReloadServerData();
    }
    private async Task ReloadTable()
    {
        filterParameter = new();
        await tableVariable.ReloadServerData();
    }
    private bool EnableClearButton()
    {
      if(filterParameter.IsCheckNumber)
        return true;
      if(filterParameter.IsControlNumber) 
        return true;
      if(filterParameter.IsAccountingStatus)
        return true;
      if(filterParameter.IsDate)
        return true;
      if(filterParameter.IsRequestor)
        return true;
      if(filterParameter.IsPayee)
        return true;
      if(filterParameter.IsBank)
        return true;
      return false;
  }
}