@page "/check/list"

@inject ICheckService checkService
@inject NavigationManager navigationManager
@inject IDialogService dialogService
@inject ISnackbar snackBarService

<div class='page-cont'>
    <div class='drawer-right-min'>
        <MudDrawer Class='pa-1' @bind-Open='openSideFilter' Fixed='false' Anchor='Anchor.Right' Elevation='0' Variant='DrawerVariant.Mini' OpenMiniOnHover='false'>
            <FilterComponent OpenSideFilterClick='(() => openSideFilter = !openSideFilter)' 
                FilterClick='FilterTable' ResetTableClick='ReloadTable'
                contentVisible='openSideFilter' moduleName="check-list" />
          
        </MudDrawer>
    </div>
    <MudContainer Class='py-2 pl-2 pr-10  table-toolbar-custom1' Fixed='false' MaxWidth='MaxWidth.ExtraExtraLarge'>
        @if(!dataFetched)
        {
            <MudPaper Class='ma-1 pa-1' style="height: calc(100vh - 125px);">
                <MudSkeleton SkeletonType='SkeletonType.Text' Height='100px' Animation='Animation.Wave' />
                <MudSkeleton SkeletonType='SkeletonType.Rectangle' Height='71vh' Animation='Animation.Wave' />
            </MudPaper>
        }
        else
        {
            <MudTable Class='table-style-1 ' ServerData='new Func<TableState, Task<TableData<CheckModel>>>(LoadCheck)'
                Breakpoint="Breakpoint.Sm" Hover FixedHeader FixedFooter Bordered Dense Loading='isLoading'
                RowsPerPage='15' @ref='tableVariable'>
                <ToolBarContent>
                    <MudText Typo='Typo.caption'>
                        @GlobalClassList.listOfChecks.Count() 
                        @(GlobalClassList.listOfChecks.Count() == 1 ? "item" : "items") 
                        in total
                    </MudText>
                    <MudSpacer/>
                    <MudTooltip Text="Refresh Table" Arrow Placement='Placement.Top'>
                        <MudIconButton Class='@(isLoading ? "mudbtnico-rotate":"")' OnClick='ReloadTable' Icon="@Icons.Material.Filled.Refresh" Size="Size.Small" 
                            Color='@(isLoading ? Color.Info : Color.Default)'/>
                        </MudTooltip>
                    <MudMenu Class='overflow-hidden mudbtnico-rotate-90' StartIcon='@Icons.Material.Filled.MoreVert' AnchorOrigin='Origin.BottomCenter' ActivationEvent="MouseEvent.MouseOver"
                        TransformOrigin='Origin.TopRight' Dense Size='Size.Small' Label='More'>
                         <MudMenuItem OnClick='(() => AddCheck())'>
                            <div class='d-flex align-center gap-2 '>
                                <MudIcon Icon='@Icons.Material.Filled.Add' Size='Size.Small' Color='Color.Dark' />
                                <MudText Typo='Typo.body2' Color='Color.Dark'>Create Check</MudText>
                            </div>
                        </MudMenuItem>
                        <MudMenuItem OnClick="(() => openSideFilter = !openSideFilter)"  >
                            <div class='d-flex align-center gap-2 '>
                                <MudIcon Icon='@Icons.Material.Filled.FilterList' Size='Size.Small' Color='Color.Dark' />
                                <MudText Typo='Typo.body2' Color='Color.Dark'>Filter</MudText>
                            </div>
                        </MudMenuItem>
                    </MudMenu>
                </ToolBarContent>
                <ColGroup>
                    <col style='width:1%;' />
                    <col style='width:1%;' />
                    <col />
                    <col />
                    <col style='width:1%;' />
                    <col style='width:1%;' />
                    <col style='width:115px' />
                    <col style="width:50px" />
                </ColGroup>
                <HeaderContent>
                    <MudTh Class='customheader-6'>
                        <MudTableSortLabel SortLabel='SortControlNumber' T='CheckModel' 
                                InitialDirection="SortDirection.Descending">
                                Control No.
                        </MudTableSortLabel>
                    </MudTh>
                    <MudTh Class='@(isPinnedCtrlNo ? "th-sticky-left customheader-6":"customheader-6")'>
                        <div class='d-flex align-center justify-space-around gap-2'>
                            <MudTableSortLabel SortLabel='SortCheckNo' T='CheckModel' 
                                InitialDirection="SortDirection.Descending">
                                Check No.
                            </MudTableSortLabel>
                            <MudTableSortLabel SortLabel='SortDate' T='CheckModel' 
                                InitialDirection="SortDirection.None">
                                Check Date
                            </MudTableSortLabel>
                            <MudTableSortLabel SortLabel='SortDateIssued' T='CheckModel'
                                InitialDirection="SortDirection.None">
                                Issued
                            </MudTableSortLabel>
                        </div>
                    </MudTh>
                    <MudTh Class='customheader-6'>Payee</MudTh>
                    <MudTh Class='customheader-6'>Bank</MudTh>
                    <MudTh Class='customheader-6 text-center'>Category</MudTh>
                    <MudTh Class='customheader-6 text-center'>Status</MudTh>
                    <MudTh Class='customheader-6 text-center'>Date</MudTh>
                    <MudTh Class='@(isPinnedAmt ? "th-sticky-amt customheader-6 text-right":"customheader-6 text-right")'>
                        <MudTooltip Text='Pin amount column' Arrow Placement='Placement.Top'>
                            <MudIconButton Class='ico-15x15' OnClick='(() => isPinnedAmt = !isPinnedAmt)' Color='@(isPinnedAmt ? Color.Info:Color.Dark)' 
                                Icon='@Icons.Material.Filled.PushPin' Size='Size.Small'/>
                        </MudTooltip>
                        <MudTableSortLabel SortLabel='SortAmount' T='CheckModel'
                            InitialDirection="SortDirection.Descending">
                            Amount
                        </MudTableSortLabel>
                    </MudTh>
                    <MudTh Class='@(isPinnedAmt ? "th-sticky-action customheader-6":"customheader-6")'>Actions</MudTh>
                </HeaderContent>
                <RowTemplate>
                    <MudTd DataLabel='Control Number'>
                        <MudChip Class='mudchip-tbl' 
                            Variant='Variant.Outlined' Color='Color.Error' Size='Size.Small'>
                        @context.ControlNumber
                        </MudChip>
                    </MudTd>
                    <MudTd Class='@(isPinnedCtrlNo ? "col-sticky-left":"")' DataLabel='Control No.'>
                        <div class='d-flex align-center justify-start gap-2'>
                            <MudChip Class='mudchip-tbl' Color='Color.Error' Size='Size.Small' Variant='Variant.Outlined'>
                                @context.CheckNo
                            </MudChip>
                            <MudChip Class='mudchip-tbl' Icon='@Icons.Material.Filled.CalendarMonth' Variant='Variant.Outlined' Color='Color.Dark' Size='Size.Small'>
                                @(context.CheckDate?.ToShortDateString())
                            </MudChip>
                            <MudChip Class='mudchip-tbl' Icon='@Icons.Material.Filled.CalendarMonth' Variant='Variant.Outlined' Color='Color.Dark' Size='Size.Small'>
                                @(!string.IsNullOrWhiteSpace(context.IssuedDate?.ToShortDateString()) ? context.IssuedDate?.ToShortDateString():"none")
                            </MudChip> 
                        </div>
                    </MudTd>
                    <MudTd DataLabel='Payee Name'>
                        <div class='dynamic-div-1'>
                            <small>@context.PayeeName</small>
                        </div>
                    </MudTd>
                    <MudTd DataLabel='Bank Name'>
                        <div class='dynamic-div-1'>
                            <small>@context.BankName</small>
                        </div>
                    </MudTd>
                    <MudTd DataLabel='Check Category'>
                        @if(GlobalClassList.accountingStatusList != null)
                        {
                            <MudChip Class='mudchip-tbl' Size='Size.Small' Color='Color.Info' Variant='Variant.Outlined'>
                                @context.CheckCategory
                            </MudChip>
                        }
                    </MudTd>
                    <MudTd DataLabel='Status Name'>
                        @if(GlobalClassList.accountingStatusList != null)
                        {
                            <MudChip Class='mudchip-tbl' Size='Size.Small' Style='@Extensions.BorderColor(context.AccountingStatusId)' Variant='Variant.Outlined'>
                                @AccountingStatusName(context.AccountingStatusId)
                            </MudChip>
                        }
                    </MudTd>
                    <MudTd Class='@(isPinnedAmt ? "br-none":"")' DataLabel='Status Date'>
                        <div class='d-flex align-center'>
                            @if(GlobalClassList.accountingStatusList != null)
                            {
                                <MudChip Class='mudchip-tbl' Icon='@Icons.Material.Filled.CalendarMonth' Variant='Variant.Outlined' Color='Color.Dark' Size='Size.Small'>
                                    @(context.StatusDate?.ToShortDateString())
                                </MudChip>
                            }
                        </div>
                    </MudTd>
                    <MudTd Class='@(isPinnedAmt ? "col-sticky-amt":"")' DataLabel='Amount'>
                        <div class='tooltipw100'>
                            <MudTooltip Class='flex-1' Text='@(Extensions.GetEnumDescription(Enums.BankCurrency.PhilippinePeso) + " " + context.Amount.ToString("N2"))' 
                                Arrow Placement='Placement.Top' Color='Color.Success'>
                                <div class='amount-container'>
                                    <small class='@(context.Amount > 0 ? "font-bold color-green":"font-bold color-red")'>
                                        @Extensions.GetEnumDescription(Enums.BankCurrency.PhilippinePeso)
                                    </small>
                                    <MudSpacer />
                                    <small class='@(context.Amount > 0 ? "txt-green":"txt-red")'>
                                        @context.Amount.ToString("N2")
                                    </small>
                                </div>
                            </MudTooltip>
                        </div>
                    </MudTd>
                    <MudTd Class='@(isPinnedAmt ? "col-sticky-action text-center":"text-center")' DataLabel='Actions'>
                        <MudMenu Class='mudbtnico-rotate-90' Icon='@Icons.Material.Filled.MoreVert' AnchorOrigin='Origin.BottomLeft' ActivationEvent="MouseEvent.MouseOver"
                            TransformOrigin='Origin.TopRight' Dense Size='Size.Small'>
                            @if(GlobalClass.currentUserAccount.AccessLevel == Enums.AccountingAccessLevel.AccountingAdmin || 
                                GlobalClass.currentUserAccount.AccessLevel == Enums.AccountingAccessLevel.Administrator)
                            {
                                if(context.AccountingStatusId != AccountingStatusId(Enums.AccountingStatusEnumCategory.CC))
                                {
                                    @if(context.AccountingStatusId == AccountingStatusId(Enums.AccountingStatusEnumCategory.CI))
                                    {
                                    <MudMenuItem OnClick="(()=>EditCheck(context))">
                                        <div class='d-flex align-center gap-2 '>
                                            <MudIcon Icon='@Icons.Material.Filled.Edit' Size='Size.Small' Color='Color.Dark' />
                                            <MudText Typo='Typo.body2' Color='Color.Dark'>Edit</MudText>
                                        </div>
                                    </MudMenuItem>
                                    }
                                    @if(context.AccountingStatusId != AccountingStatusId(Enums.AccountingStatusEnumCategory.CCLRD)  && 
                                    context.AccountingStatusId != AccountingStatusId(Enums.AccountingStatusEnumCategory.CR))
                                    {
                                        <MudMenuItem OnClick="(() => UpdateStatus(context,Enums.AccountingStatusEnumCategory.CR,Enums.ActionMode.Release))">
                                            <div class='d-flex align-center gap-2 '>
                                                <MudIcon Icon='fa-solid fa-check-double' Size='Size.Small' Color='Color.Dark'/>
                                                <MudText Typo='Typo.body2' Color='Color.Dark'>Release</MudText>
                                            </div>
                                        </MudMenuItem>
                                    }
                                    @if(context.AccountingStatusId != AccountingStatusId(Enums.AccountingStatusEnumCategory.CR) && 
                                    context.AccountingStatusId == AccountingStatusId(Enums.AccountingStatusEnumCategory.CCLRD))
                                    {
                                        <MudMenuItem OnClick="(()=>UpdateStatus(context,Enums.AccountingStatusEnumCategory.CCLRD,Enums.ActionMode.Clear))">
                                            <div class='d-flex align-center gap-2 '>
                                                <MudIcon Icon='@Icons.Material.Filled.ClearAll' Size='Size.Small' Color='Color.Dark' />
                                                <MudText Typo='Typo.body2' Color='Color.Dark'>Clear Check</MudText>
                                            </div>
                                        </MudMenuItem>
                                    }
                                    @if(context.AccountingStatusId != AccountingStatusId(Enums.AccountingStatusEnumCategory.CR))
                                    {
                                    <MudMenuItem OnClick="(() => UpdateStatus(context,Enums.AccountingStatusEnumCategory.CC,Enums.ActionMode.Cancel))">
                                        <div class='d-flex align-center gap-2 '>
                                            <MudIcon Icon='@Icons.Material.Filled.Cancel' Size='Size.Small' Color='Color.Dark' />
                                            <MudText Typo='Typo.body2' Color='Color.Dark'>Cancel</MudText>
                                        </div>
                                    </MudMenuItem>
                                    }
                                }
                            }
                            <MudMenuItem OnClick="(() => GoToAuditTrail(context))">
                                <div class='d-flex align-center gap-2 '>
                                    <MudIcon Icon='@Icons.Material.Filled.ListAlt' Size='Size.Small' Color='Color.Dark'/>
                                    <MudText Typo='Typo.body2' Color='Color.Dark'>Audit Trail</MudText>
                                </div>
                            </MudMenuItem>
                            <MudMenuItem OnClick="(() => context.showReport = ShowReport(context.showReport,context))">
                                <div class='d-flex align-center gap-2 '>
                                    <MudIcon Icon='@Icons.Material.Filled.PictureAsPdf' Size='Size.Small' Color='Color.Dark'/>
                                    <MudText Typo='Typo.body2' Color='Color.Dark'>Show Report</MudText>
                                </div>
                            </MudMenuItem>
                        </MudMenu>
                    </MudTd>
                </RowTemplate>
                <NoRecordsContent>
                    <MudText Class='txt-uppercase font-bold font12' Color='Color.Error'>No records found</MudText>
                </NoRecordsContent>
                <ChildRowContent>
                    <MudTr>
                        <td colspan="6">
                            <div class='transition-05s-ease overflow-hidden' style='@(context.showReport || context.isShowChild ? "max-height:700px" : "max-height:0px")'> 
                                <div class='d-flex align-center pa-2 bgc-f2f2f2'>
                                    <MudSpacer />
                                    <MudButton Class='btn-ios-d font12' OnClick='(() => context.showReport = ShowReport(context.showReport, context))' EndIcon="@Icons.Rounded.Close" Size='Size.Small' >
                                        Close Report
                                    </MudButton>
                                </div>
                                <div class='d-flex align-stretch justify-center default-report-container'>
                                    @if(context.showReport)
                                    {
                                        @if (string.IsNullOrWhiteSpace(PDFContent))
                                        {
                                            <MudOverlay Visible='true' DarkBackground="false" AutoClose="true">
                                                <MudProgressCircular Color="Color.Primary" Indeterminate="true" />
                                            </MudOverlay>
                                        }
                                        else
                                        {
                                            <iframe src='@PDFContent' />
                                        }
                                    }
                                </div>
                            </div>
                        </td>
                    </MudTr>
                </ChildRowContent>
                <PagerContent>
                    <MudTablePager PageSizeOptions='@GlobalVariable.pageSize' />
                </PagerContent>
            </MudTable>
        }
    </MudContainer>
</div>

@code
{
    private bool dataFetched, openSideFilter, isLoading = true, isPinnedCtrlNo = true, isPinnedAmt = true;
    private string searchTerm = string.Empty;
    private string PDFContent  = default!;
    private IEnumerable<CheckModel>? pageData;
    private MudTable<CheckModel> tableVariable = new MudTable<CheckModel>();
    private FilterParameter filterParameter = new();
    private DateRange dateRangeFilter = new DateRange(DateTime.Now.Date, DateTime.Now.Date);
    private UserAccount requestor  = new();
    private Project project = new();
    private AccountingStatusModel selectedStatus = new();
    private IEnumerable<AccountingStatusModel> hasAccountingStatus {get; set;} = new HashSet<AccountingStatusModel>();
    private BankModel selectedBanks = new();
    private IEnumerable<BankModel> hasBanks {get; set;} = new HashSet<BankModel>();
    protected override async Task OnInitializedAsync()
    {
        GlobalClass.pageTitle = "Check List";
        while (GlobalClass.currentUserAccount == null || GlobalClassList.listOfChecks == null)
            await Task.Delay(1);
        //clearing entry after save
        CheckWriter.currentActionMode = Enums.ActionMode.Create;
        SignalR();
        CompletedFetch();
    }
    private void CompletedFetch()
    {
        dataFetched = true;
        StateHasChanged();
    }
    private async Task CheckReport(CheckModel check)
    {
        PDFContent = await checkService.GetCheckReport(check);
        StateHasChanged();
    }
    private bool FilterItems(CheckModel check)
    {
        if (string.IsNullOrEmpty(searchTerm))
            return true;
        if (check.CheckNo.Contains(searchTerm, StringComparison.InvariantCultureIgnoreCase))
            return true;
        return false;
    }
    private void EditCheck(CheckModel model)
    {
        GlobalClass.checkModel = model;
        navigationManager.NavigateTo($"/check/create");
        CheckWriter.currentActionMode = Enums.ActionMode.Update;
    }
    private async Task UpdateStatus(CheckModel check, Enums.AccountingStatusEnumCategory status,Enums.ActionMode actionMode)
    {
      
        //Prompt confirmation
        var parameters = new DialogParameters();
        string contentText = "Check";
        string dialogTitle = actionMode.ToString();
        parameters.Add("actionMode", actionMode);
        parameters.Add("dialogTitle", dialogTitle);
        parameters.Add("contentText", contentText);
        parameters.Add("isCheckModule",true);
        parameters.Add("controlNumber",check.ControlNumber);
        var options = new DialogOptions() { CloseButton = false, MaxWidth = MaxWidth.ExtraSmall, FullWidth = true, NoHeader = false, DisableBackdropClick = true };
        var resultDialog = await dialogService.Show<Shared.Dialogs.GenericPromptDialogs.GenericPrompt>(dialogTitle, parameters, options).Result;
        if (!resultDialog.Canceled) 
        {
            //Audit Trail
            check.UserId = GlobalClass.currentUserAccount.EmployeeId;
            check.Activity = status == Enums.AccountingStatusEnumCategory.CR ? "Released"
            :(status == Enums.AccountingStatusEnumCategory.CCLRD ? "Clear Check":"Cancel Check");
            check.StatusName = status.ToString();
            check.AccountingStatusId = AccountingStatusId(status);
            check.StatusId = (long?)status;
            check.StatusDate = GlobalClass.checkModel.StatusDate;
            await UpdateCheckStatus(check);
            Console.WriteLine(Newtonsoft.Json.JsonConvert.SerializeObject(check,Newtonsoft.Json.Formatting.Indented));
            Extensions.ShowAlert("Check updated successfully.",Variant.Filled,snackBarService,Severity.Success);
        }
    }
    private async Task UpdateCheckStatus(CheckModel check)
    {
        await checkService.UpdateCheckStatus(check,GlobalClass.token);
    }
    public static string GetAcctgStatusColor(long acctgStatusId)
    {
        var acctgStatus = new AccountingStatusModel();
        acctgStatus = GlobalClassList.accountingStatusList.Where(x => (int)x.StatusEnumCategoryId == acctgStatusId).FirstOrDefault();
        return "background-color:" + acctgStatus?.StatusColor;
    }
    private bool ShowReport(bool isShow, CheckModel check)
    {
        check.AmountInWords = Common.AmountToWords.DecimalToWords(check.Amount);
        Task.Run(()=> CheckReport(check));
        GlobalClassList.listOfChecks.ForEach(model => {
            if(model.Id != check.Id)
                model.showReport = false;
        });
        return isShow = !isShow;
    }
    private async Task<TableData<CheckModel>> LoadCheck(TableState tableState)
    {
        isLoading = true;
        IEnumerable<CheckModel> data = await checkService.LoadCheck(filterParameter, GlobalClass.token);
        switch (tableState.SortLabel)
        {
            case "SortControlNumber":
                data = data.OrderByDirection(tableState.SortDirection, x=>x.ControlNumber);
                break;
             case "SortCheckNo":
                data = data.OrderByDirection(tableState.SortDirection, x=>x.CheckNo);
                break;
            case "SortDate":
                data = data.OrderByDirection(tableState.SortDirection, x=>x.CheckDate);
                break;
            case "SortDateIssued":
                data = data.OrderByDirection(tableState.SortDirection, x=>x.IssuedDate);
                break;
            case "SortAmount":
                data = data.OrderByDirection(tableState.SortDirection, x=>x.Amount);
                break;
        }
        await Task.Delay(3);
        GlobalClassList.listOfChecks = data.ToList();
        pageData = GlobalClassList.listOfChecks.Skip(tableState.Page * tableState.PageSize).Take(tableState.PageSize).ToArray();
        var total = GlobalClassList.listOfChecks.Count();
        isLoading = !isLoading;
        return new TableData<CheckModel>()
        {
            TotalItems = total,
            Items = pageData
        };
    }
    private void AddCheck()
    {
        GlobalClass.checkModel = new();
        navigationManager.NavigateTo("/check/create");
        CheckWriter.currentActionMode = Enums.ActionMode.Create;
    }
    private void SignalR()
    {
        try
        {
            if(GlobalVariable.AMSHubConnection != null)
                GlobalVariable.AMSHubConnection.On<CheckModel>("SaveCheck",(checkModel) => 
                {
                    tableVariable.ReloadServerData();
                    StateHasChanged();
                });
        }catch (Exception ex)
        {
            Console.WriteLine(ex.Message);
            throw;
        }
    }
    private string AccountingStatus(List<string> selectedStatus)
    {
        var status = "";
        foreach (var item in hasAccountingStatus)
        {
        status = string.Join(", ", hasAccountingStatus.Select(x => x.StatusName));      
        }
        return $"{status}";
    }
    private string Banks(List<string> selectedBanks)
    {
        var status = "";
        foreach (var item in hasBanks)
        {
        status = string.Join(", ", hasBanks.Select(x => x.BankName));      
        }
        return $"{status}";
    }
    private async void LookUp(Enums.LookUpType type, string lookFor)
    {
        var parameters = new DialogParameters();
        string dialogTitle = string.Empty;
        string searchPlaceholderText = string.Empty;
        dialogTitle = lookFor+" Look Up";
        searchPlaceholderText = lookFor;
        parameters.Add("lookUpType", type);
        parameters.Add("dialogTitle", dialogTitle);
        parameters.Add("buttonText", "Select");
        parameters.Add("searchPlaceholderText", searchPlaceholderText);
        parameters.Add("color", Color.Success);
        var options = new DialogOptions()
        {
            CloseButton = false,
            MaxWidth = MaxWidth.Small,
            FullWidth = true,
            NoHeader = false,
            DisableBackdropClick = false
        };
        var resultDialog = await dialogService.Show<Shared.Dialogs.LookUpDialog.GlobalGenericLookup>(dialogTitle, parameters, options).Result;
        if (!resultDialog.Canceled) {
            if(type == Enums.LookUpType.Employee)
                requestor = (UserAccount) resultDialog.Data;
            else if (type == Enums.LookUpType.Project)
                project = (Project) resultDialog.Data;
            filterParameter.RequestorId = requestor.EmployeeId;
            filterParameter.PayeeId = project.ProjectId;
            filterParameter.PayeeCategoryId = project.ProjectCategoryId;
        }
        StateHasChanged();
    }
    private async Task FilterTable()
    {
        filterParameter = GlobalVariable.filterParameter;
        filterParameter.AccountingAccessLevel = GlobalClass.currentUserAccount.AccessLevel;
        await tableVariable.ReloadServerData();
    }
    private async Task ReloadTable()
    {
        filterParameter = new();
        await tableVariable.ReloadServerData();
    }
    private bool EnableClearButton()
    {
      if(filterParameter.IsCheckNumber)
        return true;
      if(filterParameter.IsControlNumber) 
        return true;
      if(filterParameter.IsAccountingStatus)
        return true;
      if(filterParameter.IsDate)
        return true;
      if(filterParameter.IsRequestor)
        return true;
      if(filterParameter.IsPayee)
        return true;
      if(filterParameter.IsBank)
        return true;
      return false;
  }
  private void GoToAuditTrail(CheckModel check)
  {
    GlobalClass.checkModel = check;
    navigationManager.NavigateTo("/check/trail");
  }
    private long AccountingStatusId(Enums.AccountingStatusEnumCategory id)
    {
        return GlobalClassList.accountingStatusList
            .Where( acctg => id == acctg.StatusEnumCategoryId)
            .Select( acctg => acctg.Id)
            .FirstOrDefault();
    }
    private string AccountingStatusName(long accountingStatusID)
    {
        return GlobalClassList.accountingStatusList
            .Where( acctg => accountingStatusID == acctg.Id)
            .Select( acctg => acctg.StatusName)
            .FirstOrDefault()?? string.Empty;
    }
}