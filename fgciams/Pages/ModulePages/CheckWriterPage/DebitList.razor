@page "/debit/list"
@inject IDebitService debitService
@inject NavigationManager navigationManager
@inject IDialogService dialogService
@inject ISnackbar SnackbarService
@inject IAccessLevelService accessLevelService

<div class='page-cont'>
    <div class='drawer-right-min'>
        <MudDrawer Class='pa-1' Open='false' Fixed='false' Anchor='Anchor.Right' Elevation='0' Variant='DrawerVariant.Mini' OpenMiniOnHover='false'>
            <MudTooltip Text='Filter' Arrow Placement='Placement.Left'>
                <MudIconButton OnClick='(() => openFilter = !openFilter)' Icon='@Icons.Material.Filled.FilterList' arial-label='Close Filter' Size='Size.Small' />
            </MudTooltip>
        </MudDrawer>
    </div>
    <MudContainer Class='py-2 pl-2 pr-10  table-toolbar-custom1' Fixed='false' MaxWidth='MaxWidth.ExtraExtraLarge'>
        @if(!dataFetched)
        {
            <SkeletonPageList />
        }
        else
        {
            <MudTable Class='table-style-1 ' ServerData='new Func<TableState, Task<TableData<DebitModel>>>(LoadDebit)'
                Breakpoint="Breakpoint.Xs" Hover FixedHeader FixedFooter Bordered Dense Loading='isLoading'
                @ref='tableVariable'>
                <ToolBarContent>
                    <MudText Typo='Typo.caption'>
                        @GlobalClassList.debitList.Count() 
                        @(GlobalClassList.debitList.Count() == 1 ? "item" : "items") 
                        in total
                    </MudText>
                    <MudSpacer/>
                    <MudTooltip Text="Refresh Table" Arrow Placement='Placement.Top'>
                        <MudIconButton Class='@(isLoading ? "mudbtnico-rotate":"")' OnClick='ReloadTable' Icon="@Icons.Material.Filled.Refresh" Size="Size.Small" 
                            Color='@(isLoading ? Color.Info : Color.Default)'/>
                        </MudTooltip>
                    <MudMenu Class='overflow-hidden mudbtnico-rotate-90' StartIcon='@Icons.Material.Filled.MoreVert' AnchorOrigin='Origin.BottomCenter' 
                        TransformOrigin='Origin.TopRight' Dense Size='Size.Small' Label='More'>
                         <MudMenuItem OnClick='AddDebit'>
                            <div class='d-flex align-center gap-2 '>
                                <MudIcon Icon='@Icons.Material.Filled.Add' Size='Size.Small' Color='Color.Dark' />
                                <MudText Typo='Typo.body2' Color='Color.Dark'>Add Debit</MudText>
                            </div>
                        </MudMenuItem>
                        <MudMenuItem OnClick="(() => openFilter = !openFilter)"  >
                            <div class='d-flex align-center gap-2 '>
                                <MudIcon Icon='@Icons.Material.Filled.FilterList' Size='Size.Small' Color='Color.Dark' />
                                <MudText Typo='Typo.body2' Color='Color.Dark'>Filter</MudText>
                            </div>
                        </MudMenuItem>
                    </MudMenu>
                    @if(openFilter)
                    {
                        <PopoverFilterMainComponent IsOpen='openFilter' CloseFilter='(() => openFilter = !openFilter)' IsMainFilter='true' IsModuleList='true'
                            ModuleName='debit-list' ApplyFilter='FilterTable' ResetTableData='ReloadTable'/>
                    }
                </ToolBarContent>
                <ColGroup>
                    <col style='width:1%;' />
                    <col />
                    <col />
                    <col style='width:115px' />
                    <col style="width:50px" />
                </ColGroup>
                <HeaderContent>
                    <MudTh Class='@(isPinnedCtrlNo ? "th-sticky-left customheader-6":"customheader-6")'>
                        <div class='d-flex align-center justify-space-around gap-2'>
                            <MudTableSortLabel SortLabel='SortControlNumber' T='DebitModel' 
                                InitialDirection="SortDirection.Descending">
                                Control No.
                            </MudTableSortLabel>
                            <MudTableSortLabel SortLabel='SortDate' T='DebitModel' 
                                InitialDirection="SortDirection.None">
                                Debit Date
                            </MudTableSortLabel>
                        </div>
                    </MudTh>
                    <MudTh Class='customheader-6'>Bank</MudTh>
                    <MudTh Class='customheader-6'>Remarks</MudTh>
                    <MudTh Class='@(isPinnedAmt ? "th-sticky-amt customheader-6 text-right":"customheader-6 text-right")'>
                        <MudTooltip Text='Pin amount column' Arrow Placement='Placement.Top'>
                            <MudIconButton Class='ico-15x15' OnClick='(() => isPinnedAmt = !isPinnedAmt)' Color='@(isPinnedAmt ? Color.Info:Color.Dark)' 
                                Icon='@Icons.Material.Filled.PushPin' Size='Size.Small'/>
                        </MudTooltip>
                        <MudTableSortLabel SortLabel='SortAmount' T='CheckModel'
                            InitialDirection="SortDirection.Descending">
                            Amount
                        </MudTableSortLabel>
                    </MudTh>
                    <MudTh Class='@(isPinnedAmt ? "th-sticky-action customheader-6":"customheader-6")'>Actions</MudTh>
                </HeaderContent>
                <RowTemplate>
                    <MudTd Class='@(isPinnedCtrlNo ? "col-sticky-left":"")' DataLabel='Control No.'>
                        <div class='d-flex align-center justify-start'>
                            <MudChip Class='mudchip-tbl' Color='Color.Error' Size='Size.Small' Variant='Variant.Outlined'>
                                @context.ControlNumber
                            </MudChip>
                            <MudChip Class='mudchip-tbl' Icon='@Icons.Material.Filled.CalendarMonth' Variant='Variant.Outlined' Color='Color.Dark' Size='Size.Small'>
                                @(context.DebitDate?.ToShortDateString())
                            </MudChip>
                        </div>
                    </MudTd>
                    <MudTd DataLabel='Bank Name'>
                        <div class='dynamic-width-1'>
                            <small>@context.BankName</small>
                        </div>
                    </MudTd>
                    <MudTd DataLabel='Remarks'>
                        <div class='dynamic-width-1'>
                            <small>@context.Remarks</small>
                        </div>
                    </MudTd>
                    <MudTd Class='@(isPinnedAmt ? "col-sticky-amt":"")' DataLabel='Amount'>
                        <div class='tooltipw100'>
                            <MudTooltip Class='flex-1' Text='@(Extensions.GetEnumDescription(Enums.BankCurrency.PhilippinePeso) + " " + context.Amount.ToString("N2"))' 
                                Arrow Placement='Placement.Top' Color='Color.Success'>
                                <div class='amount-container'>
                                    <small class='@(context.Amount > 0 ? "font-bold color-green":"font-bold color-red")'>
                                        @Extensions.GetEnumDescription(Enums.BankCurrency.PhilippinePeso)
                                    </small>
                                    <MudSpacer />
                                    <small class='@(context.Amount > 0 ? "txt-green":"txt-red")'>
                                        @context.Amount.ToString("N2")
                                    </small>
                                </div>
                            </MudTooltip>
                        </div>
                    </MudTd>
                    <MudTd Class='@(isPinnedAmt ? "col-sticky-action text-center":"text-center")' DataLabel='Actions'>
                        <MudMenu Class='mudbtnico-rotate-90' Icon='@Icons.Material.Filled.MoreVert' AnchorOrigin='Origin.BottomLeft' 
                            TransformOrigin='Origin.TopRight' Dense Size='Size.Small'>
                            <DebitMenuComponent
                                ModuleName ="debit"
                                DebitModel ="context"
                                EditDebitClick="(()=>EditDebit(context))"
                                PreviewClick="(() => PreviewDebit(context))"
                                CancelDebitClick="( ()=> Prompt(context))"
                                AuditTrailClick="(() => GoToAuditTrail(context))"
                            />
                        </MudMenu>
                    </MudTd>
                </RowTemplate>
                <NoRecordsContent>
                    <MudText Class='txt-uppercase font-bold font12' Color='Color.Error'>No records found</MudText>
                </NoRecordsContent>
                <PagerContent>
                    <FooterPaginationComponent
                        FilterParameter='filterParameter'
                        NextAndPreviousPage='( async (args)=> await NextAndPreviousPage((bool) args.Item1, (bool) args.Item2))'
                        OnPageSizeChanged='( async (int s)=> await PageSizeChanged(s) )'
                        TotalRow='TotalRow'                    />
                    @* <MudTablePager PageSizeOptions='@GlobalVariable.pageSize' /> *@
                </PagerContent>
            </MudTable>
        }
    </MudContainer>
</div>

@code
{
    private bool dataFetched, openFilter, isLoading = true, isPinnedCtrlNo = true, isPinnedAmt = true;
    private string searchTerm = string.Empty;
    private IEnumerable<DebitModel>? pageData;
    private MudTable<DebitModel> tableVariable = new MudTable<DebitModel>();
    private FilterParameter filterParameter = new();
    private int TotalRow = 0;

    protected override async Task OnInitializedAsync(){
        GlobalClass.pageTitle = "Debit List";
            DebitEntry.currentActionMode = Enums.ActionMode.Create;
        await DebitListRowCount();
        await Common.Privileges.GetAllowedFunctions(accessLevelService, Enums.AISModules.DebitList);
        CompletedFetch();
            SignalR();
    }

    
    private void CompletedFetch()
    {
        dataFetched = true;
        StateHasChanged();
    }
    protected override void OnAfterRender(bool firstRender)
    {
        if(firstRender)
        {
            filterParameter.PageSize = 15;
            filterParameter.PageNo = 0;
        }
    }
    private async Task<TableData<DebitModel>> LoadDebit(TableState tableState)
    {
        isLoading = true;
        IEnumerable<DebitModel> data = await debitService.GetDebits(filterParameter, GlobalClass.token);
        switch (tableState.SortLabel)
        {
            case "SortControlNumber":
                data = data.OrderByDirection(tableState.SortDirection, x=>x.ControlNumber);
                break;
            case "SortDate":
                data = data.OrderByDirection(tableState.SortDirection, x=>x.DebitDate);
                break;
        }
        GlobalClassList.debitList = data.ToList();
        pageData = GlobalClassList.debitList.Skip(tableState.Page * GlobalVariable.PageSize).Take(GlobalVariable.PageSize).ToArray();
        var total = GlobalClassList.debitList.Count();
        isLoading = !isLoading;
        return new TableData<DebitModel>()
        {
            TotalItems = total,
            Items = pageData
        };
    }
    private async Task FilterTable()
    {
        filterParameter = GlobalVariable.filterParameter;
        filterParameter.PageSize = GlobalVariable.PageSize;
        filterParameter.PageNo = 0;
        await tableVariable.ReloadServerData();
    }
    private async Task ReloadTable()
    {
        await DebitListRowCount();
        filterParameter = new();
        filterParameter.PageSize = GlobalVariable.PageSize;
        filterParameter.PageNo = 0;
        await tableVariable.ReloadServerData();
    }
    private void GoToAuditTrail(DebitModel debit)
    {
        GlobalClass.debit = debit;
        navigationManager.NavigateTo("/debit/trail");
    }
    private void AddDebit()
    {
        if(Common.Privileges.IsPrivilegeModule(Enums.AISModules.DebitEntry))
        {
            DebitEntry.currentActionMode = Enums.ActionMode.Create;
            GlobalClass.debit = new();
            navigationManager.NavigateTo($"/debit");
        } else
            Extensions.ShowAlert("Account has been restricted to create debit.", Variant.Filled, SnackbarService, Severity.Error);
    }
    private void EditDebit(DebitModel debit)
    {
        DebitEntry.currentActionMode = Enums.ActionMode.Update;
        GlobalClass.debit = debit;
        navigationManager.NavigateTo($"/debit");
    }
    private async Task Prompt(DebitModel debit)
    {
        var parameters = new DialogParameters();
        string contentText = "Debit ";
        string dialogTitle = Enums.ActionMode.Cancel +" "+ contentText;
        parameters.Add("dialogTitle", dialogTitle);
        parameters.Add("actionMode", Enums.ActionMode.Cancel);
        parameters.Add("contentText", contentText);
        parameters.Add("controlNumber", debit.ControlNumber);
        var options = new DialogOptions() { CloseButton = false, MaxWidth = MaxWidth.ExtraSmall, FullWidth = true, NoHeader = false, DisableBackdropClick = true };
        var resultDialog = await dialogService.Show<Shared.Dialogs.GenericPromptDialogs.GenericPrompt>(dialogTitle, parameters, options).Result;
        if (!resultDialog.Canceled)
        {   
            debit.IsActive = false;
            debit.UserId = GlobalClass.currentUserAccount.EmployeeId;
            debit.Activity = "Cancel debit";
            await debitService.UpdateDebit(debit,GlobalClass.token);
            Extensions.ShowAlert("Debit cancelled",Variant.Filled,SnackbarService,Severity.Error);

            if(GlobalVariable.AMSHubConnection != null)
                await GlobalVariable.AMSHubConnection.InvokeAsync("SaveDebit",debit);    
        }
    }
    private void SignalR()
    {
        try
        {
            if(GlobalVariable.AMSHubConnection != null)
                GlobalVariable.AMSHubConnection.On<DebitModel>("SaveDebit", async (debitModel) => 
                {
                    filterParameter.PageSize = GlobalVariable.PageSize;
                    filterParameter.PageNo = 0;
                    await tableVariable.ReloadServerData();
                    StateHasChanged();
                });
        }catch (Exception ex)
        {
            Console.WriteLine(ex.Message);
            throw;
        }
    }
    private async Task NextAndPreviousPage(bool next, bool skipNext)
    {
      if(skipNext)
      {
        if(next)
        {
          if(GlobalVariable.LastPage != 0)
            filterParameter.PageNo = GlobalVariable.LastPage;
          else
            filterParameter.PageNo++;
        }
        else 
          filterParameter.PageNo = 0;
      } else {
        if(next)
          filterParameter.PageNo++;
        else 
          filterParameter.PageNo--;
      }
      await tableVariable.ReloadServerData();
    }
    private async Task DebitListRowCount()
    {
      int count = TotalRow = await debitService.DebitListRowCount(new FilterParameter(){ isActive = true, PageSize = 2000000 , PageNo =0 },GlobalClass.token);
      if(count % GlobalVariable.PageSize == 0)
        GlobalVariable.LastPage = (Convert.ToInt32(Math.Floor(Convert.ToDecimal(count) / Convert.ToDecimal(GlobalVariable.PageSize)))) - 1;
      else
        GlobalVariable.LastPage = Convert.ToInt32(Math.Floor(Convert.ToDecimal(count) / Convert.ToDecimal(GlobalVariable.PageSize)));
    }
    private async Task PageSizeChanged(int s)
    {
      filterParameter.PageSize = GlobalVariable.PageSize = s; 
      await tableVariable.ReloadServerData();
      await DebitListRowCount();
    }
    private async Task PreviewDebit(DebitModel debit)
    {
        var parameters = new DialogParameters()
        {
            { "DialogTitle", "Debit" },
            { "Debit", debit },
            { "CancelText", "Close"},
            { "IconString", @Icons.Material.Filled.CreditScore }
        };
        var options = new DialogOptions()
        {
            CloseButton = false,
            MaxWidth = MaxWidth.Medium,
            FullWidth = false,
            NoHeader = true,
            DisableBackdropClick = false
        };
        var resultDialog = await dialogService.Show<Shared.Dialogs.PreviewInformationDialogs.Check.PreviewDebitDialog>(string.Empty, parameters, options).Result;
    }
}