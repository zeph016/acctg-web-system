@page "/voucher/route/list"

@inject IVoucherService voucherService
@inject NavigationManager navigationManager
@inject IDialogService dialogService
@inject ISnackbar snackbarService
@inject IJSRuntime JSRuntime
@inject ApplicationState AppState
@inject IVoucherRouteTagUserService voucherRouteTagUserService

<div class='page-cont'>
  <div class='drawer-right-min'>
    <MudDrawer Class='pa-1' @bind-Open='openSideFilter' Fixed='false' Anchor='Anchor.Right' Elevation='0' Variant='DrawerVariant.Mini' OpenMiniOnHover='false'>
      <FilterComponent OpenSideFilterClick='(() => openSideFilter = !openSideFilter)' 
        FilterClick='FilterTable' ResetTableClick='ReloadTable'
        contentVisible='openSideFilter' moduleName="voucherroute-list" />
    </MudDrawer>
  </div>

  <MudContainer Class='py-2 pl-2 pr-10  table-toolbar-custom1' Fixed='false' MaxWidth='MaxWidth.ExtraExtraLarge'>
    @if (!dataFetched)
    {
      <SkeletonPageList />
    }
    else
    {
      <MudTable Class='table-style-1 ' ServerData='new Func<TableState, Task<TableData<VoucherModel>>>(LoadVoucherServer)' Hover='true' Height='calc(100vh - 185px)'
          Breakpoint='Breakpoint.Sm' Bordered FixedHeader FixedFooter Dense Loading='isLoading'
          RowsPerPage='15' @ref='tableVariable'>
          <ToolBarContent>
            <MudText Typo='Typo.caption'>
              @totalItems
              @(totalItems == 1 ? "item" : "items")
              in total
            </MudText>
            <MudSpacer />
            <MudTooltip Text="Refresh Table">
              <MudIconButton Class='@(isLoading ? "mudbtnico-rotate":"")' OnClick='ReloadTable' Icon="@Icons.Material.Filled.Refresh" Size="Size.Small" 
                Color='@(isLoading ? Color.Info : Color.Default)'/>
            </MudTooltip>
              <MudMenu Class='overflow-hidden mudbtnico-rotate-90' StartIcon='@Icons.Material.Filled.MoreVert' AnchorOrigin='Origin.BottomCenter' ActivationEvent='MouseEvent.MouseOver'
                TransformOrigin='Origin.TopRight' Dense='true' Size='Size.Small' Label='More'>
                  <MudMenuItem OnClick="RouteVouchers">
                      <div class='d-flex align-center gap-2 '>
                          <MudIcon Icon='@Icons.Material.Filled.Route' Size='Size.Small' Color='Color.Dark' />
                          <MudText Typo='Typo.body2' Color='Color.Dark'>Route Vouchers</MudText>
                      </div>
                  </MudMenuItem>
              </MudMenu>
          </ToolBarContent>
          <ColGroup>
            <col style='width: 1%;' />
            <col style='width: 20px' />
            <col style='width: 20px' />
            <col />
            <col style='width: 20px'/>
            <col style='width: 20px' />
            <col style='width: 20px' />
            <col style='width: 50px' />
            <col style='width: 1%;' />
            <col style='width: 110px' />
            <col style='width: 50px' />
          </ColGroup>
          <HeaderContent>
            <MudTh>
              <MudCheckBox T='bool' CheckedChanged='( (bool b) => SelectAll(b))' Checked='checkAll' Class='chip-radius-5 font-bold font10' Size='Size.Medium' UnCheckedColor='Color.Dark' Color='Color.Info' Dense/>
            </MudTh>
            <MudTh Class='@(isPinnedCtrlNo ? "th-sticky-left customheader-6":"customheader-6")'>
              <div class='d-flex align-center justify-space-around gap-2'>
                <MudTooltip Text='Pin control number column' Arrow Placement='Placement.Top'>
                  <MudIconButton Class='ico-15x15' OnClick='(() => isPinnedCtrlNo = !isPinnedCtrlNo)' Color='@(isPinnedCtrlNo ? Color.Info:Color.Dark)' 
                      Icon='@Icons.Material.Filled.PushPin' Size='Size.Small'/>
                </MudTooltip>
                <MudTableSortLabel SortLabel='SortControlNumber' T='VoucherModel'
                  InitialDirection='SortDirection.None'>
                    Control No.
                </MudTableSortLabel>
                <MudTableSortLabel SortLabel='SortDate' T='VoucherModel'
                  InitialDirection='SortDirection.Descending'>
                    Date
                </MudTableSortLabel>
              </div>
            </MudTh>
            <MudTh Class='customheader-6'>Payee</MudTh>
            <MudTh Class='customheader-6'>Description</MudTh>
            <MudTh Class='customheader-6 text-center'>Status</MudTh>
            <MudTh Class='customheader-6'></MudTh>
            <MudTh Class='customheader-6'></MudTh>
            <MudTh Class='customheader-6 text-center'>For Filing</MudTh>
            <MudTh Class='customheader-6 text-center'>Routed</MudTh>
            <MudTh Class='@(isPinnedAmt ? "th-sticky-amt customheader-6 text-right":"customheader-6 text-right")'>
              <MudTableSortLabel SortLabel='SortAmount' T='VoucherModel'
                InitialDirection='SortDirection.None'>
                Amount
              </MudTableSortLabel>
            </MudTh>
            <MudTh Class='@(isPinnedAmt ? "th-sticky-action customheader-6":"customheader-6")'>Actions</MudTh>
          </HeaderContent>
          <RowTemplate>
            <MudTd>
              <MudCheckBox T='bool' CheckedChanged='( (bool b)=> RowSelected(b,context) )' Checked='context.IsSelected' Class='chip-radius-5 font-bold font10' Size='Size.Medium' UnCheckedColor='Color.Dark' Color='Color.Info' Dense/>
            </MudTd>
            <MudTd Class='@(isPinnedCtrlNo ? "col-sticky-left text-center":"text-center")' DataLabel='Control No.'>
              <div class='d-flex align-center'>
                  <MudTooltip Text='@($"See {context.ControlNumber}")' Arrow Placement='Placement.Top'>
                      <MudButton Class='btn-tbl-link' StartIcon='@Icons.Material.Filled.Link'
                      Href='@FindReference(context)' Target='_blank'
                      Color='Color.Error' Variant='Variant.Outlined' Size='Size.Small' DisableElevation>
                          @context.ControlNumber
                      </MudButton>
                  </MudTooltip>
                  <MudChip Class='mudchip-tbl' Variant='Variant.Outlined' Icon='@Icons.Material.Filled.CalendarMonth' Color='Color.Dark' Size='Size.Small'>
                    @Convert.ToDateTime(context.VoucherDate).ToShortDateString()
                  </MudChip>
              </div>
            </MudTd>
            <MudTd DataLabel='Payee'>
              <div class='dynamic-div-1'>
                <small>@context.PayeeName</small>
              </div>
            </MudTd>
            <MudTd DataLabel='Description'>
              <div class='dynamic-div-1'>
                <small>@context.Description</small>
              </div>
            </MudTd>
            <MudTd DataLabel='Status'>
              @if (dataFetched) 
              {
                <MudChip Class='mudchip-tbl' Variant='Variant.Outlined' Size='Size.Small'
                  Style="@Extensions.BorderColor(context.AccountingStatusId)">
                  @context.StatusName
                </MudChip>
              }
            </MudTd>
            <MudTd DataLabel='Signatories'>
              <MudTooltip Text='Signatories' Placement='Placement.Left'>
                <MudMenu Icon="@Icons.Material.Filled.Groups" AnchorOrigin='Origin.BottomRight' ActivationEvent='MouseEvent.MouseOver'
                  TransformOrigin='Origin.TopLeft' Dense Size='Size.Small'>
                  <MudMenuItem>
                    <MudPaper class='pa-2 bgc-e7f2fb min-width200px'>
                      <MudText Class='font10 font-bold'>Prepared By:</MudText>
                      <SignatoriesComponent employeeId='@context.PreparedById' avatarSize='Size.Medium' />
                    </MudPaper>
                  </MudMenuItem>
                  <MudMenuItem>
                    <MudPaper class='pa-2 bgc-e7f2fb min-width200px'>
                      <MudText Class='font10 font-bold'>Verified By:</MudText>
                      <SignatoriesComponent employeeId='@context.VerifiedById' avatarSize='Size.Medium' />
                    </MudPaper>
                  </MudMenuItem>
                  <MudMenuItem>
                    <MudPaper class='pa-2 bgc-e7f2fb min-width200px'>
                      <MudText Class='font10 font-bold'>Approved By:</MudText>
                      <SignatoriesComponent employeeId='@context.ApprovedById' avatarSize='Size.Medium' />
                    </MudPaper>
                  </MudMenuItem>
                </MudMenu>
              </MudTooltip>
            </MudTd>
            <MudTd Class='text-center' DataLabel='Checks'>
              <MudTooltip Text='Checks' Arrow Placement='Placement.Top'>
                @if (!string.IsNullOrWhiteSpace(context.CheckNumber)) 
                {
                  <MudToggleIconButton @bind-Toggled='context.isShowChild'
                    Icon="fa-solid fa-money-check" Color="@Color.Default" Title="Expand" Size='Size.Small' ToggledSize='Size.Small'
                    ToggledIcon="fa-solid fa-money-check" ToggledColor="@Color.Info" ToggledTitle="Collapse"/>
                } 
                else 
                {
                  <MudText Class='font12'> - </MudText>
                }
              </MudTooltip>
            </MudTd>
            <MudTd Class='text-center' DataLabel='Filed'>
              <div class='d-flex align-center justify-center'>
               <MudCheckBox Class='chip-radius-5 font-bold font10' Checked="(context.VoucherRouteTags.All(x=> x.IsRouted) == true ? true:false)" ReadOnly Dense Size='Size.Small' 
                  UnCheckedColor='Color.Dark' Color='Color.Info' />
              </div>
            </MudTd>
            <MudTd Class='text-center' DataLabel='Filed'>
              <div class='d-flex align-center justify-center'>
               <MudCheckBox Class='chip-radius-5 font-bold font10' 
                T='bool'
                Checked="(context.VoucherRouteTags.All(x=> x.IsRouted) == true ? true
                      : (getTagsNumbers(context.VoucherRouteTags) == 0) ? true : false)" 
                    ReadOnly Dense Size='Size.Small' 
                    UnCheckedColor='Color.Dark' Color='Color.Info' />
              </div>
            </MudTd>
            <MudTd Class='@(isPinnedAmt ? "col-sticky-amt":"")' DataLabel='Amount'>
              <div class='tooltipw100'>
                <MudTooltip Class='flex-1' Text='@(Extensions.GetEnumDescription(Enums.BankCurrency.PhilippinePeso) + " " + context.TotalAmount.ToString("N2"))' 
                  Arrow Placement='Placement.Top' Color='@(context.TotalAmount > 0 ? Color.Success:Color.Error)'>
                  <div class='amount-container'>
                      <small class='@(context.TotalAmount > 0 ? "font-bold color-green":"font-bold color-red")'>
                        @Extensions.GetEnumDescription(Enums.BankCurrency.PhilippinePeso)
                      </small>
                      <MudSpacer />
                      <small class='@(context.TotalAmount > 0 ? "txt-green":"txt-red")'>
                          @context.TotalAmount.ToString("N2")
                      </small>
                  </div>
                </MudTooltip>
              </div>
            </MudTd>
            <MudTd Class='@(isPinnedAmt ? "col-sticky-action text-center":"text-center")' DataLabel='Actions'>
              <MudMenu Class='mudbtnico-rotate-90' Icon='@Icons.Material.Filled.MoreVert' AnchorOrigin='Origin.TopLeft' ActivationEvent='MouseEvent.MouseOver'
                TransformOrigin='Origin.TopRight' Dense='true' Size='Size.Small'>
                  <MudMenuItem OnClick='(() => NavigateToRoute(context))'>
                    <a class='d-flex align-center gap-2 '>
                      <MudIcon Icon='fa-solid fa-route' Size='Size.Small' />
                      <MudText Typo='Typo.body2'>Route</MudText>
                    </a>
                  </MudMenuItem>
                    <MudMenuItem OnClick='(() => ApproveRoute(GetUserTagInVoucher(context.VoucherRouteTags), context))'>
                      <a class='d-flex align-center gap-2 '>
                          <MudIcon Icon='@(context.VoucherRouteTags.All(x=> x.IsRouted) == true ? "fa-solid fa-check":"fa-solid fa-clock")' Size='Size.Small' />
                          <MudTooltip Text='@(context.VoucherRouteTags.All(x=> x.IsRouted) == true ? "All tags has been Approved":"Pending tags("+getTagsName(context.VoucherRouteTags)+")")'>
                            <MudText Typo='Typo.body2'>@(context.VoucherRouteTags.All(x=> x.IsRouted) == true ? "Approved for Filing" 
                              : (getTagsNumbers(context.VoucherRouteTags) == 0) ? "Approved for Filing"
                              : " Approve for Filing ("+getTagsNumbers(context.VoucherRouteTags)+" "+(getTagsNumbers(context.VoucherRouteTags) <= 1 ? "Pending":"Pendings")+")")</MudText>
                          </MudTooltip>
                      </a>
                    </MudMenuItem>
                    <MudMenuItem OnClick='(()=> {navigationManager.NavigateTo($"/voucher-audit");GlobalClass.voucher = context;})'>
                      <a class='d-flex align-center gap-2 '>
                        <MudIcon Icon='@Icons.Material.Filled.ListAlt' Size='Size.Small' />
                        <MudText Typo='Typo.body2'>Audit Trail</MudText>
                      </a>
              </MudMenuItem>
              </MudMenu>
            </MudTd>
          </RowTemplate>
          <NoRecordsContent>
            <MudText Class='txt-uppercase font-bold font12' Color='Color.Error'>No records found</MudText>
          </NoRecordsContent>
          <ChildRowContent>
            <MudTr>
              <td colspan="9">
                <div class='transition-05s-ease overflow-hidden' style='@(context.isShowChild ? "max-height:100vh" : "max-height:0px")'>
                  @if (!string.IsNullOrWhiteSpace(context.CheckNumber))
                  {
                    <CheckListComponent stringChecks=@context.CheckNumber />
                  }
                </div>
              </td>
            </MudTr>
            @* @if(context.isShowChild)
            {
              <MudTr>
                <td colspan="9">
                    <CheckListComponent stringChecks=@context.CheckNumber />
                </td>
              </MudTr>
            } *@
          </ChildRowContent>
          <PagerContent>
            <MudTablePager PageSizeOptions="@GlobalVariable.pageSize" />
          </PagerContent>
      </MudTable>
    }
  </MudContainer>
</div>

@code
{
    private bool dataFetched, openSideFilter, isLoading = true, isPinnedCtrlNo = true, isPinnedAmt = true,checkAll = false;
    private string searchTerm = string.Empty, visibility = "visibility-animation-hide";
    private int totalItems;
    private IEnumerable<VoucherModel>? pageData;
    private MudTable<VoucherModel> tableVariable = new MudTable<VoucherModel>();
    private FilterParameter filterParameter = new();
    private AccountingStatusModel selectedStatus = new AccountingStatusModel();
    private IEnumerable<AccountingStatusModel> hasAccountingStatus = new HashSet<AccountingStatusModel>();
    private DateRange dateRange = new DateRange(DateTime.Now, DateTime.Now);
    private HashSet<VoucherModel> selectedVouchers = new HashSet<VoucherModel>();
    private List<VoucherRouteTagUserModel> userTags = new List<VoucherRouteTagUserModel>();
    private string tagsNotApproved  = "";
    protected override async Task OnInitializedAsync()
    {
        GlobalClass.pageTitle = "Voucher Route List";
        if(GlobalClassList.selectedVoucherToRoute == null)
          GlobalClassList.selectedVoucherToRoute = new();
        if(GlobalClass.currentUserAccount == null || GlobalClassList.accountingStatusList == null 
        || GlobalClassList.accountingStatusList.Count() == 0 || GlobalClassList.Vouchers == null)
          await Task.Delay(1);
        Task t = Task.WhenAll(CurrentUserTag());
        await t;
        if(t.Status == TaskStatus.RanToCompletion)
          CompletedFetch();
    }

    void CompletedFetch()
    {
      dataFetched = true;
      StateHasChanged();
    }

    private async Task<TableData<VoucherModel>> LoadVoucherServer(TableState tableState)
    {
      isLoading = true;
      IEnumerable<VoucherModel> data = await voucherService.LoadVouchers(filterParameter, GlobalClass.token);
      switch (tableState.SortLabel)
      {
        case "SortControlNumber":
          data = data.OrderByDirection(tableState.SortDirection, x=>x.Id);
          break;
        case "SortDate":
          data = data.OrderByDirection(tableState.SortDirection, x=>x.VoucherDate);
          break;
        case "SortAmount":
          data = data.OrderByDirection(tableState.SortDirection, x=>x.TotalAmount);
          break;
      }
      
      GlobalClassList.Vouchers = data.Where( v => v.StatusName != "V-Generated").ToList();
      //Multiselection table server side rendering
      //if(checkAll)
      //  GlobalClassList.Vouchers.ForEach( v => v.IsSelected = true);
      GlobalClassList.selectedVoucherToRoute.ForEach(vSelected => {
        GlobalClassList.Vouchers.ForEach( v =>
        {
          if(v.IsSelected && v.ControlNumber == vSelected.ControlNumber)
            v.IsSelected = true;
        });
      });
      StateHasChanged();
      pageData = GlobalClassList.Vouchers.Skip(tableState.Page * tableState.PageSize).Take(tableState.PageSize).ToArray();
      totalItems = GlobalClassList.Vouchers.Count();
      isLoading = !isLoading;
      return new TableData<VoucherModel>()
      {
        TotalItems = totalItems,
        Items = pageData
      };
    }
  private void NavigateToRoute(VoucherModel voucher)
  {
    GlobalClass.voucher = voucher;
    navigationManager.NavigateTo($"voucher/route");
  }
  private void FilterTable()
  {
    filterParameter = GlobalVariable.filterParameter;
    tableVariable.ReloadServerData();
  }
  private void OpenRouters()
  {
    if(GlobalClassList.selectedVoucherToRoute.Count != 0)
    {
    navigationManager.NavigateTo($"/test");
    GlobalClass.voucherRoute.VoucherList = GlobalClassList.selectedVoucherToRoute.ToList();//Add all selected Voucher in Route
    }
    else
      Extensions.ShowAlert("Please select a voucher/s to be routed",Variant.Filled,snackbarService,Severity.Error);
  }
  private async Task ReloadTable()
  {
      filterParameter = new();
      await tableVariable.ReloadServerData();
  }
  private bool EnableClearButton()
  {
    if(filterParameter.IsControlNumber) 
      return true;
    if(filterParameter.IsAccountingStatus)
      return true;
    if(filterParameter.IsDate)
      return true;
    if(filterParameter.IsPayee)
      return true;
    return false;
  }
  private async Task RouteVouchers()
  {
    if(GlobalClassList.selectedVoucherToRoute.Count != 0)
    {
      await RoutesDialog();
    }
    else
      Extensions.ShowAlert("Please select a voucher/s to be routed",Variant.Filled,snackbarService,Severity.Error);
  }
  private async Task RoutesDialog()
  {
    GlobalClass.voucherRoute.VoucherList = GlobalClassList.selectedVoucherToRoute.ToList();
    var options = new DialogOptions()
      {
          CloseButton = false,
          MaxWidth = MaxWidth.Medium,
          FullWidth = false,
          NoHeader = false,
          DisableBackdropClick = false
      };
      var resultDialog = await dialogService.Show<Shared.Dialogs.VouchersRouteDialogs.VouchersRouteDialog>("", options).Result;
      if (!resultDialog.Canceled)
      {
        //Extensions.ShowAlert("Voucher/s has been routed.",Variant.Filled,snackbarService,Severity.Info);
      }
  }
  private async Task CurrentUserTag()
  {
      userTags = await voucherRouteTagUserService.GetUserTags(GlobalClass.currentUserAccount.EmployeeId,GlobalClass.token);
  }
  private List<VoucherRouteTagModel> GetUserTagInVoucher(List<VoucherRouteTagModel> tags)
  {

    List<VoucherRouteTagModel> current = new List<VoucherRouteTagModel>();
    foreach(VoucherRouteTagUserModel usertag in userTags)
    {
      foreach(VoucherRouteTagModel tag in tags)
      {
        if(usertag.RouteTagId.Equals(tag.RouteTagId))
        {
          current.Add(tag); //add to current which tags are existed to use
        }
      }
    }
    return current;
  }
  private async Task ApproveRoute(List<VoucherRouteTagModel> tag, VoucherModel voucher)
  {
    //checkpoint validation
    if(getTagsNumbers(tag) == 0)
    {
      if(GetUserTagInVoucher(tag).Count > 0)
        await PromptConfirmation( tag , voucher);
      else
        Extensions.ShowAlert("You are not allowed to approve the tag of this voucher ("+voucher.ControlNumber+")", Variant.Filled, snackbarService, Severity.Error);
    } else 
    {
      Extensions.ShowAlert(String.Format("This Voucher({0}) has been approved for filing.",voucher.ControlNumber), Variant.Filled, snackbarService, Severity.Error);
    }
  }
  private async Task PromptConfirmation(List<VoucherRouteTagModel> tag, VoucherModel voucher)
  {
    if(!tag.All( x => x.IsRouted))
    {
      var parameters = new DialogParameters();
      string contentText = "Voucher for Filing";
      string dialogTitle = contentText;
      string tagsToApprove = String.Join(", ",userTags.Select( x => Extensions.GetEnumDescription(x.RouteTagId)));
      parameters.Add("dialogTitle", dialogTitle);
      parameters.Add("actionMode", Enums.ActionMode.Approve);
      parameters.Add("contentText", contentText);
      parameters.Add("controlNumber", voucher.ControlNumber);
      parameters.Add("note", "Tags to be approve ("+ tagsToApprove +")");
      var options = new DialogOptions() { CloseButton = false,  MaxWidth = MaxWidth.ExtraSmall, FullWidth = true, NoHeader = false, DisableBackdropClick = true };
      var resultDialog = await dialogService.Show<Shared.Dialogs.GenericPromptDialogs.GenericPrompt>(dialogTitle, parameters, options).Result;
      if (!resultDialog.Canceled)
      {
        string tagsList= "";
        //Set isRouted to true
          tag.ForEach( t => {
            (voucher.VoucherRouteTags.Where( tag => tag.RouteTagId == t.RouteTagId).FirstOrDefault()?? new()).IsRouted = true;
            tagsList += t == tag.First()? Extensions.GetEnumDescription(t.RouteTagId) : ", "+ Extensions.GetEnumDescription(t.RouteTagId);
          });

        //Audit TRAIL
        voucher.UserId = GlobalClass.currentUserAccount.EmployeeId;
        voucher.Activity = "Approved Route ("+tagsList+")";
        voucher.IsActive = true;
        voucher = await voucherService.UpdateVoucher(voucher, GlobalClass.token);
        Extensions.ShowAlert("Voucher successfully filed", Variant.Filled, snackbarService, Severity.Success);
      }
    }
    else
    {
      Extensions.ShowAlert(String.Format("This Voucher({0}) has been approved for filing.",voucher.ControlNumber), Variant.Filled, snackbarService, Severity.Error);
    }
    StateHasChanged();
  }
  private string FindReference(VoucherModel voucher)
  {
    return  String.Format("{0}voucher/list/{1}", navigationManager.BaseUri, voucher.ControlNumber);
  }
  private int getTagsNumbers(List<VoucherRouteTagModel> tag)
  {
    int num = 0;
    tag.ForEach( t => 
    {
        if(!t.IsRouted && t.RouteTagId != Enums.RouteTag.None)
          num++;
    });
    return num == 0 ? 0 : num;
  }
  private string getTagsName(List<VoucherRouteTagModel> tag)
  {
    string name = "";
    tag.ForEach( t => 
    {
      if(!t.IsRouted && t.RouteTagId != Enums.RouteTag.None)
        name += Extensions.GetEnumDescription(t.RouteTagId).ToString() +", ";
    });
    return name == "" ? "No pending tags" : name.Substring(0,name.Length - 2);//remove `, ` in the end
  }
  private void SelectAll(bool select)
  {

    if(select)
    {
      GlobalClassList.Vouchers.ForEach( v => v.IsSelected = true);
      GlobalClassList.selectedVoucherToRoute.AddRange(GlobalClassList.Vouchers);
    }
    else 
    {
      GlobalClassList.Vouchers.ForEach( v => v.IsSelected = false);
      GlobalClassList.selectedVoucherToRoute.Clear();
    }
    checkAll = select;
  }
  private void RowSelected(bool select, VoucherModel voucher)
  {
    voucher.IsSelected = select;
    if(select)
      GlobalClassList.selectedVoucherToRoute.Add(voucher);
    else
    {
      GlobalClassList.selectedVoucherToRoute.RemoveAll( v => v.ControlNumber == voucher.ControlNumber);
      if(checkAll)
        checkAll = !checkAll;
    }
  }
}