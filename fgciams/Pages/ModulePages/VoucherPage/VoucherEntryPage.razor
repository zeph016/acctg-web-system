@page "/voucher/create"

@inject IDialogService dialogService
@inject IVoucherService voucherService
@inject IExpenseLineService expenseLineService
@inject IGlobalService globalService
@inject ISnackbar snackbarService
@inject NavigationManager navigationManager
@inject IVoucherService voucherService
@inject IRequestForPaymentService requrestForPaymentService

<div class='page-cont d-flex overflow-auto'>
    @if (!dataFetched)
    {
        <MudPaper Class='d-flex flex-1 ma-2 pa-2'>
          <MudSkeleton SkeletonType='SkeletonType.Rectangle' Height='100%' Width='100%' Animation='Animation.Wave' />
        </MudPaper>
    }
    else
    {
        <MudContainer Class='voucherpage d-flex pt-2 pr-2 pb-2 pl-2 gap-2' Fixed='false' MaxWidth='MaxWidth.ExtraLarge'>
            <MudPaper Class='flex-1' Elevation='1'>
                <MudCardContent Class='pa-2'>
                    <div class='voucherpage__grid'>
                        <div class="voucher-header d-flex align-center pa-2 gap-2 bgc-F4F5FB rounded-tr rounded-tl">
                            <MudGrid Spacing='1'>
                                <MudItem Class='d-flex align-center justify-start gap-1' xs=4>
                                    <MudImage Class='fgcilogocont__imglogo' Src='images/fglogo/fgci1.png' Alt='fgci logo' Height='30' Width='30'/>
                                    <MudText Class='fgcilogocont__lblfirst'>F. GURREA</MudText>
                                    <MudText Class='fgcilogocont__lblsecond'>Construction, Inc.</MudText>
                                </MudItem>
                                <MudItem Class='d-flex align-center justify-center' xs=4>
                                    <MudText Class='txt-uppercase font-1-1rem ff-theramin'>@GlobalClass.pageTitle</MudText>
                                </MudItem>
                                <MudItem Class='d-flex align-center justify-end' xs=4>
                                    <MudTooltip Text='New Voucher'>
                                        <MudButton Class='btn-ios-d pa-1 font12' OnClick='New' StartIcon="@Icons.Filled.Add" Variant='Variant.Filled'
                                        Color='Color.Info' Size='Size.Small' DisableElevation>new</MudButton>
                                    </MudTooltip>
                                </MudItem>
                            </MudGrid>
                        </div>
                        <div class="voucher-payee d-flex align-center pa-2 gap-2">
                            <MudText Class='d-flex wspace-nowrap txt-uppercase font-bold font10'>
                                Payee
                                <MudText Class='font10 font-bold' Color='Color.Error'>*</MudText>
                            </MudText>
                            <BlazoredTypeahead SearchMethod='LoadPayee' @ref='projectTypeahead' DisableClear placeholder='Search'
                            ValueExpression="@(()=>payee)" Value="payee" ValueChanged="@((Project p) => SelectedPayee(p) )" Debounce='500' MaximumSuggestions='10' class="cursor-progress">
                                <SelectedTemplate>
                                    <div class='overflow-hidden wspace-nowrap'>
                                        @if (context.ProjectId != 0) {
                                            <MudText Class='font12'>@context.ProjectName</MudText>
                                        }
                                        else if (reqPayee)
                                        {
                                            <MudText Class='font12 font-bold txt-uppercase' Color='Color.Error'>
                                                Required
                                            </MudText>
                                        }
                                        else
                                        {
                                            <MudText Class='font12'> - </MudText>
                                        }
                                    </div>
                                </SelectedTemplate>
                                <ResultTemplate>
                                    @context.ProjectName | @context.Location
                                </ResultTemplate>
                            </BlazoredTypeahead> 
                            <MudText Class='wspace-nowrap font10 font-bold txt-uppercase'>Period: </MudText>
                            <MudDateRangePicker Class='txt-top-0 font14-txtfield txtfield-right' @bind-DateRange=@voucherPeriod IconSize='Size.Small'></MudDateRangePicker>
                        </div>
                        <div class="voucher-status d-flex align-center justify-space-around gap-2 pa-2 overflow-hidden">
                            <div class='d-flex align-center gap-2 width40'>
                                <MudText Class='txt-uppercase font-bold font10'>Date</MudText>
                                <MudDatePicker Class='txt-top-0 font14-txtfield txtfield-right' @bind-Date='voucherDate' IconSize='Size.Small' ReadOnly />
                            </div>
                            <MudText Class='wspace-nowrap txt-uppercase font-bold font10'>Voucher No:</MudText>
                            @if (GlobalClass.voucher.Id == 0)
                            {
                                <MudChip Class='chip-radius-5 txt-uppercase font-bold font12' Color='Color.Error' Size='Size.Medium' Variant='Variant.Outlined'>Auto Generated</MudChip>
                            }
                            else
                            {
                                <MudChip Class='chip-radius-5 txt-uppercase font-bold font12' Color='Color.Error' Size='Size.Medium' Variant='Variant.Outlined'>@GlobalClass.voucher.ControlNumber</MudChip>
                            }
                        </div>
                        <div class="voucher-rfp d-flex align-center gap-2 overflowx-auto overflowy-hidden">
                            <div class='d-flex flex-1 overflow-hidden align-center pa-2 gap-2'>
                                <MudText Class='d-flex wspace-nowrap font10 font-bold txt-uppercase'>
                                    RFP
                                    <MudText Class='font10 font-bold' Color='Color.Error'>*</MudText>
                                </MudText>
                                <MudTooltip Text='Add RFP'>
                                    <MudIconButton OnClick='(()=> AddRFP())' Icon="@Icons.Material.Filled.Add" aria-label="Add RFP" Color='Color.Info' Size='Size.Small' />
                                </MudTooltip>
                                @if (reqRFP)
                                {
                                    <MudText Class='font12 font-bold txt-uppercase' Color='Color.Error'>
                                        Required
                                    </MudText>
                                }
                                <div class='wspace-nowrap overflow-auto max-width90 oflow-el' style='@(GlobalClass.voucher.VoucherRFP.Count() == 0 ? "display:none" : "")'>
                                    @foreach (var item in GlobalClass.voucher.VoucherRFP)
                                    {
                                        <MudChip OnClose='(()=> RemoveVoucherRFP(item))' Size='Size.Small'>@item.RFPControlNumber</MudChip>
                                    }
                                </div>
                                <MudSpacer />
                                <MudTooltip Text='Total amount RFP'>
                                    <MudButton Class='btn-ios-d font12' Color="Color.Tertiary" Variant="Variant.Filled" Size="Size.Small" DisableElevation>@GlobalClass.voucher.RFPTotalAmountString</MudButton>
                                </MudTooltip>
                                <MudTooltip Text='Previous Vouchers'>
                                    <MudIconButton Class='btn-ios-d font12' OnClick="(()=>ShowPreviousDialog())" Icon='@Icons.Filled.History' Color="Color.Tertiary" Variant="Variant.Filled" Size="Size.Small" DisableElevation />
                                </MudTooltip>
                            </div>
                        </div>
                        <div class="voucher-desc d-flex align-center pa-2 gap-2">
                            <MudText Class='txt-uppercase font-bold font10'>Description:</MudText>
                            <MudTextField Class='txtfield-overflow-ellipsis font14-txtfield txt-top-0' @bind-Value=GlobalClass.voucher.Description />
                        </div>
                        <div class="voucher-remarks d-flex align-center pa-2 gap-2">
                            <MudText Class='txt-uppercase font-bold font10'>Remarks:</MudText>
                            <MudTextField Class='txtfield-overflow-ellipsis font14-txtfield txt-top-0' @bind-Value=GlobalClass.voucher.Remarks />
                        </div>
                        <div class="voucher-details d-flex rounded-br rounded-bl overflow-hidden">
                            <div class='d-flex flex-1 flex-column transition-05s-ease'>
                                <MudTable Class='small-toolbar-gutter4 toolbar-pad-0 flex-1 mudtoolbar-bg-F4F5FB table-bottom-border' Items='GlobalClass.voucher.VoucherDetails' Bordered
                                    Dense='true' Elevation='0' FixedHeader FixedFooter CustomFooter Hover Square Height='calc(100vh - 450px)'>
                                    <ToolBarContent>
                                        <div class='d-flex flex-1 align-center px-4 gap-2 border-thin-bottom'>
                                            <MudText Class='txt-uppercase font-bold font12'>Voucher Detail :</MudText>
                                            <MudText Class='txt-uppercase font-bold font10'>
                                                @GlobalClass.voucher.VoucherDetails.Count()
                                                @(GlobalClass.voucher.VoucherDetails.Count() == 1 ? "item" : "items")
                                            </MudText>
                                            <MudSpacer />
                                            @foreach (var item in GlobalClass.voucher.VoucherDetails)
                                            {
                                                if (item.ExpenseId == 0 || item.DivisionId == 0 || item.ProjectId == 0)
                                                {
                                                    <MudText Class='font12 font-bold txt-uppercase' Color='Color.Error'>
                                                    Fill in details
                                                    </MudText>
                                                    break;
                                                }
                                            }
                                            <MudSpacer />
                                            <MudTooltip Text='Add Detail'>
                                                <MudButton OnClick='(()=>AddNew(false))' StartIcon="@Icons.Filled.Add" aria-label="add" 
                                                Size='Size.Small' Variant='Variant.Text' DisableElevation Color='Color.Info'>Detail</MudButton>
                                            </MudTooltip>
                                            <MudTooltip Text='Reset Detail'>
                                                <MudButton OnClick='(()=>ResetVoucherTable())' StartIcon="@Icons.Filled.Refresh" aria-label="reset" 
                                                Size='Size.Small' Variant='Variant.Text' DisableElevation Color='Color.Warning'>Reset</MudButton>
                                            </MudTooltip>
                                            <MudToggleIconButton @bind-Toggled="isDetailViewExpanded" Size='Size.Small' ToggledSize='Size.Small'
                                                Icon="@Icons.Filled.KeyboardDoubleArrowLeft" Color="@Color.Tertiary" Title="Expand Sub Details"
                                                ToggledIcon="@Icons.Filled.KeyboardDoubleArrowRight" ToggledColor="@Color.Info" ToggledTitle="Collapse Sub Details"/>
                                        </div>
                                    </ToolBarContent>
                                    <ColGroup>
                                        <col style='width:20px' />
                                        <col />
                                        <col />
                                        <col />
                                        <col />
                                        <col />
                                        <col />
                                        <col style='width:1%'/>
                                        <col style='width:1%'/>
                                        <col style='width:150px'/>
                                    </ColGroup>
                                    <HeaderContent>
                                        <MudTh Class='wspace-nowrap customheader-1 px-2 pb-0 font10'></MudTh>
                                        <MudTh Class='wspace-nowrap customheader-1 px-2 pb-0 font10'>Expense</MudTh>
                                        <MudTh Class='wspace-nowrap customheader-1 px-2 pb-0 font10'>Charge</MudTh>
                                        <MudTh Class='wspace-nowrap customheader-1 px-2 pb-0 font10'>Division</MudTh>
                                        <MudTh Class='wspace-nowrap customheader-1 px-2 pb-0 font10'>Sub Ledger</MudTh>
                                        <MudTh Class='wspace-nowrap customheader-1 px-2 pb-0 font10'>SOW</MudTh>
                                        <MudTh Class='wspace-nowrap customheader-1 px-2 pb-0 font10'>Description</MudTh>
                                        <MudTh Class='wspace-nowrap customheader-1 px-2 pb-0 font10'>Exclude</MudTh>
                                        <MudTh Class='wspace-nowrap customheader-1 px-2 pb-0 font10'>OR</MudTh>
                                        <MudTh Class='wspace-nowrap customheader-1 px-2 pb-0 font10 text-right'>Amount</MudTh>
                                    </HeaderContent>
                                    <RowTemplate>
                                        <MudTd Class='pa-2 text-center' DataLabel='Action'>
                                            <MudTooltip Text='Remove Detail'>
                                                <MudIconButton OnClick='(() => RemoveRFP(context))' Icon='@Icons.Filled.RemoveCircle' Color='Color.Error' Size='Size.Small' />
                                            </MudTooltip>
                                        </MudTd>
                                        <MudTd Class='pa-2' DataLabel='Expense'>
                                            <BlazoredTypeahead SearchMethod='LoadExpense' Context='selexp' DisableClear
                                            @bind-Value='context.selExp' Debounce='500' MaximumSuggestions='5' aria-placeholder="Expense" @ref="@ExpenseLineRef">
                                                <SelectedTemplate>
                                                        @if (selexp.Id != 0) {
                                                            <MudTooltip Text="@selexp.ExpenseName">
                                                                <MudText Class='font12'>@selexp.ExpenseNameFormat</MudText>
                                                            </MudTooltip>
                                                            context.ExpenseName = selexp.ExpenseName;
                                                            context.ExpenseId = selexp.Id;
                                                        } else if(context.Id != 0) {
                                                            <MudText Class='font12'>@selexp.ExpenseName</MudText>
                                                            selexp.ExpenseName = context.ExpenseName;
                                                            selexp.Id = context.ExpenseId;   
                                                        } else {
                                                            <MudText Class='font12'> - </MudText>
                                                        }
                                                </SelectedTemplate>
                                                <ResultTemplate>
                                                    @selexp.ExpenseName
                                                </ResultTemplate>
                                            </BlazoredTypeahead>
                                        </MudTd>
                                        <MudTd Class='pa-2' DataLabel='Charge'>
                                            <BlazoredTypeahead SearchMethod='LoadCharging' Context='selproj' 
                                            ValueChanged="(async(Project p)=>{ await DetailSelectedProject(p,context); context.selProj = p;})" Value="context.selProj" ValueExpression="(()=>context.selProj)"
                                            Debounce='500' MaximumSuggestions='5' aria-placeholder="Charge to" @ref="@PayeeRef" DisableClear>
                                                <SelectedTemplate>
                                                    @if (selproj.ProjectId != 0) {
                                                            <MudTooltip Text="@selproj.ProjectName">
                                                                <MudText Class='font12'>@selproj.ProjectNameFormat</MudText>
                                                            </MudTooltip>
                                                            context.ProjectName = selproj.ProjectName;
                                                            context.ProjectId = selproj.ProjectId;
                                                            context.ProjectCategoryId = selproj.ProjectCategoryId;
                                                    } else if(context.Id != 0) {
                                                        <MudText Class='font12'>
                                                            @selproj.ProjectName
                                                        </MudText>
                                                            selproj.ProjectName = context.ProjectName;
                                                            selproj.ProjectId = context.ProjectId;
                                                            selproj.ProjectCategoryId = context.ProjectCategoryId;
                                                    } else {
                                                        <MudText Class='font12'> - </MudText>
                                                    }
                                                </SelectedTemplate>
                                                <ResultTemplate>
                                                    @selproj.ProjectName | @selproj.Location
                                                </ResultTemplate>
                                            </BlazoredTypeahead>
                                        </MudTd>
                                        <MudTd Class='pa-2' DataLabel='Division'>
                                            <BlazoredTypeahead SearchMethod='LoadDivision' Context='seldiv' DisableClear
                                            @bind-Value='context.selDiv' Debounce='500' MaximumSuggestions='5' aria-placeholder="Division" @ref="@DivisionRef">
                                                <SelectedTemplate>
                                                    @if (seldiv.Id != 0) {
                                                        <MudText Class='font12'>@seldiv.divisionName</MudText>
                                                        context.DivisionName = seldiv.divisionName;
                                                        context.DivisionId = seldiv.Id;
                                                    } else if(context.Id != 0) {
                                                        <MudText Class='font12'> @context.DivisionName</MudText>
                                                        seldiv.Id = context.DivisionId;
                                                        seldiv.divisionName = context.DivisionName;
                                                    } else {
                                                        <MudText Class='font12'> - </MudText>
                                                    }
                                                </SelectedTemplate>
                                                <ResultTemplate>
                                                    @seldiv.divisionName
                                                </ResultTemplate>
                                            </BlazoredTypeahead>
                                        </MudTd>
                                        @if(GlobalClass.voucher.WithSubLedger && GlobalClass.voucher.VoucherDetails.Any(x=>x.isLabor))
                                        {
                                        <MudTd Class='pa-2' DataLabel='Charge'>
                                            <BlazoredTypeahead SearchMethod='((String search)=>LoadSubConProjects(search,context.selSubConProjectSOWList))' Context='selSubCon'
                                                ValueChanged="((SubContractorProjectModel p)=>{ SelectedSubLedger(p,context); context.selSubConProject = p;})" Value="context.selSubConProject" ValueExpression="(()=>context.selSubConProject)"
                                                Debounce='500' MaximumSuggestions='5' aria-placeholder="Charge to" DisableClear>
                                                <SelectedTemplate>
                                                    @if (selSubCon.ProjectId != 0) {
                                                            <MudTooltip Text="@selSubCon.ProjectName">
                                                                <MudText Class='font12'>@selSubCon.SubContractorName</MudText>
                                                            </MudTooltip>
                                                    } else {
                                                        <MudText Class='font12'> - </MudText>
                                                    }
                                                </SelectedTemplate>
                                                <ResultTemplate>
                                                    @selSubCon.SubContractorName | @selSubCon.ScopeOfWork
                                                </ResultTemplate>
                                            </BlazoredTypeahead>
                                        </MudTd>
                                        <!---SCOPE OF WORK-->
                                         <MudTd Class='pa-2' DataLabel='Charge'>
                                            <BlazoredTypeahead SearchMethod='((String search)=>LoadSubConProjectsSOW(search,context.selSubConProjectSOWList))' Context='selSOW' 
                                                ValueChanged="((SubContractorProjectModel sow)=>{ SelectedSOW(sow,context); context.selSOW = sow;})" Value="context.selSOW" ValueExpression="(()=>context.selSOW)"
                                                Debounce='500' MaximumSuggestions='5' aria-placeholder="Scope of Work" DisableClear Disabled=true>
                                                <SelectedTemplate>
                                                    @if (selSOW.ProjectId != 0) {
                                                            <MudTooltip Text="@selSOW.ScopeOfWork">
                                                                <MudText Class='font12'>@selSOW.ScopeOfWork</MudText>
                                                            </MudTooltip>
                                                    } else {
                                                        <MudText Class='font12'> - </MudText>
                                                    }
                                                </SelectedTemplate>
                                                <ResultTemplate>
                                                    @selSOW.ScopeOfWork
                                                </ResultTemplate>
                                            </BlazoredTypeahead>
                                        </MudTd>
                                        } else 
                                        {
                                        <MudTd Class='pa-2' DataLabel='Charge'>
                                            <BlazoredTypeahead SearchMethod='LoadCharging' Context='selSubCon'
                                                ValueChanged="(async(Project p)=>{ await DetailSelectedProject(p,context); context.selProj = p;})" Value="context.selProj" ValueExpression="(()=>context.selProj)"
                                                Debounce='500' MaximumSuggestions='5' aria-placeholder="Charge to" DisableClear>
                                                <SelectedTemplate>
                                                    @if (selSubCon.ProjectId != 0) {
                                                            <MudTooltip Text="@selSubCon.ProjectName">
                                                                <MudText Class='font12'>@selSubCon.ProjectName</MudText>
                                                            </MudTooltip>
                                                    } else {
                                                        <MudText Class='font12'> - </MudText>
                                                    }
                                                </SelectedTemplate>
                                                <ResultTemplate>
                                                    @selSubCon.ProjectName
                                                </ResultTemplate>
                                            </BlazoredTypeahead>
                                        </MudTd>
                                        <!---SCOPE OF WORK-->
                                        <MudTd Class='pa-2' DataLabel='Charge'>
                                            <BlazoredTypeahead SearchMethod='((String search)=>LoadSubConProjectsSOW(search,context.selSubConProjectSOWList))' Context='selSOW' 
                                                ValueChanged="((SubContractorProjectModel sow)=>{ SelectedSOW(sow,context); context.selSOW = sow;})" Value="context.selSOW" ValueExpression="(()=>context.selSOW)"
                                                Debounce='500' MaximumSuggestions='5' aria-placeholder="Scope of Work" DisableClear Disabled=true>
                                                <SelectedTemplate>
                                                    @if (selSOW.ScopeOfWorkId != 0) {
                                                            <MudTooltip Text="@selSOW.ScopeOfWork">
                                                                <MudText Class='font12'>@selSOW.ScopeOfWork</MudText>
                                                            </MudTooltip>
                                                    } else {
                                                        <MudText Class='font12'> - </MudText>
                                                    }
                                                </SelectedTemplate>
                                                <ResultTemplate>
                                                    @selSOW.ScopeOfWork
                                                </ResultTemplate>
                                            </BlazoredTypeahead>
                                        </MudTd>
                                        }
                                        <MudTd Class='pa-2' DataLabel='Description'>
                                            <MudTextField Class='txtfield-overflow-ellipsis font12-txtfield' @bind-Value='context.Description'
                                            Margin='Margin.Dense' Variant='Variant.Outlined' />
                                        </MudTd>
                                        <MudTd Class='pa-2 text-center' DataLabel='Action'>
                                            <MudCheckBox T="bool" Checked="@context.IsExcluded" CheckedChanged="@((bool b)=>{ExcludeCheckState(context,context.IsExcluded);context.IsExcluded = !context.IsExcluded;})" Size='Size.Small'></MudCheckBox>
                                        </MudTd>
                                        <MudTd Class='pa-2 text-center' DataLabel='Action'>
                                            <MudCheckBox @bind-Checked="@context.HasOR" Size='Size.Small'></MudCheckBox>
                                        </MudTd>
                                        <MudTd Class='pa-2' DataLabel='Amount'>
                                            <div class='d-flex align-center pt-2 pr-2 gap-2'>
                                                @if(context.IsEWT)
                                                {
                                                    <MudText Class='font-bold font12' Color='Color.Error'>
                                                            @Extensions.GetEnumDescription(Enums.BankCurrency.PhilippinePeso)
                                                        </MudText>
                                                        <MudSpacer/>
                                                        @* <MudNumericField OnBlur='(()=>ComputeGrossIncome())' Class='txtfield-overflow-ellipsis txt-top-0 tfield-color-green txtfield-right font12-txtfield'
                                                        @bind-Value='GlobalClass.voucher.WithholdingTax' Margin='Margin.None' Format='N2' HideSpinButtons Variant='Variant.Text' ReadOnly=true/> *@
                                                        <MudText class="font12 font-bold" Color="Color.Error">@(-Math.Abs(GlobalClass.voucher.WithholdingTax))</MudText>
                                                } else {
                                                    if (context.Amount <= 0)
                                                    {
                                                        <MudText Class='font-bold font12' Color='Color.Error' >
                                                            @Extensions.GetEnumDescription(Enums.BankCurrency.PhilippinePeso)
                                                        </MudText>
                                                        <MudNumericField OnBlur='(()=>ComputeGrossIncome())' Class='txtfield-overflow-ellipsis txt-top-0 tfield-color-red txtfield-right font12-txtfield'
                                                        @bind-Value='context.Amount' Margin='Margin.None' Format='N2' HideSpinButtons Variant='Variant.Text' />
                                                    } else {
                                                        <MudText Class='font-bold font12 color-green'>
                                                            @Extensions.GetEnumDescription(Enums.BankCurrency.PhilippinePeso)
                                                        </MudText>
                                                        <MudNumericField OnBlur='(()=>ComputeGrossIncome())' Class='txtfield-overflow-ellipsis txt-top-0 tfield-color-green txtfield-right font12-txtfield'
                                                        @bind-Value='context.Amount' Margin='Margin.None' Format='N2' HideSpinButtons Variant='Variant.Text' />
                                                    }
                                                }
                                            </div>
                                        </MudTd>
                                    </RowTemplate>
                                    <NoRecordsContent>
                                        <MudText Class='txt-uppercase font-bold font12' Color='Color.Error'>No details added</MudText>
                                    </NoRecordsContent>
                                </MudTable>
                                <MudGrid Class='border-thin-top' Spacing='0'>
                                    <MudItem Class='d-flex align-center gap-2 bgc-F4F5FB' xs=12 sm=2>
                                        <MudTooltip Text='With Sub Ledger'>
                                            <MudCheckBox Class='chkbxfont10 chkbxbold' @bind-Checked='@GlobalClass.voucher.WithSubLedger' ReadOnly Label='W/ SUB LEDGER' Size='Size.Small' Dense Color='Color.Dark' />
                                        </MudTooltip>
                                    </MudItem>
                                    <MudItem Class='d-flex align-center gap-2 bgc-F4F5FB border-thin-right' xs=12 sm=8>
                                        <MudSpacer />
                                        <MudText Class='txt-uppercase font12 font-bold px-1'>Net Total Amount:</MudText>
                                    </MudItem>
                                    <MudItem Class='d-flex align-center gap-2 wspace-nowrap overflow-auto' xs=12 sm=2>
                                        @if (GlobalClass.voucher.TotalAmount > 0) {
                                            <MudIcon Class='color-green' Icon='@Icons.Outlined.LabelImportant' Size='Size.Small'/>
                                            <MudSpacer />
                                            <MudText Class='font-bold font10 color-green px-1' >
                                            @Extensions.GetEnumDescription(Enums.BankCurrency.PhilippinePeso) @GlobalClass.voucher.TotalAmount.ToString("N2")
                                            </MudText>
                                        } else {
                                            <MudIcon Icon='@Icons.Outlined.LabelImportant' Size='Size.Small' Color='Color.Error' />
                                            <MudSpacer />
                                            <MudText Class='font-bold font10 px-1' Color='Color.Error' >
                                                @Extensions.GetEnumDescription(Enums.BankCurrency.PhilippinePeso) @GlobalClass.voucher.TotalAmount.ToString("N2")
                                            </MudText>
                                        }
                                    </MudItem>

                                    
                                    <MudItem Class='d-flex align-center justify-end bgc-F4F5FB border-thin-right' xs=12 sm=10>
                                        <MudText Class='txt-uppercase font10 font-bold px-1'>
                                                Total Gross Amount:
                                        </MudText>
                                    </MudItem>
                                    <MudItem Class='font-bold font10 color-green px-1 justify-end text-right' xs=12 sm=2>
                                        @Extensions.GetEnumDescription(Enums.BankCurrency.PhilippinePeso) @GlobalClass.voucher.GrossIncome.ToString("N2")
                                    </MudItem>

                                    <MudItem Class='d-flex align-center justify-end bgc-F4F5FB px-1 border-thin-right' xs=12 sm=10>
                                        <MudText Class='txt-uppercase font10 font-bold' >
                                            VAT Amount:
                                        </MudText>
                                    </MudItem>
                                    <MudItem Class='font-bold font10 color-green px-1 text-right' xs=12 sm=2>
                                        @Extensions.GetEnumDescription(Enums.BankCurrency.PhilippinePeso) @GlobalClass.voucher.VatInput.ToString("N2")
                                    </MudItem>

                                    <MudItem Class='d-flex align-center justify-end bgc-F4F5FB' xs=12 sm=8>
                                        <MudText Class='txt-uppercase font10 font-bold px-1'>VAT: </MudText>
                                        <MudTooltip Text='@(GlobalClass.voucher.VATValue.ToString("N2"))'>
                                            <MudText Class='font12 font-bold px-1' Color='Color.Error'>@GlobalClass.voucher.VATValue.ToString("N2") %</MudText>
                                        </MudTooltip>
                                    </MudItem>
                                    <MudItem Class='d-flex align-center justify-end bgc-F4F5FB px-1 border-thin-right' xs=12 sm=2>
                                        <MudText Class='txt-uppercase font10 font-bold'>
                                             Tax base:
                                        </MudText>
                                    </MudItem>
                                     <MudItem Class='font-bold font10 color-green px-1 text-right' xs=12 sm=2>
                                        @Extensions.GetEnumDescription(Enums.BankCurrency.PhilippinePeso) @GlobalClass.voucher.VatNet.ToString("N2")
                                    </MudItem>

                                    <MudItem Class='d-flex align-center justify-end bgc-F4F5FB' xs=12 sm=8>
                                        <MudText Class='txt-uppercase font10 font-bold px-1'>EWT: </MudText>
                                        <MudTooltip Text='@(GlobalClass.voucher.EWTValue.ToString("N2"))'>
                                            <MudText Class='font12 font-bold px-1' Color='Color.Error'>@GlobalClass.voucher.EWTValue.ToString("N2") %</MudText>
                                        </MudTooltip>
                                    </MudItem>
                                    <MudItem Class='d-flex align-center justify-end bgc-F4F5FB px-1 border-thin-right' xs=12 sm=2>
                                        <MudText Class='txt-uppercase font10 font-bold'>
                                            WHT Tax %:
                                        </MudText>
                                    </MudItem>
                                    <MudItem Class='font-bold font10 color-green px-1 text-right' xs=12 sm=2>
                                        @GlobalClass.voucher.EWTValue <span>%</span>
                                    </MudItem>


                                     <MudItem Class='d-flex align-center justify-end bgc-F4F5FB' xs=12 sm=8>
                                        <MudText Class='txt-uppercase font10 font-bold px-1'>Total Excluded: </MudText>
                                        <MudTooltip Text='@(GlobalClass.voucher.EWTValue.ToString("N2"))'>
                                            <MudText Class='font12 font-bold px-1' Color='Color.Error'>@GlobalClass.voucher.TotalExcluded.ToString("N2") %</MudText>
                                        </MudTooltip>
                                    </MudItem>
                                    <MudItem Class='d-flex align-center justify-end bgc-F4F5FB px-1 border-thin-right' xs=12 sm=2>
                                        <MudText Class='txt-uppercase font10 font-bold'>
                                            Witholding Tax Amount:
                                        </MudText>
                                    </MudItem>
                                    <MudItem Class='font-bold font10 color-green px-1 text-right' xs=12 sm=2>
                                        @Extensions.GetEnumDescription(Enums.BankCurrency.PhilippinePeso) @GlobalClass.voucher.WithholdingTax.ToString("N2")
                                    </MudItem>
                                </MudGrid>
                            </div>
                            <div class="d-flex flex-column border-thin-left transition-05s-ease" style='@(isDetailViewExpanded ? "max-width:500px" : "max-width:57px")'>
                                <MudCardHeader class='d-flex align-center justify-center pa-2 border-thin-bottom bgc-F4F5FB height2-05rem'>
                                    <div class='d-flex align-center transition-05s-ease overflow-hidden @(isDetailViewExpanded ? "fade-in flex-1" : "fade-out")' style='@(isDetailViewExpanded ? "max-width:500px" : "max-width:0px")'>
                                        <MudText Class='txt-uppercase font12 font-bold'>Signatories</MudText>
                                    </div>
                                    <MudIcon Icon='@Icons.Filled.PersonPin' Size='Size.Small' />
                                </MudCardHeader>
                                <MudCardContent Class='d-flex flex-column pa-2 gap-2'>
                                    <div class='d-flex align-center gap-2 min-width25'>
                                        @if(preparedBy.Picture.Count() == 0) {
                                            <MudAvatar Class='mb-1' Image='images/fglogo/fgci1-gs.png' Size='Size.Medium' />
                                        } else {
                                            <MudAvatar Class='mb-1' Image='@($"data:image/png;base64, {Convert.ToBase64String(preparedBy.Picture)}")' Size='Size.Medium' />
                                        }
                                        <div class='d-flex flex-grow-1 flex-column'>
                                            <BlazoredTypeahead SearchMethod='LoadEmployee' DisableClear placeholder='Prepared By'
                                            @bind-Value='preparedBy' Debounce='500' MaximumSuggestions='5'>
                                                <SelectedTemplate>
                                                    <div class='overflow-hidden wspace-nowrap'>
                                                        @if (context.EmployeeId != 0) {
                                                            <MudText Class='font12'>@context.EmployeeName</MudText>
                                                        } else if (reqPrep) {
                                                            <MudText Class='font12 font-bold txt-uppercase' Color='Color.Error'>Required</MudText>
                                                        } else {
                                                            <MudText Class='font12'> - </MudText>
                                                        }
                                                    </div>
                                                </SelectedTemplate>
                                                <ResultTemplate>
                                                    <div class='ddavatar'>
                                                        <MudAvatar Image='@($"data:image/png;base64, {Convert.ToBase64String(@context.Picture)}")' Size='Size.Small'/>
                                                        @context.EmployeeName | @context.Designation
                                                    </div>
                                                </ResultTemplate>
                                            </BlazoredTypeahead>
                                            <MudText Class='d-flex wspace-nowrap txt-uppercase font-bold font10 pl-1'>
                                                Prepared By
                                                <MudText Class='font10 font-bold' Color='Color.Error'>*</MudText>
                                            </MudText>
                                        </div>
                                    </div>
                                    <div class='d-flex align-center gap-2 min-width25'>
                                        @if(verifiedBy.Picture.Count() == 0){
                                            <MudAvatar Class='mb-1' Image='images/fglogo/fgci1-gs.png' Size='Size.Medium' />
                                        } else {
                                            <MudAvatar Image='@($"data:image/png;base64, {Convert.ToBase64String(verifiedBy.Picture)}")' Size='Size.Medium' />
                                        }
                                        <div class='d-flex flex-grow-1 flex-column'>
                                            <BlazoredTypeahead SearchMethod='LoadEmployee' DisableClear
                                            @bind-Value='verifiedBy' Debounce='500' MaximumSuggestions='5' placeholder="Verified By">
                                                <SelectedTemplate>
                                                    <div class='overflow-hidden wspace-nowrap'>
                                                        @if (context.EmployeeId != 0) {
                                                            <MudText Class='font12'>@context.EmployeeName</MudText>
                                                        } else if (reqVer) {
                                                            <MudText Class='font12 font-bold txt-uppercase' Color='Color.Error'>
                                                                Required
                                                            </MudText>
                                                        } else {
                                                            <MudText Class='font12'> - </MudText>
                                                        }
                                                    </div>
                                                </SelectedTemplate>
                                                <ResultTemplate>
                                                    <div class='ddavatar'>
                                                        <MudAvatar Image='@($"data:image/png;base64, {Convert.ToBase64String(@context.Picture)}")' Size='Size.Small'/>
                                                        @context.EmployeeName | @context.Designation
                                                    </div>
                                                </ResultTemplate>
                                            </BlazoredTypeahead>
                                            <MudText Class='d-flex wspace-nowrap txt-uppercase font-bold font10 pl-1'>
                                                Verified By
                                                <MudText Class='font10 font-bold' Color='Color.Error'>*</MudText>
                                            </MudText>
                                        </div>
                                    </div>
                                    <div class='d-flex align-center gap-2 min-width25'>
                                        @if(approvedBy.Picture.Count() == 0) {
                                            <MudAvatar Class='mb-1' Image='images/fglogo/fgci1-gs.png' Size='Size.Medium' />
                                        } else {
                                            <MudAvatar Image='@($"data:image/png;base64, {Convert.ToBase64String(approvedBy.Picture)}")' Size='Size.Medium' />
                                        }
                                        <div class='d-flex flex-grow-1 flex-column'>
                                            <BlazoredTypeahead SearchMethod='LoadEmployee' DisableClear placeholder='Approved By'
                                            @bind-Value='approvedBy' Debounce='500' MaximumSuggestions='5'>
                                                <SelectedTemplate>
                                                    <div class='overflow-hidden wspace-nowrap'>
                                                        @if (context.EmployeeId != 0) {
                                                            <MudText Class='font12'>@context.EmployeeName</MudText>
                                                        } else if(reqApp) {
                                                            <MudText Class='font12 font-bold txt-uppercase' Color='Color.Error'>Required</MudText>
                                                        } else {
                                                            <MudText Class='font12'> - </MudText>
                                                        }
                                                    </div>
                                                </SelectedTemplate>
                                                <ResultTemplate>
                                                    <div class='ddavatar'>
                                                        <MudAvatar Image='@($"data:image/png;base64, {Convert.ToBase64String(@context.Picture)}")' Size='Size.Small' />
                                                        @context.EmployeeName | @context.Designation
                                                    </div>
                                                </ResultTemplate>
                                            </BlazoredTypeahead>
                                            <MudText Class='d-flex wspace-nowrap txt-uppercase font-bold font10 pl-1'>
                                                Approved By
                                                <MudText Class='font10 font-bold' Color='Color.Error'>*</MudText>
                                            </MudText>
                                        </div>
                                    </div>
                                </MudCardContent>
                                <MudDivider />
                                <MudCardHeader Class='d-flex align-center justify-center pa-2 border-thin-bottom bgc-F4F5FB height2-05rem'>
                                    <div class='d-flex align-center transition-05s-ease overflow-hidden @(isDetailViewExpanded ? "fade-in flex-1" : "fade-out")' style='@(isDetailViewExpanded ? "max-width:500px" : "max-width:0px")'>
                                        <MudText Class='txt-uppercase font12 font-bold'>Status</MudText>
                                    </div>
                                    <MudIcon Icon='@Icons.Filled.FactCheck' Size='Size.Small' />
                                </MudCardHeader>
                                <MudCardContent Class='d-flex flex-column align-center pa-2 overflow-hidden'>
                                    <div class='d-flex align-center flex-1 @(isDetailViewExpanded ? "fade-in" : "fade-out")'>
                                        @if (GlobalClass.voucher.Id != 0) {
                                            <MudChip Class='chip-radius-5 font-bold font12' Size='Size.Medium' Variant='Variant.Outlined' Color='Color.Info'>
                                                @GlobalClass.voucher.StatusName
                                            </MudChip>
                                        } else {
                                            <MudChip Class='chip-radius-5 font-bold font12' Size='Size.Medium' Variant='Variant.Outlined' Color='Color.Error'>
                                                TO BE GENERATED
                                            </MudChip>
                                        }
                                    </div>
                                </MudCardContent>
                                <MudSpacer />
                                <MudCardActions Class='d-flex gap-2 border-thin-top'>
                                    <div class='d-flex align-center flex-1 @(isDetailViewExpanded ? "fade-in" : "fade-out")'>
                                        <MudSpacer />
                                        <MudButton Class='btn-ios-d font12' OnClick='(()=> { DisposePrintMapped();navigationManager.NavigateTo($"/voucher/list"); })' Variant='Variant.Text' Size='Size.Medium' DisableElevation>Cancel</MudButton>
                                        <MudButton Class='btn-ios-d font12' OnClick='(()=> SaveVoucher())' Variant="Variant.Filled" Color='@(currActionMode == Enums.ActionMode.Update ? Color.Info : Color.Primary)' Size='Size.Medium' DisableElevation Disabled='_processing'>
                                            @if (_processing) {
                                                <MudProgressCircular Class="progsize-21" Size="Size.Small" Indeterminate="true"/>
                                                <MudText Class='font12 fweight500 pl-2'>GENERATING</MudText>
                                            } else {
                                                <MudText Class='font12 fweight500'>
                                                    @(currActionMode == Enums.ActionMode.Update ? "UPDATE" : "GENERATE")
                                                </MudText>
                                            }
                                        </MudButton>
                                    </div>
                                </MudCardActions>
                            </div>
                        </div>
                    </div>
                </MudCardContent>
            </MudPaper>
        </MudContainer>
    }
</div>

@code{
    #region Properties
    private List<VoucherDetailModel> voucherDetails = new List<VoucherDetailModel>();
    private DivisionModel selectedDivision = new DivisionModel();
    private Project selectedProject = new Project();
    private ExpenseLineModel selectedExpLine = new ExpenseLineModel();
    private Project payee = new Project();
    private UserAccount preparedBy = new UserAccount(); private UserAccount verifiedBy = new UserAccount(); private UserAccount approvedBy = new UserAccount();
    private DateTime? voucherDate = DateTime.Now.Date;
    private bool dataFetched, openEditDrawer, reqProj, reqExp, reqDiv, reqDebt, reqCred, reqAmt, reqVer , reqApp, reqPrep, reqPayee, reqRFP, _processing, isDetailViewExpanded = true;
    private byte[] preparedByImg= new byte[]{}, verifiedByImg = new byte[]{}, approvedByImg = new byte[]{};
    private VoucherDetailModel selectedVoucherDetailModel = new VoucherDetailModel();
    private string editDrawerMargin = string.Empty;
    private DateRange? voucherPeriod = new DateRange();
    private BlazoredTypeahead<Project, Project> projectTypeahead = new BlazoredTypeahead<Project, Project>();
    private Enums.ActionMode currActionMode { get; set; }
    private int[] pageSize = new int[] {30, 50, 100, 500, 1000 };
    private BlazoredTypeahead<ExpenseLineModel, ExpenseLineModel> ExpenseLineRef = new();
    private BlazoredTypeahead<DivisionModel, DivisionModel> DivisionRef = new();
    private BlazoredTypeahead<Project, Project> PayeeRef = new();
    #endregion

    #region Methods

    protected override async Task OnInitializedAsync()
    {
        GlobalClass.pageTitle = "Voucher entry";
        while (GlobalClass.currentUserAccount == null)
            await Task.Delay(1);

        Task t = Task.WhenAll(InitializedComponent(),LoadRequesteForPayments());
        await t;
        if (t.Status == TaskStatus.RanToCompletion)
            CompletedFetch();
    }
    private async Task LoadRequesteForPayments()
    {
        GlobalClassList.requestForPaymentsList = await  requrestForPaymentService.LoadRequestPayment(new FilterParameter(),GlobalClass.token);
    }
    async Task InitializedComponent()
    {
        await Task.Delay(1);
        navigationManager.LocationChanged += OnLocationChanged;
        if (GlobalClass.voucher == null || GlobalClass.voucher.Id == 0)
        {
            switch(GlobalClass.forPrintingOrSaveVoucher)
            {
                case null :
                    GlobalClass.voucher = new VoucherModel();
                    voucherDate = DateTime.Now.Date;
                    GlobalClass.voucher.PreparedByName = GlobalClass.currentUserAccount.EmployeeName;
                    GlobalClass.voucher.PreparedById = GlobalClass.currentUserAccount.EmployeeId;
                    preparedBy = GlobalClass.currentUserAccount;
                    break;
                default :
                    RemappedProperties();
                    break;
            }
        }
        else
        {
            await DisplayOtherProperties();
        }
        if(VoucherPrint.isPrint)
        {
            RemappedProperties();
            await DisplayOtherProperties();
        }
    }

    void CompletedFetch()
    {
        dataFetched = true;
        Task.Run(StateHasChanged);
    }

    #region Remapped Properties
    void RemappedProperties()
    {
        Console.WriteLine("RemappedProperties");
        GlobalClass.voucher.PeriodFrom = GlobalClass.forPrintingOrSaveVoucher.PeriodFrom;
        GlobalClass.voucher.PeriodTo = GlobalClass.forPrintingOrSaveVoucher.PeriodTo;
        GlobalClass.voucher.PreparedById = GlobalClass.forPrintingOrSaveVoucher.PreparedById;
        GlobalClass.voucher.PreparedByName = GlobalClass.forPrintingOrSaveVoucher.PreparedByName;
        preparedBy.Picture = GlobalClass.forPrintingOrSaveVoucher.PreparedByPicture;
        verifiedBy.Picture = GlobalClass.forPrintingOrSaveVoucher.VerifiedByPicture;
        approvedBy.Picture = GlobalClass.forPrintingOrSaveVoucher.ApprovedByPicture;

        GlobalClass.voucher.PreparedByName = GlobalClass.forPrintingOrSaveVoucher.PreparedByName;
        GlobalClass.voucher.PreparedById = GlobalClass.forPrintingOrSaveVoucher.PreparedById;
        preparedByImg = GlobalClass.forPrintingOrSaveVoucher.PreparedByPicture;
        GlobalClass.voucher.PeriodFrom = GlobalClass.forPrintingOrSaveVoucher.PeriodFrom;
        GlobalClass.voucher.PeriodTo = GlobalClass.forPrintingOrSaveVoucher.PeriodTo;
         GlobalClass.voucher.RFPTotalAmount = GlobalClass.voucher.VoucherRFP.Sum(x=>x.TotalAmount);
        GlobalClass.voucher.RFPTotalAmountString = GlobalClass.voucher.VoucherRFP.Sum(x=>x.TotalAmount).ToString("N2");
        
    }
    #endregion

    #region Location Changed
    private void OnLocationChanged(object? sender, LocationChangedEventArgs args)
    {
        GlobalClass.voucher = new();
        verifiedByImg = new byte[]{};
        approvedByImg = new byte[]{};
        Dispose();
    }


    public void Dispose()
    {
        navigationManager.LocationChanged -= OnLocationChanged;
    }
    #endregion

    #region Save Voucher
    private void SaveVoucher()
    {
        _processing = true;
        if(ValidateEntry() && ValidateAmount())
        {
            GlobalClass.forPrintingOrSaveVoucher = MapProperties();
            _processing = false;
            //Sample from Cyrille to show report list of RFP
            GlobalClass.voucher.RFP = String.Join(",",GlobalClass.voucher.VoucherRFP.Select(x=>x.RFPControlNumber));
            navigationManager.NavigateTo($"/voucher/print");
        }
        else if(!ValidateAmount())
        {
            Extensions.ShowAlert("Gross amount should be lower than or equal to the voucher/s amount (P "+
            GlobalClass.voucher.VoucherRFP.Sum(x=>x.TotalAmount).ToString("N2")+")", Variant.Filled, snackbarService, Severity.Error);
        }
        else
            Extensions.ShowAlert("Cannot create voucher, Incomplete fields.", Variant.Filled, snackbarService, Severity.Error);
        _processing = false;
    }
    #endregion

    #region Add New Voucher Details
    private async Task AddNew(bool state)
    {
        var temp = 1;
        //New code map expense with ewt
        var VoucherDetail = new VoucherDetailModel();
        if(state)
        {
            VoucherDetail.selExp = GlobalClassList.expenseLineList.Find(x=>x.IsEWT == true) ?? new();
            VoucherDetail.selProj = (await globalService.LoadPayees(new FilterParameter(){IsPayee=true,PayeeName="None"},GlobalClass.token)).Find(x=>x.ProjectName =="None")?? new();
            VoucherDetail.selDiv = GlobalClassList.divisionList.Find(x=>x.divisionName == "None")?? new();
            VoucherDetail.Amount = -Math.Abs(GlobalClass.voucher.WithholdingTax);
            VoucherDetail.IsEWT = true;
            GlobalClass.voucher.VoucherDetails.Insert(GlobalClass.voucher.VoucherDetails.Count,VoucherDetail);//Last row if EWT
        }
        else
            if(GlobalClass.voucher.VoucherDetails.Count == 0)
                GlobalClass.voucher.VoucherDetails.Add(VoucherDetail);//Add if no details {0} row
            else if(GlobalClass.voucher.VoucherDetails.Any(x=>x.isLabor))
                GlobalClass.voucher.VoucherDetails.Insert(GlobalClass.voucher.VoucherDetails.Where(x=>x.isLabor).ToList().Count,VoucherDetail);//Insert before after labor
            else
                GlobalClass.voucher.VoucherDetails.Insert(GlobalClass.voucher.VoucherDetails.Count-1,VoucherDetail);//Insert before EWT row
        
        foreach (var item in GlobalClass.voucher.VoucherDetails)
        {
            item.TemporaryId = temp++;
        }
        ComputeGrossIncome();
        StateHasChanged();
    }

    #endregion

    #region DisplayOtherProperties
    private async Task DisplayOtherProperties()
    {
        currActionMode = Enums.ActionMode.Update;
        voucherDate = GlobalClass.voucher.VoucherDate;

        payee.ProjectId = GlobalClass.voucher.PayeeId;
        payee.ProjectCategoryId = GlobalClass.voucher.PayeeCategoryId;
        payee.ProjectName = GlobalClass.voucher.PayeeName;

        if (GlobalClass.voucher.PreparedById == 0) {
            preparedBy = GlobalClass.currentUserAccount;
        } else {
            preparedBy.EmployeeId = GlobalClass.voucher.PreparedById;
            preparedBy.EmployeeName = GlobalClass.voucher.PreparedByName;
        }

        voucherPeriod = new DateRange(GlobalClass.voucher.PeriodFrom, GlobalClass.voucher.PeriodTo);

        preparedBy = await GetEmployeeDetails(GlobalClass.voucher.PreparedById);
        verifiedBy = await GetEmployeeDetails(GlobalClass.voucher.VerifiedById);
        approvedBy = await GetEmployeeDetails(GlobalClass.voucher.ApprovedById);
        GlobalClass.voucher.RFPTotalAmountString = GlobalClass.voucher.VoucherRFP.Sum(x=>x.TotalAmount).ToString("N2");
        if(GlobalClass.voucher.Id == 0 && !GlobalClass.voucher.VoucherDetails.Any(x=>x.ProjectName=="None" || x.DivisionName == "None"))
            await GetVATandEWT(payee);
        GlobalClass.voucher.RFPTotalAmount = GlobalClass.voucher.VoucherRFP.Sum(x=>x.TotalAmount);
        GlobalClass.voucher.RFPTotalAmountString = GlobalClass.voucher.VoucherRFP.Sum(x=>x.TotalAmount).ToString("N2");
        var RFP = await voucherService.NotInVoucher(GlobalClass.token);

        List<Project> projects = await globalService.LoadPayees(new FilterParameter(){IsPayee=true,PayeeName="",isActive=false},GlobalClass.token);
        List<RequestForPaymentModel> currentRFPList = new List<RequestForPaymentModel>();
        GlobalClass.voucher.VoucherRFP.ForEach(rf=> {
            currentRFPList.Add(RFP.Where(x=>x.Id == rf.RequestForPaymentId).First());
        });
        currentRFPList.ForEach(x=>{
            GlobalClass.voucher.VoucherRFP.ForEach(vDetails=>
            {
            if(x.Id == vDetails.RequestForPaymentId)
            {
                vDetails.rfpType = x.RFPDetailTypeId;
            }
            });
        });
        if(GlobalClass.voucher.VoucherRFP.Any(x=>x.rfpType==Enums.RFPDetailTypeId.Labor))
        {
        GlobalClass.voucher.VoucherDetails.ForEach(async(vDetails)=>{
            vDetails.selSubConProject = (await globalService.VoucherDetailsSubCon(vDetails.ProjectId,GlobalClass.token)).First();
            vDetails.selSubConProjectSOWList = await globalService.VoucherDetailsSubCon(vDetails.ProjectId,GlobalClass.token);
            vDetails.selSOW =  (await globalService.VoucherDetailsSubCon(vDetails.selSubConProject.ProjectId,GlobalClass.token)).First();
            //Set subledger for saving
            vDetails.SubLedgerId = vDetails.selSubConProject.SubContractorId;
            vDetails.SubLedgerCategoryId = Enums.ProjectCategory.SubCon;//Temporary
            vDetails.SubLedgerName = vDetails.selSubConProject.SubContractorName;
            //Set subdledger for saving
            vDetails.ScopeOfWorkId = vDetails.selSOW.ScopeOfWorkId;
            vDetails.ScopeOfWorkName = vDetails.selSOW.ScopeOfWork;
            vDetails.isLabor = GlobalClass.voucher.VoucherRFP.Any(x=>x.rfpType==Enums.RFPDetailTypeId.Labor)? true:false;
        });
        }
        else 
        {
        GlobalClass.voucher.VoucherDetails.ForEach(async(x)=>{
            x.selSubConProject = (projects.Where(x=>x.ProjectName.Contains("None",StringComparison.InvariantCultureIgnoreCase)).Select(x=>new SubContractorProjectModel()
            {
            SubContractorName = x.SubLedgerName,
            SubContractorId = x.SubLedgerId,
            })).First();
            //Console.WriteLine(x.selSubConProject);
            x.selSOW = (GlobalClassList.scopeOfWork.Where(x=>x.ScopeName.Contains("None",StringComparison.InvariantCultureIgnoreCase)).Select(x=>new SubContractorProjectModel(){
            ScopeOfWork = x.ScopeName,
            ScopeOfWorkId = x.Id,
            })).First();
            x.selSubConProjectSOWList = await globalService.VoucherDetailsSubCon(x.ProjectId,GlobalClass.token);
            //Set subledger for saving
            x.SubLedgerId = x.selSubConProject.SubContractorId;
            x.SubLedgerCategoryId = x.SubLedgerCategoryId;
            x.SubLedgerName = x.selSubConProject.SubContractorName;
            //Set sow for saving
            x.ScopeOfWorkId = x.selSOW.ScopeOfWorkId;
            x.ScopeOfWorkName = x.selSOW.ScopeOfWork;
            x.isLabor = false;
        });
        }
    ComputeGrossIncome();
    }

    #endregion

    #region Map Properties

    VoucherModel MapProperties()
    {
        GlobalClass.voucher.VoucherDate = voucherDate??DateTime.Now.Date;
        GlobalClass.voucher.PeriodFrom = voucherPeriod?.Start;
        GlobalClass.voucher.PeriodTo = voucherPeriod?.End;

        GlobalClass.voucher.UserId = GlobalClass.currentUserAccount.EmployeeId;
        GlobalClass.voucher.IsActive = true;

        GlobalClass.voucher.PreparedByPicture = preparedBy.Picture;
        GlobalClass.voucher.VerifiedByPicture = verifiedBy.Picture;
        GlobalClass.voucher.ApprovedByPicture = approvedBy.Picture;
        GlobalClass.voucher.AccountingStatusId = GlobalClassList.accountingStatusList
        .Where(x => x.StatusEnumCategoryId == Enums.AccountingStatusEnumCategory.VG)
        .Select(x => x.Id)
        .FirstOrDefault();

        if(GlobalClass.voucher.Id == 0)
          GlobalClass.voucher.Activity = "Add Voucher";
        else
          GlobalClass.voucher.Activity = "Update Voucher";

        if(GlobalClass.voucher.RemovedVoucherDetails.Count() != 0)
        {
          GlobalClass.voucher.RemovedVoucherDetails.ForEach(x=>
          {
            GlobalClass.voucher.Activity += " and removed voucher details";
          });
        }

        GlobalClass.voucher.PayeeId = payee.ProjectId;
        GlobalClass.voucher.PayeeName = payee.ProjectName;
        GlobalClass.voucher.PayeeCategoryId = payee.ProjectCategoryId;

        GlobalClass.voucher.PreparedById = preparedBy.EmployeeId;
        GlobalClass.voucher.PreparedByName = preparedBy.EmployeeName;
        GlobalClass.voucher.VerifiedById = verifiedBy.EmployeeId;
        GlobalClass.voucher.VerifiedByName = verifiedBy.EmployeeName;
        GlobalClass.voucher.ApprovedById = approvedBy.EmployeeId;
        GlobalClass.voucher.ApprovedByName = approvedBy.EmployeeName;

        return GlobalClass.voucher;
    }

    #endregion

    #region Employee Lookup

    private async Task Lookup(string role)
    {
        GlobalClass.voucher.PreparedByName = GlobalClass.currentUserAccount.EmployeeName;
        GlobalClass.voucher.PreparedById = GlobalClass.currentUserAccount.EmployeeId;
        var parameters = new DialogParameters();
        string dialogTitle = role == "payee" ? "Payee Look Up" : "Employee Look Up";
        Enums.LookUpType lookUpType = role == "payee" ? Enums.LookUpType.Project : Enums.LookUpType.Employee;
        parameters.Add("dialogTitle", dialogTitle);
        parameters.Add("buttonText", "Select");
        parameters.Add("color", Color.Success);
        parameters.Add("lookUpType", lookUpType);
        var options = new DialogOptions()
        {
            CloseButton = false,
            MaxWidth = MaxWidth.Small,
            FullWidth = true,
            NoHeader = false,
            DisableBackdropClick = true
        };
        var resultDialog = await dialogService.Show<Shared.Dialogs.LookUpDialog.GlobalGenericLookup>(dialogTitle, parameters, options).Result;
        if (!resultDialog.Cancelled)
        {
            if (lookUpType == Enums.LookUpType.Employee) {
                var employee = (UserAccount)resultDialog.Data;
                if (role == "prepare")
                    PreparedbyEmployee(employee);
                if (role == "verify")
                    VerifiedbyEmployee(employee);
                if (role == "approve")
                    ApprovedbyEmployee(employee);
            }
            else if (role == "payee")
                PayeeEmployee((Project)resultDialog.Data);
            StateHasChanged();
        }
    }
    private void PreparedbyEmployee(UserAccount employee)
    {
        GlobalClass.voucher.PreparedById = employee.EmployeeId;
        GlobalClass.voucher.PreparedByName = employee.EmployeeName;
        preparedByImg = employee.Picture;
    }
    private void VerifiedbyEmployee(UserAccount verify)
    {
        GlobalClass.voucher.VerifiedById = verify.EmployeeId;
        GlobalClass.voucher.VerifiedByName = verify.EmployeeName;
        verifiedByImg = verify.Picture;
    }
    private void ApprovedbyEmployee(UserAccount approve)
    {
        GlobalClass.voucher.ApprovedById = approve.EmployeeId;
        GlobalClass.voucher.ApprovedByName = approve.EmployeeName;
        approvedByImg = approve.Picture;
    }

    private void PayeeEmployee(Project payee)
    {
        GlobalClass.voucher.PayeeId = payee.ProjectId;
        GlobalClass.voucher.PayeeName = payee.ProjectName;
        GlobalClass.voucher.PayeeCategoryId = payee.ProjectCategoryId;
    }

    #endregion

    #region Voucher Details Lookup
    private async Task VoucherDetailLookups(Enums.LookUpType lookUpType, VoucherDetailModel voucherDetail)
    {
        var parameters = new DialogParameters();
        string dialogTitle = "";
        if(lookUpType == Enums.LookUpType.Division)
            dialogTitle = "Division";
        if(lookUpType == Enums.LookUpType.Project || lookUpType == Enums.LookUpType.ChargeLine)
            dialogTitle = "Name / Project / Equip";
        if(lookUpType == Enums.LookUpType.ExpLine)
            dialogTitle = "Expense";

        parameters.Add("dialogTitle", dialogTitle);
        parameters.Add("buttonText", "Select");
        parameters.Add("color", Color.Success);
        parameters.Add("lookUpType", lookUpType);
        var options = new DialogOptions()
        {
            CloseButton = false,
            MaxWidth = MaxWidth.Small,
            FullWidth = true,
            NoHeader = false,
            DisableBackdropClick = false
        };
        var resultDialog = await dialogService.Show<Shared.Dialogs.LookUpDialog.GlobalGenericLookup>(dialogTitle, parameters, options).Result;
        if (!resultDialog.Cancelled)
        {
            if (lookUpType == Enums.LookUpType.Division)
            {
                selectedDivision = (DivisionModel)resultDialog.Data;
                AddDivision(voucherDetail);
            }
            if (lookUpType == Enums.LookUpType.Project || lookUpType == Enums.LookUpType.ChargeLine)
            {
                selectedProject = (Project)resultDialog.Data;
                AddProjectLine(voucherDetail);
            }
            if (lookUpType == Enums.LookUpType.ExpLine)
            {
                selectedExpLine = (ExpenseLineModel)resultDialog.Data;
                AddExpense(voucherDetail);
            }
        }
    }

    #endregion

    #region Add RFP

    private async Task AddRFP()
    {
        var parameters = new DialogParameters();
        string dialogTitle = "Request for payments";
        parameters.Add("dialogTitle", dialogTitle);
        parameters.Add("buttonText", "Select");
        parameters.Add("color", Color.Success);
        parameters.Add("lookUpType", Enums.LookUpType.RFPVoucher);
        var options = new DialogOptions()
        {
            CloseButton = false,
            MaxWidth = MaxWidth.Large,
            FullWidth = true,
            NoHeader = false,
            DisableBackdropClick = true
        };
        var resultDialog = await dialogService.Show<Shared.Dialogs.GlobalRFPLiquidationLookUp.GlobalRFPLiquidationLookUp>(dialogTitle, parameters, options).Result;
        if (!resultDialog.Cancelled)
        {
            ComputeGrossIncome();
            GetLaborPayee();
            StateHasChanged();
        }
    }

    #endregion
    
    #region Add Division

    private void AddDivision(VoucherDetailModel voucherDetail)
    {

        if (voucherDetail.Id == 0)
        {
            GlobalClass.voucher.VoucherDetails.Where(x => x.TemporaryId == voucherDetail.TemporaryId).ToList().ForEach(x =>
            {
                x.DivisionId = selectedDivision.Id;
                x.DivisionName = selectedDivision.divisionName;
            });

        }
        else
        {
            GlobalClass.voucher.VoucherDetails.Where(x => x.Id == voucherDetail.Id).ToList().ForEach(x =>
            {
                x.DivisionId = selectedDivision.Id;
                x.DivisionName = selectedDivision.divisionName;
            });
        }
        StateHasChanged();
    }

    #endregion

    #region Add Project
    private void AddProjectLine(VoucherDetailModel voucherDetail)
    {
        if (voucherDetail.Id == 0)
        {
            GlobalClass.voucher.VoucherDetails.Where(x => x.TemporaryId == voucherDetail.TemporaryId).ToList().ForEach(x =>
            {
                x.ProjectId = selectedProject.ProjectId;
                x.ProjectName = selectedProject.ProjectName;
                x.ProjectCategoryId = selectedProject.ProjectCategoryId;
            });

        }
        else
        {
            GlobalClass.voucher.VoucherDetails.Where(x => x.Id == voucherDetail.Id).ToList().ForEach(x =>
            {
                x.ProjectId = selectedProject.ProjectId;
                x.ProjectName = selectedProject.ProjectName;
                x.ProjectCategoryId = selectedProject.ProjectCategoryId;
            });
        }
        StateHasChanged();
    }

    #endregion

    #region Add Expense

    private void AddExpense(VoucherDetailModel voucherDetail)
    {


        if (voucherDetail.Id == 0)
        {
            GlobalClass.voucher.VoucherDetails.Where(x => x.TemporaryId == voucherDetail.TemporaryId).ToList().ForEach(x =>
            {
                x.ExpenseId = selectedExpLine.Id;
                x.ExpenseName = selectedExpLine.ExpenseName;
            });

        }
        else
        {
            GlobalClass.voucher.VoucherDetails.Where(x => x.Id == voucherDetail.Id).ToList().ForEach(x =>
            {
                x.ExpenseId = selectedExpLine.Id;
                x.ExpenseName = selectedExpLine.ExpenseName;
            });
        }
        StateHasChanged();

    }

    #endregion

    #region Payee Lookup

    private async void PayeeLookUp()
    {
        var parameters = new DialogParameters();
        string dialogTitle = "Payee Look Up";
        parameters.Add("dialogTitle", dialogTitle);
        parameters.Add("buttonText", "Select");
        parameters.Add("color", Color.Success);
        parameters.Add("lookUpType", Enums.LookUpType.Project);
        var options = new DialogOptions()
        {
            CloseButton = false,
            MaxWidth = MaxWidth.Small,
            FullWidth = true,
            NoHeader = false,
            DisableBackdropClick = false
        };
        var resultDialog = await dialogService.Show<Shared.Dialogs.LookUpDialog.GlobalGenericLookup>(dialogTitle, parameters, options).Result;
        if (!resultDialog.Cancelled)
        {
            payee = (Project)resultDialog.Data;
            StateHasChanged();
        }
    }

    private async Task<IEnumerable<Project>> LoadPayee(string projectName)
    {
       var filterParameter = new FilterParameter()
        {
            IsProject = true,
            ProjectName = projectName,
            IsId = false
        };
        var projects = await globalService.LoadPayees(filterParameter,GlobalClass.token);
        return projects;
    }
    private async Task<IEnumerable<SubContractorProjectModel>> LoadSubConProjects(string search,List<SubContractorProjectModel> context)
    {
        return await Task.Run(()=>context.Where(x=>x.SubContractorName.Contains(search, StringComparison.InvariantCultureIgnoreCase)));
    }
    private async Task<IEnumerable<SubContractorProjectModel>> LoadSubConProjectsSOW(string searchSOW, List<SubContractorProjectModel> sowContext)
    {
        return await Task.Run(()=>sowContext.Where(x=>x.SubContractorName.Contains(searchSOW, StringComparison.InvariantCultureIgnoreCase)));
    }
    private async Task<IEnumerable<UserAccount>> LoadEmployee(string employeeName)
    {
        var filterParameter = new FilterParameter()
        {
            IsName = true,
            Name = employeeName,
            IsLookUp = true
        };
        var employee = await globalService.LoadAllEmployee(filterParameter, GlobalClass.token);
        return employee;
    }

    private async Task<IEnumerable<Project>> LoadCharging(string chargingName)
    {
      var filterParameter = new FilterParameter()
      {
        IsProject = true,
        ProjectName = chargingName,
        IsId = false
      };
      var charging = await globalService.LoadChargeProjectLine(filterParameter, GlobalClass.token);
      return charging;
    }

    private async Task<IEnumerable<ExpenseLineModel>> LoadExpense(string expenseLine)
    {
      var charging = await expenseLineService.LoadExpenseLine(GlobalClass.token);
      return charging.Where(x=>x.ExpenseName.Contains(expenseLine, StringComparison.OrdinalIgnoreCase)).ToList();
    }

    private async Task<IEnumerable<DivisionModel>> LoadDivision(string searchText)
    {
      var division = GlobalClassList.divisionList;
      return await Task.FromResult(division.Where(x=>x.divisionName.Contains(searchText, StringComparison.InvariantCultureIgnoreCase)
      || x.shortcutName.Contains(searchText, StringComparison.InvariantCultureIgnoreCase)).ToList());
    }
    #endregion

    #region Remove RFP Voucher
    private async void RemoveRFP(VoucherDetailModel voucherDetail)
    {
        //Prompt purpose
    var action = Enums.ActionMode.Delete;
    if(voucherDetail.IsEWT)
        action = Enums.ActionMode.Invalid;

    var parameters = new DialogParameters();
    string contentText = "Voucher details";
    string dialogTitle = "Remove " + contentText;
    parameters.Add("contentText", contentText);
    parameters.Add("actionMode", action);
    var options = new DialogOptions()
    {
        CloseButton = false,
        MaxWidth = MaxWidth.ExtraSmall,
        FullWidth = true,
        NoHeader = false,
        DisableBackdropClick = true
    };
    var resultDialog = await dialogService.Show<Shared.Dialogs.GenericPromptDialogs.GenericPrompt>(dialogTitle, parameters, options).Result;
    if(!resultDialog.Cancelled)
    {
        if(action != Enums.ActionMode.Invalid && GlobalClass.voucher.Id != 0 && voucherDetail.Id != 0)
        {
            voucherDetail.IsActive = false;
            GlobalClass.voucher.RemovedVoucherDetails.Add(voucherDetail);
            GlobalClass.voucher.VoucherDetails = GlobalClass.voucher.VoucherDetails.Where(x=>x.IsActive == true).ToList();
        } else {
            GlobalClass.voucher.VoucherDetails.Remove(voucherDetail);
            GlobalClass.voucher.WithSubLedger = GlobalClass.voucher.VoucherRFP.Count > 0 ? true:false;
            GlobalClass.voucher.VoucherDetails = GlobalClass.voucher.VoucherRFP.Count > 0 ? GlobalClass.voucher.VoucherDetails:new();
        }
    }
      GlobalClass.voucher.GrossIncome = GlobalClass.voucher.VoucherDetails.Sum(x=>x.Amount);
      StateHasChanged();
    }

    #endregion

    #region Remove RFP

    private void RemoveVoucherRFP(VoucherRFPModel voucherRFP)
    {
        GlobalClass.voucher.RFPTotalAmount = GlobalClass.voucher.RFPTotalAmount - voucherRFP.TotalAmount;
        GlobalClass.voucher.RFPTotalAmountString = GlobalClass.voucher.RFPTotalAmount.ToString("N2");
        voucherRFP.IsActive = false;
        GlobalClass.voucher.VoucherRFP.Remove(voucherRFP);
        GlobalClass.voucher.RemovedVoucherRFP.Add(voucherRFP);
        GlobalClass.voucher.WithSubLedger = GlobalClass.voucher.VoucherRFP.Count > 0 ? true:false;
        GlobalClass.voucher.VoucherDetails = GlobalClass.voucher.VoucherRFP.Count > 0 ? GlobalClass.voucher.VoucherDetails:new();
        StateHasChanged();
    }   

    #endregion

    #region Get Employee Image
    private async Task<byte[]> GetEmployeeImg(long employeeId)
    {
        var employeeDetail = await globalService.GetEmployeeById(employeeId, GlobalClass.token);
        return employeeDetail.Picture;
    }

    private async Task<UserAccount> GetEmployeeDetails(long employeeId)
    {
        var employeeDetail = await globalService.GetEmployeeById(employeeId, GlobalClass.token);
        return employeeDetail;
    }
    #endregion

    #region Reset Voucher Detail Table
    private async Task ResetVoucherTable()
    {
        GlobalClass.voucher.VoucherDetails = new List<VoucherDetailModel>();
        var voucher = await voucherService.GetVATandEWT(payee,GlobalClass.token);
        GlobalClass.voucher.VATValue = voucher.VATValue;
        GlobalClass.voucher.EWTValue = voucher.EWTValue;
        if(voucher.EWTValue > 0 && !GlobalClass.voucher.VoucherDetails.Any(x=>
        x.ProjectName == "None" || 
        x.DivisionName == "None")) {
        if(GlobalClass.voucher.RemovedVoucherDetails.Any(x=> x.ProjectName == "None" || x.DivisionName == "None"))
                GlobalClass.voucher.RemovedVoucherDetails.RemoveAll(x=> x.ProjectName == "None" || x.DivisionName == "None");
        await AddNew(true);
        }
    }
    #endregion

    #region Edit Row
    private void EditRow(VoucherDetailModel model)
    {
        selectedVoucherDetailModel = new VoucherDetailModel();
        selectedVoucherDetailModel = model;
        if (!openEditDrawer) {
            openEditDrawer = !openEditDrawer;
            MarginToDrawer();
        }
    }
    #endregion

    #region Dynamic Margin to Drawer
    private void MarginToDrawer()
    {
        if (openEditDrawer)
            editDrawerMargin = "margin-top: 5% !important; margin-right: 20% !important";
        else if (!openEditDrawer)
            editDrawerMargin = "margin-top: 5% !important; margin-right: 0 !important";
    }
    #endregion

    #region  Validate Entries
    private bool ValidateEntries()
    {
        ResetEntryValidations();
        if (selectedVoucherDetailModel.ProjectId == 0)
            reqProj = true;
        if (selectedVoucherDetailModel.ExpenseId == 0)
            reqExp = true;
        if (selectedVoucherDetailModel.DivisionId == 0)
            reqDiv = true;
        if (reqProj || reqExp || reqDiv)
            return  false;
        return true;
    }
    #endregion

    #region ValidateAmount
    private bool ValidateAmount()
    {
      if(GlobalClass.voucher.VoucherDetails.Sum(x=>x.Amount) > GlobalClass.voucher.VoucherRFP.Sum(y=>y.TotalAmount))
      {
        return false;
      }
      return true;
    }
    #endregion

    #region Validation
    private bool ValidateEntry()
    {
        ResetVoucherEntryValidations();
        bool valid = true;
        if (payee.ProjectId == 0)
            reqPayee = true;
        if (GlobalClass.voucher.PreparedById == 0)
            reqPrep = true;
        if(GlobalClass.voucher.VerifiedById == 0)
            reqVer = true;
        if(GlobalClass.voucher.ApprovedById == 0)
            reqApp = true;
        @* if(GlobalClass.voucher.VoucherDetails.Count() == 0)
            detailCountStatus = "No details Added"; *@
        if(GlobalClass.voucher.VoucherRFP.Count() == 0)
            reqRFP = true;
        if (GlobalClass.voucher.VoucherDetails.Count() == 0
        || GlobalClass.voucher.VoucherRFP.Count() == 0)
            valid =  false;
        GlobalClass.voucher.VoucherDetails.Where(y=>y.IsEWT == false).Reverse().ToList().ForEach(x=> { 
            if(x.selExp.Id == 0 || x.selExp.Id == 0 || x.selExp.Id == 0) {
                valid = false;
                return;
            }
        });
        return valid;
    }

    private void Validate(int control)
    {
        Console.WriteLine("Validation Start");
        if (control == 1)
            if (payee.ProjectId == 0)
                reqPayee = true;
    }
    #endregion

    #region Reset Entry Validations
    private void ResetEntryValidations()
    {
        reqProj = false;
        reqExp = false;
        reqDiv = false;
    }

    private void ResetVoucherEntryValidations()
    {
        reqPayee = false;
        reqPrep = false;
        reqVer = false;
        reqApp = false;
        reqRFP = false;
    }
    #endregion

    #region Clear Entry Changes
    private void ClearChanges()
    {
        openEditDrawer = !openEditDrawer;
        MarginToDrawer();
        ResetEntryValidations();
    }
    #endregion

    #region New Voucher Entry
    public void New()
    {
        Console.WriteLine("new");
        GlobalClass.voucher = new VoucherModel();
        @* MapDefaultDetails();
        showReport = false; *@
    }
    #endregion

    #region Dispose For Printing Voucher
    private void DisposePrintMapped()
    {
        GlobalClass.forPrintingOrSaveVoucher = new VoucherModel();
    }
    #endregion

    #region GetVATandEWT
    private async Task GetVATandEWT(Project p)
    {
        var voucher = await voucherService.GetVATandEWT(p,GlobalClass.token);
        GlobalClass.voucher.VATValue = voucher.VATValue;
        GlobalClass.voucher.EWTValue = voucher.EWTValue;
        if(voucher.EWTValue > 0 && !GlobalClass.voucher.VoucherDetails.Any(x=>
        x.ProjectName == "None" || 
        x.DivisionName == "None")) {
            if(GlobalClass.voucher.RemovedVoucherDetails.Any(x=> x.ProjectName == "None" || x.DivisionName == "None"))
                GlobalClass.voucher.RemovedVoucherDetails.RemoveAll(x=> x.ProjectName == "None" || x.DivisionName == "None");
            await AddNew(true);
        } else {
            if(GlobalClass.voucher.Id != 0)
                {
                    var voucherDetail = GlobalClass.voucher.VoucherDetails.Find(x=> x.ProjectName == "None" || x.DivisionName == "None")?? new();
                    voucherDetail.IsActive = false;
                    voucherDetail.Amount = -Math.Abs(voucherDetail.Amount);
                    GlobalClass.voucher.RemovedVoucherDetails.Add(voucherDetail);
                }
                if(GlobalClass.voucher.EWTValue <= 0)
                    GlobalClass.voucher.VoucherDetails.RemoveAll(x=> x.ProjectName == "None" || x.DivisionName == "None");
        }
        ComputeGrossIncome();
        StateHasChanged();
    }
    #endregion
    private void ComputeGrossIncome()
    {
        GlobalClass.voucher.GrossIncome = 0.00m;
        GlobalClass.voucher.WithholdingTax = 0.00m;
        GlobalClass.voucher.VoucherDetails.ForEach(amount=>{
            if(amount.IsEWT)
                amount.Amount = -Math.Abs(GlobalClass.voucher.WithholdingTax);
            else
                if(!amount.IsExcluded)
                    GlobalClass.voucher.GrossIncome += amount.Amount;
        });
        StateHasChanged();
    }
    private async Task SelectedPayee(Project p)
    {
        payee = p;
        await GetVATandEWT(p);
    }
    private async Task ShowPreviousDialog()
    {
        if(payee.ProjectId == 0)
            Extensions.ShowAlert("Please select a payee.",Variant.Filled, snackbarService,Severity.Warning);
        else {
            GlobalClass.voucher.PayeeId = payee.ProjectId;
            GlobalClass.voucher.PayeeCategoryId = payee.ProjectCategoryId;
            var options = new DialogOptions()
            {
                CloseButton = false,
                MaxWidth = MaxWidth.Medium,
                FullWidth = true,
                NoHeader = false,
                DisableBackdropClick = false
            };
            var resultDialog = await dialogService.Show<Shared.Dialogs.PreviousVoucherDialogs.PreviousVouchers>("",options).Result;
        }
    }
    private void ExcludeCheckState(VoucherDetailModel detail,bool check)
    {
        //Need to set value to !check to get state of checkbox
        ExclueAmountFromGrossIncome(detail,!check);
        StateHasChanged();
    }
    private void ExclueAmountFromGrossIncome(VoucherDetailModel detail,bool isExclude){ 
        if(isExclude)
            GlobalClass.voucher.GrossIncome -= detail.Amount;
        else 
            GlobalClass.voucher.GrossIncome += detail.Amount;
    }
    private void GetLaborPayee()
    {
        if(GlobalClass.voucher.VoucherDetails.Any(x=>x.isLabor))
        {   
            var RFPLabor = GlobalClass.voucher.VoucherRFP.Where(x=>x.rfpType == Enums.RFPDetailTypeId.Labor).FirstOrDefault();
            if(RFPLabor != null )
            {
                var _LaborPayee = new Project();
                _LaborPayee.ProjectId = RFPLabor.payeeId;
                _LaborPayee.ProjectCategoryId = (Enums.ProjectCategory)RFPLabor.payeeCategory;
                _LaborPayee.ProjectName = RFPLabor.PayeeName;
                payee = _LaborPayee;
            }

        }
    }
    private void SelectedSubLedger(SubContractorProjectModel p,VoucherDetailModel detail)
    {
        detail.selSOW.ScopeOfWork = p.ScopeOfWork;
        detail.selSOW.ScopeOfWorkId = p.ScopeOfWorkId;
        detail.ScopeOfWorkId = p.ScopeOfWorkId;
        detail.ScopeOfWorkName = p.ScopeOfWork;
        detail.SubLedgerId = p.ProjectId;
        detail.SubLedgerCategoryId = p.SubContactorCategoryId;
        //detail.SubLedgerCategoryId = p.cate;
        detail.SubLedgerName = p.ProjectName;
        StateHasChanged();
    }
    private void SelectedSOW(SubContractorProjectModel p,VoucherDetailModel detail)
    {
        detail.selSOW.ScopeOfWork = p.ScopeOfWork;
        detail.selSOW.ScopeOfWorkId = p.ScopeOfWorkId;
        detail.ScopeOfWorkId = p.ScopeOfWorkId;
        detail.ScopeOfWorkName = p.ScopeOfWork;
        detail.SubLedgerId = p.ProjectId;
        detail.SubLedgerCategoryId = p.SubContactorCategoryId;
        //detail.SubLedgerCategoryId = p.cate;
        detail.SubLedgerName = p.ProjectName;
        StateHasChanged();
    }
    private async Task DetailSelectedProject(Project p,VoucherDetailModel vDetail)
    {
        vDetail.selSubConProjectSOWList =  await globalService.VoucherDetailsSubCon(p.ProjectId,GlobalClass.token);
        if(vDetail.RFPDetailType != Enums.RFPDetailTypeId.Labor)
        {
            vDetail.SubLedgerId = p.ProjectId;
            vDetail.SubLedgerCategoryId = p.ProjectCategoryId;
        }
    }
    #endregion
}