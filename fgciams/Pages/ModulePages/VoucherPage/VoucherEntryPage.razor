@page "/voucher"

@inject IDialogService dialogService
@inject IVoucherService voucherService
@inject IExpenseLineService expenseLineService
@inject IGlobalService globalService
@inject ISnackbar snackbarService
@inject NavigationManager navigationManager
@inject IVoucherService voucherService
@inject IRequestForPaymentService requrestForPaymentService

<div class='page-cont d-flex overflow-auto'>
    @if (!dataFetched)
    {
        <div class='flex-1 pa-2'>
            <SkeletonPageList />
        </div>
    }
    else
    {
        <MudContainer Class='voucherpage d-flex pt-2 pr-2 pb-2 pl-2 gap-2' Fixed='false' MaxWidth='MaxWidth.ExtraLarge'>
            <MudPaper Class='flex-1' Elevation='1'>
                <MudCardContent Class='pa-2'>
                    <div class='voucherpage__grid'>
                        <div class="voucher-header d-flex align-center pa-2 gap-2 bgc-F4F5FB rounded-tr rounded-tl">
                            <MudGrid Spacing='1'>
                                <MudItem Class='d-flex align-center justify-start gap-1' xs=4>
                                    <MudImage Class='fgcilogocont__imglogo' Src='images/fglogo/fgci1.png' Alt='fgci logo' Height='30' Width='30'/>
                                    <MudText Class='fgcilogocont__lblfirst'>F. GURREA</MudText>
                                    <MudText Class='fgcilogocont__lblsecond'>Construction, Inc.</MudText>
                                </MudItem>
                                <MudItem Class='d-flex align-center justify-center' xs=4>
                                    <MudText Class='txt-uppercase font-1-1rem ff-theramin'>@GlobalClass.pageTitle</MudText>
                                </MudItem>
                                <MudItem Class='d-flex align-center justify-end' xs=4>
                                    <MudTooltip Text='New Voucher' Arrow Placement='Placement.Left'>
                                        <MudButton Class='btn-ios-d pa-1 font12' OnClick='New' StartIcon="@Icons.Material.Filled.Add" Variant='Variant.Filled'
                                        Color='Color.Info' Size='Size.Small' DisableElevation>new</MudButton>
                                    </MudTooltip>
                                </MudItem>
                            </MudGrid>
                        </div>
                        <div class="voucher-payee d-flex align-center pa-2 gap-2">
                            <MudText Class='d-flex wspace-nowrap txt-uppercase font-bold font10'>
                                Payee:
                                <MudText Class='font10 font-bold' Color='Color.Error'>*</MudText>
                            </MudText>
                            <BlazoredTypeahead SearchMethod='LoadPayee' @ref='projectTypeahead' DisableClear placeholder='Search' Disabled=@isDisablePayee
                                ValueExpression="@(()=>payee)" Value="payee" ValueChanged="@((Project p) => SelectedPayee(p) )" Debounce='500' class="cursor-progress">
                                <SelectedTemplate>
                                    <div class='overflow-hidden wspace-nowrap'>
                                        @if (payee.ProjectId != 0) {
                                            <MudText Class='font12'>@payee.ProjectName</MudText>
                                        }
                                        else if (reqPayee)
                                        {
                                            <MudText Class='font12 font-bold txt-uppercase' Color='Color.Error'>
                                                Required
                                            </MudText>
                                        }
                                        else
                                        {
                                            <MudText Class='font12'> @(GlobalClass.voucher.VoucherDetails.Count <= 0 ? "Please select RFP": "Search here") </MudText>
                                        }
                                    </div>
                                </SelectedTemplate>
                                <ResultTemplate>
                                    <div class='d-flex flex-column'>
                                        <small class='font-bold'>@context.ProjectName</small>
                                        <small>@context.Location</small>
                                        <small>@Extensions.ProjectReference(context)</small>
                                    </div>
                                </ResultTemplate>
                            </BlazoredTypeahead> 
                            <MudText Class='d-flex wspace-nowrap font10 font-bold txt-uppercase'>
                                Period:
                                <MudText Class='font10 font-bold' Color='Color.Error'>*</MudText>
                            </MudText>
                            <MudDateRangePicker Class='txtfield-font12-no-margin txtfield-right' @bind-DateRange='@voucherPeriod' @ref='@dateRangePeriod'
                                IconSize='Size.Small' Margin='Margin.Dense' DisableToolbar>
                                 <PickerActions>
                                    <MudButton Class='btn-ios-d font12' OnClick='(() => DateRangeToday(new() , dateRangePeriod))' Size='Size.Small' DisableElevation>
                                        Today
                                    </MudButton>
                                    <MudSpacer />
                                    <MudButton Class='btn-ios-d font12' OnClick='(() => CancelDateRangePicker(new(), dateRangePeriod))' Size='Size.Small' DisableElevation>
                                        Cancel
                                    </MudButton>
                                    <MudButton Class='btn-ios-d font12' OnClick='(() => SubmitDateRangePicker(new(), dateRangePeriod))' Size='Size.Small' DisableElevation Color='Color.Primary' Variant='Variant.Filled'>
                                        Submit
                                    </MudButton>
                                </PickerActions>
                            </MudDateRangePicker>
                        </div>
                        <div class="voucher-status d-flex align-center justify-space-around gap-2 overflow-hidden">
                            <div class='d-flex align-center gap-2 width40'>
                                <MudText Class='d-flex wspace-nowrap txt-uppercase font-bold font10'>Date:</MudText>
                                <MudDatePicker Class='txtfield-font12-no-margin txtfield-right' @bind-Date='voucherDate' IconSize='Size.Small'
                                    Margin='Margin.Dense' DisableToolbar ReadOnly MinDate='@Convert.ToDateTime(voucherDate).AddDays(-1)' MaxDate='@voucherDate'/>
                            </div>
                            <MudDivider Vertical />
                            <MudText Class='wspace-nowrap txt-uppercase font-bold font10'>Control No.:</MudText>
                            <MudChip Class='chip-radius-5 txt-uppercase font-bold font12' Color='Color.Error' Size='Size.Medium' Variant='Variant.Outlined'>
                                @(GlobalClass.voucher.Id == 0 ? "Auto":GlobalClass.voucher.ControlNumber)
                            </MudChip>
                        </div>
                        <div class="voucher-rfp d-flex align-center gap-2 overflowx-auto overflowy-hidden">
                            <div class='d-flex flex-1 overflow-hidden align-center pa-2 gap-2'>
                                <MudText Class='d-flex wspace-nowrap font10 font-bold txt-uppercase'>
                                    RFP:
                                    <MudText Class='font10 font-bold' Color='Color.Error'>*</MudText>
                                </MudText>
                                <MudTooltip Text='Add RFP' Arrow Placement='Placement.Bottom'>
                                    <MudIconButton OnClick='(()=> AddRFP())' Icon="@Icons.Material.Filled.Add" aria-label="Add RFP" Color='Color.Info' Size='Size.Small' />
                                </MudTooltip>
                                @if (reqRFP)
                                {
                                    <MudText Class='font12 font-bold txt-uppercase' Color='Color.Error'>
                                        Required
                                    </MudText>
                                }
                                <div class='wspace-nowrap overflow-auto max-width90 oflow-el' style='@(GlobalClass.voucher.VoucherRFP.Count() == 0 ? "display:none" : "")'>
                                    @foreach (var item in GlobalClass.voucher.VoucherRFP)
                                    {
                                        <MudChip OnClose='(()=> RemoveVoucherRFP(item))' Size='Size.Small' Color='Color.Tertiary'>@item.RFPControlNumber</MudChip>
                                    }
                                </div>
                                <MudSpacer />
                                <MudTooltip Text='Total amount RFP' Arrow Placement='Placement.Bottom'>
                                    <MudChip Color="Color.Dark" Variant="Variant.Outlined" Size="Size.Small" DisableElevation>
                                        <small>â‚±</small>@(GlobalClass.voucher.VoucherRFP.Count() > 0 ? GlobalClass.voucher.RFPTotalAmountString:"0.00")
                                    </MudChip>
                                </MudTooltip>
                                <MudTooltip Text='Previous Vouchers'>
                                    <MudIconButton Class='btn-ios-d font12' OnClick="(()=>ShowPreviousDialog())" Icon='@Icons.Material.Filled.History' Color="Color.Tertiary" Variant="Variant.Filled" Size="Size.Small" DisableElevation />
                                </MudTooltip>
                            </div>
                        </div>
                        <div class="voucher-desc d-flex align-center pa-2 gap-2">
                            <MudText Class='txt-uppercase font-bold font10'>Description:</MudText>
                            <MudTextField Class='txtfield-overflow-ellipsis font14-txtfield txt-top-0' @bind-Value='GlobalClass.voucher.Description' />
                        </div>
                        <div class="voucher-remarks d-flex align-center pa-2 gap-2">
                            <MudText Class='txt-uppercase font-bold font10'>Remarks:</MudText>
                            <MudTextField Class='txtfield-overflow-ellipsis font14-txtfield txt-top-0' @bind-Value='GlobalClass.voucher.Remarks' />
                        </div>
                        <div class="voucher-details d-flex rounded-br rounded-bl overflow-hidden">
                            <div class='d-flex flex-1 flex-column transition-05s-ease'>
                                <div class="vou-entry-detail">
                                    <div class="vouentrydetail-body">
                                        <MudTable Class='table-style-1 mudtoolbar-bg-F4F5FB table-bottom-border sm-tbar-gutter' Items='GlobalClass.voucher.VoucherDetails'
                                            RowEditCommit='( (object model) => ComputeGrossIncome())' Loading='isVDetailLoading'
                                            Bordered Dense Elevation='0' FixedHeader FixedFooter CustomFooter Hover Square Height='calc(100vh - 425px)'>
                                            <ToolBarContent>
                                                <div class='d-flex align-center gap-2'>
                                                    <MudText Class='txt-uppercase font-bold font12'>Voucher Detail :</MudText>
                                                    <MudText Class='txt-uppercase font-bold font10'>
                                                        @GlobalClass.voucher.VoucherDetails.Count()
                                                        @(GlobalClass.voucher.VoucherDetails.Count() == 1 ? "item" : "items")
                                                    </MudText>
                                                </div>
                                                <MudSpacer />
                                                @foreach (var item in GlobalClass.voucher.VoucherDetails)
                                                {
                                                    if (item.ExpenseId == 0 || item.DivisionId == 0 || item.ProjectId == 0)
                                                    {
                                                        <MudText Class='font12 font-bold txt-uppercase' Color='Color.Error'>
                                                        Fill in details
                                                        </MudText>
                                                        break;
                                                    }
                                                }
                                                <MudSpacer />
                                                <MudTooltip Text='Add Detail'>
                                                    <MudButton OnClick='(()=>AddNew(false))' StartIcon="@Icons.Material.Filled.AddCircle" aria-label="add" 
                                                    Size='Size.Small' Variant='Variant.Text' DisableElevation Color='Color.Info'>
                                                        <small>Detail</small>
                                                    </MudButton>
                                                </MudTooltip>
                                                <MudTooltip Text='Reset Detail' Arrow Placement='Placement.Top'>
                                                    <MudButton OnClick='(()=>ResetVoucherTable())' StartIcon="@Icons.Material.Filled.Refresh" aria-label="reset" 
                                                    Size='Size.Small' Variant='Variant.Text' DisableElevation Color='Color.Warning'>
                                                        <small>Reset</small>
                                                    </MudButton>
                                                </MudTooltip>
                                                <MudDivider Vertical />
                                                <MudToggleIconButton Class='mx-1' @bind-Toggled="isSideBarExpanded" Size='Size.Small' ToggledSize='Size.Small'
                                                    Icon="@Icons.Material.Filled.ToggleOff" Color="@Color.Tertiary" Title="Expand Details"
                                                    ToggledIcon="@Icons.Material.Filled.ToggleOn" ToggledColor="@Color.Info" ToggledTitle="Collapse Details"/>
                                            </ToolBarContent>
                                            <ColGroup>
                                                <col style='width:20px' />
                                                <col />
                                                <col />
                                                <col />
                                                <col />
                                                <col />
                                                <col />
                                                <col style='width:80px'/>
                                                <col style='width:1%'/>
                                                <col style='width:1%'/>
                                                <col style='width:120px'/>
                                            </ColGroup>
                                            <HeaderContent>
                                                <MudTh Class='customheader-6'></MudTh>
                                                <MudTh Class='customheader-6'>Expense</MudTh>
                                                <MudTh Class='customheader-6'>Charge</MudTh>
                                                <MudTh Class='customheader-6'>Division</MudTh>
                                                <MudTh Class='customheader-6'>Sub Ledger</MudTh>
                                                <MudTh Class='customheader-6'>SOW</MudTh>
                                                <MudTh Class='customheader-6'>Description</MudTh>
                                                <MudTh Class='customheader-6'>Invoice</MudTh>
                                                <MudTh Class='customheader-6 text-center'>Exclude</MudTh>
                                                <MudTh Class='customheader-6 text-center'>OR</MudTh>
                                                <MudTh Class='customheader-6 text-right'>Amount</MudTh>
                                            </HeaderContent>
                                            <RowTemplate>
                                                <MudTd Class='pa-2 text-center' DataLabel='Action'>
                                                    <MudTooltip Text='Remove Detail' Arror Placement='Placement.Bottom'>
                                                        <MudIconButton OnClick='(() => RemoveRFP(context))' Icon='@Icons.Material.Filled.RemoveCircle' Color='Color.Error' Size='Size.Small' />
                                                    </MudTooltip>
                                                </MudTd>
                                                <MudTd Class='pa-2' DataLabel='Expense'>
                                                    <div class='dynamic-div-1'>
                                                        <small>@context.ExpenseName</small>
                                                    </div>
                                                </MudTd>
                                                <MudTd Class='pa-2' DataLabel='Charge'>
                                                    <div class='dynamic-div-1'>
                                                        <small>@context.ProjectName</small>
                                                    </div>
                                                </MudTd>
                                                <MudTd Class='pa-2' DataLabel='Devision'>
                                                    <div class='dynamic-div-1'>
                                                        <small>@Extensions.DivisionShorcutName(context.DivisionId)</small>
                                                    </div>
                                                </MudTd>
                                                @if(GlobalClass.voucher.WithSubLedger && context.isLabor)
                                                {
                                                    <MudTd Class='pa-2' DataLabel='Sub Ledger'>
                                                        <div class='dynamic-div-1'>
                                                            <small>@context.selSubConProject.SubContractorName</small>
                                                        </div>
                                                    </MudTd>
                                                    <MudTd Class='pa-2' DataLabel='Scope of Work'>
                                                        <div class='dynamic-div-1'>
                                                            <small>@context.selSOW.ScopeOfWork</small>
                                                        </div>
                                                    </MudTd>
                                                }
                                                else
                                                {
                                                    <MudTd Class='pa-2' DataLabel='Sub Ledger'>
                                                        <div class='dynamic-div-1'>
                                                            <small>@context.selProjSubLedger.ProjectName</small>
                                                        </div>
                                                    </MudTd>
                                                    <MudTd Class='pa-2' DataLabel='Scope of Work'>
                                                        <div class='dynamic-div-1'>
                                                            <small>@context.selSOW.ScopeOfWork</small>
                                                        </div>
                                                    </MudTd>
                                                }
                                                <MudTd Class='pa-2' DataLabel='Description'>
                                                    <div class='dynamic-div-1'>
                                                        <small>@context.Description</small>
                                                    </div>
                                                </MudTd>
                                                <MudTd Class='pa-2' DataLabel='InvoiceNo'>
                                                    <div class='dynamic-div-1'>
                                                        <small>@context.InvoiceNo</small>
                                                    </div>
                                                </MudTd>
                                                <MudTd Class='pa-2' DataLabel='Is Excluded'>
                                                    <MudCheckBox T="bool" @bind-Checked="@context.IsExcluded" Size='Size.Small'></MudCheckBox>
                                                </MudTd>
                                                <MudTd Class='pa-2' DataLabel='Has OR'>
                                                    <MudCheckBox T="bool" @bind-Checked="@context.HasOR" Size='Size.Small'></MudCheckBox>
                                                </MudTd>
                                                <MudTd  DataLabel='Amount'>
                                                    <div class='tooltipw100'>
                                                        <MudTooltip Class='flex-1' Text='@(Extensions.GetEnumDescription(Enums.BankCurrency.PhilippinePeso) + " " + context.Amount.ToString("N2"))' 
                                                            Arrow Placement='Placement.Top' Color='@(context.Amount > 0 ? Color.Success:Color.Error)'>
                                                            <div class='colamt-container @(context.Amount > 0 ? "color-green":"color-red")'>
                                                                <p>
                                                                    @(Extensions.GetEnumDescription(Enums.BankCurrency.PhilippinePeso) + " " + @context.Amount.ToString("N2"))
                                                                </p>
                                                            </div>
                                                        </MudTooltip>
                                                    </div>
                                                </MudTd>
                                            </RowTemplate>
                                            <RowEditingTemplate>
                                                <MudTd DataLabe='Action'></MudTd>
                                                <MudTd Class='pa-2' DataLabel='Expense'>
                                                    <div class='autocomplete'>
                                                        <AutoCompleteExpenseLineSearch
                                                            ExpenseLine='context.selExp'
                                                            OnExpenseLineValueChanged='((ExpenseLineModel expense) => 
                                                            { 
                                                                context.selExp = expense;
                                                                context.ExpenseId = expense.Id;
                                                                context.ExpenseName = expense.ExpenseName; 
                                                            })'
                                                            />
                                                    </div>
                                                </MudTd>
                                                <MudTd Class='pa-2' DataLabel='Charge'>
                                                    <div class='autocomplete'>
                                                        <AutoCompleteProjectSearch 
                                                            ProjectModel='context.selProj'
                                                            OnProjectValueChanged='( async (Project project)=>
                                                            {
                                                                await DetailSelectedProject(project,context);
                                                                context.selProj = project;
                                                                context.ProjectName = project.ProjectName;
                                                                context.ProjectId = project.ProjectId;
                                                                context.ProjectCategoryId = project.ProjectCategoryId;
                                                            })'/>
                                                    </div>
                                                </MudTd>
                                                <MudTd Class='pa-2' DataLabel='Division'>
                                                    <div class='autocomplete'>
                                                        <AutoCompleteDivisionSearch
                                                            Division='context.selDiv'
                                                            OnDivisionValueChanged='((DivisionModel division) => 
                                                            { 
                                                                context.selDiv = division;
                                                                context.DivisionId = division.Id;
                                                                context.DivisionName = division.divisionName; 
                                                            })'/>
                                                    </div>
                                                </MudTd>
                                                @if(GlobalClass.voucher.WithSubLedger && context.isLabor)
                                                {
                                                    <MudTd Class='pa-2' DataLabel='Charge'>
                                                        <div class="autocomplete">
                                                            <AutoCompleteScopeOfWorkSearch 
                                                                IsLabor='true'
                                                                ScopeOfWork='context.selSOW'
                                                                ListOfSubcontractorProject='context.selSubConProjectSOWList'
                                                                OnSOWValueChanged='( (SubContractorProjectModel SubConProject)=>
                                                                {
                                                                    SelectedSubLedger(SubConProject,context);
                                                                    context.selSubConProject = SubConProject;
                                                                    context.SubLedgerName = SubConProject.SubContractorName;
                                                                    context.SubLedgerId = SubConProject.SubContractorId;
                                                                })'/>
                                                        </div>
                                                    </MudTd>
                                                    <MudTd Class='pa-2' DataLabel='Charge'>
                                                        <div class="autocomplete">
                                                            <AutoCompleteScopeOfWorkSearch
                                                                ScopeOfWork='context.selSOW'
                                                                ListOfSubcontractorProject='context.selSubConProjectSOWList'
                                                                OnSOWValueChanged='( (SubContractorProjectModel sow)=>
                                                                {
                                                                    SelectedSOW(sow,context); 
                                                                    context.selSOW = sow;
                                                                    context.ScopeOfWorkId = sow.ScopeOfWorkId;
                                                                    context.ScopeOfWorkName = sow.ScopeOfWork;
                                                                })'/>
                                                        </div>
                                                    </MudTd>
                                                } 
                                                else 
                                                {
                                                    <MudTd Class='pa-2' DataLabel='Charge'>
                                                        <div class="autocomplete">
                                                        <AutoCompleteProjectSearch 
                                                            ProjectModel='context.selProjSubLedger'
                                                            OnProjectValueChanged='( async (Project project)=>
                                                            {
                                                                await DetailSelectedProject(project,context);
                                                                context.selProjSubLedger = project;
                                                                context.SubLedgerName = project.ProjectName;
                                                                context.SubLedgerId = project.ProjectId;
                                                                context.SubLedgerCategoryId = project.ProjectCategoryId;
                                                            })'/>
                                                        </div>
                                                    </MudTd>
                                                    <MudTd Class='pa-2' DataLabel='Charge'>
                                                        <div class="autocomplete">
                                                        <AutoCompleteScopeOfWorkSearch 
                                                            ScopeOfWork='context.selSOW'
                                                            ListOfSubcontractorProject='context.selSubConProjectSOWList'
                                                            OnSOWValueChanged='( (SubContractorProjectModel sow)=>
                                                            {
                                                                SelectedSOW(sow,context); 
                                                                context.selSOW = sow;
                                                                context.ScopeOfWorkId = sow.ScopeOfWorkId;
                                                                context.ScopeOfWorkName = sow.ScopeOfWork;
                                                            })'/>
                                                        </div>
                                                    </MudTd>
                                                }
                                                <MudTd Class='pa-2' DataLabel='Description'>
                                                    <MudTextField Class='txtfield-overflow-ellipsis font12-txtfield' @bind-Value='context.Description'
                                                    Margin='Margin.Dense' Variant='Variant.Outlined' />
                                                </MudTd>
                                                <MudTd Class='pa-2' DataLabel='Invoice'>
                                                    <MudTextField Class='txtfield-overflow-ellipsis font12-txtfield' @bind-Value='context.InvoiceNo'
                                                    Margin='Margin.Dense' Variant='Variant.Outlined' />
                                                </MudTd>
                                                <MudTd Class='pa-2 text-center' DataLabel='Action'>
                                                    <MudCheckBox T="bool" Checked="@context.IsExcluded" CheckedChanged="@((bool b)=>{ExcludeCheckState(context,context.IsExcluded);context.IsExcluded = !context.IsExcluded;})" Size='Size.Small'></MudCheckBox>
                                                </MudTd>
                                                <MudTd Class='pa-2 text-center' DataLabel='Action'>
                                                    <MudCheckBox @bind-Checked="@context.HasOR" Size='Size.Small'></MudCheckBox>
                                                </MudTd>
                                                <MudTd Class='pa-2' DataLabel='Amount'>
                                                    <div class='d-flex align-center pt-2 pr-2 gap-2 min-width75px'>
                                                        @if(context.IsEWT)
                                                        {
                                                            <MudText Class='font-bold font12' Color='Color.Error'>
                                                                    @Extensions.GetEnumDescription(Enums.BankCurrency.PhilippinePeso)
                                                            </MudText>
                                                            <MudSpacer/>
                                                            <MudText class="font12 font-bold" Color="Color.Error">@(-Math.Abs(GlobalClass.voucher.WithholdingTax))</MudText>
                                                        } 
                                                        else 
                                                        {
                                                            if (context.Amount <= 0)
                                                            {
                                                                <MudText Class='font-bold font12' Color='Color.Error' >
                                                                    @Extensions.GetEnumDescription(Enums.BankCurrency.PhilippinePeso)
                                                                </MudText>
                                                                <MudNumericField OnBlur='(()=>ComputeGrossIncome())' Class='txtfield-overflow-ellipsis txt-top-0 tfield-color-red txtfield-right font12-txtfield'
                                                                @bind-Value='context.Amount' Margin='Margin.None' Format='N2' HideSpinButtons Variant='Variant.Text' ></MudNumericField>
                                                            } else {
                                                                <MudText Class='font-bold font12 color-green'>
                                                                    @Extensions.GetEnumDescription(Enums.BankCurrency.PhilippinePeso)
                                                                </MudText>
                                                                <MudNumericField OnBlur='(()=>ComputeGrossIncome())' Class='txtfield-overflow-ellipsis txt-top-0 tfield-color-green txtfield-right font12-txtfield'
                                                                @bind-Value='context.Amount' Margin='Margin.None' Format='N2' HideSpinButtons Variant='Variant.Text'></MudNumericField>
                                                            }
                                                        }
                                                    </div>
                                                </MudTd>
                                            </RowEditingTemplate>
                                            <NoRecordsContent>
                                                <MudText Class='txt-uppercase font-bold font12' Color='Color.Error'>No details added</MudText>
                                            </NoRecordsContent>
                                        </MudTable>
                                    </div>
                                    <div class="vouentrydetail-footer">
                                        <VoucherAmtInfoComponent
                                            TagCheckChanged = '( (args)=> TagsCheckChanged( (bool) args.Item1, (Enums.RouteTag) args.Item2) )'
                                            RouteTags='@GlobalClass.voucher.VoucherRouteTags'
                                            withSubLedger='@GlobalClass.voucher.WithSubLedger'
                                            voucherTotalAmt='@GlobalClass.voucher.TotalAmount'
                                            voucherGrossIncome='@GlobalClass.voucher.GrossIncome'
                                            voucherVatInput='@GlobalClass.voucher.VatInput'
                                            voucherVatNet='@GlobalClass.voucher.VatNet' 
                                            voucherEWTValue='@GlobalClass.voucher.EWTValue'
                                            voucherWHTTaxAmt='@GlobalClass.voucher.WithholdingTax'
                                            voucherVatValue='@GlobalClass.voucher.VATValue'
                                            voucherTotalExcl='@GlobalClass.voucher.TotalExcluded' />
                                    </div>
                                </div>
                            </div>
                            <div class="d-flex flex-column border-thin-left transition-05s-ease width260px" style='@(isSideBarExpanded ? "max-width:260px" : "max-width:57px")'>
                                <MudCardHeader Class='d-flex align-center justify-center pa-2 border-thin-bottom bgc-F4F5FB height2-05rem cursor-pointer'
                                    @onclick='(() => isSigExpanded = !isSigExpanded)'>
                                    <div class='d-flex align-center transition-05s-ease overflow-hidden @(isSideBarExpanded ? "fade-in flex-1" : "fade-out")' style='@(isSideBarExpanded ? "max-width:500px" : "max-width:0px")'>
                                        <MudText Class='txt-uppercase font12 font-bold'>Signatories</MudText>
                                    </div>
                                    <MudIconButton OnClick='(() => isSigExpanded = !isSigExpanded)' Icon='@Icons.Material.Filled.PersonPin' Size='Size.Small' Color='Color.Dark'/>
                                </MudCardHeader>
                                <div class='transition-05s-ease @(isSideBarExpanded ? "":"overflow-hidden") @(isSigExpanded ? "fade-in":"overflow-hidden")' style='@(isSigExpanded ? "max-height:245px" : "max-height:0px")'>
                                    <MudCardContent Class='d-flex flex-column pa-2 gap-2'>
                                        <div class='d-flex align-center gap-2'>
                                            @if(preparedBy.Picture.Count() == 0) {
                                                <MudAvatar Class='mb-1' Image='images/fglogo/fgci1-gs.png' Size='Size.Medium' />
                                            } else {
                                                <MudAvatar Class='mb-1' Image='@($"data:image/png;base64, {Convert.ToBase64String(preparedBy.Picture)}")' Size='Size.Medium' />
                                            }
                                            <div class='d-flex flex-grow-1 flex-column blzrthead-disabled-minheight15'>
                                                <BlazoredTypeahead @bind-Value='preparedBy' SearchMethod='LoadEmployee' DisableClear placeholder='Prepared By'
                                                    Debounce='500' Disabled>
                                                    <SelectedTemplate>
                                                        <div class='overflow-hidden wspace-nowrap'>
                                                            @if (context.EmployeeId != 0) {
                                                                <MudText Class='font12'>@context.EmployeeName</MudText>
                                                            } else if (reqPrep) {
                                                                <MudText Class='font12 font-bold txt-uppercase' Color='Color.Error'>Required</MudText>
                                                            } else {
                                                                <MudText Class='font12'> - </MudText>
                                                            }
                                                        </div>
                                                    </SelectedTemplate>
                                                    <ResultTemplate>
                                                        <div class='ddavatar'>
                                                            <MudAvatar Image='@($"data:image/png;base64, {Convert.ToBase64String(@context.Picture)}")' Size='Size.Small'/>
                                                            @context.EmployeeName | @context.Designation
                                                        </div>
                                                    </ResultTemplate>
                                                </BlazoredTypeahead>
                                                <MudText Class='d-flex wspace-nowrap txt-uppercase font-bold font10 pl-1'>
                                                    Prepared By
                                                    <MudText Class='font10 font-bold' Color='Color.Error'>*</MudText>
                                                </MudText>
                                            </div>
                                        </div>
                                        <div class='d-flex align-center gap-2'>
                                            @if(verifiedBy.Picture.Count() == 0){
                                                <MudAvatar Class='mb-1' Image='images/fglogo/fgci1-gs.png' Size='Size.Medium' />
                                            } else {
                                                <MudAvatar Image='@($"data:image/png;base64, {Convert.ToBase64String(verifiedBy.Picture)}")' Size='Size.Medium' />
                                            }
                                            <div class='d-flex flex-grow-1 flex-column'>
                                                <BlazoredTypeahead SearchMethod='LoadEmployee' DisableClear
                                                @bind-Value='verifiedBy' Debounce='500' placeholder="Verified By">
                                                    <SelectedTemplate>
                                                        <div class='overflow-hidden wspace-nowrap'>
                                                            @if (verifiedBy.EmployeeId != 0) {
                                                                <MudText Class='font12'>@verifiedBy.EmployeeName</MudText>
                                                            } else if (reqVer) {
                                                                <MudText Class='font12 font-bold txt-uppercase' Color='Color.Error'>
                                                                    Required
                                                                </MudText>
                                                            } else {
                                                                <MudText Class='font12'> - </MudText>
                                                            }
                                                        </div>
                                                    </SelectedTemplate>
                                                    <ResultTemplate>
                                                        <div class='ddavatar'>
                                                            <MudAvatar Image='@($"data:image/png;base64, {Convert.ToBase64String(@context.Picture)}")' Size='Size.Small'/>
                                                            @context.EmployeeName | @context.Designation
                                                        </div>
                                                    </ResultTemplate>
                                                </BlazoredTypeahead>
                                                <MudText Class='d-flex wspace-nowrap txt-uppercase font-bold font10 pl-1'>
                                                    Verified By
                                                    <MudText Class='font10 font-bold' Color='Color.Error'>*</MudText>
                                                </MudText>
                                            </div>
                                        </div>
                                        <div class='d-flex align-center gap-2'>
                                            @if(approvedBy.Picture.Count() == 0) {
                                                <MudAvatar Class='mb-1' Image='images/fglogo/fgci1-gs.png' Size='Size.Medium' />
                                            } else {
                                                <MudAvatar Image='@($"data:image/png;base64, {Convert.ToBase64String(approvedBy.Picture)}")' Size='Size.Medium' />
                                            }
                                            <div class='d-flex flex-grow-1 flex-column'>
                                                <BlazoredTypeahead SearchMethod='LoadEmployee' DisableClear placeholder='Approved By'
                                                @bind-Value='approvedBy' Debounce='500'>
                                                    <SelectedTemplate>
                                                        <div class='overflow-hidden wspace-nowrap'>
                                                            @if (approvedBy.EmployeeId != 0) {
                                                                <MudText Class='font12'>@approvedBy.EmployeeName</MudText>
                                                            } else if(reqApp) {
                                                                <MudText Class='font12 font-bold txt-uppercase' Color='Color.Error'>Required</MudText>
                                                            } else {
                                                                <MudText Class='font12'> - </MudText>
                                                            }
                                                        </div>
                                                    </SelectedTemplate>
                                                    <ResultTemplate>
                                                        <div class='ddavatar'>
                                                            <MudAvatar Image='@($"data:image/png;base64, {Convert.ToBase64String(@context.Picture)}")' Size='Size.Small' />
                                                            @context.EmployeeName | @context.Designation
                                                        </div>
                                                    </ResultTemplate>
                                                </BlazoredTypeahead>
                                                <MudText Class='d-flex wspace-nowrap txt-uppercase font-bold font10 pl-1'>
                                                    Approved By
                                                    <MudText Class='font10 font-bold' Color='Color.Error'>*</MudText>
                                                </MudText>
                                            </div>
                                        </div>
                                    </MudCardContent>
                                </div>
                                <MudDivider />
                                <MudCardHeader Class='d-flex align-center justify-center pa-2 border-thin-bottom bgc-F4F5FB height2-05rem cursor-pointer'
                                    @onclick='(() => isStatusExpanded = !isStatusExpanded)'>
                                    <div class='d-flex align-center transition-05s-ease overflow-hidden @(isSideBarExpanded ? "fade-in flex-1" : "fade-out")' style='@(isSideBarExpanded ? "max-width:500px" : "max-width:0px")'>
                                        <MudText Class='txt-uppercase font12 font-bold'>Status</MudText>
                                    </div>
                                    <MudIconButton OnClick='(() => isStatusExpanded = !isStatusExpanded)' Icon='@Icons.Material.Filled.FactCheck' Size='Size.Small' Color='Color.Dark'/>
                                </MudCardHeader>
                                <div class='transition-05s-ease @(isSideBarExpanded ? "":"overflow-hidden") @(isStatusExpanded ? "fade-in":"overflow-hidden")' style='@(isStatusExpanded ? "max-height:245px" : "max-height:0px")'>
                                    <MudCardContent Class='d-flex flex-column align-center pa-2 overflow-hidden'>
                                        <div class='d-flex align-center flex-1 @(isSideBarExpanded ? "fade-in" : "fade-out")'>
                                            <AcctgStatus
                                            keywordStr='@(currActionMode == Enums.ActionMode.Create ? "v-generated":string.Empty)'
                                            acctgStatusId='@(GlobalClass.voucher.AccountingStatusId != 0 ? GlobalClass.voucher.AccountingStatusId:0)'/>
                                            @* <MudChip Class='chip-radius-5 font-bold font12' Size='Size.Medium' Variant='Variant.Outlined' 
                                                Style="@Extensions.BorderColor(GlobalClass.voucher.AccountingStatusId)">
                                                @GlobalClass.voucher.StatusName
                                            </MudChip> *@
                                        </div>
                                    </MudCardContent>
                                </div>
                                <MudSpacer />
                                <MudCardActions Class='d-flex gap-2 border-thin-top'>
                                    <div class='d-flex align-center flex-1 @(isSideBarExpanded ? "fade-in" : "fade-out")'>
                                        <MudSpacer />
                                        <MudButton Class='btn-ios-d font12' OnClick='(()=> { DisposePrintMapped();navigationManager.NavigateTo($"/voucher/list"); })' Variant='Variant.Text' Size='Size.Medium' DisableElevation>Cancel</MudButton>
                                        <MudButton Class='btn-ios-d font12' OnClick='(()=> SaveVoucher())' Variant="Variant.Filled" Color='@(currActionMode == Enums.ActionMode.Update ? Color.Info : Color.Primary)' Size='Size.Medium' DisableElevation Disabled='_processing'>
                                            @if (_processing) {
                                                <MudProgressCircular Class="progsize-21" Size="Size.Small" Indeterminate="true"/>
                                                <MudText Class='font12 fweight500 pl-2'>GENERATING</MudText>
                                            } else {
                                                <MudText Class='font12 fweight500'>
                                                    @(currActionMode == Enums.ActionMode.Update ? "UPDATE" : "GENERATE")
                                                </MudText>
                                            }
                                        </MudButton>
                                    </div>
                                </MudCardActions>
                            </div>
                        </div>
                    </div>
                </MudCardContent>
            </MudPaper>
        </MudContainer>
    }
</div>

@code{
    #region Properties
    private List<VoucherDetailModel> voucherDetails = new List<VoucherDetailModel>();
    private DivisionModel selectedDivision = new DivisionModel();
    private Project selectedProject = new Project();
    private ExpenseLineModel selectedExpLine = new ExpenseLineModel();
    private Project payee = new Project();
    private UserAccount preparedBy = new UserAccount(); private UserAccount verifiedBy = new UserAccount(); private UserAccount approvedBy = new UserAccount();
    private DateTime? voucherDate = DateTime.Now.Date;
    private bool dataFetched, openEditDrawer, reqProj, reqExp, reqDiv, reqDebt, reqCred, reqAmt, reqVer , reqApp, reqPrep, reqPayee, reqRFP, _processing,
    isSigExpanded = true, isSideBarExpanded = true, isStatusExpanded = true, isDisablePayee = true, isVDetailLoading;
    private byte[] preparedByImg= new byte[]{}, verifiedByImg = new byte[]{}, approvedByImg = new byte[]{};
    private VoucherDetailModel selectedVoucherDetailModel = new VoucherDetailModel();
    private string editDrawerMargin = string.Empty;
    private DateRange? voucherPeriod = new DateRange(DateTime.Now, DateTime.Now);
    private BlazoredTypeahead<Project, Project> projectTypeahead = new BlazoredTypeahead<Project, Project>();
    public static Enums.ActionMode currActionMode { get; set; }
    private int[] pageSize = new int[] {30, 50, 100, 500, 1000 };
    private BlazoredTypeahead<ExpenseLineModel, ExpenseLineModel> ExpenseLineRef = new();
    private BlazoredTypeahead<DivisionModel, DivisionModel> DivisionRef = new();
    private BlazoredTypeahead<Project, Project> PayeeRef = new();
    private MudDatePicker datePicker = new MudDatePicker();
    private MudDateRangePicker dateRangePeriod = new MudDateRangePicker();
    private List<VoucherRouteTagModel> originalTagList = new();//holds the orignal tags of voucher 
    private AccountingStatusModel currentStatus = new AccountingStatusModel();
        
    #endregion

    #region Methods

    protected override async Task OnInitializedAsync()
    {
        GlobalClass.pageTitle = "Voucher entry";
        while (GlobalClass.currentUserAccount == null)
            await Task.Delay(1);

        Task t = Task.WhenAll(InitializedComponent(),LoadRequesteForPayments());
        await t;
        if (t.Status == TaskStatus.RanToCompletion)
            CompletedFetch();
        if(GlobalClass.voucher.VoucherDetails.Count > 0)
             isDisablePayee = false;
    }
    private async Task LoadRequesteForPayments()
    {
        GlobalClassList.requestForPaymentsList = await  requrestForPaymentService.LoadRequestPayment(new FilterParameter(),GlobalClass.token);
    }
    async Task InitializedComponent()
    {
        await Task.Delay(1);
        navigationManager.LocationChanged += OnLocationChanged;
        if (GlobalClass.voucher == null || GlobalClass.voucher.Id == 0)
        {
            switch(GlobalClass.forPrintingOrSaveVoucher)
            {
                case null :
                    GlobalClass.voucher = new VoucherModel();
                    voucherDate = GlobalVariable.ServerTime;
                    GlobalClass.voucher.PreparedByName = GlobalClass.currentUserAccount.EmployeeName;
                    GlobalClass.voucher.PreparedById = GlobalClass.currentUserAccount.EmployeeId;
                    preparedBy = GlobalClass.currentUserAccount;
                    break;
                default :
                    await RemappedProperties();
                    Console.WriteLine("remap");    
                    break;
            }
        }
        else
        {
            await DisplayOtherProperties();    
        }
    } 

    void CompletedFetch()
    {
        dataFetched = true;
        Task.Run(StateHasChanged);
    }

    #region Remapped Properties
    async Task RemappedProperties()
    {
        GlobalClass.voucher.PeriodFrom = GlobalClass.forPrintingOrSaveVoucher.PeriodFrom;   
        GlobalClass.voucher.PeriodTo = GlobalClass.forPrintingOrSaveVoucher.PeriodTo;

        if(GlobalClass.voucher.PayeeId != 0)
        {
            //Remap payee
            payee.ProjectId = GlobalClass.forPrintingOrSaveVoucher.PayeeId;
            payee.ProjectName = GlobalClass.forPrintingOrSaveVoucher.PayeeName;
            payee.ProjectCategoryId = GlobalClass.forPrintingOrSaveVoucher.PayeeCategoryId;
        }
        else
            payee = new();
        //Remap Signatories
        preparedBy = GlobalClass.currentUserAccount;
        verifiedBy = await globalService.GetEmployeeById(GlobalClass.voucher.VerifiedById,GlobalClass.token);
        approvedBy = await globalService.GetEmployeeById(GlobalClass.voucher.ApprovedById,GlobalClass.token);

        GlobalClass.voucher.RFPTotalAmount = GlobalClass.voucher.VoucherRFP.Sum(x=>x.TotalAmount);
        GlobalClass.voucher.RFPTotalAmountString = GlobalClass.voucher.VoucherRFP.Sum(x=>x.TotalAmount).ToString("N2");
        ComputeGrossIncome();
    }
    #endregion

    #region Location Changed
    private void OnLocationChanged(object? sender, LocationChangedEventArgs args)
    {
        GlobalClass.voucher = new();
        preparedBy = GlobalClass.currentUserAccount;
        verifiedByImg = new byte[]{};
        approvedByImg = new byte[]{};
        Dispose();
    }


    public void Dispose()
    {
        navigationManager.LocationChanged -= OnLocationChanged;
    }
    #endregion

    #region Save Voucher
    private void SaveVoucher()
    {
        _processing = true;
        ComputeGrossIncome();
        if(ValidateEntry() && ValidateAmount())
        {
            GlobalClass.forPrintingOrSaveVoucher = MapProperties();
            _processing = false;
            //Sample from Cyrille to show report list of RFP
            GlobalClass.voucher.RFP = String.Join(",",GlobalClass.voucher.VoucherRFP.Select(x=>x.RFPControlNumber));
            navigationManager.NavigateTo($"/voucher/print");
        }
        else if(!ValidateAmount())
        {
            Extensions.ShowAlert("Gross amount should be lower than or equal to the voucher/s amount (P "+
            GlobalClass.voucher.VoucherRFP.Sum(x=>x.TotalAmount).ToString("N2")+")", Variant.Filled, snackbarService, Severity.Error);
        }
        else
            Extensions.ShowAlert("Cannot create voucher, Incomplete fields.", Variant.Filled, snackbarService, Severity.Error);
        _processing = false;
    }
    #endregion

    #region Add New Voucher Details
    private async Task AddNew(bool state)
    {
        if(GlobalClass.voucher.VoucherRFP.Count > 0)
        {
            var temp = 1;
            //New code map expense with ewt
            var VoucherDetail = new VoucherDetailModel();
            VoucherDetail.RFPDetailType = Enums.RFPDetailTypeId.None;
            VoucherDetail.selProj = (await LoadCharging("None")).FirstOrDefault()?? new();
            VoucherDetail.selProjSubLedger = VoucherDetail.selProj;
            VoucherDetail.selSubConProject =  new SubContractorProjectModel()
            {
                SubContractorName = VoucherDetail.selProj.ProjectName,
                SubContactorCategoryId = VoucherDetail.selProj.ProjectCategoryId,
                SubContractorId = VoucherDetail.selProj.ProjectId,
            };
            VoucherDetail.selSOW = (GlobalClassList.scopeOfWork.Where(x=>x.ScopeName.Contains("None",StringComparison.InvariantCultureIgnoreCase)).Select(x=>new SubContractorProjectModel(){
                ScopeOfWork = x.ScopeName,
                ScopeOfWorkId = x.Id,
            })).FirstOrDefault()?? new();
            if(state)
            {
                VoucherDetail.selExp = GlobalClassList.expenseLineList.Find(x=>x.IsEWT == true) ?? new();
                VoucherDetail.selProj = (await globalService.LoadPayees(new FilterParameter(){IsPayee=true,PayeeName="None"},GlobalClass.token)).Find(x=>x.ProjectName =="None")?? new();
                VoucherDetail.selDiv = GlobalClassList.divisionList.Find(x=>x.divisionName == "None")?? new();
                VoucherDetail.Amount = -Math.Abs(GlobalClass.voucher.WithholdingTax);
                VoucherDetail.IsEWT = true;
                GlobalClass.voucher.VoucherDetails.Insert(GlobalClass.voucher.VoucherDetails.Count,VoucherDetail);//Last row if EWT

                VoucherDetail.ExpenseName = VoucherDetail.selExp.ExpenseName;
                VoucherDetail.ExpenseId = VoucherDetail.selExp.Id;
                VoucherDetail.ProjectName = VoucherDetail.selProj.ProjectName;
                VoucherDetail.ProjectId = VoucherDetail.selProj.ProjectId;
                VoucherDetail.ProjectCategoryId = VoucherDetail.selProj.ProjectCategoryId;
                VoucherDetail.DivisionName = VoucherDetail.selDiv.divisionName;
                VoucherDetail.DivisionId = VoucherDetail.selDiv.Id;
            }
            else
                if(GlobalClass.voucher.VoucherDetails.Count == 0)
                    GlobalClass.voucher.VoucherDetails.Add(VoucherDetail);//Add if no details {0} row
                else if(GlobalClass.voucher.VoucherDetails.Any(x=>x.isLabor))
                    GlobalClass.voucher.VoucherDetails.Insert(GlobalClass.voucher.VoucherDetails.Where(x=>x.isLabor).ToList().Count,VoucherDetail);//Insert before after labor
                else
                    GlobalClass.voucher.VoucherDetails.Insert(GlobalClass.voucher.VoucherDetails.Count,VoucherDetail);//Insert before EWT row
            
            foreach (var item in GlobalClass.voucher.VoucherDetails)
            {
                item.TemporaryId = temp++;
            }
        
            ComputeGrossIncome();
            StateHasChanged();
        } else
        {
            Extensions.ShowAlert("No RFP selected", Variant.Filled, snackbarService, Severity.Error);
        }
    }

    #endregion

    #region DisplayOtherProperties
    private async Task DisplayOtherProperties()
    {
        List<Project> listOfProjects = (await LoadCharging("")).ToList();
        _processing = true;
        currActionMode = Enums.ActionMode.Update;
        voucherDate = GlobalClass.voucher.VoucherDate;

        payee.ProjectId = GlobalClass.voucher.PayeeId;
        payee.ProjectCategoryId = GlobalClass.voucher.PayeeCategoryId;
        payee.ProjectName = GlobalClass.voucher.PayeeName;

        if (GlobalClass.voucher.PreparedById == 0) {
            preparedBy = GlobalClass.currentUserAccount;
        } else {
            preparedBy.EmployeeId = GlobalClass.voucher.PreparedById;
            preparedBy.EmployeeName = GlobalClass.voucher.PreparedByName;
        }

        voucherPeriod = new DateRange(GlobalClass.voucher.PeriodFrom, GlobalClass.voucher.PeriodTo);

        //Avoid binding to get orignal list of tags
        GlobalClass.voucher.VoucherRouteTags.ForEach ( tags => 
        {
            originalTagList.Add(tags);
        });

        preparedBy = await GetEmployeeDetails(GlobalClass.voucher.PreparedById);
        verifiedBy = await GetEmployeeDetails(GlobalClass.voucher.VerifiedById);
        approvedBy = await GetEmployeeDetails(GlobalClass.voucher.ApprovedById);
        GlobalClass.voucher.RFPTotalAmountString = GlobalClass.voucher.VoucherRFP.Sum(x=>x.TotalAmount).ToString("N2");
        if(GlobalClass.voucher.Id == 0 && !GlobalClass.voucher.VoucherDetails.Any(x=>x.ProjectName=="None" || x.DivisionName == "None"))
            await GetVATandEWT(payee);
        GlobalClass.voucher.RFPTotalAmount = GlobalClass.voucher.VoucherRFP.Sum(x=>x.TotalAmount);
        GlobalClass.voucher.RFPTotalAmountString = GlobalClass.voucher.VoucherRFP.Sum(x=>x.TotalAmount).ToString("N2");
        var RFP = await requrestForPaymentService.LoadRequestPayment(new FilterParameter(), GlobalClass.token);

        List<Project> projects = await globalService.LoadPayees(new FilterParameter(){IsPayee=true,PayeeName="",isActive=false},GlobalClass.token);
        List<RequestForPaymentModel> currentRFPList = new List<RequestForPaymentModel>();
        GlobalClass.voucher.VoucherRFP.ForEach(rf=> {
            currentRFPList.Add(RFP.Where(x=>x.Id == rf.RequestForPaymentId).FirstOrDefault()?? new());
        });
        currentRFPList.ForEach(x=>{
            GlobalClass.voucher.VoucherRFP.ForEach(vDetails=>
            {
                if(x.Id == vDetails.RequestForPaymentId)
                {
                    vDetails.rfpType = x.RFPDetailTypeId;
                }
            });
        });
        if(GlobalClass.voucher.VoucherRFP.Any(x=>x.rfpType==Enums.RFPDetailTypeId.Labor))
        {
            GlobalClass.voucher.VoucherDetails.ForEach(async(vDetails)=>{
                if(vDetails.isLabor)
                {
                    vDetails.selSubConProject = (await globalService.VoucherDetailsSubCon(vDetails.ProjectId,GlobalClass.token)).FirstOrDefault()?? new();
                    vDetails.selSOW =  (await globalService.VoucherDetailsSubCon(vDetails.selSubConProject.ProjectId,GlobalClass.token))
                                    .Where(x=>x.ScopeOfWorkId == vDetails.ScopeOfWorkId).FirstOrDefault()?? new();
                    vDetails.selSubConProjectSOWList = await globalService.VoucherDetailsSubCon(vDetails.ProjectId,GlobalClass.token);
                    vDetails.selProj = listOfProjects.Where( p => p.ProjectId == vDetails.ProjectId && p.ProjectCategoryId == vDetails.ProjectCategoryId).FirstOrDefault()?? new();
                } else {
                    //if subledgerName is not null  (await LoadCharging(vDetails.SubLedgerName)).FirstOrDefault()?? new();
                    vDetails.selProjSubLedger = listOfProjects.Where( p => p.ProjectId == vDetails.SubLedgerId && p.ProjectCategoryId == vDetails.SubLedgerCategoryId).FirstOrDefault()?? new();
                    vDetails.selSubConProjectSOWList = await globalService.VoucherDetailsSubCon(vDetails.SubLedgerId,GlobalClass.token);
                    vDetails.selSOW = vDetails.selSubConProjectSOWList.FirstOrDefault()?? (GlobalClassList.scopeOfWork
                                        .Where(x=>x.ScopeName
                                        .Contains("None",StringComparison.InvariantCultureIgnoreCase))
                                        .Select(x=>new SubContractorProjectModel()
                                        {
                                            ScopeOfWork = x.ScopeName,
                                            ScopeOfWorkId = x.Id,
                                        }))
                                        .FirstOrDefault()?? new();
                    vDetails.selProj = listOfProjects.Where( p => p.ProjectId == vDetails.SubLedgerId && p.ProjectCategoryId == vDetails.SubLedgerCategoryId).FirstOrDefault()?? new();
                }
                vDetails.selExp = GlobalClassList.expenseLineList.Where( exp => exp.Id == vDetails.ExpenseId).FirstOrDefault()?? new();
                vDetails.selDiv = GlobalClassList.divisionList.Where( div => div.Id == vDetails.DivisionId).FirstOrDefault()?? new();
                vDetails.SubLedgerId = vDetails.selSubConProject.SubContractorId;
                vDetails.SubLedgerCategoryId = Enums.ProjectCategory.SubCon;//Temporary
                vDetails.SubLedgerName = vDetails.selSubConProject.SubContractorName;
                //Set subdledger for saving
                vDetails.ScopeOfWorkId = vDetails.selSOW.ScopeOfWorkId;
                vDetails.ScopeOfWorkName = vDetails.selSOW.ScopeOfWork;


                StateHasChanged();
            });
        }
        else 
        {
            GlobalClass.voucher.VoucherDetails.ForEach(async(x)=>{
                x.selProjSubLedger = (await LoadCharging("None")).FirstOrDefault()?? new();
                x.selSubConProject = (projects.Where(x=>x.ProjectName.Contains("None",StringComparison.InvariantCultureIgnoreCase)).Select(p=>new SubContractorProjectModel()
                {
                SubContractorName = p.SubLedgerName,
                SubContractorId = p.SubLedgerId,
                })).FirstOrDefault()?? new();
                x.selSOW = (GlobalClassList.scopeOfWork.Where(x=>x.ScopeName.Contains("None",StringComparison.InvariantCultureIgnoreCase)).Select(x=>new SubContractorProjectModel(){
                    ScopeOfWork = x.ScopeName,
                    ScopeOfWorkId = x.Id,
                })).FirstOrDefault()?? new();
                x.selSubConProjectSOWList = await globalService.VoucherDetailsSubCon(x.ProjectId,GlobalClass.token);
                //Set subledger for saving
                x.SubLedgerId = x.selSubConProject.SubContractorId;
                x.SubLedgerCategoryId = x.SubLedgerCategoryId;
                x.SubLedgerName = x.selSubConProject.SubContractorName;
                //Set sow for saving
                x.ScopeOfWorkId = x.selSOW.ScopeOfWorkId;
                x.ScopeOfWorkName = x.selSOW.ScopeOfWork;
                    
                x.isLabor = false;
                x.RFPDetailType = (GlobalClass.voucher.VoucherRFP
                                    .Where(rfp=>rfp.VoucherId == x.VoucherId)
                                    .Select(type=>type.rfpType)
                                    .FirstOrDefault());
                //Mapping of autocomplete components
                x.selExp = GlobalClassList.expenseLineList.Where( exp => exp.Id == x.ExpenseId).FirstOrDefault()?? new();
                x.selProj = (await LoadCharging(x.ProjectName)).FirstOrDefault()?? new();
                x.selDiv = GlobalClassList.divisionList.Where( div => div.Id == x.DivisionId).FirstOrDefault()?? new();
                
                StateHasChanged();
            });
        }
        ComputeGrossIncome();
        _processing = false;
    } 

    #endregion

    #region Map Properties

    VoucherModel MapProperties()
    {
        GlobalClass.voucher.VoucherDate = Convert.ToDateTime(voucherDate?.ToString("yyyy-MM-dd HH:mm:ss tt"));
        GlobalClass.voucher.PeriodFrom = voucherPeriod?.Start;
        GlobalClass.voucher.PeriodTo = voucherPeriod?.End;

        GlobalClass.voucher.UserId = GlobalClass.currentUserAccount.EmployeeId;
        GlobalClass.voucher.IsActive = true;

        GlobalClass.voucher.PreparedByPicture = preparedBy.Picture;
        GlobalClass.voucher.VerifiedByPicture = verifiedBy.Picture;
        GlobalClass.voucher.ApprovedByPicture = approvedBy.Picture;
        GlobalClass.voucher.AccountingStatusId = GlobalClassList.accountingStatusList
        .Where(x => x.StatusEnumCategoryId == Enums.AccountingStatusEnumCategory.VG)
        .Select(x => x.Id)
        .FirstOrDefault();

        if(GlobalClass.voucher.Id == 0)
          GlobalClass.voucher.Activity = "Add Voucher";
        else
          GlobalClass.voucher.Activity = "Update Voucher";

        if(GlobalClass.voucher.RemovedVoucherDetails.Count() != 0)
        {
          GlobalClass.voucher.RemovedVoucherDetails.ForEach(x=>
          {
            GlobalClass.voucher.Activity += " and removed voucher details";
          });
        }

        GlobalClass.voucher.PayeeId = payee.ProjectId;
        GlobalClass.voucher.PayeeName = payee.ProjectName;
        GlobalClass.voucher.PayeeCategoryId = payee.ProjectCategoryId;

        GlobalClass.voucher.PreparedById = preparedBy.EmployeeId;
        GlobalClass.voucher.PreparedByName = preparedBy.EmployeeName;
        GlobalClass.voucher.VerifiedById = verifiedBy.EmployeeId;
        GlobalClass.voucher.VerifiedByName = verifiedBy.EmployeeName;
        GlobalClass.voucher.ApprovedById = approvedBy.EmployeeId;
        GlobalClass.voucher.ApprovedByName = approvedBy.EmployeeName;
        return GlobalClass.voucher;
    }

    #endregion

    #region Employee Lookup

    private async Task Lookup(string role)
    {
        GlobalClass.voucher.PreparedByName = GlobalClass.currentUserAccount.EmployeeName;
        GlobalClass.voucher.PreparedById = GlobalClass.currentUserAccount.EmployeeId;
        var parameters = new DialogParameters();
        string dialogTitle = role == "payee" ? "Payee Look Up" : "Employee Look Up";
        Enums.LookUpType lookUpType = role == "payee" ? Enums.LookUpType.Project : Enums.LookUpType.Employee;
        parameters.Add("dialogTitle", dialogTitle);
        parameters.Add("buttonText", "Select");
        parameters.Add("color", Color.Success);
        parameters.Add("lookUpType", lookUpType);
        var options = new DialogOptions()
        {
            CloseButton = false,
            MaxWidth = MaxWidth.Small,
            FullWidth = true,
            NoHeader = false,
            DisableBackdropClick = true
        };
        var resultDialog = await dialogService.Show<Shared.Dialogs.LookUpDialog.GlobalGenericLookup>(dialogTitle, parameters, options).Result;
        if (!resultDialog.Canceled)
        {
            if (lookUpType == Enums.LookUpType.Employee) {
                var employee = (UserAccount)resultDialog.Data;
                if (role == "prepare")
                    PreparedbyEmployee(employee);
                if (role == "verify")
                    VerifiedbyEmployee(employee);
                if (role == "approve")
                    ApprovedbyEmployee(employee);
            }
            else if (role == "payee")
                PayeeEmployee((Project)resultDialog.Data);
            StateHasChanged();
        }
    }
    private void PreparedbyEmployee(UserAccount employee)
    {
        GlobalClass.voucher.PreparedById = employee.EmployeeId;
        GlobalClass.voucher.PreparedByName = employee.EmployeeName;
        preparedByImg = employee.Picture;
    }
    private void VerifiedbyEmployee(UserAccount verify)
    {
        GlobalClass.voucher.VerifiedById = verify.EmployeeId;
        GlobalClass.voucher.VerifiedByName = verify.EmployeeName;
        verifiedByImg = verify.Picture;
    }
    private void ApprovedbyEmployee(UserAccount approve)
    {
        GlobalClass.voucher.ApprovedById = approve.EmployeeId;
        GlobalClass.voucher.ApprovedByName = approve.EmployeeName;
        approvedByImg = approve.Picture;
    }

    private void PayeeEmployee(Project payee)
    {
        GlobalClass.voucher.PayeeId = payee.ProjectId;
        GlobalClass.voucher.PayeeName = payee.ProjectName;
        GlobalClass.voucher.PayeeCategoryId = payee.ProjectCategoryId;
    }

    #endregion

    #region Voucher Details Lookup
    private async Task VoucherDetailLookups(Enums.LookUpType lookUpType, VoucherDetailModel voucherDetail)
    {
        var parameters = new DialogParameters();
        string dialogTitle = "";
        if(lookUpType == Enums.LookUpType.Division)
            dialogTitle = "Division";
        if(lookUpType == Enums.LookUpType.Project || lookUpType == Enums.LookUpType.ChargeLine)
            dialogTitle = "Name / Project / Equip";
        if(lookUpType == Enums.LookUpType.ExpLine)
            dialogTitle = "Expense";

        parameters.Add("dialogTitle", dialogTitle);
        parameters.Add("buttonText", "Select");
        parameters.Add("color", Color.Success);
        parameters.Add("lookUpType", lookUpType);
        var options = new DialogOptions()
        {
            CloseButton = false,
            MaxWidth = MaxWidth.Small,
            FullWidth = true,
            NoHeader = false,
            DisableBackdropClick = false
        };
        var resultDialog = await dialogService.Show<Shared.Dialogs.LookUpDialog.GlobalGenericLookup>(dialogTitle, parameters, options).Result;
        if (!resultDialog.Canceled)
        {
            if (lookUpType == Enums.LookUpType.Division)
            {
                selectedDivision = (DivisionModel)resultDialog.Data;
                AddDivision(voucherDetail);
            }
            if (lookUpType == Enums.LookUpType.Project || lookUpType == Enums.LookUpType.ChargeLine)
            {
                selectedProject = (Project)resultDialog.Data;
                AddProjectLine(voucherDetail);
            }
            if (lookUpType == Enums.LookUpType.ExpLine)
            {
                selectedExpLine = (ExpenseLineModel)resultDialog.Data;
                AddExpense(voucherDetail);
            }
        }
    }

    #endregion

    #region Add RFP

    private async Task AddRFP()
    {
        isVDetailLoading = true;
        var parameters = new DialogParameters();
        string dialogTitle = "Request for payments";
        parameters.Add("dialogTitle", dialogTitle);
        parameters.Add("buttonText", "Select");
        parameters.Add("color", Color.Success);
        parameters.Add("lookUpType", Enums.LookUpType.RFPVoucher);
        var options = new DialogOptions()
        {
            CloseButton = false,
            MaxWidth = MaxWidth.Large,
            FullWidth = true,
            NoHeader = false,
            DisableBackdropClick = true
        };
        var resultDialog = await dialogService.Show<Shared.Dialogs.GlobalRFPLiquidationLookUp.GlobalRFPLiquidationLookUp>(dialogTitle, parameters, options).Result;
        if (!resultDialog.Canceled && GlobalClass.voucher.VoucherDetails.Count() > 0)
        {
            await Task.Delay(250);
            isDisablePayee = false;
            ComputeGrossIncome();
            GetRFPPayeeAndRemarks();

            //Min-max date of RFP
            DateTime? from = GlobalClass.voucher.VoucherDetails.OrderBy( v => v.RFPPeriodDateFrom).Select( v => v.RFPPeriodDateFrom).FirstOrDefault();
            DateTime? to = GlobalClass.voucher.VoucherDetails.OrderBy( v => v.RFPPeriodDateTo).Select( v => v.RFPPeriodDateTo).LastOrDefault();
            if(from.Equals(to))
                to = (GlobalClass.voucher.VoucherDetails.OrderBy( v => v.RFPPeriodDateFrom).Select( v => v.RFPPeriodDateFrom ).FirstOrDefault()?? DateTime.Now).AddDays(1);
            voucherPeriod = new DateRange(from,to);
            isVDetailLoading = false;
            StateHasChanged();
        }
        else
        {
            isVDetailLoading = false;
            isDisablePayee = true; 
        }
        ComputeGrossIncome();
    }
    #endregion
    
    #region Add Division

    private void AddDivision(VoucherDetailModel voucherDetail)
    {

        if (voucherDetail.Id == 0)
        {
            GlobalClass.voucher.VoucherDetails.Where(x => x.TemporaryId == voucherDetail.TemporaryId).ToList().ForEach(x =>
            {
                x.DivisionId = selectedDivision.Id;
                x.DivisionName = selectedDivision.divisionName;
            });

        }
        else
        {
            GlobalClass.voucher.VoucherDetails.Where(x => x.Id == voucherDetail.Id).ToList().ForEach(x =>
            {
                x.DivisionId = selectedDivision.Id;
                x.DivisionName = selectedDivision.divisionName;
            });
        }
        StateHasChanged();
    }

    #endregion

    #region Add Project
    private void AddProjectLine(VoucherDetailModel voucherDetail)
    {
        if (voucherDetail.Id == 0)
        {
            GlobalClass.voucher.VoucherDetails.Where(x => x.TemporaryId == voucherDetail.TemporaryId).ToList().ForEach(x =>
            {
                x.ProjectId = selectedProject.ProjectId;
                x.ProjectName = selectedProject.ProjectName;
                x.ProjectCategoryId = selectedProject.ProjectCategoryId;
            });

        }
        else
        {
            GlobalClass.voucher.VoucherDetails.Where(x => x.Id == voucherDetail.Id).ToList().ForEach(x =>
            {
                x.ProjectId = selectedProject.ProjectId;
                x.ProjectName = selectedProject.ProjectName;
                x.ProjectCategoryId = selectedProject.ProjectCategoryId;
            });
        }
        StateHasChanged();
    }

    #endregion

    #region Add Expense

    private void AddExpense(VoucherDetailModel voucherDetail)
    {


        if (voucherDetail.Id == 0)
        {
            GlobalClass.voucher.VoucherDetails.Where(x => x.TemporaryId == voucherDetail.TemporaryId).ToList().ForEach(x =>
            {
                x.ExpenseId = selectedExpLine.Id;
                x.ExpenseName = selectedExpLine.ExpenseName;
            });

        }
        else
        {
            GlobalClass.voucher.VoucherDetails.Where(x => x.Id == voucherDetail.Id).ToList().ForEach(x =>
            {
                x.ExpenseId = selectedExpLine.Id;
                x.ExpenseName = selectedExpLine.ExpenseName;
            });
        }
        StateHasChanged();

    }

    #endregion

    #region Payee Lookup

    private async void PayeeLookUp()
    {
        var parameters = new DialogParameters();
        string dialogTitle = "Payee Look Up";
        parameters.Add("dialogTitle", dialogTitle);
        parameters.Add("buttonText", "Select");
        parameters.Add("color", Color.Success);
        parameters.Add("lookUpType", Enums.LookUpType.Project);
        var options = new DialogOptions()
        {
            CloseButton = false,
            MaxWidth = MaxWidth.Small,
            FullWidth = true,
            NoHeader = false,
            DisableBackdropClick = false
        };
        var resultDialog = await dialogService.Show<Shared.Dialogs.LookUpDialog.GlobalGenericLookup>(dialogTitle, parameters, options).Result;
        if (!resultDialog.Canceled)
        {
            payee = (Project)resultDialog.Data;
            StateHasChanged();
        }
    }

    private async Task<IEnumerable<Project>> LoadPayee(string projectName)
    {
       var filterParameter = new FilterParameter()
        {
            IsProject = true,
            ProjectName = projectName,
            IsId = false
        };
        var projects = await globalService.LoadPayees(filterParameter,GlobalClass.token);
        return projects;
    }
    private async Task<IEnumerable<SubContractorProjectModel>> LoadSubConProjects(string search,List<SubContractorProjectModel> context)
    {
        return await Task.Run(()=>context.Where(x=>x.SubContractorName.Contains(search, StringComparison.InvariantCultureIgnoreCase)));
    }
    private async Task<IEnumerable<SubContractorProjectModel>> LoadSubConProjectsSOW(string searchSOW, List<SubContractorProjectModel> sowContext)
    {
        return await Task.Run(()=>sowContext.Where(x=>x.SubContractorName.Contains(searchSOW, StringComparison.InvariantCultureIgnoreCase)));
    }
    private async Task<IEnumerable<UserAccount>> LoadEmployee(string employeeName)
    {
        var filterParameter = new FilterParameter()
        {
            IsName = true,
            Name = employeeName,
            IsLookUp = true
        };
        var employee = await globalService.LoadAllEmployee(filterParameter, GlobalClass.token);
        return employee;
    }

    private async Task<IEnumerable<Project>> LoadCharging(string chargingName)
    {
      var filterParameter = new FilterParameter()
      {
        IsProject = true,
        ProjectName = chargingName,
        IsId = false
      };
      var charging = await globalService.LoadChargeProjectLine(filterParameter, GlobalClass.token);
      return charging;
    }

    private async Task<IEnumerable<ExpenseLineModel>> LoadExpense(string expenseLine)
    {
      var charging = await expenseLineService.LoadExpenseLine(GlobalClass.token);
      return charging.Where(x=>x.ExpenseName.Contains(expenseLine, StringComparison.OrdinalIgnoreCase)).ToList();
    }

    private async Task<IEnumerable<DivisionModel>> LoadDivision(string searchText)
    {
      var division = GlobalClassList.divisionList;
      return await Task.FromResult(division.Where(x=>x.divisionName.Contains(searchText, StringComparison.InvariantCultureIgnoreCase)
      || x.shortcutName.Contains(searchText, StringComparison.InvariantCultureIgnoreCase)).ToList());
    }
    #endregion

    #region Remove RFP Voucher
    private async void RemoveRFP(VoucherDetailModel voucherDetail)
    {
        //Prompt purpose
    var action = Enums.ActionMode.Delete;
    if(voucherDetail.IsEWT)
        action = Enums.ActionMode.Invalid;

    var parameters = new DialogParameters();
    string contentText = "Voucher details";
    string dialogTitle = "Remove ";
    parameters.Add("contentText", contentText);
    parameters.Add("dialogTitle", dialogTitle);
    parameters.Add("actionMode", action);
    var options = new DialogOptions() {  CloseButton = false, MaxWidth = MaxWidth.ExtraSmall, FullWidth = true, NoHeader = false, DisableBackdropClick = true };
    var resultDialog = await dialogService.Show<Shared.Dialogs.GenericPromptDialogs.GenericPrompt>(dialogTitle, parameters, options).Result;
    if(!resultDialog.Canceled)
    {
        if(action != Enums.ActionMode.Invalid && GlobalClass.voucher.Id != 0 && voucherDetail.Id != 0)
        {
            voucherDetail.IsActive = false;
            GlobalClass.voucher.RemovedVoucherDetails.Add(voucherDetail);
            GlobalClass.voucher.VoucherDetails = GlobalClass.voucher.VoucherDetails.Where(x=>x.IsActive == true).ToList();
        } else {
            GlobalClass.voucher.VoucherDetails.Remove(voucherDetail);
            GlobalClass.voucher.WithSubLedger = GlobalClass.voucher.VoucherRFP.Count > 0 ? true:false;
            GlobalClass.voucher.VoucherDetails = GlobalClass.voucher.VoucherRFP.Count > 0 ? GlobalClass.voucher.VoucherDetails:new();
        }
    }
      GlobalClass.voucher.GrossIncome = GlobalClass.voucher.VoucherDetails.Sum(x=>x.Amount);
      StateHasChanged();
    }

    #endregion

    #region Remove RFP

    private void RemoveVoucherRFP(VoucherRFPModel voucherRFP)
    {
        GlobalClass.voucher.RFPTotalAmount = GlobalClass.voucher.RFPTotalAmount - voucherRFP.TotalAmount;
        GlobalClass.voucher.RFPTotalAmountString = GlobalClass.voucher.RFPTotalAmount.ToString("N2");
        voucherRFP.IsActive = false;
        GlobalClass.voucher.VoucherRFP.Remove(voucherRFP);
        GlobalClass.voucher.RemovedVoucherRFP.Add(voucherRFP);
        GlobalClass.voucher.WithSubLedger = GlobalClass.voucher.VoucherRFP.Count > 0 ? true:false;
        GlobalClass.voucher.VoucherDetails = GlobalClass.voucher.VoucherRFP.Count > 0 ? GlobalClass.voucher.VoucherDetails:new();
        payee = GlobalClass.voucher.VoucherRFP.Count > 0 ? payee : new();
        isDisablePayee = GlobalClass.voucher.VoucherRFP.Count > 0 ? false : true;
        //For fix
        isDisablePayee = true;
        ComputeGrossIncome();
        StateHasChanged();
    }   

    #endregion

    #region Get Employee Image
    private async Task<byte[]> GetEmployeeImg(long employeeId)
    {
        var employeeDetail = await globalService.GetEmployeeById(employeeId, GlobalClass.token);
        return employeeDetail.Picture;
    }

    private async Task<UserAccount> GetEmployeeDetails(long employeeId)
    {
        var employeeDetail = await globalService.GetEmployeeById(employeeId, GlobalClass.token);
        return employeeDetail;
    }
    #endregion

    #region Reset Voucher Detail Table
    private async Task ResetVoucherTable()
    {
        isDisablePayee = true;
        GlobalClass.voucher.VoucherRFP = new();
        GlobalClass.voucher.VoucherDetails = new List<VoucherDetailModel>();
        var voucher = await voucherService.GetVATandEWT(payee,GlobalClass.token);
        GlobalClass.voucher.VATValue = voucher.VATValue;
        GlobalClass.voucher.EWTValue = voucher.EWTValue;
        if(voucher.EWTValue > 0 && !GlobalClass.voucher.VoucherDetails.Any(x=>
        x.ProjectName == "None" || 
        x.DivisionName == "None")) {
        if(GlobalClass.voucher.RemovedVoucherDetails.Any(x=> x.ProjectName == "None" || x.DivisionName == "None"))
                GlobalClass.voucher.RemovedVoucherDetails.RemoveAll(x=> x.ProjectName == "None" || x.DivisionName == "None");
        await AddNew(true);
        }
        await Task.Delay(1000);
        StateHasChanged();
    }
    #endregion

    #region Edit Row
    private void EditRow(VoucherDetailModel model)
    {
        selectedVoucherDetailModel = new VoucherDetailModel();
        selectedVoucherDetailModel = model;
        if (!openEditDrawer) {
            openEditDrawer = !openEditDrawer;
            MarginToDrawer();
        }
    }
    #endregion

    #region Dynamic Margin to Drawer
    private void MarginToDrawer()
    {
        if (openEditDrawer)
            editDrawerMargin = "margin-top: 5% !important; margin-right: 20% !important";
        else if (!openEditDrawer)
            editDrawerMargin = "margin-top: 5% !important; margin-right: 0 !important";
    }
    #endregion

    #region  Validate Entries
    private bool ValidateEntries()
    {
        ResetEntryValidations();
        if (selectedVoucherDetailModel.ProjectId == 0)
            reqProj = true;
        if (selectedVoucherDetailModel.ExpenseId == 0)
            reqExp = true;
        if (selectedVoucherDetailModel.DivisionId == 0)
            reqDiv = true;
        if (reqProj || reqExp || reqDiv)
            return  false;
        return true;
    }
    #endregion

    #region ValidateAmount
    private bool ValidateAmount()
    {
      if(GlobalClass.voucher.VoucherDetails.Sum(x=>x.Amount) > GlobalClass.voucher.VoucherRFP.Sum(y=>y.TotalAmount))
      {
        return false;
      }
      return true;
    }
    #endregion

    #region Validation
    private bool ValidateEntry()
    {
        ResetVoucherEntryValidations();
        bool valid = true;
        if (payee.ProjectId == 0)
            reqPayee = true;
        if (GlobalClass.voucher.PreparedById == 0)
            reqPrep = true;
        if(GlobalClass.voucher.VerifiedById == 0)
            reqVer = true;
        if(GlobalClass.voucher.ApprovedById == 0)
            reqApp = true;
        @* if(GlobalClass.voucher.VoucherDetails.Count() == 0)
            detailCountStatus = "No details Added"; *@
        if(GlobalClass.voucher.VoucherRFP.Count() == 0)
            reqRFP = true;
        if (GlobalClass.voucher.VoucherDetails.Count() == 0 || GlobalClass.voucher.VoucherRFP.Count() == 0)
            valid =  false;
            
        /***
        //Still need to improve validation in voucher etails
          GlobalClass.voucher.VoucherDetails.Where(y=>y.IsEWT == false).Reverse().ToList().ForEach(x=> { 
            //if subledgerName is not null return by server String.IsNullOrEmpty(x.SubLedgerName)
            if(String.IsNullOrEmpty(x.selExp.ExpenseName) || String.IsNullOrEmpty(x.selProj.ProjectName) || String.IsNullOrEmpty(x.selDiv.divisionName)) {
                valid = false;
                return;
            }
        }); */
        if(GlobalClass.voucher.VoucherRouteTags.Count <= 0)
        {
            valid = false;
        }
        return valid;
    }

    private void Validate(int control)
    {
        if (control == 1)
            if (payee.ProjectId == 0)
                reqPayee = true;
    }
    #endregion

    #region Reset Entry Validations
    private void ResetEntryValidations()
    {
        reqProj = false;
        reqExp = false;
        reqDiv = false;
    }

    private void ResetVoucherEntryValidations()
    {
        reqPayee = false;
        reqPrep = false;
        reqVer = false;
        reqApp = false;
        reqRFP = false;
    }
    #endregion

    #region Clear Entry Changes
    private void ClearChanges()
    {
        openEditDrawer = !openEditDrawer;
        MarginToDrawer();
        ResetEntryValidations();
    }
    #endregion

    #region New Voucher Entry
    public async Task New()
    {
        var parameters = new DialogParameters();
        parameters.Add("contentText", "create new voucher");
        parameters.Add("dialogTitle", "Create New");
        parameters.Add("buttonText", "Create New");
        parameters.Add("actionMode", Enums.ActionMode.Prompt);
        var options = new DialogOptions() { CloseButton = false, MaxWidth = MaxWidth.Small, FullWidth = false, NoHeader = false };
        var resultDialog = await dialogService.Show<Shared.Dialogs.GenericPromptDialogs.GenericPrompt>(string.Empty,parameters,options).Result;
        if(!resultDialog.Canceled)
        {
            string thisPage = "voucher-create";
            navigationManager.NavigateTo($"/refresh/{thisPage}");
        }
    }
    #endregion

    #region Dispose For Printing Voucher
    private void DisposePrintMapped()
    {
        GlobalClass.forPrintingOrSaveVoucher = new VoucherModel();
    }
    #endregion

    #region GetVATandEWT
    private async Task GetVATandEWT(Project p)
    {
        var voucher = await voucherService.GetVATandEWT(p,GlobalClass.token);
        GlobalClass.voucher.VATValue = voucher.VATValue;
        GlobalClass.voucher.EWTValue = voucher.EWTValue;
        if(voucher.EWTValue > 0 && !GlobalClass.voucher.VoucherDetails.Any(x=>
        x.ProjectName == "None" || 
        x.DivisionName == "None")) {
            if(GlobalClass.voucher.RemovedVoucherDetails.Any(x=> x.ProjectName == "None" || x.DivisionName == "None"))
                GlobalClass.voucher.RemovedVoucherDetails.RemoveAll(x=> x.ProjectName == "None" || x.DivisionName == "None");
            await AddNew(true);
        } else {
            if(GlobalClass.voucher.Id != 0)
                {
                    var voucherDetail = GlobalClass.voucher.VoucherDetails.Find(x=> x.ProjectName == "None" || x.DivisionName == "None")?? new();
                    voucherDetail.IsActive = false;
                    voucherDetail.Amount = -Math.Abs(voucherDetail.Amount);
                    GlobalClass.voucher.RemovedVoucherDetails.Add(voucherDetail);
                }
                if(GlobalClass.voucher.EWTValue <= 0)
                    GlobalClass.voucher.VoucherDetails.RemoveAll(x=> x.ProjectName == "None" || x.DivisionName == "None");
        }
        ComputeGrossIncome();
        StateHasChanged();
    }
    #endregion
    private void ComputeGrossIncome()
    {
        var currentWHT = -Math.Abs(GlobalClass.voucher.WithholdingTax);
        GlobalClass.voucher.GrossIncome = 0.00m;
        GlobalClass.voucher.WithholdingTax = 0.00m;
        GlobalClass.voucher.VoucherDetails.ForEach(amount=>{
            if(amount.IsEWT)
            {
                amount.Amount = currentWHT;
            }
            else
                if(!amount.IsExcluded)
                    GlobalClass.voucher.GrossIncome += amount.Amount;
        });
        StateHasChanged();
    }
    private async Task SelectedPayee(Project p)
    {
        payee = p;
        await GetVATandEWT(p);
    }
    private async Task ShowPreviousDialog()
    {
        if(payee.ProjectId == 0)
            Extensions.ShowAlert("Please select a payee.",Variant.Filled, snackbarService,Severity.Warning);
        else {
            GlobalClass.voucher.PayeeId = payee.ProjectId;
            GlobalClass.voucher.PayeeCategoryId = payee.ProjectCategoryId;
            var options = new DialogOptions()
            {
                CloseButton = false,
                MaxWidth = MaxWidth.Medium,
                FullWidth = true,
                NoHeader = false,
                DisableBackdropClick = false
            };
            var resultDialog = await dialogService.Show<Shared.Dialogs.PreviousVoucherDialogs.PreviousVouchers>("",options).Result;
        }
    }
    private void ExcludeCheckState(VoucherDetailModel detail,bool check)
    {
        //Need to set value to !check to get state of checkbox
        ExclueAmountFromGrossIncome(detail,!check);
        StateHasChanged();
    }
    private void ExclueAmountFromGrossIncome(VoucherDetailModel detail,bool isExclude){ 
        if(isExclude)
            GlobalClass.voucher.GrossIncome -= detail.Amount;
        else 
            GlobalClass.voucher.GrossIncome += detail.Amount;
    }
    private void GetRFPPayeeAndRemarks()
    {
        if(GlobalClass.voucher.VoucherRFP.Count == 1)
        {
            var _payee = new Project();
            _payee.ProjectName = (GlobalClass.voucher.VoucherRFP.GetRange(0,1).FirstOrDefault()?? new()).PayeeName;
            _payee.ProjectId = (GlobalClass.voucher.VoucherRFP.GetRange(0,1).FirstOrDefault()?? new()).payeeId;
            _payee.ProjectCategoryId = (GlobalClass.voucher.VoucherRFP.GetRange(0,1).FirstOrDefault()?? new()).payeeCategory;
            payee = _payee;
        }
        if(GlobalClass.voucher.VoucherRFP.Count > 1)
        {
            GlobalClass.voucher.Remarks =  GlobalClass.voucher.VoucherRFP
                                            .Where(v => v.Remarks != "")
                                            .Select( vRFP => vRFP.Remarks)
                                            .Aggregate( (a,b) => a+", "+b);
        } else 
        {
            GlobalClass.voucher.Remarks = (GlobalClass.voucher.VoucherRFP.GetRange(0,1).FirstOrDefault()?? new()).Remarks;
        }
        StateHasChanged();
    }
    private void SelectedSubLedger(SubContractorProjectModel p,VoucherDetailModel detail)
    {
        detail.selSOW.ScopeOfWork = p.ScopeOfWork;
        detail.selSOW.ScopeOfWorkId = p.ScopeOfWorkId;
        detail.ScopeOfWorkId = p.ScopeOfWorkId;
        detail.ScopeOfWorkName = p.ScopeOfWork;
        detail.SubLedgerId = p.SubContractorId;
        detail.SubLedgerCategoryId = p.SubContactorCategoryId;

        //detail.SubLedgerCategoryId = p.cate;
        detail.SubLedgerName = p.ProjectName;
        StateHasChanged();
    }
    private void SelectedSOW(SubContractorProjectModel p,VoucherDetailModel detail)
    {
        detail.selSOW.ScopeOfWork = p.ScopeOfWork;
        detail.selSOW.ScopeOfWorkId = p.ScopeOfWorkId;
        detail.ScopeOfWorkId = p.ScopeOfWorkId;
        detail.ScopeOfWorkName = p.ScopeOfWork;
        //detail.SubLedgerId = p.SubContractorId;
        //detail.SubLedgerCategoryId = p.SubContactorCategoryId;
        //detail.SubLedgerCategoryId = p.cate;
        //detail.SubLedgerName = p.ProjectName;
        StateHasChanged();
    }
    private async Task DetailSelectedProject(Project p,VoucherDetailModel vDetail)
    {
        vDetail.selSubConProjectSOWList =  await globalService.VoucherDetailsSubCon(p.ProjectId,GlobalClass.token);
        if(vDetail.RFPDetailType != Enums.RFPDetailTypeId.Labor)
        {
            vDetail.SubLedgerId = p.ProjectId;
            vDetail.SubLedgerCategoryId = p.ProjectCategoryId;
            vDetail.SubLedgerName = p.ProjectName;
        }
    }
    #endregion
    private void DateRangeToday(MudDatePicker datePickerName, MudDateRangePicker dateRangePickerName)
    {
        if(datePickerName == datePicker)
        {
            voucherDate = DateTime.Now;
            SubmitDateRangePicker(datePickerName, new());
        }
        if(dateRangePickerName == dateRangePeriod)
        {
            voucherPeriod = new DateRange(DateTime.Now.AddDays(-1), DateTime.Now.Date);
            SubmitDateRangePicker(new(), dateRangePickerName);
        }
    }
    private void CancelDateRangePicker(MudDatePicker datePickerName, MudDateRangePicker dateRangePickerName)
    {
        if (datePickerName == datePicker)
            datePickerName.Close(false);
        if (dateRangePickerName == dateRangePeriod)
            dateRangePickerName.Close(false);
    }
    private void SubmitDateRangePicker(MudDatePicker datePickerName, MudDateRangePicker dateRangePickerName)
    {
        if (datePickerName == datePicker)
            datePickerName.Close(true);
        if (dateRangePickerName == dateRangePeriod)
            dateRangePickerName.Close(true);
    }
    private void TagsCheckChanged(bool b,Enums.RouteTag t)
    {
        VoucherRouteTagModel tag = new();

        if(GlobalClass.voucher.Id == 0)
        {
            tag = DefaultTag(t);

            //New voucher
            if(b)
            {
                if(t == Enums.RouteTag.None)
                {
                    GlobalClass.voucher.VoucherRouteTags.Clear();
                    GlobalClass.voucher.VoucherRouteTags.Add(tag);
                }
                else
                    GlobalClass.voucher.VoucherRouteTags.Add(tag);
            }
            else
                GlobalClass.voucher.VoucherRouteTags.Remove(GlobalClass.voucher.VoucherRouteTags.Single( tag => tag.RouteTagId == t ) );
        }
        else
        {
            //Update voucher
            //find Id
            tag = originalTagList.Where( tag => tag.RouteTagId == t).FirstOrDefault()?? new();
             
            if(b)
            {
                if(tag.Id == 0)
                {
                    tag = DefaultTag(t);
                    tag.IsActive = true;
                    if(tag.RouteTagId == Enums.RouteTag.None)
                    {   
                        originalTagList.ForEach( list => list.IsActive  = false);
                        GlobalClass.voucher.VoucherRouteTags.Clear();
                        GlobalClass.voucher.RemovedVoucherRouteTags.Clear();
                        GlobalClass.voucher.RemovedVoucherRouteTags.AddRange(originalTagList);
                        GlobalClass.voucher.VoucherRouteTags.Add(tag);
                    }
                    else
                        GlobalClass.voucher.VoucherRouteTags.Add(tag);
                }
                 else
                {
                    tag.IsActive = false;
                    GlobalClass.voucher.RemovedVoucherRouteTags.Remove(GlobalClass.voucher.RemovedVoucherRouteTags.Single( tags => tags.RouteTagId == tag.RouteTagId ));
                    GlobalClass.voucher.VoucherRouteTags.Add(tag);
                }
                
            }
            else
            {
                
                if(tag.Id == 0)
                {
                    tag = DefaultTag(t);
                    GlobalClass.voucher.VoucherRouteTags.Remove(GlobalClass.voucher.VoucherRouteTags.Single( tag => tag.RouteTagId == t ));
                }
                 else
                {
                    tag.IsActive = false;
                    GlobalClass.voucher.VoucherRouteTags.Remove(GlobalClass.voucher.VoucherRouteTags.Single( t => t.Id == tag.Id ));
                    GlobalClass.voucher.RemovedVoucherRouteTags.Add(tag);
                }
            }
        }
      

    }
    private VoucherRouteTagModel DefaultTag(Enums.RouteTag t)
    {
        VoucherRouteTagModel model = new();

        //set values
        model.IsActive = true;
        model.IsRouted = t == Enums.RouteTag.None ? true: false;
        model.VoucherId = GlobalClass.voucher.Id;
        model.RouteTagId = t;

        return model;
    }
}