@page "/voucher/list"
@page "/voucher-list"
@page "/voucher/list/{controlNumber}"

@inject IDialogService dialogService
@inject IVoucherService voucherService
@inject NavigationManager navigationManager
@inject ISnackbar snackbarService
@inject IJSRuntime JSRuntime
@inject ApplicationState AppState
@inject IGlobalService globalService
@inject IRequestForPaymentService requestForPaymentService
@inject ICheckService checkService

<div class='page-cont'>
  <div class='drawer-right-min'>
    <MudDrawer Class='pa-1' @bind-Open='openSideFilter' Fixed='false' Anchor='Anchor.Right' Elevation='0' Variant='DrawerVariant.Mini' OpenMiniOnHover='false'>
      <FilterComponent OpenSideFilterClick='(() => openSideFilter = !openSideFilter)' 
            FilterClick='FilterTable' ResetTableClick='ReloadTable'
            contentVisible='openSideFilter' moduleName="voucher-list"/>
    </MudDrawer>
  </div>

  <MudContainer Class='py-2 pl-2 pr-10  table-toolbar-custom1' Fixed='false' MaxWidth='MaxWidth.ExtraExtraLarge'>
    @if (!dataFetched)
    {
      <SkeletonPageList />
    }
    else
    {
      <MudPaper>
        <MudTable Class='table-style-1 ' ServerData='new Func<TableState, Task<TableData<VoucherModel>>>(LoadVoucherServer)' Height='calc(100vh - 185px)'
          Breakpoint='Breakpoint.Sm' Hover Bordered FixedHeader FixedFooter Dense RowsPerPage='15' @ref='tableVariable'>
          <ToolBarContent>
            <MudText Typo='Typo.caption'>
              @totalItems
              @(totalItems == 1 ? "item" : "items")
              in total
            </MudText>
            <MudSpacer/>
            <MudTooltip Text="Refresh Table">
              <MudIconButton OnClick='ReloadTable' Icon="@Icons.Material.Filled.Refresh" Size="Size.Small" ></MudIconButton>
            </MudTooltip>
            <MudMenu Class='overflow-hidden mudbtnico-rotate-90' StartIcon='@Icons.Material.Filled.MoreVert' AnchorOrigin='Origin.BottomCenter' ActivationEvent='MouseEvent.MouseOver'
              TransformOrigin='Origin.TopRight' Dense='true' Size='Size.Small' Label='More'>
              @if(AccessLevelAddmin() || AccessLevelRequestors())
              {
                <MudMenuItem OnClick='(()=> navigationManager.NavigateTo($"/voucher"))'>
                    <div class='d-flex align-center gap-2 '>
                        <MudIcon Icon='@Icons.Material.Filled.Add' Size='Size.Small' />
                      <MudText Typo='Typo.body2'>Add</MudText>
                    </div>
                </MudMenuItem>         
                <MudMenuItem OnClick="(() => openSideFilter = !openSideFilter)"  >
                    <div class='d-flex align-center gap-2 '>
                        <MudIcon Icon='@Icons.Material.Filled.FilterList' Size='Size.Small' Color='Color.Dark' />
                        <MudText Typo='Typo.body2' Color='Color.Dark'>Filter</MudText>
                    </div>
                </MudMenuItem>               
              }
          </MudMenu>
          </ToolBarContent>
          <ColGroup>
            <col style='width:20px' />
            <col />
            <col />
            <col style='width:10px' />
            <col style='width:1%' />
            <col style='width:50px' />
            <col style='width:50px' />
            <col style='width:110px' />
            <col style='width:50px' />
          </ColGroup>
          <HeaderContent>
            <MudTh Class='@(isPinnedCtrlNo ? "th-sticky-left customheader-6":"customheader-6")'>
              <div class='d-flex align-center justify-space-around gap-2'>
                <MudTooltip Text='Pin control number column' Arrow Placement='Placement.Top'>
                    <MudIconButton Class='ico-15x15' OnClick='(() => isPinnedCtrlNo = !isPinnedCtrlNo)' Color='@(isPinnedCtrlNo ? Color.Info:Color.Dark)' 
                        Icon='@Icons.Material.Filled.PushPin' Size='Size.Small'/>
                </MudTooltip>
                <MudTableSortLabel SortLabel='SortControlNumber' T='VoucherModel'
                InitialDirection='SortDirection.Descending'>
                  Control No.
                </MudTableSortLabel>
                <MudTableSortLabel SortLabel='SortDate' T='VoucherModel'
                InitialDirection='SortDirection.None'>
                  Date
                </MudTableSortLabel>
              </div>
            </MudTh>
            <MudTh Class='customheader-6'>
               <MudTableSortLabel SortLabel='SortPayee' T='VoucherModel'
                InitialDirection='SortDirection.Descending'>
                  Payee
                </MudTableSortLabel>
            </MudTh>
            <MudTh Class='customheader-6'>Description</MudTh>
            <MudTh Class='customheader-6 text-center'></MudTh>
            <MudTh Class='customheader-6 text-center'>
               <MudTableSortLabel Class='text-right' SortLabel='SortStatus' T='VoucherModel'
                InitialDirection='SortDirection.None'>
                  Status
              </MudTableSortLabel>
            </MudTh>
            <MudTh Class='customheader-6 text-center'>Filed</MudTh>
            <MudTh Class='customheader-6 text-center'>Checks</MudTh>
            <MudTh Class='@(isPinnedAmt ? "th-sticky-amt-vl customheader-6 text-right":"customheader-6 text-right")'>
              <MudTooltip Text='Pin amount column' Arrow Placement='Placement.Top'>
                <MudIconButton Class='ico-15x15' OnClick='(() => isPinnedAmt = !isPinnedAmt)' Color='@(isPinnedAmt ? Color.Info:Color.Dark)' 
                    Icon='@Icons.Material.Filled.PushPin' Size='Size.Small'/>
              </MudTooltip>
              <MudTableSortLabel Class='text-right' SortLabel='SortAmount' T='VoucherModel'
                InitialDirection='SortDirection.None'>
                  Amount
              </MudTableSortLabel>
            </MudTh>
            <MudTh Class='@(isPinnedAmt ? "th-sticky-action customheader-6":"customheader-6")'>Action</MudTh>
          </HeaderContent>
          <RowTemplate>
            <MudTd Class='@(isPinnedCtrlNo ? "col-sticky-left":"")' DataLabel='control no.'>
              <div class='d-flex align-center'>
                  <MudChip Class='mudchip-tbl' OnClick='(() => Extensions.CopyTextToClipboard(context.ControlNumber, snackbarService, JSRuntime))' 
                      Variant='Variant.Outlined' Color='Color.Error' Size='Size.Small'>
                    @context.ControlNumber
                  </MudChip>
                  <MudChip Class='mudchip-tbl' Icon='@Icons.Material.Filled.CalendarMonth' 
                    Variant='Variant.Outlined' Color='Color.Dark' Size='Size.Small'>
                    @Convert.ToDateTime(context.VoucherDate).ToShortDateString()
                  </MudChip>
              </div>
            </MudTd>
            <MudTd DataLabel='Payee'>
              <div class='dynamic-div-1'>
                <small>@context.PayeeName</small>
              </div>
            </MudTd>
            <MudTd DataLabel='Description'>
               <div class='dynamic-div-1'>
                <small>@context.Description</small>
               </div>
            </MudTd>
            <MudTd DataLabel='Signatories'>
              <MudTooltip Text='Signatories' Placement='Placement.Top'>
                <MudMenu Icon="@Icons.Material.Filled.Groups" AnchorOrigin='Origin.BottomLeft' ActivationEvent='MouseEvent.MouseOver'
                  TransformOrigin='Origin.TopLeft' Dense Size='Size.Small'>
                  <MudMenuItem>
                    <MudPaper class='pa-2 bgc-e7f2fb min-width200px'>
                      <MudText Class='font10 font-bold'>Prepared By:</MudText>
                      <SignatoriesComponent employeeId='@context.PreparedById' avatarSize='Size.Medium' />
                    </MudPaper>
                  </MudMenuItem>
                  <MudMenuItem>
                    <MudPaper class='pa-2 bgc-e7f2fb min-width200px'>
                      <MudText Class='font10 font-bold'>Verified By:</MudText>
                      <SignatoriesComponent employeeId='@context.VerifiedById' avatarSize='Size.Medium' />
                    </MudPaper>
                  </MudMenuItem>
                  <MudMenuItem>
                    <MudPaper class='pa-2 bgc-e7f2fb min-width200px'>
                      <MudText Class='font10 font-bold'>Approved By:</MudText>
                      <SignatoriesComponent employeeId='@context.ApprovedById' avatarSize='Size.Medium' />
                    </MudPaper>
                  </MudMenuItem>
                </MudMenu>
              </MudTooltip>
            </MudTd>
            <MudTd Class='text-left' DataLabel='Status'>
              @if (dataFetched)
              {
                <MudChip Class='chip-radius-5 font-bold font10' Variant='Variant.Outlined' Size='Size.Small'
                  Style="@Extensions.BorderColor(context.AccountingStatusId)">
                  @context.StatusName
                </MudChip>
              }
            </MudTd>
            <MudTd DataLabel='Filed'>
               <MudCheckBox Class='chip-radius-5 font-bold font10' @bind-Checked=context.IsFiled ReadOnly Dense Size='Size.Small' 
                  UnCheckedColor='Color.Dark' Color='Color.Info' />
            </MudTd>
            <MudTd Class='@(isPinnedAmt ? "br-none":"")'>
              <div class='d-flex align-center justify-center'>
                <MudTooltip Text='Checks' Arrow Placement='Placement.Top'>
                @if (!string.IsNullOrWhiteSpace(context.CheckNumber)) 
                {
                  <MudToggleIconButton @bind-Toggled='context.isShowChecks'
                    Icon="fa-solid fa-money-check" Color="@Color.Default" Title="Expand" Size='Size.Small' ToggledSize='Size.Small'
                    ToggledIcon="fa-solid fa-money-check" ToggledColor="@Color.Info" ToggledTitle="Collapse"/>
                } 
                else 
                {
                  <MudText Class='font12'> - </MudText>
                }
              </MudTooltip>
              </div>
            </MudTd>        
            <MudTd Class='@(isPinnedAmt ? "col-sticky-amt-vl":"")' DataLabel='Amount'>
              <div class='tooltipw100'>
                <MudTooltip Class='flex-1' Text='@(Extensions.GetEnumDescription(Enums.BankCurrency.PhilippinePeso) + " " + context.TotalAmount.ToString("N2"))' 
                    Arrow Placement='Placement.Top' Color='@(context.TotalAmount > 0 ? Color.Success:Color.Error)'>
                    <div class='amount-container'>
                      <small class='@(context.TotalAmount > 0 ? "font-bold color-green":"font-bold color-red")'>
                        @Extensions.GetEnumDescription(Enums.BankCurrency.PhilippinePeso)
                      </small>
                      <MudSpacer />
                      <small class='@(context.TotalAmount > 0 ? "txt-green":"txt-red")'>
                         @context.TotalAmount.ToString("N2")
                      </small>
                    </div>
                </MudTooltip>
              </div>
            </MudTd>
            <MudTd Class='@(isPinnedAmt ? "col-sticky-action text-center":"text-center")' DataLabel='Action'>
              <MudMenu Class='mudbtnico-rotate-90' Icon='@Icons.Material.Filled.MoreVert' AnchorOrigin='Origin.BottomLeft' ActivationEvent='MouseEvent.MouseOver'
              TransformOrigin='Origin.TopRight' Dense Size='Size.Small'>
                <MudMenuItem OnClick='(() => PreviewVoucher(context))'>
                    <div class='d-flex align-center gap-2'>
                        <MudIcon Icon='@Icons.Material.Filled.Preview' Size='Size.Small' Color='Color.Dark'/>
                        <MudText Typo='Typo.body2'>View</MudText>
                    </div>
                </MudMenuItem>
                @if((!ViewMenu(context) && AccessLevelAddmin())
                || (!ViewMenu(context)) && AccessLevelRequestors())
                {
                  <MudMenuItem OnClick='(()=> EditVoucher(context))'>
                    <a class='d-flex align-center gap-2 '>
                      <MudIcon Icon='@Icons.Material.Filled.Edit' Size='Size.Small' />
                      <MudText Typo='Typo.body2'>Edit</MudText>
                    </a>
                  </MudMenuItem>
                  if(AccessLevelAddmin())
                  {
                    <MudMenuItem OnClick='(()=> ApprovedVoucher(context))'>
                      <div class='d-flex align-center gap-2 '>
                        <MudIcon Icon='@Icons.Material.Filled.CheckCircle' Size='Size.Small' />
                        <MudText Typo='Typo.body2'>Approve</MudText>
                      </div>
                    </MudMenuItem>
                    <MudMenuItem OnClick='(()=> CancelVoucher(context))'>
                      <div class='d-flex align-center gap-2 '>
                        <MudIcon Icon='@Icons.Material.Filled.Cancel' Size='Size.Small' />
                        <MudText Typo='Typo.body2'>Cancel</MudText>
                      </div>
                    </MudMenuItem>
                  }

                }
                else if(AccountingStatus(Enums.ActionMode.Approve).Id == context.AccountingStatusId && AccessLevelAddmin())
                {
                  if(!context.IsFiled)
                  {
                   <MudMenuItem OnClick='(()=> VoidVoucher(context))'>
                      <div class='d-flex align-center gap-2 '>
                        <MudIcon Icon='@Icons.Material.Filled.CancelPresentation' Size='Size.Small' />
                        <MudText Typo='Typo.body2'>Generate (Void)</MudText>
                      </div>
                    </MudMenuItem>
                  }
                }
                <MudMenuItem OnClick='(()=> {navigationManager.NavigateTo($"/voucher-audit");GlobalClass.voucher = context;})'>
                  <a class='d-flex align-center gap-2 '>
                    <MudIcon Icon='@Icons.Material.Filled.ListAlt' Size='Size.Small' />
                    <MudText Typo='Typo.body2'>Audit Trail</MudText>
                  </a>
              </MudMenuItem>
                <MudMenuItem OnClick='(() => context.ShowReport = ShowReport(context.ShowReport, context))'>
                  <div class='d-flex align-center gap-2 '>
                    <MudIcon Icon='@Icons.Material.Filled.PictureAsPdf' Size='Size.Small' />
                    <MudText Typo='Typo.body2'>Show Report</MudText>
                  </div>
                </MudMenuItem>
                @if(context.AccountingStatusId == AccountingStatusId(Enums.AccountingStatusEnumCategory.VA))
                {
                <MudMenuItem OnClick='(() => ShowBIRDialog(context))'>
                  <div class='d-flex align-center gap-2 '>
                    <MudIcon Icon='@Icons.Material.Filled.DocumentScanner' Size='Size.Small' />
                    <MudText Typo='Typo.body2'>BIR</MudText>
                  </div>
                </MudMenuItem>
                }
              </MudMenu>
            </MudTd>
          </RowTemplate>
          <NoRecordsContent>
            <MudText Class='txt-uppercase font-bold font12' Color='Color.Error'>No records found</MudText>
          </NoRecordsContent>
          <ChildRowContent>
            <MudTr>
              <td colspan='9'>
                <div class='rpt-container-trtd @(context.ShowReport ? "max-height4kpx":"max-height0px")'>
                  <div class='rpt-container-listview'>
                    <MudCard Class='rpt-container-listview__document-cont px-2' Elevation='1'>
                      <div class='rpt-container-listview__iframe-cont'>
                        @if(context.ShowReport)
                        {
                          @if(string.IsNullOrWhiteSpace(pdfContent))
                          {
                             <MudProgressCircular Color="Color.Primary" Indeterminate Size='Size.Large' />
                          }
                          else
                          {
                              <iframe class='rpt-container-listview__iframe-scaled' src='@pdfContent' />
                          }
                          <ReportControls
                            IsCloseOnly='true'
                            ConfirmStr='Close Report' 
                            BackEventClick='(() => context.ShowReport = !context.ShowReport)'/>
                        }
                      </div>
                    </MudCard>
                  </div>
                </div>
              </td>
            </MudTr>
          </ChildRowContent>
          <PagerContent>
              <MudTablePager PageSizeOptions='@GlobalVariable.pageSize'/>
          </PagerContent>
        </MudTable>
      </MudPaper>
    }
  </MudContainer>
</div>

@code{
  [Parameter] public string controlNumber {get;set;} = string.Empty;
  private bool dataFetched, openSideFilter, isPinnedCtrlNo = true, isPinnedAmt = true;
  private int totalItems;
  private string pdfContent = string.Empty, searchTerm = string.Empty;
  private AccountingStatusModel selectedStatus = new();
  private IEnumerable<VoucherModel>? pageData;
  private MudTable<VoucherModel> tableVariable = new MudTable<VoucherModel>();
  private FilterParameter filterParameter = new();
  private IEnumerable<AccountingStatusModel> hasAccountingStatus = new HashSet<AccountingStatusModel>();
  private DateRange dateRange = new DateRange(DateTime.Now, DateTime.Now);
  protected override async Task OnInitializedAsync()
  {
    GlobalClass.pageTitle = "voucher list";
    if (GlobalClass.currentUserAccount == null || GlobalClassList.accountingStatusList == null)
      await Task.Delay(1);
    GlobalClassList.listOfChecks = await checkService.LoadCheck(filterParameter, GlobalClass.token);
    VoucherHubConnection();

    VoucherEntryPage.currActionMode = Enums.ActionMode.Create;
    GlobalClass.voucher = new();
    CompletedFetch();
  }

  void CompletedFetch()
  {
    dataFetched = true;
    Task.Run(StateHasChanged);
  }
  private string AccountingStatus(List<string> selectedStatus)
  {
      var status = "";
      foreach (var item in hasAccountingStatus)
      {
        status = string.Join(", ", hasAccountingStatus.Select(x => x.StatusName));      
      }
      return $"{status}";
  }
  private void FilterTable()
  {
    filterParameter = GlobalVariable.filterParameter;
    tableVariable.ReloadServerData();
  }
  private async Task<TableData<VoucherModel>> LoadVoucherServer(TableState tableState)
  {
    
    if(!String.IsNullOrEmpty(controlNumber))
    {
        filterParameter.IsControlNumber = true;
        filterParameter.ControlNumber = controlNumber;
        Console.WriteLine("Not null");
    }
    IEnumerable<VoucherModel> data = await voucherService.LoadVouchers(filterParameter, GlobalClass.token);
    switch (tableState.SortLabel)
    {
      case "SortControlNumber":
        data = data.OrderByDirection(tableState.SortDirection, x=>x.Id);
        break;
      case "SortDate":
        data = data.OrderByDirection(tableState.SortDirection, x=>x.VoucherDate);
        break;
      case "SortPayee":
        data = data.OrderByDirection(tableState.SortDirection, x=>x.PayeeName);
        break;
      case "SortStatus":
        data = data.OrderByDirection(tableState.SortDirection, x=>x.StatusName);
        break;
      case "SortAmount":
        data = data.OrderByDirection(tableState.SortDirection, x=>x.TotalAmount);
        break;
    }
    //Testing
    GlobalClassList.Vouchers = data.ToList();
    pageData = GlobalClassList.Vouchers.Skip(tableState.Page * tableState.PageSize).Take(tableState.PageSize).ToArray();
    //show void if all checks are cancelled
    GlobalClassList.Vouchers.ForEach( v => {
        var checkLists = v.CheckNumber.Split(',').Distinct();
        var newCheckLists = new List<CheckModel>();
        newCheckLists.Clear();
        foreach(var check in checkLists)
        {
            newCheckLists.Add(GlobalClassList.listOfChecks.Where(x=>x.ControlNumber.Contains(check.ToString())).FirstOrDefault()?? new());
        }
        v.isChecksCancelled =  newCheckLists.All ( c => 
            AccountingStatusEnumCategory(c.AccountingStatusId) == Enums.AccountingStatusEnumCategory.CC
        );
    });
    await Task.Delay(3);
    totalItems = GlobalClassList.Vouchers.Count();

    return new TableData<VoucherModel>()
    {
      TotalItems = totalItems,
      Items = pageData
    };
  }
  private async Task PayeeSearchLookup()
  {
        var parameters = new DialogParameters();
        string dialogTitle = "Payee Look Up";
        parameters.Add("dialogTitle", dialogTitle);
        parameters.Add("buttonText", "Select");
        parameters.Add("color", Color.Success);
        parameters.Add("lookUpType", Enums.LookUpType.Project);
        var options = new DialogOptions() { CloseButton = false, MaxWidth = MaxWidth.Small, FullWidth = true, NoHeader = false, DisableBackdropClick = false };
        var resultDialog = await dialogService.Show<Shared.Dialogs.LookUpDialog.GlobalGenericLookup>(dialogTitle, parameters, options).Result;
        if (!resultDialog.Canceled)
        {
            var payee = (Project)resultDialog.Data;
            filterParameter.PayeeId = payee.ProjectId;
            filterParameter.PayeeCategoryId = payee.ProjectCategoryId;
            filterParameter.PayeeName = payee.ProjectName;
            StateHasChanged();
        }
  }
  private async Task<bool> PromptMessage(Enums.ActionMode actionMode, string? controlNumber)
  {
        bool isNotCancel;
        var parameters = new DialogParameters();
        string contentText = "Voucher";
        string dialogTitle = actionMode.ToString();
        parameters.Add("actionMode", actionMode);
        parameters.Add("dialogTitle", dialogTitle + " " + contentText);
        parameters.Add("contentText", contentText);
        parameters.Add("controlNumber", controlNumber);
        parameters.Add("isVoid", actionMode == Enums.ActionMode.Void ? true : false);
        var options = new DialogOptions()
        {
            CloseButton = false,
            MaxWidth = MaxWidth.ExtraSmall,
            FullWidth = true,
            NoHeader = false,
            DisableBackdropClick = true
        };
        var resultDialog = await dialogService.Show<Shared.Dialogs.GenericPromptDialogs.GenericPrompt>(dialogTitle, parameters, options).Result;
        if (!resultDialog.Canceled) {
          isNotCancel = true;
        }
        else
            isNotCancel = false;

      StateHasChanged();

      return isNotCancel;
  }
  private void EditVoucher(VoucherModel voucher)
  {
    GlobalClass.voucher = voucher;
    navigationManager.NavigateTo($"/voucher");
  }
  private async Task VoidVoucher(VoucherModel voucher)
  {
    if(await PromptMessage(Enums.ActionMode.Void, voucher.ControlNumber))
    {
      voucher.AccountingStatusId = AccountingStatus(Enums.ActionMode.Void).Id;
      voucher.Activity = "Activity: Update voucher status to generated (void); Remarks: "+GlobalVariable.PromptRemarks;
      voucher.UserId = GlobalClass.currentUserAccount.EmployeeId;
      voucher.IsActive = true;

      //Audit Trail
      voucher.StatusName = AccountingStatus(Enums.ActionMode.Void).StatusName;
      voucher.StatusEnumCategoryId = AccountingStatus(Enums.ActionMode.Void).StatusEnumCategoryId;
            
      var updatedStatus = await voucherService.UpdateVoucherStatus(voucher, GlobalClass.token);
      Extensions.ShowAlert("Voucher successfully voided.", Variant.Filled, snackbarService, Severity.Success);
      if(GlobalVariable.AMSHubConnection != null)
        await GlobalVariable.AMSHubConnection.InvokeAsync("SaveVoucher", updatedStatus);
    }
    else
      Extensions.ShowAlert("Action Cancelled", Variant.Filled, snackbarService, Severity.Normal);
  }
  private async Task ApprovedVoucher(VoucherModel voucher)
  {
    if(await PromptMessage(Enums.ActionMode.Approve, voucher.ControlNumber))
    {
      
      voucher.AccountingStatusId = AccountingStatus(Enums.ActionMode.Approve).Id;
      voucher.Activity = "Update voucher status to approved";
      voucher.UserId = GlobalClass.currentUserAccount.EmployeeId;
      voucher.IsActive = true;

      //Audit Trail
      voucher.StatusName = AccountingStatus(Enums.ActionMode.Approve).StatusName;
      voucher.StatusEnumCategoryId = AccountingStatus(Enums.ActionMode.Approve).StatusEnumCategoryId;
            
      var updatedStatus = await voucherService.UpdateVoucherStatus(voucher, GlobalClass.token);
      Extensions.ShowAlert("Voucher has been approved", Variant.Filled, snackbarService, Severity.Success);
      if(GlobalVariable.AMSHubConnection != null)
        await GlobalVariable.AMSHubConnection.InvokeAsync("SaveVoucher", updatedStatus);
    }
    else
      Extensions.ShowAlert("Action Cancelled", Variant.Filled, snackbarService, Severity.Normal);
  }
  private async Task CancelVoucher(VoucherModel voucher)
  {
    if(!voucher.IsFiled)
    {
      if(await PromptMessage(Enums.ActionMode.Cancel, voucher.ControlNumber))
      {
        voucher.AccountingStatusId = AccountingStatus(Enums.ActionMode.Cancel).Id;
        voucher.Activity = "Update voucher status to cancelled";
        voucher.UserId = GlobalClass.currentUserAccount.EmployeeId;
        voucher.IsActive = true;

        //Audit Trail
        voucher.StatusName = AccountingStatus(Enums.ActionMode.Cancel).StatusName;
        voucher.StatusEnumCategoryId = AccountingStatus(Enums.ActionMode.Cancel).StatusEnumCategoryId;

        var updatedStatus = await voucherService.UpdateVoucherStatus(voucher, GlobalClass.token);
        Extensions.ShowAlert("Voucher was cancelled", Variant.Filled, snackbarService, Severity.Success);
        if(GlobalVariable.AMSHubConnection != null)
          await GlobalVariable.AMSHubConnection.InvokeAsync("SaveVoucher", updatedStatus);
      }
      else
        Extensions.ShowAlert("Action Cancelled", Variant.Filled, snackbarService, Severity.Normal);
    } else 
      Extensions.ShowAlert("You are not allowed to cancel the voucher that was filed.", Variant.Filled, snackbarService, Severity.Error);
  }
  private bool ViewMenu(VoucherModel voucher)
  {
    var accountingStatusList = new AccountingStatusModel();
    accountingStatusList = GlobalClassList.accountingStatusList.Where(x => x.Id == voucher.AccountingStatusId).FirstOrDefault();
    return accountingStatusList?.StatusEnumCategoryId == Enums.AccountingStatusEnumCategory.VA;
  }
  private bool ShowReport(bool isShow, VoucherModel voucher)
  {
    Task t = Task.WhenAll(LoadVoucherReport(voucher));
    if(t.Status == TaskStatus.RanToCompletion)
      return isShow = !isShow;
    return isShow = !isShow;
  }
  private async Task LoadVoucherReport(VoucherModel voucher)
  {
    pdfContent = await voucherService.GenerateReport(voucher);
    StateHasChanged();
  }
  private void VoucherHubConnection()
  {
    try
    {
      if(GlobalVariable.AMSHubConnection != null)
        GlobalVariable.AMSHubConnection.On<PettyCashModel>("SaveVoucher",(pettyCashModel) => 
        {
            tableVariable.ReloadServerData();
            StateHasChanged();
        });
    }
    catch (System.Exception ex)
    {
      Console.WriteLine(ex.Message);
       // TODO
    }
  }
   private bool CheckAccessLevel()
    {
      switch(GlobalClass.currentUserAccount.AccessLevel)
      {
        case Enums.AccountingAccessLevel.AccountingViewer :
        case Enums.AccountingAccessLevel.OthersViewer :
          return false;
      }

    return true;
    }
    private bool AccessLevelAddmin()
    {
      return GlobalClass.currentUserAccount.AccessLevel == Enums.AccountingAccessLevel.Administrator 
      ||GlobalClass.currentUserAccount.AccessLevel == Enums.AccountingAccessLevel.AccountingAdmin;

    }
    private bool AccessLevelRequestors()
    {
      return GlobalClass.currentUserAccount.AccessLevel == Enums.AccountingAccessLevel.OthersRequestor
      || GlobalClass.currentUserAccount.AccessLevel == Enums.AccountingAccessLevel.AccountingRequestor
      || GlobalClass.currentUserAccount.AccessLevel == Enums.AccountingAccessLevel.AccountingIssuer;
    
    }
    private bool AccessLevelViewers()
    {
      return GlobalClass.currentUserAccount.AccessLevel == Enums.AccountingAccessLevel.AccountingViewer
      || GlobalClass.currentUserAccount.AccessLevel == Enums.AccountingAccessLevel.OthersViewer;
    }
    private AccountingStatusModel AccountingStatus(Enums.ActionMode actionMode)
    {
      var acctgStatus = new AccountingStatusModel();
      if(actionMode == Enums.ActionMode.Approve)
        acctgStatus = GlobalClassList.accountingStatusList.Where(x=>x.StatusEnumCategoryId == Enums.AccountingStatusEnumCategory.VA).FirstOrDefault();
      else if (actionMode == Enums.ActionMode.Cancel)
        acctgStatus = GlobalClassList.accountingStatusList.Where(x=>x.StatusEnumCategoryId == Enums.AccountingStatusEnumCategory.VC).FirstOrDefault();
      else if(actionMode == Enums.ActionMode.Void)
        acctgStatus =GlobalClassList.accountingStatusList.Where(x=>x.StatusEnumCategoryId == Enums.AccountingStatusEnumCategory.VG).FirstOrDefault();
      return acctgStatus?? new();
    }
    private void ClearSearch()
    {
      filterParameter = new();
      hasAccountingStatus = new HashSet<AccountingStatusModel>();
      dateRange = new DateRange(DateTime.Now, DateTime.Now);
      Task.Run(async()=> await tableVariable.ReloadServerData());
    }
    private async Task ReloadTable()
    {
      filterParameter = new FilterParameter();
      controlNumber = "";
      await tableVariable.ReloadServerData();
    }
    private bool EnableClearButton()
    {
      if(filterParameter.IsControlNumber) 
        return true;
      if(filterParameter.IsAccountingStatus)
        return true;
      if(filterParameter.IsPayee)
        return true;
      if(filterParameter.IsDate)
        return true;
      return false;
    }
    private async Task ShowBIRDialog(VoucherModel voucher)
    {
      GlobalClass.voucherBIRModel = new();
      var parameters = new DialogParameters();
      GlobalClass.voucher = voucher;
      var options = new DialogOptions()
      {
          CloseButton = false,
          MaxWidth = MaxWidth.Medium,
          FullWidth = true,
          NoHeader = false,
          DisableBackdropClick = true
      };
      var resultDialog = await dialogService.Show<Shared.Dialogs.BIRDialogs.BIRDialog>("", options).Result;
    }
    private long AccountingStatusId(Enums.AccountingStatusEnumCategory id)
    {
        return GlobalClassList.accountingStatusList
            .Where( acctg => id == acctg.StatusEnumCategoryId)
            .Select( acctg => acctg.Id)
            .FirstOrDefault();
    }
    private Enums.AccountingStatusEnumCategory AccountingStatusEnumCategory(long acctgId)
    {
        return GlobalClassList.accountingStatusList.Where( acctg => acctgId == acctg.Id).Select( acctg => acctg.StatusEnumCategoryId).FirstOrDefault();
    }

    private async Task PreviewVoucher(VoucherModel model)
    {
      var parameters = new DialogParameters();
      parameters.Add("DialogTitle","Voucher");
      parameters.Add("VoucherModel", model);
      var options = new DialogOptions() { CloseButton = false, MaxWidth = MaxWidth.Medium, FullWidth = false, NoHeader = false, DisableBackdropClick = false };
      var resultDialog = await dialogService.Show<Shared.Dialogs.PreviewInformationDialogs.PreviewVoucherDialog>("", parameters, options).Result;
    }
}