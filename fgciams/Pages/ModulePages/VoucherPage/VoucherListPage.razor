@page "/voucher/list"
@page "/voucher-list"

@inject IDialogService dialogService
@inject IVoucherService voucherService
@inject NavigationManager navigationManager
@inject ISnackbar snackBar
@inject ApplicationState AppState
@inject IGlobalService globalService
@inject IRequestForPaymentService requestForPaymentService

<div class='page-cont'>
  <div class='drawer-right'>
    <MudDrawer Class='pa-1' @bind-Open='openSideFilter' Fixed='false' Anchor='Anchor.Right' Elevation='0' Variant='DrawerVariant.Mini' OpenMiniOnHover='false'>
      <div class='drawer-right__filtercont'>
        <div class='icon-area d-flex align-center'>
          <MudIconButton OnClick='OpenSideFilter' Icon='@Icons.Filled.FilterList' arial-label='Close Filter' Size='Size.Medium' />
        </div>
        <div class='filter-title d-flex align-center'>
          <p class='title875'>Filter</p>
          <MudSpacer />
          <MudIconButton OnClick='OpenSideFilter' Icon='@Icons.Filled.Close' aria-label='Close Filter' Size='Size.Medium' />
        </div>
        <div class='filter-content d-flex flex-column pl-4 pr-4 gap-1 @visibility'>
          <div class='d-flex align-center gap-2 @visibility'>
            <MudCheckBox Class='pt-1' @bind-Checked='filterParameter.IsControlNumber' Dense Size='Size.Small' />
            <MudTextField Class='txtfield-75' @bind-Value='filterParameter.ControlNumber' Placeholder='Control Number'
            Clearable='true' Variant='Variant.Outlined' Disabled='!filterParameter.IsControlNumber'/>
          </div>
          <div class='d-flex align-center gap-2 @visibility'>
            <MudCheckBox Class='pt-1' @bind-Checked='filterParameter.IsAccountingStatus' Dense Size='Size.Small' />
            <MudSelect Class='selectparent-75 fa-icon-center' MultiSelectionTextFunc='@(new Func<List<string>, string>(AccountingStatus))' @bind-SelectedValues='hasAccountingStatus' 
              @bind-Value="selectedStatus" Dense="true" MultiSelection=true Disabled='!filterParameter.IsAccountingStatus' PlaceHolder='Accounting Status'
              Variant='Variant.Outlined'>
              @if(GlobalClassList.accountingStatusList != null)
              {
                @foreach (var item in GlobalClassList.accountingStatusList.Where(x=> (int)x.StatusEnumCategoryId == 11 || (int)x.StatusEnumCategoryId == 12 || (int)x.StatusEnumCategoryId == 13))
                {
                  <MudSelectItem Value="@item">@item.StatusName</MudSelectItem>
                }
              }
            </MudSelect>
          </div>
          <div class='d-flex align-center gap-2 @visibility'>
          <MudCheckBox Class='pt-1' @bind-Checked='filterParameter.IsPayee' Dense Size='Size.Small' />
          <MudTextField Class='txtfield-75' @onclick='PayeeSearchLookup' @bind-Value='filterParameter.PayeeName' Placeholder='Payee' 
          ReadOnly Disabled='!filterParameter.IsPayee' Variant='Variant.Outlined' />
          </div>
          <div class='d-flex align-center gap-2 @visibility'>
            <MudCheckBox Class='pt-1' @bind-Checked='filterParameter.IsDate' Dense Size='Size.Small'/>
            <MudDateRangePicker Class='txtfield-75' @bind-DateRange='dateRange' Disabled='!filterParameter.IsDate' Variant='Variant.Outlined' ></MudDateRangePicker>
          </div>
          <div class='d-flex align-center justify-end pt-1'>
            <MudButton Class='wspace-nowrap' OnClick='ClearSearch' Variant='Variant.Filled' Color='Color.Secondary' Disabled=!EnableClearButton()>Clear Filter</MudButton>
            &nbsp;
            <MudButton Class='wspace-nowrap' OnClick='FilterItems' Variant='Variant.Filled' Color='Color.Secondary'>Apply Filter</MudButton>
          </div>
        </div>
      </div>
    </MudDrawer>
  </div>

  <MudContainer Class='voucherlist' Fixed='false' MaxWidth='MaxWidth.ExtraExtraLarge'>
    @if (!dataFetched)
    {
      <SkeletonPageList />
    }
    else
    {
      <MudPaper>
        <MudTable Class='configtables row-popup-anim-2px' ServerData='new Func<TableState, Task<TableData<VoucherModel>>>(LoadVoucherServer)' Hover='true' Height='calc(100vh - 185px)'
        Breakpoint='Breakpoint.Sm' Bordered FixedHeader FixedFooter Dense Striped='false'
        RowsPerPage='30' @ref='tableVariable'>
          <ToolBarContent>
            <MudText Typo='Typo.caption'>
              @totalItems
              @(totalItems == 1 ? "item" : "items")
              in Total
            </MudText>
            <MudSpacer/>
            <MudTooltip Text="Refresh Table">
              <MudIconButton Icon="@Icons.Filled.Refresh" Size="Size.Small" OnClick='ClearSearch' ></MudIconButton>
            </MudTooltip>
            <MudMenu StartIcon='@Icons.Filled.MoreVert' AnchorOrigin='Origin.TopLeft' ActivationEvent='MouseEvent.MouseOver'
              TransformOrigin='Origin.TopRight' Dense='true' Size='Size.Small' Label='More'>
              @if(AccessLevelAddmin() || AccessLevelRequestors())
              {
                  <MudMenuItem OnClick='(()=> navigationManager.NavigateTo($"/voucher/create"))'>
                  <div class='d-flex align-center gap-2 menu-grow-anim'>
                      <MudIcon Icon='@Icons.Filled.Add' Size='Size.Small' />
                    <MudText Typo='Typo.body2'>Add</MudText>
                  </div>
              </MudMenuItem>                        
              }
          </MudMenu>
          </ToolBarContent>
          <ColGroup>
            <col style='width: 20px' />
            <col />
            <col />
            <col style='width: 10px' />
            <col style='width: 20px' />
            <col style='width: 20px' />
            <col style='width: 1%' />
            <col style='width: 1%' />
            <col style='width: 20px'/>
          </ColGroup>
          <HeaderContent>
            <MudTh Class='customheader-1'>
              <div class='d-flex align-center justify-start'>
                <MudTableSortLabel SortLabel='SortControlNumber' T='VoucherModel'
                InitialDirection='SortDirection.None'>
                  Control No.
                </MudTableSortLabel>
                <MudSpacer />
                <MudTableSortLabel SortLabel='SortDate' T='VoucherModel'
                InitialDirection='SortDirection.Descending'>
                  Date
                </MudTableSortLabel>
              </div>
            </MudTh>
            <MudTh Class='customheader-1'>Payee</MudTh>
            <MudTh Class='customheader-1'>Description</MudTh>
            <MudTh Class='customheader-1 text-center pa-2'></MudTh>
            <MudTh Class='customheader-1 text-center'>Status</MudTh>
            <MudTh Class='customheader-1 text-center'>Filed</MudTh>
            <MudTh Class='customheader-1 text-right pa-2'>Checks</MudTh>
            <MudTh Class='customheader-1 text-right'>Amount</MudTh>
            <MudTh Class='customheader-1 pa-2'>Action</MudTh>
          </HeaderContent>
          <RowTemplate>
            <MudTd DataLabel='control no.'>
              <div class='d-flex align-center'>
                  <MudChip Class='chip-radius-5 txt-uppercase font-bold font10' Color='Color.Error' Size='Size.Small'>
                    @context.ControlNumber
                  </MudChip>
                  <MudChip Class='chip-radius-5 font-bold font10' Variant='Variant.Text' Icon='@Icons.Filled.CalendarMonth' Color='Color.Dark' Size='Size.Small'>
                    @Convert.ToDateTime(context.VoucherDate).ToShortDateString()
                  </MudChip>
              </div>
            </MudTd>
            <MudTd Class='wspace-nowrap font12' DataLabel='Payee'>@context.PayeeName</MudTd>
            <MudTd Class='wbreak-breakword font12' DataLabel='Description'>@context.Description</MudTd>
            <MudTd Class='wspace-nowrap text-center pa-2' DataLabel='Signatories'>
              <MudTooltip Text='Signatories' Placement='Placement.Top'>
                <MudMenu Icon="@Icons.Filled.Groups" AnchorOrigin='Origin.BottomRight' ActivationEvent='MouseEvent.MouseOver'
                  TransformOrigin='Origin.TopLeft' Dense Size='Size.Small'>
                  <MudMenuItem>
                    <MudPaper class='pa-2 bgc-e7f2fb min-width200px'>
                      <MudText Class='font10 font-bold'>Prepared By:</MudText>
                      <SignatoriesComponent employeeId='@context.PreparedById' />
                    </MudPaper>
                  </MudMenuItem>
                  <MudMenuItem>
                    <MudPaper class='pa-2 bgc-e7f2fb min-width200px'>
                      <MudText Class='font10 font-bold'>Verified By:</MudText>
                      <SignatoriesComponent employeeId='@context.VerifiedById' />
                    </MudPaper>
                  </MudMenuItem>
                  <MudMenuItem>
                    <MudPaper class='pa-2 bgc-e7f2fb min-width200px'>
                      <MudText Class='font10 font-bold'>Approved By:</MudText>
                      <SignatoriesComponent employeeId='@context.ApprovedById' />
                    </MudPaper>
                  </MudMenuItem>
                </MudMenu>
              </MudTooltip>
            </MudTd>
            <MudTd Class='text-left' DataLabel='Status'>
              @if (dataFetched)
              {
                <MudChip Class='chip-radius-5 font-bold font10' Variant='Variant.Filled' Size='Size.Small'
                  Style="@Extensions.GetAcctgStatusColor(context.AccountingStatusId)">
                  @context.StatusName
                </MudChip>
              }
            </MudTd>
            <MudTd Class='text-center' DataLabel='Filed'>
               <MudCheckBox Class='chip-radius-5 font-bold font10' @bind-Checked=context.IsFiled ReadOnly Dense Size='Size.Small' />
            </MudTd>
            <MudTd Class='wspace-nowrap pa-2'>
              <div class='d-flex align-center justify-center'>
                @if (!string.IsNullOrWhiteSpace(context.CheckNumber)) {
                  <MudToggleIconButton @bind-Toggled='context.isShowChecks'
                    Icon="@Icons.Filled.ExpandMore" Color="@Color.Tertiary" Title="Expand" Size='Size.Small' ToggledSize='Size.Small'
                    ToggledIcon="@Icons.Filled.ExpandLess" ToggledColor="@Color.Info" ToggledTitle="Collapse"/>
                } else {
                  <MudText Class='font12'> - </MudText>
                }
              </div>
            </MudTd>        
            <MudTd Class='wspace-nowrap text-right' DataLabel='Amount'>
              <div class='d-flex align-center gap-2'>
                @if (context.TotalAmount > 0)
                {
                  <MudText Class='font-bold color-green font12'>
                    @Extensions.GetEnumDescription(Enums.BankCurrency.PhilippinePeso) 
                  </MudText>
                  <MudSpacer />
                  <MudText Class='font-bold color-green font12' Typo='Typo.body2'>
                    @context.TotalAmount.ToString("N2")
                  </MudText>
                }
                else
                {
                  <MudText Class='font-bold font12' Color='Color.Error'>
                    @Extensions.GetEnumDescription(Enums.BankCurrency.PhilippinePeso)
                  </MudText>
                  <MudSpacer />
                  <MudText Class='font-bold font12' Color='Color.Error'>
                    @context.TotalAmount.ToString("N2")
                  </MudText>
                }
              </div>
            </MudTd>
            <MudTd Class='text-center pa-2' DataLabel='Action'>
              <MudMenu Icon='@Icons.Filled.MoreVert' AnchorOrigin='Origin.BottomLeft' ActivationEvent='MouseEvent.MouseOver'
              TransformOrigin='Origin.TopRight' Dense='true' Size='Size.Small'>
                @if((!ViewMenu(context) && AccessLevelAddmin())
                || (!ViewMenu(context)) && AccessLevelRequestors())
                {
                  <MudMenuItem OnClick='(()=> EditVoucher(context))'>
                    <a class='d-flex align-center gap-2 menu-grow-anim'>
                      <MudIcon Icon='@Icons.Filled.Edit' Size='Size.Small' />
                      <MudText Typo='Typo.body2'>Edit</MudText>
                    </a>
                  </MudMenuItem>

                  if(AccessLevelAddmin())
                  {
                    <MudMenuItem OnClick='(()=> ApprovedVoucher(context))'>
                      <div class='d-flex align-center gap-2 menu-grow-anim'>
                        <MudIcon Icon='@Icons.Filled.CheckCircle' Size='Size.Small' />
                        <MudText Typo='Typo.body2'>Approve</MudText>
                      </div>
                    </MudMenuItem>
                    <MudMenuItem OnClick='(()=> CancelVoucher(context))'>
                      <div class='d-flex align-center gap-2 menu-grow-anim'>
                        <MudIcon Icon='@Icons.Filled.Cancel' Size='Size.Small' />
                        <MudText Typo='Typo.body2'>Cancel</MudText>
                      </div>
                    </MudMenuItem>
                  }

                }
                else if(AccountingStatus(Enums.ActionMode.Approve).Id == context.AccountingStatusId && AccessLevelAddmin())
                {
                   <MudMenuItem OnClick='(()=> VoidVoucher(context))'>
                      <div class='d-flex align-center gap-2 menu-grow-anim'>
                        <MudIcon Icon='@Icons.Filled.CancelPresentation' Size='Size.Small' />
                        <MudText Typo='Typo.body2'>Generate (Void)</MudText>
                      </div>
                    </MudMenuItem>
                }
                <MudMenuItem OnClick='(()=> {navigationManager.NavigateTo($"/voucher-audit");GlobalClass.voucher = context;})'>
                  <a class='d-flex align-center gap-2 menu-grow-anim'>
                    <MudIcon Icon='@Icons.Filled.ListAlt' Size='Size.Small' />
                    <MudText Typo='Typo.body2'>Audit Trail</MudText>
                  </a>
              </MudMenuItem>
                <MudMenuItem OnClick='(() => context.ShowReport = ShowReport(context.ShowReport, context))'>
                  <div class='d-flex align-center gap-2 menu-grow-anim'>
                    <MudIcon Icon='@Icons.Filled.PictureAsPdf' Size='Size.Small' />
                    <MudText Typo='Typo.body2'>Show Report</MudText>
                  </div>
                </MudMenuItem>
                @if(context.StatusEnumCategoryId == Enums.AccountingStatusEnumCategory.VA)
                {
                <MudMenuItem OnClick='(() => ShowBIRDialog(context))'>
                  <div class='d-flex align-center gap-2 menu-grow-anim'>
                    <MudIcon Icon='@Icons.Filled.DocumentScanner' Size='Size.Small' />
                    <MudText Typo='Typo.body2'>BIR</MudText>
                  </div>
                </MudMenuItem>
                }
              </MudMenu>
            </MudTd>
          </RowTemplate>
          <NoRecordsContent>
            <MudText Class='txt-uppercase font-bold font12' Color='Color.Error'>No records found</MudText>
          </NoRecordsContent>
          <ChildRowContent>
            @if (context.ShowReport)
            {
              <td colspan="9">
                <div class='d-flex align-center pa-2 bgc-f2f2f2'>
                    <MudSpacer />
                    <MudButton OnClick='(() => context.ShowReport = ShowReport(context.ShowReport, context))' EndIcon="@Icons.Rounded.Close" IconColor='Color.Error' Size='Size.Small' >
                        Close Report
                    </MudButton>
                </div>
                <MudTr Class='d-flex align-stretch justify-center default-report-container'>
                    @if (string.IsNullOrWhiteSpace(PDFContent))
                    {
                    <MudOverlay Visible='true' DarkBackground="false" AutoClose="true">
                        <MudProgressCircular Color="Color.Primary" Indeterminate="true" />
                    </MudOverlay>
                    }
                    else
                    {
                    <iframe src='@PDFContent' />
                    }
                </MudTr>
              </td>
            }
            @if (context.isShowChecks && !context.ShowReport)
            {
              <MudTr>
                <td colspan="9">
                    <CheckListComponent stringChecks=@context.CheckNumber />
                </td>
              </MudTr>
            }
          </ChildRowContent>
            <PagerContent>
                <MudTablePager />
            </PagerContent>
        </MudTable>
      </MudPaper>
    }
  </MudContainer>
</div>

@code{
  private bool dataFetched, openSideFilter;
  private int totalItems;
  private string PDFContent = string.Empty, searchTerm = string.Empty, visibility = "visibility-animation-hide";
  private AccountingStatusModel selectedStatus = new();
  private IEnumerable<VoucherModel>? pageData;
  private MudTable<VoucherModel>? tableVariable;
  private FilterParameter filterParameter = new();
  private IEnumerable<AccountingStatusModel> hasAccountingStatus = new HashSet<AccountingStatusModel>();
  private DateRange dateRange = new DateRange(DateTime.Now, DateTime.Now);
  protected override async Task OnInitializedAsync()
  {
    GlobalClass.pageTitle = "voucher list";
    if (GlobalClass.currentUserAccount == null || GlobalClassList.accountingStatusList == null)
      await Task.Delay(1);
    VoucherHubConnection();
    CompletedFetch();
  }

  void CompletedFetch()
  {
    dataFetched = true;
    Task.Run(StateHasChanged);
  }
  private string AccountingStatus(List<string> selectedStatus)
  {
      var status = "";
      foreach (var item in hasAccountingStatus)
      {
        status = string.Join(", ", hasAccountingStatus.Select(x => x.StatusName));      
      }
      return $"{status}";
  }
  private void FilterItems()
  {
    filterParameter.DateFrom = dateRange.Start.GetValueOrDefault();
    filterParameter.DateTo = dateRange.End.GetValueOrDefault();
    filterParameter.AccountingStatusId = string.Join(",", hasAccountingStatus.Select(x=>x.Id));
    tableVariable?.ReloadServerData();
  }
  private async Task<TableData<VoucherModel>> LoadVoucherServer(TableState tableState)
  {
    IEnumerable<VoucherModel> data = await voucherService.LoadVouchers(filterParameter, GlobalClass.token);
    
    switch (tableState.SortLabel)
    {
      case "SortControlNumber":
        data = data.OrderByDirection(tableState.SortDirection, x=>x.Id);
        break;
      case "SortDate":
        data = data.OrderByDirection(tableState.SortDirection, x=>x.VoucherDate);
        break;
    }

    GlobalClassList.Vouchers = data.ToList();
    pageData = GlobalClassList.Vouchers.Skip(tableState.Page * tableState.PageSize).Take(tableState.PageSize).ToArray();
    
    await Task.Delay(3);
    totalItems = GlobalClassList.Vouchers.Count();

    return new TableData<VoucherModel>()
    {
      TotalItems = totalItems,
      Items = pageData
    };
  }
  private async Task PayeeSearchLookup()
  {
        var parameters = new DialogParameters();
        string dialogTitle = "Payee Look Up";
        parameters.Add("dialogTitle", dialogTitle);
        parameters.Add("buttonText", "Select");
        parameters.Add("color", Color.Success);
        parameters.Add("lookUpType", Enums.LookUpType.Project);
        var options = new DialogOptions()
        {
            CloseButton = false,
            MaxWidth = MaxWidth.Small,
            FullWidth = true,
            NoHeader = false,
            DisableBackdropClick = false
        };
        var resultDialog = await dialogService.Show<Shared.Dialogs.LookUpDialog.GlobalGenericLookup>(dialogTitle, parameters, options).Result;
        if (!resultDialog.Cancelled)
        {
            var payee = (Project)resultDialog.Data;
            filterParameter.PayeeId = payee.ProjectId;
            filterParameter.PayeeCategoryId = payee.ProjectCategoryId;
            filterParameter.PayeeName = payee.ProjectName;
            StateHasChanged();
        }
  }
  private async Task<bool> PromptMessage(Enums.ActionMode actionMode)
  {
        bool isNotCancel;
        var parameters = new DialogParameters();
        string contentText = "Voucher ";
        string dialogTitle = actionMode == Enums.ActionMode.Cancel ? "Cancel " + contentText 
        : actionMode == Enums.ActionMode.Approve ? "Approve " + contentText 
        : "Void " + contentText;

        parameters.Add("actionMode", actionMode == Enums.ActionMode.Cancel ? Enums.ActionMode.Cancel 
        : actionMode == Enums.ActionMode.Approve ? Enums.ActionMode.Approve
        : Enums.ActionMode.Void );

        parameters.Add("contentText", contentText);
        var options = new DialogOptions()
        {
            CloseButton = false,
            MaxWidth = MaxWidth.ExtraSmall,
            FullWidth = true,
            NoHeader = false,
            DisableBackdropClick = true
        };
        var resultDialog = await dialogService.Show<Shared.Dialogs.GenericPromptDialogs.GenericPrompt>(dialogTitle, parameters, options).Result;
        if (!resultDialog.Cancelled)
            isNotCancel = true;
        else
            isNotCancel = false;

      StateHasChanged();

      return isNotCancel;
  }
  private async Task EditVoucher(VoucherModel voucher)
  {
    GlobalClass.voucher = voucher;

    
    navigationManager.NavigateTo($"/voucher/create");
  }
  private async Task VoidVoucher(VoucherModel voucher)
  {
    if(await PromptMessage(Enums.ActionMode.Void))
    {
      
      voucher.AccountingStatusId = AccountingStatus(Enums.ActionMode.Void).Id;
      voucher.Activity = "Update voucher status to generated (void)";
      voucher.UserId = GlobalClass.currentUserAccount.EmployeeId;
      voucher.IsActive = true;

      //Audit Trail
      voucher.StatusName = AccountingStatus(Enums.ActionMode.Void).StatusName;
      voucher.StatusEnumCategoryId = AccountingStatus(Enums.ActionMode.Void).StatusEnumCategoryId;
            
      var updatedStatus = await voucherService.UpdateVoucherStatus(voucher, GlobalClass.token);
      Extensions.ShowAlert("Voucher has been voided", Variant.Filled, snackBar, Severity.Success);
      if(GlobalVariable.AMSHubConnection != null)
        await GlobalVariable.AMSHubConnection.InvokeAsync("SaveVoucher", updatedStatus);
    }
    else
      Extensions.ShowAlert("Action Cancelled", Variant.Filled, snackBar, Severity.Normal);
  }
  private async Task ApprovedVoucher(VoucherModel voucher)
  {
    if(await PromptMessage(Enums.ActionMode.Approve))
    {
      
      voucher.AccountingStatusId = AccountingStatus(Enums.ActionMode.Approve).Id;
      voucher.Activity = "Update voucher status to approved";
      voucher.UserId = GlobalClass.currentUserAccount.EmployeeId;
      voucher.IsActive = true;

      //Audit Trail
      voucher.StatusName = AccountingStatus(Enums.ActionMode.Approve).StatusName;
      voucher.StatusEnumCategoryId = AccountingStatus(Enums.ActionMode.Approve).StatusEnumCategoryId;
            
      var updatedStatus = await voucherService.UpdateVoucherStatus(voucher, GlobalClass.token);
      Extensions.ShowAlert("Voucher has been approved", Variant.Filled, snackBar, Severity.Success);
      if(GlobalVariable.AMSHubConnection != null)
        await GlobalVariable.AMSHubConnection.InvokeAsync("SaveVoucher", updatedStatus);
    }
    else
      Extensions.ShowAlert("Action Cancelled", Variant.Filled, snackBar, Severity.Normal);
  }
  private async Task CancelVoucher(VoucherModel voucher)
  {
    if(await PromptMessage(Enums.ActionMode.Cancel))
    {
      voucher.AccountingStatusId = AccountingStatus(Enums.ActionMode.Cancel).Id;
      voucher.Activity = "Update voucher status to cancelled";
      voucher.UserId = GlobalClass.currentUserAccount.EmployeeId;
      voucher.IsActive = true;

      //Audit Trail
      voucher.StatusName = AccountingStatus(Enums.ActionMode.Cancel).StatusName;
      voucher.StatusEnumCategoryId = AccountingStatus(Enums.ActionMode.Cancel).StatusEnumCategoryId;

      var updatedStatus = await voucherService.UpdateVoucherStatus(voucher, GlobalClass.token);
      Extensions.ShowAlert("Voucher was cancelled", Variant.Filled, snackBar, Severity.Success);
      if(GlobalVariable.AMSHubConnection != null)
        await GlobalVariable.AMSHubConnection.InvokeAsync("SaveVoucher", updatedStatus);
    }
    else
      Extensions.ShowAlert("Action Cancelled", Variant.Filled, snackBar, Severity.Normal);
  }
  private bool ViewMenu(VoucherModel voucher)
  {
    var accountingStatusList = new AccountingStatusModel();
    accountingStatusList = GlobalClassList.accountingStatusList.Where(x => x.Id == voucher.AccountingStatusId).FirstOrDefault();
    return accountingStatusList?.StatusEnumCategoryId == Enums.AccountingStatusEnumCategory.VA;
  }
  private bool ShowReport(bool isShow, VoucherModel voucher)
  {
    Task t = Task.WhenAll(LoadVoucherReport(voucher));
    if(t.Status == TaskStatus.RanToCompletion)
      return isShow = !isShow;
    return isShow = !isShow;
  }
  private async Task LoadVoucherReport(VoucherModel voucher)
  {
    PDFContent = await voucherService.GenerateReport(voucher);
    StateHasChanged();
  }

  private void OpenSideFilter()
  {
    openSideFilter = !openSideFilter;
    if(openSideFilter)
    visibility = "visibility-animation-show";
    if(!openSideFilter)
    visibility = "visibility-animation-hide";
  }
  private void VoucherHubConnection()
  {
    try
    {
      var statusId = GlobalClassList.accountingStatusList
      .Where(x=>x.StatusEnumCategoryId == Enums.AccountingStatusEnumCategory.VC)
      .Select(x=>x.Id).FirstOrDefault();
      if(GlobalVariable.AMSHubConnection != null)
        GlobalVariable.AMSHubConnection.On<VoucherModel>("SaveVoucher", (_voucher) =>{
        GlobalClassList.Vouchers.RemoveAll(x=>x.Id == _voucher.Id);
        GlobalClassList.Vouchers.Add(_voucher);
        GlobalClassList.Vouchers = GlobalClassList.Vouchers.Where(x=>x.AccountingStatusId != statusId).OrderBy(x=>x.ControlNumber).ToList();
        StateHasChanged();

      });
    }
    catch (System.Exception ex)
    {
      Console.WriteLine(ex.Message);
       // TODO
    }
  }
   private bool CheckAccessLevel()
    {
      switch(GlobalClass.currentUserAccount.AccessLevel)
      {
        case Enums.AccountingAccessLevel.AccountingViewer :
        case Enums.AccountingAccessLevel.OthersViewer :
          return false;
      }

    return true;
    }
    private bool AccessLevelAddmin()
    {
      return GlobalClass.currentUserAccount.AccessLevel == Enums.AccountingAccessLevel.Administrator 
      ||GlobalClass.currentUserAccount.AccessLevel == Enums.AccountingAccessLevel.AccountingAdmin;

    }
    private bool AccessLevelRequestors()
    {
      return GlobalClass.currentUserAccount.AccessLevel == Enums.AccountingAccessLevel.OthersRequestor
      || GlobalClass.currentUserAccount.AccessLevel == Enums.AccountingAccessLevel.AccountingRequestor
      || GlobalClass.currentUserAccount.AccessLevel == Enums.AccountingAccessLevel.AccountingIssuer;
    
    }
    private bool AccessLevelViewers()
    {
      return GlobalClass.currentUserAccount.AccessLevel == Enums.AccountingAccessLevel.AccountingViewer
      || GlobalClass.currentUserAccount.AccessLevel == Enums.AccountingAccessLevel.OthersViewer;
    }
    private AccountingStatusModel AccountingStatus(Enums.ActionMode actionMode)
    {
      var acctgStatus = new AccountingStatusModel();
      if(actionMode == Enums.ActionMode.Approve)
        acctgStatus = GlobalClassList.accountingStatusList.Where(x=>x.StatusEnumCategoryId == Enums.AccountingStatusEnumCategory.VA).FirstOrDefault();
      else if (actionMode == Enums.ActionMode.Cancel)
        acctgStatus = GlobalClassList.accountingStatusList.Where(x=>x.StatusEnumCategoryId == Enums.AccountingStatusEnumCategory.VC).FirstOrDefault();
      else if(actionMode == Enums.ActionMode.Void)
        acctgStatus =GlobalClassList.accountingStatusList.Where(x=>x.StatusEnumCategoryId == Enums.AccountingStatusEnumCategory.VG).FirstOrDefault();
      return acctgStatus?? new();
    }
    private void ClearSearch()
    {
      filterParameter = new();
      hasAccountingStatus = new HashSet<AccountingStatusModel>();
      dateRange = new DateRange(DateTime.Now, DateTime.Now);
      Task.Run(async()=> await tableVariable!.ReloadServerData());
    }
    private bool EnableClearButton()
    {
      if(filterParameter.IsControlNumber) 
        return true;
      if(filterParameter.IsAccountingStatus)
        return true;
      if(filterParameter.IsPayee)
        return true;
      if(filterParameter.IsDate)
        return true;
      return false;
    }
    private async Task ShowBIRDialog(VoucherModel voucher)
    {
      var parameters = new DialogParameters();
      GlobalClass.voucher = voucher;
      var options = new DialogOptions()
      {
          CloseButton = false,
          MaxWidth = MaxWidth.Medium,
          FullWidth = true,
          NoHeader = false,
          DisableBackdropClick = true
      };
      var resultDialog = await dialogService.Show<Shared.Dialogs.BIRDialogs.BIRDialog>("", options).Result;
    }
}