@page "/request-payment/print"

@inject IRequestForPaymentService requestForPaymentService
@inject NavigationManager navigationManager
@inject IDialogService dialogService
@inject ISnackbar SnackbarService

<div class='page-cont d-flex'>
    <div class='rpt-container'>
        <MudCard Class='rpt-container__document-cont'>
            <div class='rpt-container__iframe-cont'>
                @if (string.IsNullOrWhiteSpace(pdfReport))
                {
                    <MudProgressCircular Color='Color.Primary' Indeterminate />
                }
                else
                {
                    <iframe src='@pdfReport'/>
                }
            </div>
        </MudCard>
        <ReportControls 
            ControlPosition='rptctrls-side-bottom'
            ConfirmStr='SAVE Request'
            IsSaved='isSaved' 
            Processing='_processing'
            BackEventClick='Back'
            PromptEventClick='Prompt'/>
    </div>
</div>


@code{

    string pdfReport = string.Empty;
    bool isSaved = false, _processing;

    protected override async Task OnInitializedAsync()
    {
        GlobalClass.pageTitle = "RFP Report";
        Task t = Task.WhenAll(LoadPDFReport());
        await t;
    }
    private async Task LoadPDFReport()
    {
        pdfReport = await requestForPaymentService.GenerateRFPReport(GlobalClass.forPrintingOrSaveRFP);
        pdfReport += "#toolbar=0";
    }
    private async Task Prompt()
    {
        _processing = true;
        var parameters = new DialogParameters();
        string contentText = "request for payment ";
        string dialogTitle = GlobalClass.forPrintingOrSaveRFP.Id == 0 ? "Create " + contentText : "Update " + contentText;
        parameters.Add("contentText", contentText);
        parameters.Add("dialogTitle", dialogTitle);
        parameters.Add("controlNumber", GlobalClass.forPrintingOrSaveRFP.ControlNumber);
        parameters.Add("actionMode", GlobalClass.forPrintingOrSaveRFP.Id == 0 ? Enums.ActionMode.Create : Enums.ActionMode.Update);
        var options = new DialogOptions() { CloseButton = false, MaxWidth = MaxWidth.ExtraSmall, FullWidth = true, NoHeader = false, DisableBackdropClick = true };
        var resultDialog = await dialogService.Show<Shared.Dialogs.GenericPromptDialogs.GenericPrompt>(dialogTitle, parameters, options).Result;
        if (!resultDialog.Canceled)
        {
            GlobalClass.forPrintingOrSaveRFP.PreparedByPicture = null;
            GlobalClass.forPrintingOrSaveRFP.ApprovedByPicture = null;
            GlobalClass.forPrintingOrSaveRFP.RecommendedByPicture = null;
            GlobalClass.forPrintingOrSaveRFP.RequestedByPicture = null;
            //Avoid Error in report not accepting null
            GlobalClass.forPrintingOrSaveRFP.PayeeDepartment = string.Empty;
            GlobalClass.forPrintingOrSaveRFP.PayeeSection = string.Empty;
            GlobalClass.forPrintingOrSaveRFP.PayeePosition = string.Empty;
            var SavedRFP = new RequestForPaymentModel();
            if (GlobalClass.forPrintingOrSaveRFP.Id == 0)
            {
               SavedRFP = await requestForPaymentService.AddRequestPayment(GlobalClass.forPrintingOrSaveRFP, GlobalClass.token);
               Extensions.ShowAlert("Request for payment successfully saved.", Variant.Filled, SnackbarService,Severity.Success);
               isSaved = true;
               _processing = false;
            }
            else
            {
                SavedRFP = await requestForPaymentService.UpdateRequestPayment(GlobalClass.forPrintingOrSaveRFP, GlobalClass.token);
                Extensions.ShowAlert("Request for payment successfully updated.", Variant.Filled, SnackbarService,Severity.Success);
                isSaved = true;
                _processing = false;
            }
            pdfReport = await requestForPaymentService.GenerateRFPReport(SavedRFP);
            if (GlobalVariable.AMSHubConnection != null)
            {
                if(GlobalClass.forPrintingOrSaveRFP.Id == 0) {
                    await Task.Run( async ()=> await GlobalVariable.AMSHubConnection.InvokeAsync("SaveRequestForPayment", SavedRFP).
                        ContinueWith( async(t) => 
                        {   
                            if(t.Status == TaskStatus.RanToCompletion) 
                            {  
                                NotificationModel notification = new();
                                notification.SenderId = GlobalClass.currentUserAccount.EmployeeId;
                                notification.StatusAction = Enums.ActionMode.Create;
                                notification.ModuleName = "Request for Payment";
                                notification.ControlNumber = SavedRFP.ControlNumber;
                                notification.ApproverId = SavedRFP.ApprovedById;
                                notification.DateNotify = DateTime.Now;
                                await Extensions.SendNotification(notification); 
                            }
                        }));
                } else {
                    await GlobalVariable.AMSHubConnection.InvokeAsync("SaveRequestForPayment", SavedRFP);
                }
            } 
        }
        else
        {
            _processing = false;
        }
    }
    private void Back()
    {
        if(GlobalClass.forPrintingOrSaveRFP != null)
        {
            if(!isSaved)
            {
                GlobalClass.requestForPayment = GlobalClass.forPrintingOrSaveRFP;
                GlobalClassList.requestForPayments = GlobalClass.forPrintingOrSaveRFP.RequestForPaymentDetails.ToList();
                navigationManager.NavigateTo($"/request-payment");
            }
            else
            {
                navigationManager.NavigateTo($"/request-payment/list");
                GlobalClass.forPrintingOrSaveRFP = default!;
            }
        } else
        {
            navigationManager.NavigateTo($"/request-payment/list");
            GlobalClass.forPrintingOrSaveRFP = default!;
        }
       
       
    }
}