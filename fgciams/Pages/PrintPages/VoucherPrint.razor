@page "/voucher/print"

@inject IVoucherService voucherService
@inject IDialogService dialogService
@inject ISnackbar snackBar
@inject NavigationManager navigationManager

<div class='page-cont d-flex'>
    <div class='d-flex flex-1 pa-2'>
      <MudCard Class='d-flex flex-column flex-1 pa-0' Elevation='1'>
        <MudCardContent Class='d-flex align-stretch justify-center rounded pa-2 default-report-viewscreen bgc-f2f2f2'>
          @if (string.IsNullOrWhiteSpace(pdfReport))
          {
            <MudOverlay Visible='true' DarkBackground="false" AutoClose="true">
            <MudProgressCircular Color="Color.Primary" Indeterminate="true" />
            </MudOverlay>
          }
          else
          {
            <iframe src="@pdfReport"></iframe>
          }
        </MudCardContent>
        <MudCardActions Class='d-flex align-center pa-0 gap-2'>
          <div class='flex-1 border-thin-right bgc-f2f2f2 height100'></div>
          <div class='d-flex align-center pa-2 gap-2'>
            <MudButton Class='btn-ios-d font12' OnClick='(()=> Back())' Variant='Variant.Text' Size='Size.Small' DisableElevation>@(isSaved ? "RETURN" : "CANCEL")</MudButton>
            @if (_processing) {
              <MudButton Class='width100px font12' OnClick='(()=> SaveVoucher())' Variant='Variant.Filled' Color='Color.Success' Size='Size.Small' Disabled=_processing DisableElevation>
                <MudProgressCircular Class="progsize-21" Size="Size.Small" Indeterminate="true"/>
                <MudText Class='font12 pl-2'>SAVING</MudText>
              </MudButton>
            } else {
              <MudButton Class='width100px font12' OnClick='(()=> SaveVoucher())' Variant='Variant.Filled' Color='Color.Success' Size='Size.Small' Disabled=isSaved DisableElevation>
                  <MudText Class='font12'>SAVE</MudText>
              </MudButton>
            }
          </div>
        </MudCardActions>
      </MudCard>
    </div>
</div>

@code{
  private string pdfReport = string.Empty;
  bool isSaved, _processing;

  protected override async Task OnInitializedAsync()
  {
    GlobalClass.pageTitle = "Voucher Report";
    Task t = Task.WhenAll(LoadVoucherReport());
    await t;
  }
  private async Task LoadVoucherReport()
  {
    pdfReport = await voucherService.GenerateReport(GlobalClass.forPrintingOrSaveVoucher);
    pdfReport += "#toolbar=0";
  }
  private async Task SaveVoucher()
  {
    _processing = true;
    var parameters = new DialogParameters();
        string contentText = "Voucher ";
        string dialogTitle = GlobalClass.forPrintingOrSaveVoucher.Id == 0 ? "Create " + contentText : "Update " + contentText;
        parameters.Add("contentText", contentText);
        parameters.Add("actionMode", GlobalClass.forPrintingOrSaveVoucher.Id == 0 ? Enums.ActionMode.Create : Enums.ActionMode.Update);
        var options = new DialogOptions()
        {
            CloseButton = false,
            MaxWidth = MaxWidth.ExtraSmall,
            FullWidth = true,
            NoHeader = false,
            DisableBackdropClick = true
        };
        var resultDialog = await dialogService.Show<Shared.Dialogs.GenericPromptDialogs.GenericPrompt>(dialogTitle, parameters, options).Result;
        if (!resultDialog.Cancelled)
        {
          var SavedVoucher = new VoucherModel();
          if(GlobalClass.forPrintingOrSaveVoucher.Id == 0)
          {
            SavedVoucher = await voucherService.AddVoucher(GlobalClass.forPrintingOrSaveVoucher, GlobalClass.token);
            Extensions.ShowAlert("Voucher successfully added", Variant.Filled, snackBar,Severity.Success);
            _processing = false;
            isSaved = true;
          }
          else
          {
            SavedVoucher = await voucherService.UpdateVoucher(GlobalClass.forPrintingOrSaveVoucher, GlobalClass.token);
            Extensions.ShowAlert("Voucher successfully updated", Variant.Filled, snackBar,Severity.Success);
            _processing = false;
            isSaved = true;
          }
          pdfReport = await voucherService.GenerateReport(SavedVoucher);

          if(GlobalVariable.AMSHubConnection != null)
            await GlobalVariable.AMSHubConnection.InvokeAsync("SaveVoucher", SavedVoucher);
        }
  }
  private void Back()
  {
    if(!isSaved)
    {
      GlobalClass.voucher = GlobalClass.forPrintingOrSaveVoucher;
      navigationManager.NavigateTo($"/voucher/create");
    }
    else
    {
      navigationManager.NavigateTo($"/voucher/list");
      GlobalClass.forPrintingOrSaveVoucher = default!;
    }
  }
}
