@page "/pettycash/print"

@inject IPettyCashService pettyCashService
@inject IDialogService dialogService
@inject ISnackbar snackBarService
@inject NavigationManager navigationManager

<div class='page-cont d-flex'>
    <div class='d-flex flex-1 pa-2'>
        <MudCard Class='d-flex flex-1 flex-column pa-0' Elevation='1'>
            <MudCardContent class='d-flex align-stretch justify-center rounded pa-2 default-report-viewscreen bgc-f2f2f2'>
                @if (string.IsNullOrWhiteSpace(PDFContent))
                {
                    <MudOverlay Visible='true' DarkBackground="false" AutoClose="true">
                        <MudProgressCircular Color="Color.Primary" Indeterminate="true" />
                    </MudOverlay>
                }
                else
                {
                    <iframe src='@PDFContent' />
                }
            </MudCardContent>
            <MudCardActions Class='d-flex align-center pa-0 gap-2'>
                <div class='flex-1 border-thin-right bgc-f2f2f2 height100'></div>
                <div class='d-flex align-center pa-2 gap-2'>
                    <MudButton Class='btn-ios-d font12' OnClick="(() => Back())"  Variant='Variant.Text' DisableElevation Size='Size.Small'>@(isSaved ? "RETURN" : "CANCEL")</MudButton>
                     @if (_processing) {
                        <MudButton Class='width100px font12' OnClick="(() =>  Prompt())" Variant='Variant.Filled' DisableElevation Disabled='_processing' Color='Color.Success' Size='Size.Small'>
                            <MudProgressCircular Class="progsize-21" Size="Size.Small" Indeterminate="true" />
                            <MudText Class='font12 pl-2'>SAVING</MudText>
                         </MudButton>
                     } else {
                        <MudButton Class='width100px font12' OnClick="(() =>  Prompt())" Variant='Variant.Filled' DisableElevation Disabled='isSaved' Color='Color.Success' Size='Size.Small'>
                            <MudText Class='font12'>SAVE</MudText>
                        </MudButton>
                     }
                </div>
            </MudCardActions>
        </MudCard>
    </div>
</div>

@code
{
    private string PDFContent = default!;
    private PettyCashModel returnedModel {get;set;} = new();
    private bool isSaved, _processing;
    protected override async Task OnInitializedAsync()
    {
        GlobalClass.pageTitle = "Petty Cash Report";
        PDFContent = await pettyCashService.GetPettyCashReport(GlobalClass.pettyCash);
        StateHasChanged();
    }
    protected override async Task OnParametersSetAsync()
    {
        await Task.Delay(1);
    }

    private async Task Prompt()
    {
        _processing = true;
        var parameters = new DialogParameters();
        string contentText = "petty cash";
        string dialogTitle = PettyCashEntry.currActionMode + contentText;
        parameters.Add("contentText", contentText);
        parameters.Add("actionMode", PettyCashEntry.currActionMode);
        var options = new DialogOptions()
        {
            CloseButton = false,
            MaxWidth = MaxWidth.ExtraSmall,
            FullWidth = true,
            NoHeader = false,
            DisableBackdropClick = true
        };
        var resultDialog = await dialogService.Show<Shared.Dialogs.GenericPromptDialogs.GenericPrompt>(dialogTitle, parameters, options).Result;
        if (!resultDialog.Cancelled)
        {   
            if (PettyCashEntry.currActionMode == Enums.ActionMode.Create)
                if(await Save())
                    Extensions.ShowAlert("Created Petty Cash Voucher", Variant.Filled, snackBarService, Severity.Success);
                else
                    Extensions.ShowAlert("Error", Variant.Filled, snackBarService, Severity.Error); 
            else if (PettyCashEntry.currActionMode == Enums.ActionMode.Update)
                if (await Update())
                    Extensions.ShowAlert("Updated Petty Cash Voucher", Variant.Filled, snackBarService, Severity.Info);
                else
                    Extensions.ShowAlert("Error", Variant.Filled, snackBarService, Severity.Error);
            if(GlobalVariable.AMSHubConnection != null)
                await GlobalVariable.AMSHubConnection.InvokeAsync("SavePettyCash",returnedModel);
        }
        _processing = false;
    }
    private async Task<bool> Save()
    {
        returnedModel = await pettyCashService.AddPettyCash(GlobalClass.pettyCash, GlobalClass.token);
        navigationManager.NavigateTo($"/pettycash-list");
         _processing = false;
         isSaved = true;
        return true;
    }
    private async Task<bool> Update()
    {
        returnedModel = await pettyCashService.UpdatePettyCash(GlobalClass.pettyCash, GlobalClass.token);
        string toPage = "pettycash-list";
        navigationManager.NavigateTo($"/refresh/{toPage}");
        _processing = false;
        isSaved = true;
        return true;
    }
    private void Back()
    {
        navigationManager.NavigateTo($"/pettycash");
    }
}