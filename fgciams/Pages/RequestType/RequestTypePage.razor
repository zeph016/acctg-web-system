@page "/requesttype"

@inject IRequestTypeService requestTypeService
@inject IDialogService dialogService
@inject ISnackbar snackBarService

<div class='page-cont'>
  <div class='drawer-right'>
    <MudDrawer Class='pa-1' @bind-Open='openSideFilter' Fixed='false' Anchor='Anchor.Right' Elevation='0' Variant='DrawerVariant.Mini' OpenMiniOnHover='false'>
      <div class='drawer-right__filtercont'>
        <div class='icon-area d-flex align-center'>
          <MudIconButton OnClick='OpenSideFilter' Icon="@Icons.Filled.FilterList" aria-label="Filter" Size='Size.Medium' />
        </div>
        <div class='filter-title d-flex align-center'>
          <p class='title875'>Filter</p>
          <MudSpacer />
          <MudIconButton OnClick='OpenSideFilter' Icon="@Icons.Filled.Close" aria-label="Close Filter" Size='Size.Medium' />
        </div>
        <div class='filter-content d-flex flex-column pl-4 pr-4 gap-1 @visibility'>
          <MudTextField Class='txtfield-75' @bind-Value='searchTerm' Placeholder='Request Type Name'
          Adornment='Adornment.Start' AdornmentIcon='@Icons.Material.Filled.Search' IconSize='Size.Small'
          Clearable='true' Variant='Variant.Outlined' />
          <MudButton Variant='Variant.Filled' Color='Color.Secondary'>Apply Filter</MudButton>
        </div>
      </div>
    </MudDrawer>
  </div>
  <MudContainer Class='requesttype' Fixed='false' MaxWidth='MaxWidth.ExtraExtraLarge'>
      @if (!dataFetched)
      {
        <MudPaper Class='ma-1 pa-1' style="height: calc(100vh - 125px);">
            <MudSkeleton SkeletonType='SkeletonType.Text' Height='100px' Animation='Animation.Wave' />
            <MudSkeleton SkeletonType='SkeletonType.Rectangle' Height='71vh' Animation='Animation.Wave' />
        </MudPaper>
      }
      else 
      {
        <MudTable Class='configtables' Items="@GlobalClassList.requestTypes" Hover="true" 
        Breakpoint='Breakpoint.Sm' FixedHeader='true' FixedFooter='true' Bordered='true' Dense='true' 
        RowsPerPage='30' Striped="true" Filter='new Func<RequestTypeModel,bool>(FilterItems)'>
          <ToolBarContent>
            <MudText Typo='Typo.caption'>
              @GlobalClassList.requestTypes.Count() 
              @(GlobalClassList.requestTypes.Count() == 1 ? "item" : "items") 
              in Total
            </MudText>
            <MudSpacer />
            <MudMenu StartIcon='@Icons.Filled.MoreVert' AnchorOrigin='Origin.BottomLeft'
              TransformOrigin='Origin.TopCenter' Dense='true' Size='Size.Small' Label='More'>
                  <MudMenuItem OnClick='(() => RequestTypeDialog(new RequestTypeModel()))'>
                      <div class='d-flex align-center gap-2'>
                          <MudIcon Icon='@Icons.Filled.Add' Size='Size.Medium' />
                          <MudText Typo='Typo.body2'>Add</MudText>
                      </div>
                  </MudMenuItem>
                  <MudMenuItem OnClick='OpenSideFilter'>
                    <div class='d-flex align-center gap-2'>
                      <MudIcon Icon='@Icons.Filled.FilterList' />
                      <MudText Typo='Typo.body2'>Filter</MudText>
                    </div>
                  </MudMenuItem>
              </MudMenu>
          </ToolBarContent>
            <ColGroup>
                  <col/>
                  <col/>
                  <col class='text-center' style='width: 5%;' />
                  <col style='width: 5%;' />
              </ColGroup>
          <HeaderContent>
              <MudTh Class='customheader-1'>Type</MudTh>
              <MudTh Class='customheader-1'>Remarks</MudTh>
              <MudTh Class="customheader-1 text-center">Active</MudTh>
              <MudTh Class="customheader-1 text-center">Actions</MudTh>
          </HeaderContent>
          <RowTemplate>
              <MudTd DataLabel="Bank">@context.TypeName</MudTd>
              <MudTd DataLabel="ShortcutName">@context.Remarks</MudTd>
                <MudTd class="text-center" DataLabel="Bank">
                <MudCheckBox  @bind-Checked='@context.IsActive' ReadOnly='true' Size='Size.Small' />
              </MudTd>
              <MudTd class="text-center">
                <MudMenu Icon='@Icons.Filled.MoreVert' AnchorOrigin='Origin.BottomLeft'
                TransformOrigin='Origin.TopCenter' Dense='true' Size='Size.Small'>
                  <MudMenuItem OnClick='(() => RequestTypeDialog(context))'>
                    <div class='d-flex align-center gap-2'>
                      <MudIcon Icon='@Icons.Filled.Edit' Size='Size.Small' />
                      <MudText Typo='Typo.body2'>Edit</MudText>
                    </div>
                  </MudMenuItem>
                </MudMenu>
              </MudTd>
          </RowTemplate>
          <PagerContent>
              <MudTablePager />
          </PagerContent>
        </MudTable>
      }
  </MudContainer>
</div>


@code{

  private bool dataFetched, openSideFilter;
    private int[] pageSize = new int[] { 30, 50, 100, 500, 1000 };
    private string searchTerm = string.Empty, visibility = "visibility-animation-hide";

  protected override async Task OnInitializedAsync()
  {
    GlobalClass.pageTitle = "REQUEST TYPES";
    while (GlobalClass.currentUserAccount == null || GlobalClassList.requestTypes == null || string.IsNullOrEmpty(GlobalVariable.AMSHubConnection.ConnectionId))
      await Task.Delay(1);

    RequestTypeHub();
    CompletedFetch();
  }

  void CompletedFetch()
  {
      dataFetched = true;
      StateHasChanged();
  }

  private async Task RequestTypeDialog(RequestTypeModel requestType)
  {
    var parameters = new DialogParameters();
    GlobalClass.requestType = requestType;
    string dialogTitle = GlobalClass.requestType.Id != 0 ? "Edit Status" : "Add Status";
    string buttonText = GlobalClass.requestType.Id != 0 ? "Update" : "Add";
    Color color = GlobalClass.requestType.Id != 0 ? Color.Info : Color.Success;
    parameters.Add("color", color);
    parameters.Add("dialogTitle", dialogTitle);
    parameters.Add("buttonText", buttonText);
    var options = new DialogOptions()
    {
      CloseButton = false,
      MaxWidth = MaxWidth.ExtraSmall,
      FullWidth = true,
      NoHeader = false,
      DisableBackdropClick = false
    };
    var resultDialog = await dialogService.Show<Shared.Dialogs.RequestTypeDialogs.RequestTypeDialog>("", parameters, options).Result;
    if (!resultDialog.Cancelled)
    {
      if ((int)resultDialog.Data == 0)
        ShowAlert("Added request type", Variant.Filled, Severity.Success);
      else if ((int)resultDialog.Data == 1)
        ShowAlert("Updated request type", Variant.Filled, Severity.Info);
      GlobalClassList.requestTypes = GlobalClassList.requestTypes.Where(x => x.IsActive == true).ToList();
    }
  }

  private bool FilterItems(RequestTypeModel items)
  {
    if (string.IsNullOrEmpty(searchTerm))
      return true;
    if (items.TypeName.Contains(searchTerm, StringComparison.InvariantCultureIgnoreCase))
      return true;
    return false;
  }
  private void ShowAlert(string message, Variant variant, Severity severity)
  {
    snackBarService.Clear();
    snackBarService.Configuration.PositionClass = Defaults.Classes.Position.BottomCenter;
    snackBarService.Configuration.SnackbarVariant = variant;
    snackBarService.Configuration.MaxDisplayedSnackbars = 10;
    snackBarService.Add($"{message}", severity);
  }
  private void OpenSideFilter()
  {
    openSideFilter = !openSideFilter;
    if(openSideFilter)
      visibility = "visibility-animation-show";
    if(!openSideFilter)
      visibility = "visibility-animation-hide";
  }
  private void RequestTypeHub()
  {
    try
    {
      GlobalVariable.AMSHubConnection.On<RequestTypeModel>("SaveRequestType", (_type) =>{

        GlobalClassList.requestTypes.RemoveAll(x=>x.Id == _type.Id);
        GlobalClassList.requestTypes.Add(_type);
        GlobalClassList.requestTypes = GlobalClassList.requestTypes.Where(x=>x.IsActive == true).OrderBy(x=>x.TypeName).ToList();
        StateHasChanged();

        });
    }
    catch (System.Exception ex)
    {
       // TODO
    }
  }
}


