@page "/pettycash/print"

@inject IPettyCashService pettyCashService
@inject IDialogService dialogService
@inject ISnackbar snackBarService
@inject NavigationManager navigationManager

    <div class='d-flex flex-1 pa-2 ma-2'>
        <MudPaper Class='d-flex flex-1 flex-column pa-2' Elevation='1' Height='calc(100vh - 120px)' Width='100%'>
            <div class='d-flex align-stretch justify-center default-report-viewscreen'>
                @if (string.IsNullOrWhiteSpace(PDFContent))
                {
                    <MudOverlay Visible='true' DarkBackground="false" AutoClose="true">
                        <MudProgressCircular Color="Color.Primary" Indeterminate="true" />
                    </MudOverlay>
                }
                else
                {
                    <iframe src='@PDFContent' />
                }
            </div>
            <MudCardActions Class='d-flex align-center pa-0 gap-2'>
                <div class='flex-1 height100'></div>
                <div class='d-flex align-center pa-2 gap-2'>
                    <MudButton Class='width100px' OnClick="(() => Back())"  Variant='Variant.Text' Size='Size.Small'>CANCEL</MudButton>
                    <MudButton Class='width100px' OnClick="(() =>  Prompt())" Variant='Variant.Filled' Color='Color.Success' Size='Size.Small'>SAVE</MudButton>
                </div>
            </MudCardActions>
        </MudPaper>
    </div>

@code
{
    private string PDFContent = default!;
    private PettyCashModel returnedModel {get;set;} = new();
    protected override async Task OnInitializedAsync()
    {
        PDFContent = await pettyCashService.GetPettyCashReport(GlobalClass.pettyCash);
        StateHasChanged();
    }
    protected override async Task OnParametersSetAsync()
    {
        await Task.Delay(1);
    }

    private async Task Prompt()
    {
        var parameters = new DialogParameters();
        string contentText = "Petty Cash ";
        string dialogTitle = PettyCashEntry.currActionMode + contentText;
        parameters.Add("contentText", contentText);
        parameters.Add("actionMode", PettyCashEntry.currActionMode);
        var options = new DialogOptions()
        {
            CloseButton = false,
            MaxWidth = MaxWidth.ExtraSmall,
            FullWidth = true,
            NoHeader = false,
            DisableBackdropClick = true
        };
        var resultDialog = await dialogService.Show<Shared.Dialogs.GenericPromptDialogs.GenericPrompt>(dialogTitle, parameters, options).Result;
        if (!resultDialog.Cancelled)
        {
            if (PettyCashEntry.currActionMode == Enums.ActionMode.Create)
                if(await Save())
                    Extensions.ShowAlert("Created Petty Cash Voucher", Variant.Filled, snackBarService, Severity.Success);
                else
                    Extensions.ShowAlert("Error", Variant.Filled, snackBarService, Severity.Error); 
            else if (PettyCashEntry.currActionMode == Enums.ActionMode.Update)
                if (await Update())
                    Extensions.ShowAlert("Updated Petty Cash Voucher", Variant.Filled, snackBarService, Severity.Info);
                else
                    Extensions.ShowAlert("Error", Variant.Filled, snackBarService, Severity.Error);
            await GlobalVariable.AMSHubConnection.InvokeAsync("SavePettyCash",returnedModel);
        }
    }
    private async Task<bool> Save()
    {
        returnedModel = await pettyCashService.AddPettyCash(GlobalClass.pettyCash, GlobalClass.token);
        GlobalClassList.pettyCashList.Add(returnedModel);
        navigationManager.NavigateTo($"/pettycash-list");
        return true;
    }
    private async Task<bool> Update()
    {
        await pettyCashService.UpdatePettyCash(GlobalClass.pettyCash, GlobalClass.token);
        returnedModel = GlobalClass.pettyCash;
        string toPage = "pettycash-list";
        navigationManager.NavigateTo($"/refresh/{toPage}");
        return true;
    }
    private void Back()
    {
        navigationManager.NavigateTo($"/pettycash");
    }
}