@page "/pettycash-audit-trail"

@inject NavigationManager NavigationManager
@inject IPettyCashService PettyCashService
@inject IGlobalService GlobalService

    <div class="audittrail_container">
        @if(dataFetched)
        {
        <MudGrid>
            <MudItem xs="8">
                <MudPaper Elevation="3">
                    <MudCard Elevation="2">
                        <div style="display: flex; align-items: center;">
                            <MudIcon Size="Size.Medium" style="margin-right: 10px;" Icon="@Icons.Filled.Timeline"></MudIcon>
                             <MudText Typo="Typo.body1">Timeline</MudText>
                        </div>
                        <MudButton Size="Size.Small" StartIcon="@Icons.Filled.ArrowBackIos" title="Back" class="btn btn-primary" OnClick="(() => BackToPettyCash())"><MudText Typo="Typo.caption">Back</MudText></MudButton>
                    </MudCard>
                    <MudTimeline TimelinePosition="TimelinePosition.Start">            
                            @foreach(var auditTrail in GlobalClassList.currrentAuditTrail)
                            {
                                <style>
                                    .timeline-container-@AcctgModel(auditTrail).StatusName .mud-timeline-item-dot-inner
                                    {
                                        background-color: @AcctgModel(auditTrail).StatusColor !important;
                                        width:18px !important;
                                        height:18px !important;
                                    }
                                </style>
                                <div class="timeline-container-@AcctgModel(auditTrail).StatusName">
                                    <MudTimelineItem Variant="Variant.Filled">
                                        <MudAlert Severity="Severity.Success" Style="@($"border-left:10px {AcctgModel(auditTrail).StatusColor} solid;")" Icon="@Extensions.Icon(@AcctgModel(auditTrail).StatusIcon)">
                                            <MudText Typo="Typo.caption"><b>@auditTrail.LogDateTime.ToString("MMMM dd, yyyy hh:mm tt")</b></MudText>
                                            <MudText Typo="Typo.subtitle2"><b>@auditTrail.Activity</b></MudText>
                                            <MudText Typo="Typo.caption">by: &nbsp; @auditTrail.UserName</MudText>
                                        </MudAlert>
                                    </MudTimelineItem>
                                </div>
                            }
                    </MudTimeline>
                </MudPaper>
            </MudItem>
            <MudItem xs="4">
                    <MudPaper Elevation="3">
                         <MudCard Elevation="2">
                            <div class="flex-gap">
                                <MudIcon Size="Size.Medium" Icon="@Icons.Filled.Badge"></MudIcon>
                                <MudText Typo="Typo.body1">Payee Details</MudText>
                            </div>
                            </MudCard>
                        <div class="payee_details">
                            <div class="payee_details-fields">
                                <MudTextField Label="Request Date" Adornment="Adornment.End" AdornmentIcon="@Icons.Filled.CalendarToday" @bind-Value="@GlobalClass.pettyCash.RequestDate" Variant="Variant.Text" ReadOnly="true" Margin="Margin.Dense"></MudTextField>
                                <MudTextField Label="Reference No." @bind-Value="@GlobalClass.pettyCash.ControlNumber" Variant="Variant.Text" ReadOnly="true" Margin="Margin.Dense"></MudTextField>
                            </div>
                            <div style="margin-top: 15px">
                              <MudTextField Label="Payee Name" Adornment="Adornment.Start" AdornmentIcon="@Icons.Filled.Person" @bind-Value="@GlobalClass.pettyCash.PayeeName" Variant="Variant.Text" ReadOnly="true" Margin="Margin.Dense"></MudTextField>
                            </div>
                             <div style="margin-top: 15px">
                              <MudTextField Label="Amount" Adornment="Adornment.Start" AdornmentIcon="@Icons.Filled.AttachMoney" @bind-Value="@GlobalClass.pettyCash.Amount" Variant="Variant.Text" ReadOnly="true" Margin="Margin.Dense"></MudTextField>
                            </div>
                             <div style="margin-top: 15px">
                              <MudTextField Label="Particulars" Lines="5" @bind-Value="@GlobalClass.pettyCash.Particular" Variant="Variant.Outlined" ReadOnly="true" Margin="Margin.Dense"></MudTextField>
                            </div>
                            <div style="margin-top: 15px">
                              <MudTextField Label="Remakrs" Lines="5" @bind-Value="@GlobalClass.pettyCash.Remarks" Variant="Variant.Outlined" ReadOnly="true" Margin="Margin.Dense"></MudTextField>
                            </div>
                            <div style="margin-top: 15px">
                                <div  class="flex-gap">
                                    <MudAvatar Size="Size.Medium" Image='@($"data:image/png;base64, {Convert.ToBase64String(requestorImg)}")' />
                                    <div class="">
                                            <MudText Typo="Typo.subtitle2">@GlobalClass.pettyCash.RequestedByName</MudText>
                                          <MudText Typo="Typo.caption">Requested by</MudText>
                                    </div>
                                </div>
                            </div>
                            <div style="margin-top: 15px">
                                <div  class="flex-gap">
                                    <MudAvatar Size="Size.Medium" Image='@($"data:image/png;base64, {Convert.ToBase64String(receiverImg)}")' />
                                    <div class="">
                                            <MudText Typo="Typo.subtitle2">@GlobalClass.pettyCash.ReceivedByName</MudText>
                                          <MudText Typo="Typo.caption">Received by</MudText>
                                    </div>
                                </div>
                            </div>

                            <div style="margin-top: 15px">
                                <div  class="flex-gap">
                                    <MudAvatar Size="Size.Medium" Image='@($"data:image/png;base64, {Convert.ToBase64String(approverImg)}")' />
                                    <div class="">
                                            <MudText Typo="Typo.subtitle2">@GlobalClass.pettyCash.ApprovedByName</MudText>
                                          <MudText Typo="Typo.caption">Approved by</MudText>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </MudPaper>
            </MudItem>
        </MudGrid>
        }
    </div>
@code{
private bool dataFetched {get;set;}
private byte[] payeeImg = new byte[]{}, requestorImg = new byte[]{}, approverImg = new byte[]{}, receiverImg = new byte[]{};
    protected override async Task OnInitializedAsync()
    {
        GlobalClass.pageTitle = "PETTY CASH AUDIT TRAIL";
        await Task.Delay(1);
        GlobalClassList.currrentAuditTrail = await PettyCashService.GetPettyCashAuditTrail(GlobalClass.pettyCash.Id,GlobalClass.token);
        requestorImg = await GetEmployeeDetails(GlobalClass.pettyCash.RequestedById);
        approverImg = await GetEmployeeDetails(GlobalClass.pettyCash.ApprovedById);
        receiverImg = await GetEmployeeDetails(GlobalClass.pettyCash.ReceivedById);
        
        CompletedFetch();
    }
    private async Task<byte[]> GetEmployeeDetails(long employeeId)
    {
        var employeeDetail = await GlobalService.GetEmployeeById(employeeId, GlobalClass.token);
        return employeeDetail.Picture;
    }
  
    private void BackToPettyCash()
    {
        NavigationManager.NavigateTo("/pettycash-list");
    }
    private void CompletedFetch()
    {
        dataFetched = true;
        StateHasChanged();
    }
    private AccountingStatusModel AcctgModel(PettyCashAuditTrail auditTrail)
    {
        AccountingStatusModel accountingStatusModel = new();
        accountingStatusModel.StatusName = "Update";
        accountingStatusModel.StatusColor = "LIME";
        accountingStatusModel.StatusIcon = Icons.Filled.CheckCircleOutline;
        if(auditTrail.Activity.Equals("Create Petty Cash"))
            accountingStatusModel = GlobalClassList.accountingStatusList.Find(x=> x.StatusEnumCategoryId == Enums.AccountingStatusEnumCategory.PCG) ?? accountingStatusModel;
        if(auditTrail.Activity.Equals("Approve Petty Cash"))
            accountingStatusModel = GlobalClassList.accountingStatusList.Find(x=> x.StatusEnumCategoryId == Enums.AccountingStatusEnumCategory.PCA) ?? accountingStatusModel;
        if(auditTrail.Activity.Equals("Cancel Petty Cash"))
            accountingStatusModel = GlobalClassList.accountingStatusList.Find(x=> x.StatusEnumCategoryId == Enums.AccountingStatusEnumCategory.PCC) ?? accountingStatusModel;
        if(auditTrail.Activity.Equals("Receive Petty Cash")) 
            accountingStatusModel = GlobalClassList.accountingStatusList.Find(x=> x.StatusEnumCategoryId == Enums.AccountingStatusEnumCategory.PCR) ?? accountingStatusModel;
        if(auditTrail.Activity.Equals("Petty Cash liquidated")) 
            accountingStatusModel = GlobalClassList.accountingStatusList.Find(x=> x.StatusEnumCategoryId == Enums.AccountingStatusEnumCategory.PCL) ?? accountingStatusModel;
        return accountingStatusModel;
    }
}


