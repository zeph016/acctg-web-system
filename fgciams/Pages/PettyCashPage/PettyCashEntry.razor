@page "/pettycash/create"
@page "/pettycash"

@inject IGlobalService globalService
@inject IPettyCashService pettyCashService
@inject ISnackbar snackBarService
@inject IDialogService dialogService
@inject NavigationManager navigationManager
@inject IJSRuntime jsRuntimeService

<div class='page-cont d-flex'>
    @if (!dataFetched)
    {
        <MudPaper Class='d-flex flex-1 ma-2 pa-2'>
          <MudSkeleton SkeletonType='SkeletonType.Rectangle' Height='100%' Width='100%' Animation='Animation.Wave' />
        </MudPaper>
    }
    else
    {
        <MudContainer Class='pettycashpage pa-2 gap-2' Fixed='false' MaxWidth='MaxWidth.Medium'>
            <MudCard Class='flex-1' Square>
                <MudCardContent Class='pa-2'>
                    <div class='pettycashpage__grid'>
                        <div class="pcash-header d-flex align-center justify-content-betwee pa-2">
                            <div class='d-flex align-center gap-2'>
                                <MudImage Class='fgcilogocont__imglogo' Src='images/fglogo/fgci1.png' Alt='fgci logo' Height='30' Width='30'/>
                                <MudText Class='fgcilogocont__lblfirst'>F. GURREA</MudText>
                                <MudText Class='fgcilogocont__lblsecond'>Construction, Inc.</MudText>
                            </div>
                            <MudSpacer />
                            <MudButton OnClick='New' EndIcon='fa-regular fa-file' Color='Color.Tertiary' Variant='Variant.Filled' Size='Size.Small'>new</MudButton>
                        </div>
                        <div class="pcash-hsub d-flex align-center justify-end gap-2">
                            <div class='flex-1 border-thin-right bgc-f2f2f2 height100'></div>
                            <div class='d-flex align-center justify-center pa-2 gap-2 width25'>
                                <MudText Class='wspace-nowrap txt-uppercase font-bold font10'>date :</MudText>
                                <MudDatePicker Class='txt-top-0 font14-txtfield txtfield-right ' @bind-Date='GlobalClass.pettyCash.RequestDate' IconSize='Size.Small' />
                            </div>
                            <div class='d-flex align-center justify-center pa-2 gap-2'>
                                <MudText Class='wspace-nowrap txt-uppercase font-bold font10'>ref no. :</MudText>
                                @if (GlobalClass.pettyCash.Id != 0)
                                {
                                    <MudChip Class='chip-radius-5 font-bold font12' Color='Color.Error' Size='Size.Medium'>
                                        @GlobalClass.pettyCash.ControlNumber
                                    </MudChip>
                                    <MudChip Class='chip-radius-5 font-bold font12' Size='Size.Medium' Style="@Extensions.GetAcctgStatusColor(GlobalClass.pettyCash.StatusId)">
                                        @GlobalClass.pettyCash.StatusName
                                    </MudChip>
                                }
                                else
                                {
                                    <MudChip Class='chip-radius-5 font-bold font12' Color='Color.Error' Size='Size.Medium'>Auto Generated</MudChip>
                                }
                            </div>
                        </div>
                        <div class="pcash-payee d-flex align-center pa-2 gap-2">
                            <MudText Class='wspace-nowrap lbl75'>payee :</MudText>
                            <MudTextField Class='txtfield-overflow-ellipsis font14-txtfield txt-top-0' @bind-Value='GlobalClass.pettyCash.PayeeName' @onclick='(() => LookUp(Enums.LookUpType.Project, "project"))' 
                            ReadOnly></MudTextField>
                        </div>
                        <div class="pcash-particulars d-flex align-center pa-2">
                            <MudTextField @bind-Value='GlobalClass.pettyCash.Particular' Variant='Variant.Outlined' Lines=2 Label='Description'>
                            </MudTextField>
                        </div>
                        <div class="pcash-remarks d-flex align-center pa-2">
                            <MudTextField @bind-Value='GlobalClass.pettyCash.Remarks' Variant='Variant.Outlined' Lines=2 Label='Remarks'>
                            </MudTextField>
                        </div>
                        <div class="pcash-amt d-flex align-center justify-end gap-2">
                            <div class='flex-1 border-thin-right bgc-f2f2f2 height100'></div>
                            <div class='d-flex align-center pa-2 gap-2'>
                                <MudText Class='wspace-nowrap font12 font-bold txt-uppercase'>Amount:</MudText>
                                <MudNumericField Class='txt-search-overflow txt-top-0 txtfield-right' @bind-Value='GlobalClass.pettyCash.Amount' Culture='CultureInfo.GetCultureInfo("en-PH")'
                                Format='N2' Variant='Variant.Text' HideSpinButtons/>
                            </div>
                        </div>
                        <div class="pcash-signatories d-flex align-center justify-space-between pa-2 gap-2">
                            <div class='d-flex align-center mb-2 gap-2 width25'>
                                @if (requestorImg.Count() == 0)
                                {
                                    <MudAvatar>
                                        <MudIcon Icon='@Icons.Filled.AccountCircle' Size='Size.Medium'/>
                                    </MudAvatar>
                                }
                                else
                                {
                                    <MudAvatar Image='@($"data:image/png;base64, {Convert.ToBase64String(requestorImg)}")' Size='Size.Medium'/>
                                }
                                <MudTextField Class='txt-top-0 txt-search-overflow font14-txtfield font-bold' @bind-Value='GlobalClass.pettyCash.RequestedByName' HelperText='REQUESTED BY' ReadOnly='true'
                                @onclick='(() => LookUp(Enums.LookUpType.Employee, "requestor"))' IconSize='Size.Small' ></MudTextField>
                            </div>
                            <div class='d-flex align-center mb-2 gap-2 width25'>
                                @if (approverImg.Count() == 0)
                                {
                                    <MudAvatar>
                                        <MudIcon Icon='@Icons.Filled.AccountCircle' Size='Size.Medium'/>
                                    </MudAvatar>
                                }
                                else
                                {
                                    <MudAvatar Image='@($"data:image/png;base64, {Convert.ToBase64String(approverImg)}")' Size='Size.Medium'/>
                                }
                                <MudTextField Class='txt-top-0 txt-search-overflow font14-txtfield font-bold' @bind-Value='GlobalClass.pettyCash.ApprovedByName' HelperText='APPROVED BY' ReadOnly='true'
                                @onclick='(() => LookUp(Enums.LookUpType.Employee, "approver"))' IconSize='Size.Small' ></MudTextField>
                            </div>
                            <div class='d-flex align-center mb-2 gap-2 width25'>
                                @if (receiverImg.Count() == 0)
                                {
                                    <MudAvatar>
                                        <MudIcon Icon='@Icons.Filled.AccountCircle' Size='Size.Medium'/>
                                    </MudAvatar>
                                }
                                else
                                {
                                    <MudAvatar Image='@($"data:image/png;base64, {Convert.ToBase64String(receiverImg)}")' Size='Size.Medium'/>
                                }
                                <MudTextField Class='txt-top-0 txt-search-overflow font14-txtfield font-bold' @bind-Value='GlobalClass.pettyCash.ReceivedByName' HelperText='RECEIVED BY' ReadOnly='true'
                                @onclick='(() => LookUp(Enums.LookUpType.Employee, "receiver"))' IconSize='Size.Small'></MudTextField>
                            </div>
                        </div>
                    </div>
                </MudCardContent>
                <MudCardActions>
                    <MudSpacer />
                    <MudButton OnClick='(()=> navigationManager.NavigateTo($"/refresh/pettycash-list"))' Variant="Variant.Text" Size='Size.Medium'>Cancel</MudButton>
                    <MudButton OnClick='(()=> GenerateReport())' Variant="Variant.Filled" Color='Color.Primary' Size='Size.Medium'>@submitText</MudButton>
                </MudCardActions>
            </MudCard>
        </MudContainer>
    }
</div>

@code {
    [Parameter] public string pCashMode { get; set; } = string.Empty;
    private Project payeeName = new Project();
    private UserAccount employee = new UserAccount();
    private DateTime? date = DateTime.Today;
    BlazoredTextEditor particularsTextEditor = new BlazoredTextEditor(), remarksTextEditor = new BlazoredTextEditor();
    private string submitText = "Create Petty Cash";
    private bool dataFetched;
    private byte[] payeeImg = new byte[]{}, requestorImg = new byte[]{}, approverImg = new byte[]{}, receiverImg = new byte[]{};
    public static Enums.ActionMode currActionMode { get; set; }

    public override async Task SetParametersAsync(ParameterView parameters)
    {
        if(GlobalClass.pettyCash == null || Extensions.CheckUrlType(navigationManager.Uri))
            GlobalClass.pettyCash = new();
        if(GlobalClass.currentUserAccount.AccessLevel == Enums.AccountingAccessLevel.OthersViewer)
             navigationManager.NavigateTo($"/refresh/pettycash-list");
        requestorImg = new byte[]{};
        approverImg = new byte[]{};
        receiverImg = new byte[]{};
        await base.SetParametersAsync(parameters);
    }
    protected override async Task OnInitializedAsync()
    {
        GlobalClass.pageTitle = "PETTY CASH ENTRY";
        while (GlobalClass.currentUserAccount == null || string.IsNullOrWhiteSpace(GlobalClass.token))
            await Task.Delay(1);
        if (GlobalClass.pettyCash.Id != 0)
            await ReMapDetails();
        else
            if(String.IsNullOrEmpty(GlobalClass.pettyCash.Particular))
                MapDefaultDetails();
            else
                await LoadEmployeePictures();
        CompletedFetch();
    }

    protected override async Task OnParametersSetAsync()
    {
        await Task.Delay(1);
        submitText = Extensions.CheckUrlType(navigationManager.Uri) ? "Create Petty Cash" : "Update Petty Cash";
        currActionMode = Extensions.CheckUrlType(navigationManager.Uri) ? Enums.ActionMode.Create : Enums.ActionMode.Update;
    }

    void CompletedFetch()
    {
        dataFetched = true;
        Task.Run(StateHasChanged);
    }

    private bool CheckUrlType()
    {
        if (Extensions.CheckUrlType(navigationManager.Uri))
            return true;
        return false;
    }

    private async void LookUp(Enums.LookUpType type, string lookFor)
    {
        var parameters = new DialogParameters();
        string dialogTitle = string.Empty;
        string searchPlaceholderText = string.Empty;
        dialogTitle = type == Enums.LookUpType.Project  ? "Payee Look Up" : (type == Enums.LookUpType.Employee ? "Employee Look Up" : "");
        searchPlaceholderText = type == Enums.LookUpType.Project ? "Payee" : (type == Enums.LookUpType.Employee ? "Employee" : "");
        parameters.Add("lookUpType", type);
        parameters.Add("dialogTitle", dialogTitle);
        parameters.Add("buttonText", "Select");
        parameters.Add("searchPlaceholderText", searchPlaceholderText);
        parameters.Add("color", Color.Success);
        var options = new DialogOptions()
        {
            CloseButton = false,
            MaxWidth = MaxWidth.Small,
            FullWidth = true,
            NoHeader = false,
            DisableBackdropClick = false
        };
        var resultDialog = await dialogService.Show<Shared.Dialogs.LookUpDialog.GlobalGenericLookup>(dialogTitle, parameters, options).Result;
        if (!resultDialog.Cancelled) {
            if (type == Enums.LookUpType.Project) {
                payeeName = (Project)resultDialog.Data;
                GlobalClass.pettyCash.PayeeId = payeeName.ProjectId;
                GlobalClass.pettyCash.PayeeName = payeeName.ProjectName;
                GlobalClass.pettyCash.PayeeCategoryId = (Enums.ProjectCategory)payeeName.ProjectCategoryId;
            } else if (type == Enums.LookUpType.Employee) {
                employee = (UserAccount)resultDialog.Data;
                if (lookFor.Contains("requestor")) {
                    GlobalClass.pettyCash.RequestedById = employee.EmployeeId; 
                    GlobalClass.pettyCash.RequestedByName = employee.EmployeeName;
                    GlobalClass.pettyCash.RequestedBySection = employee.SectionName;
                    GlobalClass.pettyCash.ReceivedByDepartment = employee.DepartmentName;
                    requestorImg = employee.Picture; 
                } else if (lookFor.Contains("approver")) {
                    GlobalClass.pettyCash.ApprovedById = employee.EmployeeId;
                    GlobalClass.pettyCash.ApprovedByName = employee.EmployeeName;
                    GlobalClass.pettyCash.ApprovedBySection = employee.SectionName;
                    GlobalClass.pettyCash.ApprovedByDepartment = employee.DepartmentName;
                    GlobalClass.pettyCash.Position = employee.Designation;
                    approverImg = employee.Picture;
                } else if (lookFor.Contains("receiver")) {
                    GlobalClass.pettyCash.ReceivedById = employee.EmployeeId;
                    GlobalClass.pettyCash.ReceivedByName = employee.EmployeeName;
                    receiverImg = employee.Picture;
                } 
            }
        }
        StateHasChanged();
    }
    private async Task ReMapDetails()
    {
        GlobalClass.pettyCash = await pettyCashService.GetPettyCash(GlobalClass.pettyCash.Id, GlobalClass.token);
        await LoadEmployeePictures();

        //Audit
        GlobalClass.pettyCash.PettyCashId = GlobalClass.pettyCash.Id;
        GlobalClass.pettyCash.UserId = GlobalClass.currentUserAccount.EmployeeId;
        GlobalClass.pettyCash.UserName = GlobalClass.currentUserAccount.UserName;
        GlobalClass.pettyCash.Department = GlobalClass.currentUserAccount.DepartmentName;
        GlobalClass.pettyCash.Activity = "Update Petty Cash";
    }
    private void MapDefaultDetails()
    {
        GlobalClass.pettyCash = new ();
        GlobalClass.pettyCash.RequestDate = date;
        GlobalClass.pettyCash.IsActive = true;
        GlobalClass.pettyCash.StatusId = (Int64)Enums.AccountingStatusEnumCategory.PCG+1;
        GlobalClass.pettyCash.statusCategoryId = Enums.AccountingStatusEnumCategory.PCG;
        GlobalClass.pettyCash.StatusName = string.Empty;
        GlobalClass.pettyCash.RequestedById = GlobalClass.currentUserAccount.EmployeeId;
        GlobalClass.pettyCash.RequestedByName = GlobalClass.currentUserAccount.EmployeeName;
        GlobalClass.pettyCash.RequestedByDepartment = GlobalClass.currentUserAccount.DepartmentName;
        GlobalClass.pettyCash.RequestedBySection = GlobalClass.currentUserAccount.SectionName;
        GlobalClass.pettyCash.RequestedByPosition = GlobalClass.currentUserAccount.Designation;
        requestorImg = GlobalClass.currentUserAccount.Picture;

        //Audit
        GlobalClass.pettyCash.UserId = GlobalClass.currentUserAccount.EmployeeId;
        GlobalClass.pettyCash.UserName = GlobalClass.currentUserAccount.UserName;
        GlobalClass.pettyCash.Department = GlobalClass.currentUserAccount.DepartmentName;
        GlobalClass.pettyCash.LogDateTime = DateTime.Today;
        GlobalClass.pettyCash.Activity = "Create Petty Cash";
    
    }
    private async Task<byte[]> GetEmployeeDetails(long employeeId)
    {
        var employeeDetail = await globalService.GetEmployeeById(employeeId, GlobalClass.token);
        return employeeDetail.Picture;
    }
    private void GenerateReport()
    {
        if (isValidated())
        {
            navigationManager.NavigateTo($"/pettycash/print");
        }
        else
        {
            Extensions.ShowAlert("Cannot create Petty Cash. Incomplete Fields", Variant.Filled, snackBarService, Severity.Error);
        }
    }
    private void New()
    {
        GlobalClass.pettyCash = new();
        approverImg = new byte[]{};
        receiverImg = new byte[]{};
        MapDefaultDetails();
    }
    public async Task LoadEmployeePictures()
    {
        requestorImg = await GetEmployeeDetails(GlobalClass.pettyCash.RequestedById);
        approverImg = await GetEmployeeDetails(GlobalClass.pettyCash.ApprovedById);
        receiverImg = await GetEmployeeDetails(GlobalClass.pettyCash.ReceivedById);
    }
    private bool isValidated()
    {
        if(GlobalClass.pettyCash.RequestDate == null)
            return false;
        if(GlobalClass.pettyCash.PayeeId == 0)
            return false;
        if(String.IsNullOrEmpty(GlobalClass.pettyCash.Particular))
            return false;
        if(GlobalClass.pettyCash.Amount <= 0)
            return false;
        if(GlobalClass.pettyCash.RequestedById == 0)
            return false;
        if(GlobalClass.pettyCash.ApprovedById == 0)
            return false;
        if(String.IsNullOrEmpty(GlobalClass.pettyCash.RequestedByName))
            return false;
        return true;
     }
}