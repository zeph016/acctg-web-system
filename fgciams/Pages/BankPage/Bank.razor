@page "/bank"

@inject IBankService bankService
@inject IDialogService dialogService
@inject ISnackbar snackBarService

<div class='page-cont'>
  <div class='drawer-right'>
    <MudDrawer Class='pa-1' @bind-Open='openSideFilter' Fixed='false' Anchor='Anchor.Right' Elevation='0' Variant='DrawerVariant.Mini' OpenMiniOnHover='false'>
      <div class='drawer-right__filtercont'>
        <div class='icon-area d-flex align-center'>
          <MudIconButton OnClick='OpenSideFilter' Icon="@Icons.Filled.FilterList" aria-label="Filter" Size='Size.Medium' />
        </div>
        <div class='filter-title d-flex align-center'>
          <p class='title875'>Filter</p>
          <MudSpacer />
          <MudIconButton OnClick='OpenSideFilter' Icon="@Icons.Filled.Close" aria-label="Close Filter" Size='Size.Medium' />
        </div>
        <div class='filter-content d-flex flex-column pl-4 pr-4 gap-1 @visibility'>
          <MudTextField Class='txtfield-75' @bind-Value='searchTerm' Placeholder='Bank Name'
          Adornment='Adornment.Start' AdornmentIcon='@Icons.Material.Filled.Search' IconSize='Size.Small'
          Clearable='true' Variant='Variant.Outlined' />
          <MudButton Variant='Variant.Filled' Color='Color.Secondary'>Apply Filter</MudButton>
        </div>
      </div>
    </MudDrawer>
  </div>
  <MudContainer Class='bankpage' Fixed='false' MaxWidth='MaxWidth.ExtraExtraLarge'>
    @if(!dataFetched)
    {
      <MudPaper Class='ma-1 pa-1' style="height: calc(100vh - 125px);">
        <MudSkeleton SkeletonType='SkeletonType.Text' Height='100px' Animation='Animation.Wave' />
        <MudSkeleton SkeletonType='SkeletonType.Rectangle' Height='71vh' Animation='Animation.Wave' />
      </MudPaper>
    }
    else
    {
      <MudTable Class='configtables' Items="@GlobalClassList.banks"  Hover="true" Breakpoint='Breakpoint.Sm' 
      FixedHeader='true' FixedFooter='true' Bordered='true' Dense='true' RowsPerPage='30' Striped="true"
      Filter='new Func<BankModel,bool>(FilterItems)'>
        <ToolBarContent>
            <MudText Typo='Typo.caption'>
              @GlobalClassList.banks.Count() 
              @(GlobalClassList.banks.Count() == 1 ? "item" : "items") 
              in Total
            </MudText>
            <MudSpacer />
            <MudMenu StartIcon='@Icons.Filled.MoreVert' AnchorOrigin='Origin.BottomLeft' TransformOrigin='Origin.TopCenter' Dense='true' Size='Size.Small' Label='More'>
              <MudMenuItem OnClick='(() => BankDialog(new BankModel()))'>
                    <div class='d-flex align-center gap-2'>
                        <MudIcon Icon='@Icons.Filled.Add' Size='Size.Medium'/>
                        <MudText Typo='Typo.body2'>Add</MudText>
                    </div>
                </MudMenuItem>
                <MudMenuItem OnClick='OpenSideFilter'>
                    <div class='d-flex align-center gap-2'>
                      <MudIcon Icon='@Icons.Filled.FilterList' />
                      <MudText Typo='Typo.body2'>Filter</MudText>
                    </div>
                  </MudMenuItem>
            </MudMenu>
        </ToolBarContent>
        <ColGroup>
          <col />
          <col />
          <col />
          <col />
          <col />
          <col style='width: 10%;'/>
        </ColGroup>
        <HeaderContent>
            <MudTh Class='customheader-1'>Bank</MudTh>
            <MudTh Class='customheader-1'> </MudTh>
            <MudTh Class='customheader-1'>Branch</MudTh>
            <MudTh Class='customheader-1'>Account No.</MudTh>
            <MudTh Class='customheader-1 text-center'>Currency</MudTh>
            <MudTh Class='customheader-1 text-center'>Beg. Balance</MudTh>
            <MudTh Class='customheader-1 text-center'>Contact</MudTh>
            <MudTh Class='customheader-1 text-center'>Actions</MudTh>
        </HeaderContent>
        <RowTemplate>
            <MudTd DataLabel="Bank">@context.BankName</MudTd>
            <MudTd DataLabel="ShortcutName">@context.ShortcutName</MudTd>
            <MudTd DataLabel="Branch">@context.BankBranch</MudTd>
            <MudTd DataLabel="AccountNo.">@context.AccountNo</MudTd>
            <MudTd Class='text-center' DataLabel="Currency">@Extensions.GetEnumDescription(context.CurrencyId)</MudTd>
            <MudTd Class='text-right' DataLabel="Beg.Balance"> @context.BeginningBalance.ToString("N2") </MudTd>
            <MudTd Class='text-center' DataLabel='Contact'>
              <MudIconButton OnClick='(() => context.subTable = ShowSubTable(context.subTable))' Icon="@Icons.Filled.Contacts" aria-label="Contacts" Size='Size.Small'></MudIconButton>
            </MudTd>
            <MudTd Class='text-center'>
              <MudMenu Icon='@Icons.Filled.MoreVert' AnchorOrigin='Origin.BottomLeft' TransformOrigin='Origin.TopCenter' Dense='true' Size='Size.Small'>
                 <MudMenuItem OnClick='(()=> BankDialog(context))'>
                   <div class='d-flex align-center gap-2'>
                      <MudIcon Icon='@Icons.Filled.Edit' Size='Size.Medium'/>
                      <MudText Typo='Typo.body2'>Edit</MudText>
                    </div>
                 </MudMenuItem>
              </MudMenu>
            </MudTd>
        </RowTemplate>
        <ChildRowContent>
          @if (context.subTable)
          {
            <td colspan='8'>
              <MudTr Class='d-flex justify-end align-center'>
                <MudCard Class='pa-2 ma-2 d-flex align-center gap-6'>
                  <div class='d-flex align-center gap-2'>
                    <MudIcon Icon="@Icons.Material.Filled.Person" Title="Person" />
                    <MudText Typo='Typo.body2'>@context.ContactPerson</MudText>
                  </div>
                   <div class='d-flex align-center gap-2'>
                    <MudIcon Icon="@Icons.Material.Filled.ContactPhone" Title="Contact Phone" />
                    <MudText Typo='Typo.body2'>@context.ContactNo</MudText>
                  </div>
                  <div class='d-flex align-center gap-2' style='max-width: 25vw;'>
                    <MudIcon Icon="@Icons.Material.Filled.Message" Title="Remarks" />
                      @if (!string.IsNullOrWhiteSpace(context.Remarks)) {
                        <MudText Typo='Typo.body2'>
                          @context.Remarks
                        </MudText>
                      } else {
                        <MudText Typo='Typo.body2'>
                          No Remarks
                        </MudText>
                      }
                  </div>
                </MudCard>
              </MudTr>
            </td>
          }
        </ChildRowContent>
        <PagerContent>
            <MudTablePager PageSizeOptions='@pageSize'/>
        </PagerContent>
      </MudTable>
    }
  </MudContainer>
</div>

@code{
  private bool dataFetched, openSideFilter;
  private int[] pageSize = new int[] { 30, 50, 100, 500, 1000 };
  private string searchTerm = string.Empty, visibility = "visibility-animation-hide";
    protected override async Task OnInitializedAsync()
    {
      GlobalClass.pageTitle = "BANK";
      while (GlobalClass.currentUserAccount == null || GlobalClassList.banks == null || string.IsNullOrEmpty(GlobalVariable.AMSHubConnection.ConnectionId))
        await Task.Delay(1);
      
      BankHub();
      CompletedFetch();
    }
    private void CompletedFetch()
    {
      dataFetched = true;
      StateHasChanged();
    }
    async Task<List<BankModel>> LoadBanks()
    {
      GlobalClassList.banks = await bankService.LoadBanks(GlobalClass.token);
      return GlobalClassList.banks;
    }

    async Task BankDialog(BankModel selectedBank)
    {
      var parameters = new DialogParameters();
      GlobalClass.bank = selectedBank;
      string dialogTitle = GlobalClass.bank.Id != 0 ? "Edit Bank Details" : "Add Bank";
      string buttonText = GlobalClass.bank.Id != 0 ? "Update" : "Add";
      Color color = GlobalClass.bank.Id != 0 ? Color.Info : Color.Success;
      parameters.Add("color", color);
      parameters.Add("dialogTitle", dialogTitle);
      parameters.Add("buttonText", buttonText);
      var options = new DialogOptions() { CloseButton = false, MaxWidth = MaxWidth.Small, FullWidth = true, NoHeader = false, DisableBackdropClick = false };
      var resultDialog = await dialogService.Show<Shared.Dialogs.BankDialogs.BankDialog>("",parameters,options).Result;
      if(!resultDialog.Cancelled)
      {
        if ((int)resultDialog.Data == 0)
          ShowAlert("Added new Bank", Variant.Filled, Severity.Success);
        else if ((int)resultDialog.Data == 1)
          ShowAlert("Updated Bank", Variant.Filled, Severity.Info);
        GlobalClassList.banks = GlobalClassList.banks.Where(x=>x.IsActive == true).ToList();
      }
    }

    private bool FilterItems(BankModel items)
    {
        if (string.IsNullOrEmpty(searchTerm))
            return true;
        if (items.BankName.Contains(searchTerm, StringComparison.InvariantCultureIgnoreCase))
            return true;
        return false;
    }

    private void ShowAlert(string message, Variant variant, Severity severity)
    {
        snackBarService.Clear();
        snackBarService.Configuration.PositionClass = Defaults.Classes.Position.BottomCenter;
        snackBarService.Configuration.SnackbarVariant = variant;
        snackBarService.Configuration.MaxDisplayedSnackbars = 10;
        snackBarService.Add($"{message}", severity);
    }

    private bool ShowSubTable(bool isShow)
    {
      return isShow = !isShow;
    }
    private void OpenSideFilter()
    {
      openSideFilter = !openSideFilter;
      if(openSideFilter)
        visibility = "visibility-animation-show";
      if(!openSideFilter)
        visibility = "visibility-animation-hide";
    }
    private void BankHub()
    {
      GlobalVariable.AMSHubConnection.On<BankModel>("SaveBank", (_bank) => {

        GlobalClassList.banks.RemoveAll(x=>x.Id == _bank.Id);
        GlobalClassList.banks.Add(_bank);
        GlobalClassList.banks = GlobalClassList.banks.Where(x=>x.IsActive == true).OrderBy(x=>x.BankName).ToList();
        StateHasChanged();

        });
    }
}
