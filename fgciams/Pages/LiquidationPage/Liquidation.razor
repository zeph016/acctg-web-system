@page "/liquidation"
@inject IGlobalService globalService
@inject IAccountingStatusService accountingStatusService
@inject ILiquidationService liquidationService
@inject IGlobalService globalService
@inject IAccountingStatusService accountingStatusService
@inject IDialogService dialogService
@inject ISnackbar snackBarService
@inject NavigationManager navigationManager

<div class='page-cont d-flex'>
    @if (!dataFetched)
    {
      <MudPaper Class='d-flex flex-1 ma-2 pa-2'>
        <MudSkeleton SkeletonType='SkeletonType.Rectangle' Height='100%' Width='100%' Animation='Animation.Wave' />
      </MudPaper>
    }
    else
    {
      <MudContainer Class='liquidationpage pa-2 gap-2' Fixed='false' MaxWidth='MaxWidth.Large'>
        <MudCard Class='flex-1' Square>
          <MudCardContent Class='pa-2'>
            <div class='liquidationpage__grid'>
              <div class="liq-header d-flex align-center pa-2 gap-1">
                <MudImage Class='fgcilogocont__imglogo' Src='images/fglogo/fgci1.png' Alt='fgci logo' Height='30' Width='30'/>
                <MudText Class='fgcilogocont__lblfirst'>F. GURREA</MudText>
                <MudText Class='fgcilogocont__lblsecond'>Construction, Inc.</MudText>
                <MudSpacer />
                <MudButton OnClick='New' EndIcon='fa-regular fa-file' Variant='Variant.Filled' Color='Color.Tertiary' Size='Size.Small'>new</MudButton>
              </div>
              <div class="liq-date d-flex align-center justify-center pa-2">
                <div class='d-flex align-center justify-center width50'>
                  <MudDatePicker Class='txt-overflow-ellipsis txt-top-0 font14-txtfield txtdate-noline' @bind-Date='@liquidationDate' IconSize='Size.Small' ReadOnly />
                </div>
              </div>
              <div class="liq-period d-flex align-center justify-end gap-2">
                <div class='flex-1 border-thin-right bgc-f2f2f2 height100'></div>
                <MudText Class='wspace-nowrap font10 font-bold txt-uppercase'>Period: </MudText>
                <div class='d-flex align-center pa-2 width30'>
                  <MudDateRangePicker Class='txt-top-0 font14-txtfield txtfield-right' @bind-DateRange=@periodLiquidation IconSize='Size.Small'></MudDateRangePicker>
                </div>
              </div>
              <div class="liq-controlno d-flex align-center pa-2 gap-2">
                <MudText Class='txt-uppercase font-bold font10'>Control No.:</MudText>
                <MudSpacer />
                @if (GlobalClass.liquidation.Id == 0)
                {
                  <MudChip Class='chip-radius-5 txt-uppercase font-bold font10' Color='Color.Error' Size='Size.Small'>Auto Generated</MudChip>
                }
                else
                {
                  <MudChip Class='chip-radius-5 txt-uppercase font-bold font10' Color='Color.Default' Size='Size.Small'>@GlobalClass.liquidation.ControlNumber</MudChip>
                }
                <MudSpacer />
              </div>
              <div class="liq-remarks d-flex align-center pa-2 gap-2">
                <MudText Class='txt-uppercase font-bold font10'>Remarks:</MudText>
                <MudTextField Class='txtfield-overflow-ellipsis font14-txtfield txt-top-0' @bind-Value=GlobalClass.liquidation.Remarks />
              </div>
              <div class="liq-details d-flex">
                <MudTable Class='small-toolbar-gutter toolbar-pad-0 flex-1 overflow-auto mudtoolbar-bg-8080805c' Items="GlobalClass.liquidation.LiquidationDetails" Bordered=true Striped=true
                Dense=true Elevation='0' FixedHeader='true' Height='auto' Square='true'>
                  <ToolBarContent>
                    <div class='d-flex flex-1 align-center pr-2 pl-2 gap-2'>
                      <MudText Class='txt-uppercase font-bold font12'>Liquidation Detail :</MudText>
                      <MudText Class='txt-uppercase font-bold font10'>
                         @GlobalClass.liquidation.LiquidationDetails.Count()
                         @(GlobalClass.liquidation.LiquidationDetails.Count() == 1 ? "item" : "items")
                      </MudText>
                      <MudSpacer />
                      <MudTooltip Text='Add Details'>
                        <MudButton OnClick='AddPettyCash' StartIcon="@Icons.Filled.Add" aria-label="add" Color='Color.Info' Size='Size.Small'>Add Detail</MudButton>
                      </MudTooltip>
                      <MudTooltip Text='Reset Details'>
                        <MudButton OnClick='ResetLiquidationDetails' StartIcon="@Icons.Filled.Refresh" aria-label="reset" Color='Color.Warning' Size='Size.Small'>
                            Reset
                        </MudButton>
                      </MudTooltip>
                     </div>
                  </ToolBarContent>
                  <ColGroup>
                    <col />
                  </ColGroup>
                  <HeaderContent>
                    <MudTh Class='wspace-nowrap customheader-1 pa-0'></MudTh>
                  </HeaderContent>
                  <RowTemplate>
                    <MudTd>
                      <MudCard Class='d-flex'>
                        <div class='d-flex flex-column pa-2 gap-2 border-thin-right'>
                          @* <MudTooltip Text='Add Details'>
                            <MudIconButton OnClick='(() => EditRow(context))' Icon='@Icons.Filled.Edit' Color='Color.Tertiary' Size='Size.Small' />
                          </MudTooltip> *@
                          <MudTooltip Text='Remove Detail'>
                            <MudIconButton OnClick='(() => RemovePettyCash(context))' Icon='@Icons.Filled.RemoveCircle' Color='Color.Error' Size='Size.Small' />
                          </MudTooltip>
                        </div>
                        <MudCardContent Class='d-flex flex-1 pa-2 overflow-auto'>
                          <div class='liquidationpage__liqdetgrid'>
                            <div class="liqdet-lblstatus d-flex align-center">
                              <MudChip Class='chip-radius-5 txt-uppercase font-bold font10' Color='Color.Error' Size='Size.Small'>
                                @context.ControlNumber
                              </MudChip>
                            </div>
                            <div class="liqdet-status d-flex align-center">
                              <MudChip Class='chip-radius-5 txt-uppercase font-bold font10' Size='Size.Small' Style='@Extensions.GetAcctgStatusColor(context.StatusId)'>
                                @context.StatusName
                              </MudChip>
                              <div class='d-flex align-center gap-2 width300px'>
                                <MudText Class='txt-uppercase font-bold font10'>Charge To:</MudText>
                                <MudTextField Class='font14-txtfield txt-top-0' @bind-Value='context.ChargingName'
                                @onclick='(()=> LookUpChargingDialog(context))' Required RequiredError='' ReadOnly></MudTextField>
                              </div>
                              <div class='d-flex align-center gap-2 width300px'>
                                <MudText Class='txt-uppercase font-bold font10'>Expense:</MudText>
                                <MudTextField Class='font14-txtfield txt-top-0' @bind-Value='context.ExpenseName'
                                @onclick='(()=> LookUpExpenseDialog(context))' Required RequiredError='' ReadOnly></MudTextField>
                              </div>
                              <MudSpacer />
                              <MudChip Class='chip-radius-5 txt-uppercase font-bold font10' Icon='@Icons.Filled.CalendarMonth' Color='Color.Default' Size='Size.Small'>
                                @Convert.ToDateTime(context.RequestDate).ToShortDateString()
                              </MudChip>
                            </div>
                            <div class="liqdet-lblpayee d-flex align-center gap-2">
                              <MudText Class='txt-uppercase font-bold font10'>Payee:</MudText>
                            </div>
                            <div class="liqdet-payee d-flex align-center">
                              <MudText Class='font-bold font14 pr-4'>@context.PayeeName</MudText>
                            </div>
                            <div class="liqdet-lblreq d-flex align-center">
                              <MudText Class='txt-uppercase font-bold font10'>Requested by:</MudText>
                            </div>
                            <div class="liqdet-req d-flex align-center">
                              <MudText Class='font-bold font14 pr-4 pl-2'>@context.RequestedByName</MudText>
                            </div>
                            <div class="liqdet-lblparticulars d-flex align-center">
                              <MudText Class='txt-uppercase font-bold font10'>Particulars:</MudText>
                              <MudToggleIconButton @bind-Toggled="context.ShowParticulars"
                              Icon="@Icons.Filled.KeyboardArrowDown" Color="@Color.Info" Size='Size.Small'
                              ToggledIcon="@Icons.Filled.KeyboardArrowUp" ToggledColor="@Color.Secondary" ToggledSize='Size.Small' />
                            </div>
                            <div class="liqdet-particulars d-flex align-center">
                              <MudText Class='transition-05s-ease pa-2 font12 rounded bgc-f2f2f2 overflow-hidden' style='@(context.ShowParticulars ? "height:100%" : "height:30px")'>@context.Particular</MudText>
                            </div>
                            <div class="liqdet-lblremarks d-flex align-center">
                              <MudText Class='txt-uppercase font-bold font10'>Remarks:</MudText>
                              <MudToggleIconButton @bind-Toggled="context.ShowRemarks"
                              Icon="@Icons.Filled.KeyboardArrowDown" Color="@Color.Info" Size='Size.Small'
                              ToggledIcon="@Icons.Filled.KeyboardArrowUp" ToggledColor="@Color.Secondary" ToggledSize='Size.Small' />
                            </div>
                            <div class="liqdet-remarks d-flex align-center">
                              @* @if (!string.IsNullOrWhiteSpace(context.Remarks))
                              { *@
                                <div class='d-flex align-start transition-05s-ease overflow-hidden' style='@(context.ShowRemarks ? "height:100%" : "height:30px")'>
                                  <MudText Class='transition-05s-ease pa-2 font12 rounded bgc-f2f2f2 overflow-hidden'>@context.Remarks</MudText>
                                </div>
                              @* } *@
                            </div>
                            <div class="liqdet-lblamt d-flex align-center">
                               <MudText Class='txt-uppercase font-bold font10'>Amount:</MudText>
                            </div>
                            <div class="liqdet-amt d-flex align-center">
                              @if (context.Amount <= 0)
                              {
                                <MudText Class='font-bold font12' Color='Color.Error'>
                                  @Extensions.GetEnumDescription(Enums.BankCurrency.PhilippinePeso) @context.Amount.ToString("N2")
                                </MudText>
                              }
                              else
                              {
                                <MudText Class='font-bold font12' Color='Color.Tertiary'>
                                  @Extensions.GetEnumDescription(Enums.BankCurrency.PhilippinePeso) @context.Amount.ToString("N2")
                                </MudText>
                              }
                            </div>
                          </div>
                        </MudCardContent>
                      </MudCard>
                    </MudTd>
                  </RowTemplate>
                </MudTable>
              </div>
              <div class='liq-totalamt d-flex align-center justify-end gap-2'>
                <div class='flex-1 border-thin-right bgc-f2f2f2 height100'></div>
                <div class='d-flex align-center pa-2 gap-2'>
                  <MudText Class='wspace-nowrap font12 font-bold txt-uppercase'>Total Amount:</MudText>
                  @if (GlobalClass.liquidation.TotalAmount > 0)
                  {
                    <MudText Class='font-bold' Color='Color.Tertiary' Typo='Typo.body2'>
                      @Extensions.GetEnumDescription(Enums.BankCurrency.PhilippinePeso) @GlobalClass.liquidation.TotalAmount.ToString("N2")
                    </MudText>
                  }
                  else
                  {
                    <MudText Class='font-bold' Typo='Typo.body2' Color='Color.Error'>
                      @Extensions.GetEnumDescription(Enums.BankCurrency.PhilippinePeso) @GlobalClass.liquidation.TotalAmount.ToString("N2")
                    </MudText>
                  }
                </div>
              </div>
              <div class="liq-signatories d-flex align-center justify-space-around pa-2 gap-2">
                <div class='d-flex align-center mb-2 gap-2 width25'>
                  @if (preparedByImg.Count() == 0)
                  {
                    <MudAvatar>
                      <MudIcon Icon='@Icons.Filled.AccountCircle' Size='Size.Medium'/>
                    </MudAvatar>
                  }
                  else
                  {
                    <MudAvatar Image='@($"data:image/png;base64, {Convert.ToBase64String(preparedByImg)}")' Size='Size.Medium'/>
                  }
                  <MudTextField Class='txt-top-0 txt-search-overflow' @bind-Value='_preparedBy' HelperText='PREPARED BY'
                  @onclick='(()=> LookUpPreparedDialog())' Error=@requiredPreparedBy ErrorText="This field is required" IconSize='Size.Small' ></MudTextField>
                </div>
                <div class='d-flex align-center mb-2 gap-2 width25'>
                  @if (approverImg.Count() == 0)
                  {
                    <MudAvatar>
                      <MudIcon Icon='@Icons.Filled.AccountCircle' Size='Size.Medium'/>
                    </MudAvatar>
                  }
                  else
                  {
                    <MudAvatar Image='@($"data:image/png;base64, {Convert.ToBase64String(approverImg)}")' Size='Size.Medium'/>
                  }
                  <MudTextField Class='txt-top-0 txt-search-overflow' @bind-Value='_approvedBy' HelperText='APPROVED BY'
                  @onclick='(()=> LookUpApproverDialog())' Error=@requiredApprover ErrorText="This field is required" IconSize='Size.Small' ></MudTextField>
                </div>
              </div>
            </div>
          </MudCardContent>
          <MudCardActions>
            <MudSpacer />
            <MudButton Variant="Variant.Text">Cancel</MudButton>
            <MudButton OnClick='PrintLiquidation' Variant="Variant.Filled" Color='Color.Primary'>@submitText</MudButton>
          </MudCardActions>
        </MudCard>
      </MudContainer>
    }
</div>


@code{
    Project project = new();
    private DateTime? liquidationDate = DateTime.Now;
    private DateRange periodLiquidation = new DateRange(DateTime.Now.Date, DateTime.Now.Date);
    private UserAccount selectedApprover = new();
    private UserAccount preparedBy = new UserAccount();
    private Project payee = new();
    private ExpenseLineModel expenseLine = new();
    private LiquidationDetailModel selectedLiqDetModel = new LiquidationDetailModel();
    BlazoredTextEditor remarksTextEditor = new BlazoredTextEditor();
    private int tempId;
    private decimal totalAmount;
    private bool dataFetched, requiredApprover, requiredPreparedBy, openControlDrawer, isLiqTableCollapsed, modifyRemarks, collapseLiqDetails, 
    openEditDrawer;
    private string _preparedBy = string.Empty, _approvedBy = string.Empty, submitText = "Save Liquidation";
    private byte[] preparedByImg = new byte[] { }, approverImg = new byte[] { };

    public override async Task SetParametersAsync(ParameterView parameters)
    {
        preparedBy = new UserAccount();
        preparedByImg = new byte[] { };
        approverImg = new byte[] { };
        await base.SetParametersAsync(parameters);
    }

    protected override async Task OnInitializedAsync()
    {
        GlobalClass.pageTitle = "liquidation entry";
        while (GlobalClass.currentUserAccount == null || preparedBy == null)
            await Task.Delay(1);

        Task t = Task.WhenAll(InitializeComponents());
        await t;
    }
    protected override async Task OnParametersSetAsync()
    {
        await Task.Delay(1);
        submitText = GlobalClass.liquidation.Id == 0 ? "Save Liquidation" : "Update Liquidation";
    }
    async Task InitializeComponents()
    {
        navigationManager.LocationChanged += OnLocationChanged;
        if (GlobalClass.liquidation == null || GlobalClass.liquidation.Id == 0)
        {
          switch(GlobalClass.forPrintingOrSaveLiquidation)
          {
            case null :

                GlobalClass.liquidation = new();
                GlobalClassList.liquidationDetails = new();
                GlobalClassList.liquidationPettyCash = new();
                selectedApprover = new();
                _preparedBy = GlobalClass.currentUserAccount.EmployeeName;
                preparedByImg = GlobalClass.currentUserAccount.Picture;
                preparedBy.EmployeeId = GlobalClass.currentUserAccount.EmployeeId;
               

             break;

             default :

                _preparedBy = GlobalClass.forPrintingOrSaveLiquidation.PreparedByName;
                preparedByImg = GlobalClass.forPrintingOrSaveLiquidation.PreparedByPicture;
                preparedBy.EmployeeId = GlobalClass.forPrintingOrSaveLiquidation.PreparedById;
                _approvedBy = GlobalClass.forPrintingOrSaveLiquidation.ApprovedByName;
                approverImg = GlobalClass.forPrintingOrSaveLiquidation.ApprovedByPicture;
                selectedApprover.EmployeeId = GlobalClass.forPrintingOrSaveLiquidation.ApprovedById;

             break;
          }
            
        }
        else
        {
            await DisplayProperties();
            TotalAmount();
        }
        CompletedFetch();
    }
    void CompletedFetch()
    {
        dataFetched = true;
        StateHasChanged();
    }
    #region Location Changed

    private void OnLocationChanged(object? sender, LocationChangedEventArgs args)
    {
        GlobalClass.liquidation = new();
        Dispose();
    }

     public void Dispose()
    {
        navigationManager.LocationChanged -= OnLocationChanged;
    }
    #endregion
  #region Lookup Prepared by

  private async void LookUpPreparedDialog()
  {
      var parameters = new DialogParameters();
      string dialogTitle = "Employee Look Up";
      parameters.Add("dialogTitle", dialogTitle);
      parameters.Add("buttonText", "Select");
      parameters.Add("color", Color.Success);
      parameters.Add("lookUpType", Enums.LookUpType.Employee);
      var options = new DialogOptions()
      {
          CloseButton = false,
          MaxWidth = MaxWidth.Small,
          FullWidth = true,
          NoHeader = false,
          DisableBackdropClick = false
      };
      var resultDialog = await dialogService.Show<Shared.Dialogs.LookUpDialog.GlobalGenericLookup>(dialogTitle, parameters, options).Result;
      if (!resultDialog.Cancelled)
      {
          preparedBy = (UserAccount)resultDialog.Data;
          _preparedBy = preparedBy.EmployeeName;
          preparedByImg = preparedBy.Picture;
          StateHasChanged();
      }
  }

  #endregion

  #region Lookup Approver

  private async void LookUpApproverDialog()
  {
      var parameters = new DialogParameters();
      string dialogTitle = "Employee Look Up";
      parameters.Add("dialogTitle", dialogTitle);
      parameters.Add("buttonText", "Select");
      parameters.Add("color", Color.Success);
      parameters.Add("lookUpType", Enums.LookUpType.Employee);
      var options = new DialogOptions()
      {
          CloseButton = false,
          MaxWidth = MaxWidth.Small,
          FullWidth = true,
          NoHeader = false,
          DisableBackdropClick = false
      };
      var resultDialog = await dialogService.Show<Shared.Dialogs.LookUpDialog.GlobalGenericLookup>(dialogTitle, parameters, options).Result;
      if (!resultDialog.Cancelled)
      {
          selectedApprover = (UserAccount)resultDialog.Data;
          _approvedBy = selectedApprover.EmployeeName;
          approverImg = selectedApprover.Picture;
          StateHasChanged();
      }
  }

  #endregion

  #region Lookup Charging
  private async void LookUpChargingDialog(LiquidationDetailModel liquidationDetail)
  {
      var parameters = new DialogParameters();
      string dialogTitle = "Charge to";
      parameters.Add("dialogTitle", dialogTitle);
      parameters.Add("buttonText", "Select");
      parameters.Add("color", Color.Success);
      parameters.Add("lookUpType", Enums.LookUpType.ChargeLine);
      var options = new DialogOptions()
      {
          CloseButton = false,
          MaxWidth = MaxWidth.Small,
          FullWidth = true,
          NoHeader = false,
          DisableBackdropClick = false
      };
      var resultDialog = await dialogService.Show<Shared.Dialogs.LookUpDialog.GlobalGenericLookup>(dialogTitle, parameters, options).Result;
      if (!resultDialog.Cancelled)
      {
          project = (Project)resultDialog.Data;
          if (liquidationDetail.Id == 0)
          {
              GlobalClass.liquidation.LiquidationDetails.Where(x => x.TemporaryId == liquidationDetail.TemporaryId).ToList().ForEach(x =>
              {
                  x.ChargingCategoryId = project.ProjectCategoryId;
                  x.ChargingId = project.ProjectId;
                  x.ChargingName = project.ProjectName;
              });
          }
          else
          {
              GlobalClass.liquidation.LiquidationDetails.Where(x => x.Id == liquidationDetail.Id).ToList().ForEach(x =>
              {
                  x.ChargingCategoryId = project.ProjectCategoryId;
                  x.ChargingId = project.ProjectId;
                  x.ChargingName = project.ProjectName;
              });
          }
          StateHasChanged();
      }
  }

  #endregion

  #region Lookup Expense
  private async void LookUpExpenseDialog(LiquidationDetailModel liquidationDetail)
  {
      var parameters = new DialogParameters();
      string dialogTitle = "Expense Liine";
      parameters.Add("dialogTitle", dialogTitle);
      parameters.Add("buttonText", "Select");
      parameters.Add("color", Color.Success);
      parameters.Add("lookUpType", Enums.LookUpType.ExpLine);
      var options = new DialogOptions()
      {
          CloseButton = false,
          MaxWidth = MaxWidth.Small,
          FullWidth = true,
          NoHeader = false,
          DisableBackdropClick = false
      };
      var resultDialog = await dialogService.Show<Shared.Dialogs.LookUpDialog.GlobalGenericLookup>(dialogTitle, parameters, options).Result;
      if (!resultDialog.Cancelled)
      {
        Console.WriteLine(liquidationDetail.TemporaryId);
          expenseLine = (ExpenseLineModel)resultDialog.Data;
          if(liquidationDetail.Id == 0)
          {
            GlobalClass.liquidation.LiquidationDetails.Where(x=>x.TemporaryId == liquidationDetail.TemporaryId).ToList().ForEach(x=>
            {
              x.ExpenseLineId = expenseLine.Id;
              x.ExpenseName = expenseLine.ExpenseName;
            });
          }
          else
          {
            GlobalClass.liquidation.LiquidationDetails.Where(x=>x.Id == liquidationDetail.Id).ToList().ForEach(x=>
            {
            x.ExpenseLineId = expenseLine.Id;
            x.ExpenseName = expenseLine.ExpenseName;
            });
          }
          StateHasChanged();
      }
  }

  #endregion

  #region Load Employee

  async Task<IEnumerable<UserAccount>> LoadEmployee(string employeeName)
  {
      var filterParameter = new FilterParameter()
      {
          IsName = true,
          Name = employeeName,
          IsLookUp = true
      };
      return await globalService.LoadAllEmployee(filterParameter, GlobalClass.token);
  }

  #endregion

  #region Add Petty Cash

  async void AddPettyCash()
  {
      var parameters = new DialogParameters();
      string dialogTitle = "Petty Cash";
      parameters.Add("dialogTitle", dialogTitle);
      parameters.Add("buttonText", "Select");
      parameters.Add("color", Color.Success);
      parameters.Add("lookUpType", Enums.LookUpType.PettyCash);
      var options = new DialogOptions()
      {
          CloseButton = false,
          MaxWidth = MaxWidth.Large,
          FullWidth = true,
          NoHeader = false,
          DisableBackdropClick = true
      };
      var resultDialog = await dialogService.Show<Shared.Dialogs.GlobalRFPLiquidationLookUp.GlobalRFPLiquidationLookUp>(dialogTitle, parameters, options).Result;
      if (!resultDialog.Cancelled)
      {
          StateHasChanged();
          TotalAmount();
      }
  }

  #endregion

  #region Mapping Liquidation

  LiquidationModel MapProperties()
  {
      GlobalClass.liquidation.LiquidationDate = Convert.ToDateTime(liquidationDate);
      GlobalClass.liquidation.PreparedById = preparedBy.EmployeeId;
      GlobalClass.liquidation.PreparedByName = _preparedBy;
      GlobalClass.liquidation.PreparedByPicture = preparedByImg;
      GlobalClass.liquidation.ApprovedById = selectedApprover.EmployeeId;
      GlobalClass.liquidation.ApprovedByName = _approvedBy;
      GlobalClass.liquidation.ApprovedByPicture = approverImg;
      GlobalClass.liquidation.PayeeId = 1;
      GlobalClass.liquidation.PayeeCategoryId = Enums.ProjectCategory.Project;
      GlobalClass.liquidation.UserId = GlobalClass.currentUserAccount.EmployeeId;
      GlobalClass.liquidation.Activity = GlobalClass.liquidation.Id == 0 ? "Add Liquidation" : "Edit Liquidation";
      GlobalClass.liquidation.StatusId = GlobalClassList.accountingStatusList.Where(x => x.StatusEnumCategoryId == Enums.AccountingStatusEnumCategory.LG).Select(t => t.Id).FirstOrDefault();

      GlobalClass.liquidation.LiquidationDetails.ForEach(liq=> 
        {
          liq.StatusId = GlobalClassList.accountingStatusList
          .Where(x=>x.StatusEnumCategoryId == Enums.AccountingStatusEnumCategory.PCL)
          .Select(i=>i.Id)
          .FirstOrDefault();

          liq.UserId = GlobalClass.currentUserAccount.EmployeeId;
          liq.Activity = "Petty Cash Liquidated";
        });

      GlobalClass.liquidation.PeriodFrom = (DateTime)periodLiquidation.Start.GetValueOrDefault();
      GlobalClass.liquidation.PeriodTo = (DateTime)periodLiquidation.End.GetValueOrDefault();

      GlobalClass.liquidation.IsActive = true;

      return GlobalClass.liquidation;
  }

  #endregion

  #region Display Properties

  async Task DisplayProperties()
  {
      var liquidationDetails = await liquidationService.LiquidationDetails(GlobalClass.liquidation.Id, GlobalClass.token);
      GlobalClass.liquidation.LiquidationDetails = liquidationDetails.Select(liquidationDetail => new LiquidationDetailModel()
      {
          Id = liquidationDetail.Id,
          PettyCashId = liquidationDetail.PettyCashId,
          ControlNumber = liquidationDetail.ControlNumber,
          PayeeId = liquidationDetail.PayeeId,
          PayeeName = liquidationDetail.PayeeName,
          PayeeCategoryId = liquidationDetail.PayeeCategoryId,
          Particular = liquidationDetail.Particular,
          RequestedById = liquidationDetail.RequestedById,
          RequestedByName = liquidationDetail.RequestedByName,
          LiquidationId = GlobalClass.liquidation.Id,
          IsActive = liquidationDetail.IsActive,
          StatusId = liquidationDetail.StatusId,
          StatusName = liquidationDetail.StatusName,
          ExpenseLineId = liquidationDetail.ExpenseLineId,
          ExpenseName = liquidationDetail.ExpenseName,
          ChargingCategoryId = liquidationDetail.ChargingCategoryId,
          ChargingId = liquidationDetail.ChargingId,
          ChargingName = liquidationDetail.ChargingName,
          Amount = liquidationDetail.Amount,
          Remarks = liquidationDetail.Remarks

      }).ToList();

      liquidationDate = GlobalClass.liquidation.LiquidationDate;
      preparedBy.EmployeeId = GlobalClass.liquidation.PreparedById;
      _preparedBy = GlobalClass.liquidation.PreparedByName;
      selectedApprover.EmployeeId = GlobalClass.liquidation.ApprovedById;
      _approvedBy = GlobalClass.liquidation.ApprovedByName;

      payee.ProjectId = GlobalClass.liquidation.PayeeId;
      payee.ProjectName = GlobalClass.liquidation.PayeeName;
      payee.ProjectCategoryId = GlobalClass.liquidation.PayeeCategoryId;

      preparedByImg = await GetEmployeeDetails(GlobalClass.liquidation.PreparedById);
      approverImg = await GetEmployeeDetails(GlobalClass.liquidation.ApprovedById);

      periodLiquidation.Start = GlobalClass.liquidation.PeriodFrom;
      periodLiquidation.End = GlobalClass.liquidation.PeriodTo;
  }

  #endregion

  #region Total Amount

  void TotalAmount()
  {
      totalAmount = GlobalClass.liquidation.LiquidationDetails.Sum(x => x.Amount);
      GlobalClass.liquidation.TotalAmount = totalAmount;
  }

  #endregion

    #region Print/Save Liquidation

  void PrintLiquidation()
  {
    if (Validation())
    {
      GlobalClass.forPrintingOrSaveLiquidation = MapProperties();
      navigationManager.NavigateTo($"liquidationreport/print");
    }
    else
      Extensions.ShowAlert("Incomplete fields. Please complete data", Variant.Filled, snackBarService, Severity.Error);
  }

  #endregion

  #region Remove Petty Cash

  private async void RemovePettyCash(LiquidationDetailModel liquidationDetail)
  {
    if(liquidationDetail.Id != 0)
    {
        var parameters = new DialogParameters();
        string contentText = "Petty Cash ";
        string dialogTitle = "Remove " + contentText;
        parameters.Add("contentText", contentText);
        parameters.Add("actionMode", Enums.ActionMode.Delete);
        var options = new DialogOptions()
        {
            CloseButton = false,
            MaxWidth = MaxWidth.ExtraSmall,
            FullWidth = true,
            NoHeader = false,
            DisableBackdropClick = true
        };
        var resultDialog = await dialogService.Show<Shared.Dialogs.GenericPromptDialogs.GenericPrompt>(dialogTitle, parameters, options).Result;
        if(!resultDialog.Cancelled)
        {
            liquidationDetail.IsActive = false;
            GlobalClass.liquidation.RemovedLiquidationDetails.Add(liquidationDetail);
            GlobalClass.liquidation.LiquidationDetails = GlobalClass.liquidation.LiquidationDetails.Where(x => x.IsActive == true).ToList();
            StateHasChanged();
        }
        
    }
    else
    {
        liquidationDetail.IsActive = false;
        GlobalClass.liquidation.RemovedLiquidationDetails.Add(liquidationDetail);
        GlobalClass.liquidation.LiquidationDetails = GlobalClass.liquidation.LiquidationDetails.Where(x => x.IsActive == true).ToList();
        StateHasChanged();
    }

   
  }
  #endregion

  void NavigateTo(LiquidationModel liquidation)
  {
    GlobalClass.liquidation = liquidation;
    navigationManager.NavigateTo($"liquidationreport/print");
  }

  private bool Validation()
  {
    bool validated = false;
    long chargingId = 0, expenseLineId = 0;
    GlobalClass.liquidation.LiquidationDetails.ForEach(x=>
    {
      expenseLineId = x.ExpenseLineId;
      chargingId = x.ChargingId;
    });
    
    if(GlobalClass.liquidation.LiquidationDetails.Count() == 0 
    || chargingId == 0
    || expenseLineId == 0)
    {
        validated = false;
    }
    else
    {
      validated = true;
    }

    if(preparedBy.EmployeeId == 0)
      requiredPreparedBy = true;
      else
        requiredPreparedBy = false;

    if(selectedApprover.EmployeeId == 0)
      requiredApprover = true;
      else
        requiredApprover = false;

    return validated;
  }
  public async void GetFromEditor()
  {
    GlobalClass.liquidation.Remarks = await this.remarksTextEditor.GetText();
    GlobalClass.liquidation.Remarks = GlobalClass.liquidation.Remarks.Trim();
    StateHasChanged();
  }
  public async void SetToEditor(string contentText)
  {
    await Task.Delay(1);
    string content = contentText;
    await this.remarksTextEditor.InsertText(content);
    StateHasChanged();
  }

  private async Task<byte[]> GetEmployeeDetails(long employeeId)
  {
      var employeeDetail = await globalService.GetEmployeeById(employeeId, GlobalClass.token);
      return employeeDetail.Picture;
  }
  
  private void New()
  {
    GlobalClass.liquidation = new LiquidationModel();
  }

  private void ResetLiquidationDetails()
  {
    GlobalClass.liquidation.LiquidationDetails = new List<LiquidationDetailModel>();
    totalAmount = 0;
  }

  private void EditRow(LiquidationDetailModel model)
  {
    selectedLiqDetModel = new LiquidationDetailModel();
    selectedLiqDetModel = model;
    if (!openEditDrawer)
      openEditDrawer = !openEditDrawer;
  }
}