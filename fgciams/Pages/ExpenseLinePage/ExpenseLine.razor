@page "/expenseline-list"

@inject IDialogService dialogService
@inject ISnackbar snackBarService

<div class='page-cont'>
    <div class='drawer-right'>
        <MudDrawer Class='pa-1' @bind-Open='openSideFilter' Fixed='false' Anchor='Anchor.Right' Elevation='0' Variant='DrawerVariant.Mini' OpenMiniOnHover='false'>
            <div class='drawer-right__filtercont'>
                <div class="icon-area d-flex align-center">
                    <MudIconButton OnClick='OpenSideFilter' Icon="@Icons.Filled.FilterList" aria-label="Filter" Size='Size.Medium' />
                </div>
                <div class="filter-title d-flex align-center">
                    <p class='title875'>Filter</p>
                    <MudSpacer />
                    <MudIconButton OnClick='OpenSideFilter' Icon="@Icons.Filled.Close" aria-label="Close Filter" Size='Size.Medium' />
                </div>
                <div class='filter-content d-flex flex-column pl-4 pr-4 gap-1 @visibility'>
                    <MudTextField Class='txtfield-75' @bind-Value='searchTerm' Placeholder='Expense Line'
                    Adornment='Adornment.Start' AdornmentIcon='@Icons.Material.Filled.Search' IconSize='Size.Small'
                    Clearable='true' Variant='Variant.Outlined' />
                    <MudButton Variant='Variant.Filled' Color='Color.Secondary'>Apply Filter</MudButton>
                </div>
            </div>
        </MudDrawer>
    </div>
    <MudContainer Class='divisionpage' Fixed='false' MaxWidth='MaxWidth.ExtraExtraLarge'>
        @if(!dataFetched)
        {
            <MudPaper Class='ma-1 pa-1' style="height: calc(100vh - 125px);">
                <MudSkeleton SkeletonType='SkeletonType.Text' Height='100px' Animation='Animation.Wave' />
                <MudSkeleton SkeletonType='SkeletonType.Rectangle' Height='71vh' Animation='Animation.Wave' />
            </MudPaper>
        }
        else
        {
            <MudTable Class='configtables' Items="@GlobalClassList.expenseLineList" Hover="true" 
            Breakpoint="Breakpoint.Sm" FixedHeader='true' FixedFooter='true' Bordered='true' Dense='true'
            RowsPerPage='30' Striped='true' Filter='new Func<ExpenseLineModel,bool>(FilterItems)'>
                <ToolBarContent>
                    <MudText Typo='Typo.caption'>
                        @GlobalClassList.expenseLineList.Count() 
                        @(GlobalClassList.expenseLineList.Count() == 1 ? "item" : "items") 
                        in Total
                    </MudText>
                    <MudSpacer/>
                    <MudMenu StartIcon='@Icons.Filled.MoreVert' AnchorOrigin='Origin.BottomLeft' 
                    TransformOrigin='Origin.TopCenter' Dense='true' Size='Size.Small' Label='More'>
                         <MudMenuItem OnClick='(() => ExpenseLineDialog(new ExpenseLineModel()))'>
                            <div class='d-flex align-center gap-2'>
                                <MudIcon Icon='@Icons.Filled.Add' Size='Size.Medium' />
                                <MudText Typo='Typo.body2'>Add</MudText>
                            </div>
                        </MudMenuItem>
                         <MudMenuItem OnClick='OpenSideFilter'>
                            <div class='d-flex align-center gap-2'>
                            <MudIcon Icon='@Icons.Filled.FilterList' />
                            <MudText Typo='Typo.body2'>Filter</MudText>
                            </div>
                        </MudMenuItem>
                    </MudMenu>
                </ToolBarContent>
                <ColGroup>
                    <col />
                    <col />
                    <col style='width: 5%' />
                    <col style='width: 5%' />
                </ColGroup>
                <HeaderContent>
                    <MudTh Class='customheader-1'>Expense Name</MudTh>
                    <MudTh Class='customheader-1'>Remarks</MudTh>
                    <MudTh Class='customheader-1 text-center'>Active</MudTh>
                    <MudTh Class='customheader-1'>Action</MudTh>
                </HeaderContent>
                <RowTemplate>
                        <MudTd DataLabel="Expense Line">@context.ExpenseName</MudTd>
                        <MudTd DataLabel="Remarks">@context.Remarks</MudTd>
                        <MudTd Class='text-center'>
                            <MudCheckBox Checked=@context.IsActive ReadOnly='true' />
                        </MudTd>
                        <MudTd Class='text-center'>
                            <MudMenu Icon='@Icons.Filled.MoreVert' AnchorOrigin='Origin.BottomLeft'
                            TransformOrigin='Origin.TopCenter' Dense='true' Size='Size.Small'>
                                 <MudMenuItem OnClick='(() => ExpenseLineDialog(context))'>
                                    <div class='d-flex align-center gap-2'>
                                        <MudIcon Icon='@Icons.Filled.Edit' Size='Size.Medium' />
                                        <MudText Typo='Typo.body2'>Edit</MudText>
                                    </div>
                                </MudMenuItem>
                            </MudMenu>
                        </MudTd>
                </RowTemplate>
                <PagerContent>
                    <MudTablePager PageSizeOptions='@pageSize' />
                </PagerContent>
            </MudTable>
        }
    </MudContainer>
</div>

@code
{
    private bool dataFetched, openSideFilter;
    private int[] pageSize = new int[] {30, 50, 100, 500, 1000 };
    private string searchTerm = string.Empty, visibility = "visibility-animation-hide";
    protected override async Task OnInitializedAsync()
    {
        GlobalClass.pageTitle = "Expense Line";
        while (GlobalClass.currentUserAccount == null || GlobalClassList.expenseLineList == null)
            await Task.Delay(1);
        CompletedFetch();
    }
    private void CompletedFetch()
    {
        dataFetched = true;
        StateHasChanged();
    }
    private bool FilterItems(ExpenseLineModel items)
    {
        if (string.IsNullOrEmpty(searchTerm))
            return true;
        if (items.ExpenseName.Contains(searchTerm, StringComparison.InvariantCultureIgnoreCase))
            return true;
        return false;
    }
    private void OpenSideFilter()
    {
        openSideFilter = !openSideFilter;
        if(openSideFilter)
        visibility = "visibility-animation-show";
        if(!openSideFilter)
        visibility = "visibility-animation-hide";
    }
    private async Task ExpenseLineDialog(ExpenseLineModel expenseLine)
    {
        var parameters = new DialogParameters();
        GlobalClass.expenseLine = expenseLine;
        string dialogTitle = GlobalClass.expenseLine.Id != 0 ? "Edit Expense Line" : "Add Expense Line";
        string buttonText = GlobalClass.expenseLine.Id != 0 ? "Update" : "Add";
        Color color = GlobalClass.expenseLine.Id != 0 ? Color.Info : Color.Success;
        parameters.Add("color", color);
        parameters.Add("dialogTitle", dialogTitle);
        parameters.Add("buttonText", buttonText);
        var options = new DialogOptions()
        {
            CloseButton = false,
            MaxWidth = MaxWidth.ExtraSmall,
            FullWidth = true,
            NoHeader = false,
            DisableBackdropClick = false
        };
        var resultDialog = await dialogService.Show<Shared.Dialogs.ExpenseLineDialogs.ExpenseLineDialog>("", parameters, options).Result;
        if (!resultDialog.Cancelled)
        {
            if ((int)resultDialog.Data == 0)
                Extensions.ShowAlert("Added new Expense Line", Variant.Filled, snackBarService, Severity.Success);
            else if ((int)resultDialog.Data == 1)
                Extensions.ShowAlert("Updated Expense Line", Variant.Filled, snackBarService, Severity.Info);
            GlobalClassList.expenseLineList = GlobalClassList.expenseLineList.Where(x=>x.IsActive == true).ToList();
        }
    }
}