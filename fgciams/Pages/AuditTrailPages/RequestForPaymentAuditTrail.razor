@page "/request-for-payment/trail"

@inject NavigationManager NavigationManager
@inject IRequestForPaymentService RFPService
@inject IGlobalService GlobalService
@inject IJSRuntime JSRuntime

<div class='page-cont'>
    <div class='bgc-white'>
        <MudContainer Class='overflow-hidden pa-2' Fixed='false' MaxWidth='MaxWidth.ExtraLarge'>
            @if(!dataFetched)
            {
                <SkeletonPageList />
            }
            else
            {
                <MudContainer Fixed='false' MaxWidth='MaxWidth.Large'>
                    <MudPaper Elevation='0'>
                        <div class='audit-trail-grid'>
                            <div id='atrail-contentid-rfp' class='audit-trail-content'>
                                <AuditLogTimeline IsRFP='true' RequestForPaymentAuditTrail='@GlobalClassList.RFPAuditTrail'
                                    ModuleName='RFP'/>
                            </div>
                            <div class='audit-trail-sidebar'>
                                <MudPaper>
                                    <AuditLogInfo IsRFP='true' RequestForPayment='currRFP' DataFetched='dataFetched'
                                        ReturnEventClick='BackToRFPList'/>
                                </MudPaper>
                            </div>
                        </div>
                    </MudPaper>
                </MudContainer>
            }
        </MudContainer>
    </div>
</div>

@code{
    private bool dataFetched, isToBottom, scrollBarExists;
    private RequestForPaymentAuditTrailModel currentTrail = new();
    private RequestForPaymentModel currRFP = new();
    private string ScrollButtonStr = "To Bottom";

    protected override async Task OnInitializedAsync()
    {
        GlobalClass.pageTitle = "REQUEST FOR PAYMENT AUDIT TRAIL";
        if(GlobalClass.requestForPayment.Id == 0)
            BackToRFPList();
        else
        {
            Task t = Task.WhenAll(LoadAuditTrail());
            await t;
            if (t.Status == TaskStatus.RanToCompletion)
                CompletedFetch();
        }
        if(GlobalClass.pettyCash.Id != 0)
            scrollBarExists = await JSRuntime.InvokeAsync<bool>("CheckScrollbar", "atrail-contentid-rfpwwww");
    }

    private void CompletedFetch()
    {
        dataFetched = true;
        StateHasChanged();
    }
  
    private void BackToRFPList() => NavigationManager.NavigateTo("/request-payment/list");
    

    private async Task ScrollJS(bool boolValue, string elementId)
    {
        if(boolValue)
        {
            await JSRuntime.InvokeVoidAsync("ScrollToBottom", elementId);
            ScrollButtonStr = "To Top";
        }
        else if(!boolValue)
        {
            await JSRuntime.InvokeVoidAsync("ScrollToTop", elementId);
            ScrollButtonStr = "To Bottom";
        }
    }

    private async Task LoadAuditTrail()
    {
        Console.WriteLine(GlobalClass.requestForPayment.Amount);
        GlobalClassList.RFPAuditTrail = await RFPService.RFPAuditTrails(GlobalClass.requestForPayment.Id,GlobalClass.token);
        currRFP = GlobalClass.requestForPayment;
        currentTrail = GlobalClassList.RFPAuditTrail.Last();
    }
}


