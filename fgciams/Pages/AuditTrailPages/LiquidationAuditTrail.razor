@page "/liquidation/audit"
@page "/liquidation/audit/{liquidationId:long}"

@inject ILiquidationService auditLiquidationService
@inject NavigationManager NavigationManager
@inject IGlobalService globalService

<div class='page-cont'>
    <MudContainer Class="overflow-hidden pa-2" Fixed='false' MaxWidth='MaxWidth.ExtraExtraLarge'>
        @if(!dataFetched)
        {
            <MudPaper Class='ma-1 pa-1' style="height: calc(100vh - 125px);">
                <MudSkeleton SkeletonType='SkeletonType.Rectangle' Height='calc(100vh - 135px)' Animation='Animation.Wave' />
            </MudPaper>
        }
        else
        {
            <MudGrid Spacing='1'>
                <MudItem xs=9>
                    <MudPaper Class='overflow-hidden' Height='calc(100vh - 105px)'>
                        <div class='d-flex align-center gap-2 pa-2 bgc-F4F5FB'>
                            <MudIcon Icon="@Icons.Material.Filled.Timeline" Size='Size.Small' />
                            <MudText Class='wspace-nowrap font-bold txt-uppercase' Typo="Typo.body2">Liquidation Audit Trail</MudText>
                            <hr class='horizline2'>
                        </div>
                        <MudDivider />
                        <MudPaper Class='pa-2 mx-2' Elevation='0' Height='calc(100vh - 150px)'>
                            <AuditTrailTimeLine auditMode='@Enums.AuditTrailMode.LiquidationTrail' liqAuditTrails='audiTrailLiquidation' />
                        </MudPaper>
                    </MudPaper>
                </MudItem>
                <MudItem Class='d-flex flex-column gap-2' xs=3>
                    <MudPaper Class='overflow-hidden'>
                        <div class="d-flex align-center pa-2 gap-2 bgc-F4F5FB">
                            <MudIcon Icon="@Icons.Material.Filled.CommentBank" Size="Size.Small" />
                            <MudText Class='wspace-nowrap font-bold txt-uppercase' Typo="Typo.body2">Liquidation Details</MudText>
                            <hr class='horizline2'>
                        </div>
                        <MudDivider />
                        <MudGrid Class='mt-2' Spacing='1'>
                            <MudItem Class='px-4' xs=6>
                                <MudText Class='txt-uppercase wspace-nowrap font10 font-bold'>Control Number:</MudText>
                                <MudText Class='txt-uppercase wspace-nowrap font-bold font14 pa-1' Color='Color.Error'>@GlobalClass.liquidationAudit.ControlNumber</MudText>
                            </MudItem>
                            <MudItem Class='px-4' xs=6>
                                <MudText Class='txt-uppercase wspace-nowrap font10 font-bold'>Liquidation Date:</MudText>
                                <MudChip Class='chip-radius-5 txt-uppercase font-bold font10' Icon='@Icons.Material.Filled.CalendarMonth' Color='Color.Default' Size='Size.Small'>
                                    @LiquidationDate.GetValueOrDefault().ToShortDateString()
                                </MudChip>
                            </MudItem>
                            <MudItem xs=12>
                                <MudDivider />
                                <div class='px-2'>
                                    <MudText Class='txt-uppercase wspace-nowrap font10 font-bold'>Period:</MudText>
                                    <div class='d-flex align-center'>
                                        <div class='d-flex align-center gap-2'>
                                            <MudText Class='txt-uppercase wspace-nowrap font10 '>from:</MudText>
                                            <MudChip Class='chip-radius-5 font-bold font10' Icon='@Icons.Material.Filled.CalendarMonth' Color='Color.Default' Size='Size.Small'>
                                                @GlobalClass.liquidationAudit.PeriodFrom.ToShortDateString()
                                            </MudChip>
                                        </div>
                                        <div class='d-flex align-center gap-2'>
                                            <MudText Class='txt-uppercase wspace-nowrap font10'>to:</MudText>
                                            <MudChip Class='chip-radius-5 font-bold font10' Icon='@Icons.Material.Filled.CalendarMonth' Color='Color.Default' Size='Size.Small'>
                                                @GlobalClass.liquidationAudit.PeriodTo.ToShortDateString()
                                            </MudChip>
                                        </div>
                                    </div>
                                </div>
                            </MudItem>
                            <MudItem xs=12>
                                <MudDivider />
                                <div class='px-2'>
                                    <div class='d-flex align-center px-2'>
                                        <MudText Class='txt-uppercase wspace-nowrap font10 font-bold'>Amount:</MudText>
                                        <MudSpacer />
                                        <MudChip Class='rounded' Color='Color.Default' Size='Size.Small'>
                                        @if (GlobalClass.liquidationAudit.TotalAmount > 0 )
                                        {
                                            <MudText Class='font-bold color-green font12'>
                                                @(Extensions.GetEnumDescription(Enums.BankCurrency.PhilippinePeso) + " " + @GlobalClass.liquidationAudit.TotalAmount.ToString("N2"))
                                            </MudText>
                                        }
                                        else
                                        {
                                            <MudText Class='pl-2 txt-uppercase wspace-nowrap font-bold font12 gap-2' Color='Color.Error'> 
                                                @(Extensions.GetEnumDescription(Enums.BankCurrency.PhilippinePeso) + " " + @GlobalClass.liquidationAudit.TotalAmount.ToString("N2"))
                                            </MudText>
                                        }
                                        </MudChip>
                                    </div>
                                </div>
                            </MudItem>
                            <MudItem xs=12>
                                <MudDivider />
                                <div class='px-2'>
                                    <MudText Class='ml-1 txt-uppercase wspace-nowrap font10 font-bold'>Remarks: </MudText>
                                      @if(!string.IsNullOrWhiteSpace(GlobalClass.liquidationAudit.Remarks))
                                      {
                                         <MudText Class='txt-uppercase wspace-nowrap font12'>@GlobalClass.liquidationAudit.Remarks</MudText>
                                      }
                                      else
                                      {
                                         <MudText Class='wspace-nowrap font12'>None</MudText>
                                      }
                                </div>
                            </MudItem>
                            <MudItem xs=12>
                                <MudDivider />
                                <div class='d-flex align-center pa-2 gap-2 bgc-F4F5FB'>
                                    <MudIcon Class='ml-2' Icon="@Icons.Material.Filled.Badge" Size="Size.Small" />
                                    <MudText Class='txt-uppercase wspace-nowrap font-bold' Typo='Typo.body2'>Signatories</MudText>
                                    <hr class='horizline2'>
                                </div>
                                 <MudDivider />
                                 <div class='d-flex flex-column pa-2 gap-2'>
                                    <div class="d-flex align-center gap-2">
                                        <MudAvatar Size="Size.Medium" Image='@($"data:image/png;base64, {Convert.ToBase64String(preparedByImg)}")' />
                                        <MudDivider />
                                        <div class="gap-2">
                                            <MudText Class='wspace-nowrap' Typo="Typo.subtitle2">@GlobalClass.liquidationAudit.PreparedByName</MudText>
                                            <MudText Typo="Typo.caption">Requested by</MudText>
                                        </div>
                                    </div>
                                 </div>
                                  <div class="d-flex align-center pa-2 gap-2">
                                        <MudAvatar Size="Size.Medium" Image='@($"data:image/png;base64, {Convert.ToBase64String(approvedByImg)}")' />
                                        <MudDivider />
                                        <div class="gap-2">
                                            <MudText Class='wspace-nowrap' Typo="Typo.subtitle2">@GlobalClass.liquidationAudit.ApprovedByName</MudText>
                                            <MudText Typo="Typo.caption">Requested by</MudText>
                                        </div>
                                    </div>
                            </MudItem>
                        </MudGrid>
                    </MudPaper>
                    <div class='d-flex align-center justify-end pa-2'>
                        <MudButton Class='btn-ios-d pa-1 font12' OnClick="BackToLiqList" Size="Size.Small" Variant='Variant.Filled' Color='Color.Error' DisableElevation>
                            Return
                        </MudButton>
                    </div>
                </MudItem>
            </MudGrid>
        }
    </MudContainer>
</div>

@code{
  [Parameter] public Int64 liquidationId {get; set;}
  private bool dataFetched;
  private byte[] preparedByImg = new byte[] { }, approvedByImg = new byte[] {};
  private List<LiquidationAuditTrailModel> audiTrailLiquidation = new List<LiquidationAuditTrailModel>();
    private LiquidationAuditTrailModel currentTrail = new LiquidationAuditTrailModel();
  private DateRange dateRange = new DateRange(DateTime.Now, DateTime.Now);
  private DateTime? LiquidationDate ;
  
  protected override async Task OnInitializedAsync()
  {
    NavigationManager.LocationChanged += OnLocationChanged;
    while(GlobalClass.currentUserAccount == null || GlobalClass.liquidationAudit == null)
       await Task.Delay(1);
    Task t = Task.WhenAll(LoadAuditTrail(), LoadUserImages());
    await t;
    CompletedFetch();
  }

  private void CompletedFetch()
  {
    dataFetched = true;
    StateHasChanged();
  }
  private async Task LoadUserImages()
  {
    preparedByImg = await GetEmployeeImg(GlobalClass.liquidationAudit.PreparedById);
    approvedByImg = await GetEmployeeImg(GlobalClass.liquidationAudit.ApprovedById);
  }
  private void OnLocationChanged(object? sender, LocationChangedEventArgs args)
  {
    GlobalClass.liquidationAudit = new();
    Dispose();
  }
  public void Dispose()
  {
    NavigationManager.LocationChanged -= OnLocationChanged;
  }
  private async Task LoadAuditTrail()
  {
    LiquidationDate = GlobalClass.liquidationAudit.LiquidationDate;
    dateRange = new DateRange(GlobalClass.liquidationAudit.PeriodFrom, GlobalClass.liquidationAudit.PeriodTo);
    audiTrailLiquidation = await auditLiquidationService.LiquidationAuditTrail(GlobalClass.liquidationAudit.Id, GlobalClass.token);
    currentTrail = audiTrailLiquidation.Last();
  }
  private async Task<byte[]> GetEmployeeImg(long employeeId)
  {
    var employeeDetail = await globalService.GetEmployeeById(employeeId, GlobalClass.token);
    return employeeDetail.Picture;
  }

  private void BackToLiqList()
  {
     NavigationManager.NavigateTo("/liquidation/list");
  }
}