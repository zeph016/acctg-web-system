@page "/voucher/batch/trail"
@inject IVoucherRouteBatchService audiTrailVoucherRouteService
@inject NavigationManager navigationManager
@inject IGlobalService globalService

<div class='page-cont'>
    <MudContainer Class='overflow-hidden pa-2' Fixed='false' MaxWidth='MaxWidth.Large'>
        @if (!dataFetched)
        {
            <MudPaper Class='ma-1 pa-1' style="height: calc(100vh - 125px);">
                <MudSkeleton SkeletonType='SkeletonType.Rectangle' Height='calc(100vh - 135px)' Animation='Animation.Wave' />
            </MudPaper>
        }
        else
        {
            <MudGrid Spacing='1'>
                <MudItem xs=9>
                    <MudPaper Class='overflow-hidden' Height='calc(100vh - 105px)'>
                        <div class='d-flex align-center pa-2 gap-2 bgc-F4F5FB'>
                            <MudIcon Icon="@Icons.Material.Filled.Timeline" Size='Size.Small' />
                            <MudText Class='wspace-nowrap font-bold txt-uppercase' Typo="Typo.body2">Audit Trail</MudText>
                            <hr class='horizline2'>
                        </div>
                        <MudDivider />
                        <div class='rounded-br rounded-bl overflow-auto pa-2 mx-2' style='height:calc(100vh - 150px)'>
                            <AuditTrailTimeLine auditMode=@Enums.AuditTrailMode.VoucherBatch VoucherRouteTrail=@voucherBatchListTrail />
                        </div>
                    </MudPaper>
                </MudItem>
                <MudItem Class='d-flex flex-column gap-2' xs=3>
                    <MudPaper Class='overflow-hidden'>
                        <div class='d-flex align-center pa-2 gap-2 bgc-F4F5FB'>
                            <MudIcon Icon="@Icons.Material.Filled.CommentBank" Size="Size.Small" />
                            <MudText Class='wspace-nowrap font-bold txt-uppercase' Typo="Typo.body2">Voucher Batch Details</MudText>
                            <hr class='horizline2'>
                        </div>
                        <MudDivider />
                        <MudGrid Class='mt-2' Spacing='1'>
                            <MudItem Class='px-4' xs=6>
                                <MudText Class='txt-uppercase wspace-nowrap font10 font-bold'>Control Number:</MudText>
                                <MudText Class='txt-uppercase wspace-nowrap font-bold font14 pa-1' Color='Color.Error'>@GlobalClass.voucherRouteBatch.ControlNumber</MudText>
                            </MudItem>
                            <MudItem Class='px-4 gap-2' xs=6>
                                <MudText Class='txt-uppercase wspace-nowrap font10 font-bold'>Requested Date:</MudText>
                                <MudChip Class='chip-radius-5 txt-uppercase font-bold font10' Icon='@Icons.Material.Filled.CalendarMonth' Color='Color.Default' Size='Size.Small'>
                                    @GlobalClass.voucherRouteBatch.BatchDate.GetValueOrDefault().ToShortDateString()
                                </MudChip>
                            </MudItem>
                             <MudItem Class='d-flex flex-column' xs=12>
                                <MudDivider />
                                <div class='d-flex align-center pa-2 gap-2 bgc-F4F5FB'>
                                    <MudIcon Class='ml-2' Icon="@Icons.Material.Filled.Badge" Size="Size.Small" />
                                    <MudText Class='txt-uppercase wspace-nowrap font-bold' Typo='Typo.body2'>Signatories</MudText>
                                    <hr class='horizline2'>
                                </div>
                                <MudDivider />
                                <div class='d-flex flex-column pa-2 gap-2'>
                                    <div class="d-flex align-center gap-2">
                                        <MudAvatar Size="Size.Medium" Image='@($"data:image/png;base64, {Convert.ToBase64String(preparedBy)}")' />
                                        <MudDivider />
                                        <div class="gap-2">
                                            <MudText Class='wspace-nowrap' Typo="Typo.subtitle2">@GlobalClass.voucherRouteBatch.PreparedByName</MudText>
                                            <MudText Typo="Typo.caption">Prepared by</MudText>
                                        </div>
                                    </div>
                                    
                                </div>
                            </MudItem>
                        </MudGrid>
                    </MudPaper>
                    <div class='d-flex align-center justify-end pa-2'>
                        <MudButton Class='btn-ios-d pa-1 font12' OnClick="(() => BackToVoucherBatchList())" Size="Size.Small" Variant='Variant.Filled' Color='Color.Error' DisableElevation>
                            Return
                        </MudButton>
                    </div>
                </MudItem>
            </MudGrid>
       }
    </MudContainer>
</div>

@code{
    private bool dataFetched {get;set;}
    private VoucherRouteBatchAuditTrailModel currentTrail = new VoucherRouteBatchAuditTrailModel();
    private List<VoucherRouteBatchAuditTrailModel> voucherBatchListTrail = new();
    private byte[] preparedBy = new byte[]{};
    protected override async Task OnInitializedAsync()
    {
        if(GlobalClass.voucherRouteBatch != null)
        {
            try{
                GlobalClass.pageTitle = "VOUCHER BATCH AUDIT TRAIL";
                voucherBatchListTrail = await audiTrailVoucherRouteService.GetVoucherRouteBatchAuditTrail(GlobalClass.voucherRouteBatch.Id, GlobalClass.token);
                preparedBy = await GetEmployeeDetails(GlobalClass.voucherRouteBatch.PreparedById);
                currentTrail = voucherBatchListTrail.Last();
                CompletedFetch();
            }catch(NullReferenceException ee){
                //Do nothing
                throw ee;
            }
        }
        else{
             BackToVoucherBatchList();
        }
    }
    private void BackToVoucherBatchList()
    {
        navigationManager.NavigateTo("/voucher/batch/list");
    }
    private void CompletedFetch()
    {
        dataFetched = true;
        StateHasChanged();
    }
    private async Task<byte[]> GetEmployeeDetails(long employeeId)
    {
        var employeeDetail = await globalService.GetEmployeeById(employeeId, GlobalClass.token);
        return employeeDetail.Picture;
    }
}