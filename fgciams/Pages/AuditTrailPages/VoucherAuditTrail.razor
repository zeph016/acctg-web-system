@page "/voucher-audit"

@inject NavigationManager NavigationManager
@inject IVoucherService VoucherService
@inject IGlobalService GlobalService
@inject IJSRuntime JSRuntime

<div class='page-cont'>
    <MudContainer Class='overflow-hidden pa-2' Fixed='false' MaxWidth='MaxWidth.Large'>
        @if (!dataFetched)
        {
          <SkeletonPageList />
        }
        else
        {
            <MudContainer Fixed='false' MaxWidth='MaxWidth.Large'>
                <MudPaper Elevation='0'>
                    <div class='audit-trail-grid'>
                        <div id='atrail-content-vou' class='audit-trail-content'>
                            <AuditLogTimeline IsVoucher='true' VoucherAuditTrail='@currentTrail' 
                                ModuleName='Voucher'/>
                        </div>
                        <div class='audit-trail-sidebar'>
                            <MudPaper>
                                <AuditLogInfo IsVoucher='true' Voucher='@currVoucher' DataFetched='@dataFetched'
                                    ReturnEventClick='BackToVoucherList' />
                            </MudPaper>
                            @if(scrollBarExists)
                            {
                                <div class='atrail-scrollbtn-cont'>
                                    <MudButton Class='@(!isToBottom ? "btn-ios-d font12":"btn-ios-d font12 mudbtn-rotate-180")' OnClick='(() => ScrollJS(isToBottom = !isToBottom, "atrail-contentid-pc"))'
                                        StartIcon='@Icons.Material.Filled.ArrowDownward' Size='Size.Small' Variant='Variant.Filled' Color='Color.Secondary'
                                        Style='@(!isToBottom ? "max-width: 150px;":"")' Disabled='!scrollBarExists'>
                                        @ScrollButtonStr
                                    </MudButton>
                                </div>
                            }
                        </div>
                    </div>
                </MudPaper>
            </MudContainer>
       }
    </MudContainer>
</div>

@code{
    private bool dataFetched, scrollBarExists, isToBottom;
    private List<VoucherAuditTrailModel> currentTrail = new();
    private VoucherModel currVoucher= new();

    private string ScrollButtonStr = "To Bottom";
    
    protected override async Task OnInitializedAsync()
    {
        GlobalClass.pageTitle = "Voucher Audit Trail";
        if(GlobalClass.voucher.Id == 0)
            BackToVoucherList();
        else
        {
            Task t = LoadAuditTrail();
            await t;
            if (t.Status == TaskStatus.RanToCompletion)
                CompletedFetch();
        }
        if(GlobalClass.voucher.Id !=0)
            scrollBarExists = await JSRuntime.InvokeAsync<bool>("CheckScrollbar", "atrail-contentid-pc");
    }

    private void CompletedFetch()
    {
        dataFetched = true;
        StateHasChanged();
    }
    private void BackToVoucherList() =>  NavigationManager.NavigateTo("/voucher/list");

    private async Task ScrollJS(bool boolValue, string elementId)
    {
        if(boolValue)
        {
            await JSRuntime.InvokeVoidAsync("ScrollToBottom", elementId);
            ScrollButtonStr = "To Top";
        }
        else if(!boolValue)
        {
            await JSRuntime.InvokeVoidAsync("ScrollToTop", elementId);
            ScrollButtonStr = "To Bottom";
        }
    }

    private async Task LoadAuditTrail()
    {
        currentTrail = await VoucherService.VoucherAuditTrail(GlobalClass.voucher.Id,GlobalClass.token);
        currVoucher = GlobalClass.voucher;
        var latestAuditTrail = currentTrail.Last();
    }
}

 
