@page "/check/trail"

@inject NavigationManager NavigationManager
@inject ICheckService CheckService
@inject IGlobalService GlobalService
@inject IJSRuntime JSRuntime

<div class='page-cont'>
    <div class='bgc-white'>
        <MudContainer Class='overflow-hidden pa-2' Fixed='false' MaxWidth='MaxWidth.ExtraLarge'>
            @if (!dataFetched)
            {
              <SkeletonPageList />
            }
            else
            {
                <MudContainer Fixed='false'>
                    <MudPaper Elevation='0'>
                        <div class='audit-trail-grid'>
                            <div id='atrail-contentid-chk' class='audit-trail-content'>
                                <AuditLogTimeline IsCheckWriter='true' CheckWriterTrail='@currentTrail' 
                                    ModuleName='CheckWriter' />
                            </div>
                            <div class='audit-trail-sidebar'>
                                <MudPaper>
                                    <AuditLogInfo IsCheckWriter='true' Check='currCheck' DataFetched='@dataFetched'
                                        ReturnEventClick='BackToCheckList' />
                                </MudPaper>
                                @if(scrollBarExists)
                                {
                                    <div class='atrail-scrollbtn-cont'>
                                        <MudButton Class='@(!isToBottom ? "btn-ios-d font12":"btn-ios-d font12 mudbtn-rotate-180")' OnClick='(() => ScrollJS(isToBottom = !isToBottom, "atrail-contentid-pc"))'
                                            StartIcon='@Icons.Material.Filled.ArrowDownward' Size='Size.Small' Variant='Variant.Filled' Color='Color.Secondary'
                                            Style='@(!isToBottom ? "max-width: 150px;":"")' Disabled='!scrollBarExists'>
                                            @ScrollButtonStr
                                        </MudButton>
                                    </div>
                                }
                            </div>
                        </div>
                    </MudPaper>
                </MudContainer>
        }
        </MudContainer>
    </div>
</div>

@code{
    private bool dataFetched, isToBottom, scrollBarExists;
    private List<CheckAuditTrailModel> currentTrail = new();
    private CheckModel currCheck = new();
    private string ScrollButtonStr = "To Bottom";
    protected override async Task OnInitializedAsync()
    {
        GlobalClass.pageTitle = "CHECK AUDIT TRAIL";
        if(GlobalClass.checkModel.Id == 0)
            BackToCheckList();
        else
        {
            Task t = LoadAuditTrail();
            await t;
            if (t.Status == TaskStatus.RanToCompletion)
                CompletedFetch();
        }
        if(GlobalClass.pettyCash.Id != 0)
            scrollBarExists = await JSRuntime.InvokeAsync<bool>("CheckScrollbar", "atrail-contentid-chk");
    }
    private void BackToCheckList() => NavigationManager.NavigateTo("/check/list");
    
    private void CompletedFetch()
    {
        dataFetched = true;
        StateHasChanged();
    }

    private async Task ScrollJS(bool boolValue, string elementId)
    {
        if(boolValue)
        {
            await JSRuntime.InvokeVoidAsync("ScrollToBottom", elementId);
            ScrollButtonStr = "To Top";
        }
        else if(!boolValue)
        {
            await JSRuntime.InvokeVoidAsync("ScrollToTop", elementId);
            ScrollButtonStr = "To Bottom";
        }
    }

    private async Task LoadAuditTrail()
    {
        currentTrail = await CheckService.GetAudiTrail(GlobalClass.checkModel.Id,GlobalClass.token);
        currCheck = GlobalClass.checkModel;
        var latestCheckTrail = currentTrail.Last();
    }
}


