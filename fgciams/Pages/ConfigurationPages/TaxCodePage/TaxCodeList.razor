@page "/taxcode"

@inject ITaxCodeService taxCodeService
@inject IDialogService dialogService
@inject ISnackbar SnackbarService
@inject ApplicationState AppState
@inject IAccessLevelService accessLevelService

<div class='page-cont'>
  <div class='drawer-right'>
    <MudDrawer Class='pa-1' @bind-Open='openSideFilter' Fixed='false' Anchor='Anchor.Right' Elevation='0' Variant='DrawerVariant.Mini' OpenMiniOnHover='false'>
      <div class='drawer-right__filtercont'>
        <div class='icon-area d-flex align-center'>
          <MudIconButton OnClick='OpenSideFilter' Icon="@Icons.Material.Filled.FilterList" aria-label="Filter" Size='Size.Medium' />
        </div>
        <div class='filter-title d-flex align-center'>
          <p class='title875'>Filter</p>
          <MudSpacer />
          <MudIconButton OnClick='OpenSideFilter' Icon="@Icons.Material.Filled.Close" aria-label="Close Filter" Size='Size.Medium' />
        </div>
        <div class='filter-content d-flex flex-column pl-4 pr-4 gap-1 @visibility'>
          <MudTextField Class='txtfield-75' @bind-Value='searchTerm' Placeholder='Search'
          Adornment='Adornment.Start' AdornmentIcon='@Icons.Material.Filled.Search' IconSize='Size.Small'
          Clearable='true' Variant='Variant.Outlined' />
          <MudButton Variant='Variant.Filled' Color='Color.Secondary'>Apply Filter</MudButton>
        </div>
      </div>
    </MudDrawer>
  </div>
  <MudContainer Class='bankpage' Fixed='false' MaxWidth='MaxWidth.ExtraExtraLarge'>
    @if(!dataFetched)
    {
      <SkeletonPageList />
    }
    else
    {
      <MudTable Class='configtables ' Items="@GlobalClassList.taxCodes"  Hover="true" Breakpoint='Breakpoint.Sm' 
      FixedHeader='true' FixedFooter='true' Bordered='true' Dense='true' RowsPerPage='30'
      Filter='new Func<TaxCodeModel,bool>(FilterItems)'>
        <ToolBarContent>
            <MudText Typo='Typo.caption'>
              @GlobalClassList.taxCodes.Count() 
              @(GlobalClassList.taxCodes.Count() == 1 ? "item" : "items") 
              in Total
            </MudText>
            <MudSpacer />
            <MudTooltip Text="Refresh Table">
              <MudIconButton Icon="@Icons.Material.Filled.Refresh" Size="Size.Small" OnClick='(()=>{searchTerm = "";})' ></MudIconButton>
            </MudTooltip>
            <MudMenu StartIcon='@Icons.Material.Filled.MoreVert' AnchorOrigin='Origin.TopLeft'  
            TransformOrigin='Origin.TopRight' Dense='true' Size='Size.Small' Label='More'>
              <MudMenuItem OnClick='(()=> TaxCodeDialog(new TaxCodeModel(), Enums.ActionMode.Create))'>
                    <div class='d-flex align-center gap-2 '>
                        <MudIcon Icon='@Icons.Material.Filled.Add' Size='Size.Small'/>
                        <MudText Typo='Typo.body2'>Add</MudText>
                    </div>
              </MudMenuItem>
            </MudMenu>
        </ToolBarContent>
        <ColGroup>
          <col />
          <col />
          <col />
          <col />
          <col style='width: 40%;'/>
          <col style='width:20px'/>
        </ColGroup>
        <HeaderContent>
            <MudTh Class='customheader-1'>Description</MudTh>
            <MudTh Class='customheader-1'>Tax rate</MudTh>
            <MudTh Class='customheader-1'>ATC Ind.</MudTh>
            <MudTh Class='customheader-1'>ATC Corp.</MudTh>
            <MudTh Class='customheader-1'>Remarks</MudTh>
            <MudTh Class='customheader-1 text-center pa-2'>Action</MudTh>
        </HeaderContent>
        <RowTemplate>
            <MudTd DataLabel="Bank">@context.Description</MudTd>
            <MudTd DataLabel="ShortcutName">@context.TaxRate.ToString("#0.00")</MudTd>
            <MudTd DataLabel="Branch">@context.ATCInd</MudTd>
            <MudTd DataLabel="AccountNo.">@context.ATCCorp</MudTd>
            <MudTd DataLabel="Remarks">@context.Remarks</MudTd>
            <MudTd Class='text-center pa-2'>
              <MudMenu Icon='@Icons.Material.Filled.MoreVert' AnchorOrigin='Origin.TopLeft' 
                TransformOrigin='Origin.TopRight' Dense='true' Size='Size.Small' >
                 <MudMenuItem OnClick='(()=> TaxCodeDialog(context, Enums.ActionMode.Update))'>
                   <div class='d-flex align-center gap-2 '>
                      <MudIcon Icon='@Icons.Material.Filled.Edit' Size='Size.Small'/>
                      <MudText Typo='Typo.body2'>Edit</MudText>
                    </div>
                 </MudMenuItem>
              </MudMenu>
            </MudTd>
        </RowTemplate>
        <PagerContent>
            <MudTablePager PageSizeOptions='@GlobalVariable.pageSize'/>
        </PagerContent>
      </MudTable>
    }
  </MudContainer>
</div>

@code {
  private bool dataFetched, openSideFilter;
  private string searchTerm = string.Empty, visibility = "visibility-animation-hide";
    protected override async Task OnInitializedAsync()
    {
      GlobalClass.pageTitle = "Configuration - Tax code";
      while (GlobalClass.currentUserAccount == null)
        await Task.Delay(1);
      await Common.Privileges.GetAllowedFunctions(accessLevelService, Enums.AISModules.Supplier);
      await AppState.UpdateMainLayoutComponent(true);
      await LoadTaxCode();
      TaxCodeHub();
      CompletedFetch();
    }
    private void CompletedFetch()
    {
      dataFetched = true;
      StateHasChanged();
    }
    private async Task<List<TaxCodeModel>> LoadTaxCode()
    {
      GlobalClassList.taxCodes = await taxCodeService.LoadTaxCode(new FilterParameter(), GlobalClass.token);
      return GlobalClassList.taxCodes;
    }

    private async Task TaxCodeDialog(TaxCodeModel taxCode, Enums.ActionMode action)
    {
      Enums.AISModuleFunctions function = action == Enums.ActionMode.Update ? Enums.AISModuleFunctions.Edit : Enums.AISModuleFunctions.Add;
      if (!Common.Privileges.isPrivilegeFunction(function))
      {
        string act = action == Enums.ActionMode.Update ? "edit" : "add";
        Extensions.ShowAlert(String.Format("Account has been restricted to {0} tax code.", act), Variant.Filled,SnackbarService, Severity.Error);
        return;
      }
      var parameters = new DialogParameters();
      GlobalClass.taxCode = taxCode;
      string dialogTitle = GlobalClass.taxCode.Id != 0 ? "Edit tax code details" : "Add tax code";
      string buttonText = GlobalClass.taxCode.Id != 0 ? "Update" : "Add";
      Color color = GlobalClass.taxCode.Id != 0 ? Color.Info : Color.Success;
      parameters.Add("color", color);
      parameters.Add("dialogTitle", dialogTitle);
      parameters.Add("buttonText", buttonText);
      parameters.Add("currentAction", action);
      var options = new DialogOptions() { CloseButton = false, MaxWidth = MaxWidth.Small, FullWidth = true, NoHeader = false, DisableBackdropClick = false };
      var resultDialog = await dialogService.Show<Shared.Dialogs.TaxCodeDialogs.TaxCodeDialog>("",parameters,options).Result;
      if(!resultDialog.Canceled)
      {
        if((Enums.ActionMode)resultDialog.Data == Enums.ActionMode.Create)
          Extensions.ShowAlert("Tax Code succssfully saved.", Variant.Filled,SnackbarService,Severity.Success);
        else if((Enums.ActionMode)resultDialog.Data == Enums.ActionMode.Update)
          Extensions.ShowAlert("Tax Code successfully updated.", Variant.Filled,SnackbarService,Severity.Info);
        else if((Enums.ActionMode)resultDialog.Data == Enums.ActionMode.Deactivate)
          Extensions.ShowAlert("Tax Code has been deactivated.", Variant.Filled,SnackbarService,Severity.Warning);
        GlobalClassList.taxCodes = GlobalClassList.taxCodes.Where(x=>x.IsActive == true).ToList();
      } else if (resultDialog.Canceled)
        Extensions.ShowAlertV2("Action cancelled.", Variant.Filled, SnackbarService, Severity.Normal, Icons.Material.Filled.Cancel, Defaults.Classes.Position.BottomCenter);
    }

    private bool FilterItems(TaxCodeModel items)
    {
        if (string.IsNullOrEmpty(searchTerm))
            return true;
        if (items.ATCCorp.Contains(searchTerm, StringComparison.InvariantCultureIgnoreCase) 
        || items.ATCInd.Contains(searchTerm, StringComparison.InvariantCultureIgnoreCase)
        || items.Description.Contains(searchTerm, StringComparison.InvariantCultureIgnoreCase)
        || items.TaxRate.ToString().Contains(searchTerm, StringComparison.InvariantCultureIgnoreCase))
            return true;
        return false;
    }

    private bool ShowSubTable(bool isShow)
    {
      return isShow = !isShow;
    }
    private void OpenSideFilter()
    {
      openSideFilter = !openSideFilter;
      if(openSideFilter)
          visibility = "visibility-animation-show";
      if(!openSideFilter)
        visibility = "visibility-animation-hide";
    }
    private void TaxCodeHub()
    {
  
    if(GlobalVariable.AMSHubConnection != null)
        GlobalVariable.AMSHubConnection.On<TaxCodeModel>("SaveTaxCode", (_taxCode) => {

          GlobalClassList.taxCodes.RemoveAll(x=>x.Id == _taxCode.Id);
          GlobalClassList.taxCodes.Add(_taxCode);
          GlobalClassList.taxCodes = GlobalClassList.taxCodes.Where(x=>x.IsActive == true).OrderBy(x=>x.Id).ToList();
          StateHasChanged();

        });
    }
}
