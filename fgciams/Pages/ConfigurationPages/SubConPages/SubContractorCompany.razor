@page "/subcontractor/company"

@inject ISubContractorCompanyService subContractorCompanyService
@inject IDialogService dialogService
@inject ISnackbar snackbarService
@inject ApplicationState AppState

<div class='page-cont'>
  <div class='drawer-right'>
    <MudDrawer Class='pa-1' @bind-Open='openSideFilter' Fixed='false' Anchor='Anchor.Right' Elevation='0' Variant='DrawerVariant.Mini' OpenMiniOnHover='false'>
      <div class='drawer-right__filtercont'>
        <div class='icon-area d-flex align-center'>
          <MudIconButton OnClick='OpenSideFilter' Icon="@Icons.Filled.FilterList" aria-label="Filter" Size='Size.Medium' />
        </div>
        <div class='filter-title d-flex align-center'>
          <p class='title875'>Filter</p>
          <MudSpacer />
          <MudIconButton OnClick='OpenSideFilter' Icon="@Icons.Filled.Close" aria-label="Close Filter" Size='Size.Medium' />
        </div>
        <div class='filter-content d-flex flex-column pl-4 pr-4 gap-1 @visibility'>
          <MudTextField Class='txtfield-75' @bind-Value='searchTerm' Placeholder='Company Name'
          Adornment='Adornment.Start' AdornmentIcon='@Icons.Material.Filled.Search' IconSize='Size.Small'
          Clearable='true' Variant='Variant.Outlined' />
          <MudButton Variant='Variant.Filled' Color='Color.Secondary'>Apply Filter</MudButton>
        </div>
      </div>
    </MudDrawer>
  </div>
    <MudContainer Class='subconcompage' Fixed='false' MaxWidth='MaxWidth.ExtraExtraLarge'>
        @if(!dataFetched)
        {
          <SkeletonPageList />
        }
        else
        {
            <MudTable Class='configtables row-popup-anim-2px' Items="@GlobalClassList.subContractorCompanies" Hover="true" 
            Breakpoint='Breakpoint.Xs' FixedHeader='true' FixedFooter='true' Bordered='true' Dense='true'
            RowsPerPage='30' Filter='new Func<SubContractorCompanyModel,bool>(FilterItems)'>
              <ToolBarContent>
                <MudText Typo='Typo.caption'>
                  @GlobalClassList.subContractorCompanies.Count() 
                  @(GlobalClassList.subContractorCompanies.Count() == 1 ? "item" : "items") 
                  in Total
                </MudText>
                <MudSpacer />
                    <MudTooltip Text="Refresh Table">
                        <MudIconButton Icon="@Icons.Filled.Refresh" Size="Size.Small" OnClick='(()=>{searchTerm = "";})' ></MudIconButton>
                    </MudTooltip>               
                <MudMenu StartIcon='@Icons.Filled.MoreVert' AnchorOrigin='Origin.TopLeft' ActivationEvent='MouseEvent.MouseOver'
                  TransformOrigin='Origin.TopRight' Dense='true' Size='Size.Small' Label='More'>
                    <MudMenuItem OnClick='(() => SubConCompDialog(new SubContractorCompanyModel(), Enums.ActionMode.Create))'>
                        <div class='d-flex align-center gap-2 menu-grow-anim'>
                            <MudIcon Icon='@Icons.Filled.Add' Size='Size.Small' />
                            <MudText Typo='Typo.body2'>Add</MudText>
                        </div>
                    </MudMenuItem>
                </MudMenu>
              </ToolBarContent>
                  <ColGroup>
                    <col/>
                    <col/>
                    <col/>
                    <col style='width:20px;' />
                </ColGroup>
              <HeaderContent>
                  <MudTh Class='customheader-1'>Company</MudTh>
                  <MudTh Class='customheader-1'></MudTh>
                  <MudTh Class='customheader-1'>Remarks</MudTh>
                  <MudTh Class="customheader-1 text-center pa-2">Action</MudTh>
              </HeaderContent>
              <RowTemplate>
                  <MudTd DataLabel="Company Name">@context.CompanyName</MudTd>
                  <MudTd DataLabel="Short Name">@context.ShortcutName</MudTd>
                  <MudTd DataLabel="Remarks">@context.Remarks</MudTd>
                  <MudTd class="text-center pa-2">
                    <MudMenu Icon='@Icons.Filled.MoreVert' AnchorOrigin='Origin.TopLeft'
                      TransformOrigin='Origin.TopRight' Dense='true' Size='Size.Small' ActivationEvent='MouseEvent.MouseOver'>
                          <MudMenuItem OnClick='(() => SubConCompDialog(context, Enums.ActionMode.Update))'>
                              <div class='d-flex align-center gap-2 menu-grow-anim'>
                                <MudIcon Icon='@Icons.Filled.Edit' Size='Size.Small' />
                                <MudText Typo='Typo.body2'>Edit</MudText>
                              </div>
                          </MudMenuItem>
                      </MudMenu>
                  </MudTd>
              </RowTemplate>
              <PagerContent>
                  <MudTablePager PageSizeOptions='@pageSize' />
              </PagerContent>
          </MudTable>
        }
    </MudContainer>
</div>



@code{
  private bool dataFetched, openSideFilter;
  private int[] pageSize = new int[] { 30, 50, 100, 500, 1000 };
  private string searchTerm = string.Empty, visibility = "visibility-animation-hide";
  protected override async Task OnInitializedAsync()
  {
    GlobalClass.pageTitle = "CONFIGURATION - SUBCON COMPANY";
    while (GlobalClass.currentUserAccount == null || GlobalClassList.subContractorCompanies == null)
      await Task.Delay(1);
    await AppState.UpdateMainLayoutComponent(true);
    SubConCompanyHub();
    CompletedFetch();
  }

    void CompletedFetch()
  {
      dataFetched = true;
      StateHasChanged();
  }

  private async Task SubConCompDialog(SubContractorCompanyModel subconcomp, Enums.ActionMode action)
  {
    var parameters = new DialogParameters();
    GlobalClass.subContractorCompany = subconcomp;
    string dialogTitle = GlobalClass.subContractorCompany.Id != 0 ? "Edit SubCon Company" : "Add SubCon Company";
    string buttonText = GlobalClass.subContractorCompany.Id != 0 ? "Update" : "Add";
    Color color = GlobalClass.subContractorCompany.Id != 0 ? Color.Info : Color.Success;
    parameters.Add("color", color);
    parameters.Add("dialogTitle", dialogTitle);
    parameters.Add("buttonText", buttonText);
    parameters.Add("currentAction", action);
    var options = new DialogOptions() { CloseButton = false, MaxWidth = MaxWidth.ExtraSmall, FullWidth = true, NoHeader = false, DisableBackdropClick = false };
    var resultDialog = await dialogService.Show<Shared.Dialogs.SubContractorCompanyDialogs.SubConCompanyDialog>("", parameters, options).Result;
    if (!resultDialog.Cancelled)
    {
      if ((Enums.ActionMode)resultDialog.Data == Enums.ActionMode.Create)
        Extensions.ShowAlert("Subcontractor Company succcessfully added.", Variant.Filled,snackbarService,Severity.Success);
      else if ((Enums.ActionMode)resultDialog.Data == Enums.ActionMode.Update)
        Extensions.ShowAlert("Subcontractor Company successfully updated.", Variant.Filled,snackbarService,Severity.Info);
      else if ((Enums.ActionMode)resultDialog.Data == Enums.ActionMode.Deactivate)
        Extensions.ShowAlert("Subcontractor Company has been deactivated.", Variant.Filled,snackbarService,Severity.Warning);
      GlobalClassList.subContractorCompanies = GlobalClassList.subContractorCompanies.Where(x => x.IsActive == true).ToList();
    } else if (resultDialog.Cancelled)
        Extensions.ShowAlert("Action Cancelled.", Variant.Filled,snackbarService,Severity.Normal);
  }

  private bool FilterItems(SubContractorCompanyModel items)
  {
    if (string.IsNullOrEmpty(searchTerm))
      return true;
    if (items.CompanyName.Contains(searchTerm, StringComparison.InvariantCultureIgnoreCase))
      return true;
    return false;
  }
  private void OpenSideFilter()
  {
    openSideFilter = !openSideFilter;
    if(openSideFilter)
      visibility = "visibility-animation-show";
    if(!openSideFilter)
      visibility = "visibility-animation-hide";
  }
  private void SubConCompanyHub()
  {
    if(GlobalVariable.AMSHubConnection != null)
      GlobalVariable.AMSHubConnection.On<SubContractorCompanyModel>("SaveSubContractorCompany", (company) => {

        GlobalClassList.subContractorCompanies.RemoveAll(x=>x.Id == company.Id);
        GlobalClassList.subContractorCompanies.Add(company);
        GlobalClassList.subContractorCompanies = GlobalClassList.subContractorCompanies.Where(x=>x.IsActive == true).OrderBy(x=>x.CompanyName).ToList();
        StateHasChanged();
      });
  }
}


