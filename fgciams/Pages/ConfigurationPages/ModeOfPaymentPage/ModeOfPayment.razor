@page "/mode-of-payment"

@inject IModeOfPaymentService modeOfPaymentService
@inject Blazored.LocalStorage.ILocalStorageService localStorage
@inject IDialogService dialogService
@inject ISnackbar SnackbarService
@inject ApplicationState AppState
@inject IAccessLevelService accessLevelService

<div class='page-cont'>
    <div class='drawer-right'>
        <MudDrawer Class='pa-1' @bind-Open='openSideFilter' Fixed='false' Anchor='Anchor.Right' Elevation='0' Variant='DrawerVariant.Mini' OpenMiniOnHover='false'>
            <div class='drawer-right__filtercont'>
                <div class='icon-area d-flex align-center'>
                    <MudIconButton OnClick='OpenSideFilter' Icon="@Icons.Material.Filled.FilterList" aria-label="Filter" Size='Size.Medium' />
                </div>
                <div class='filter-title d-flex align-center'>
                    <p class='title875'>Filter</p>
                    <MudSpacer />
                    <MudIconButton OnClick='OpenSideFilter' Icon="@Icons.Material.Filled.Close" aria-label="Close Filter" Size='Size.Medium' />
                </div>
                <div class='filter-content d-flex flex-column pl-4 pr-4 gap-1 @visibility'>
                    <MudTextField Class='txtfield-75' @bind-Value='searchTerm' Placeholder='Payment Name'
                    Adornment='Adornment.Start' AdornmentIcon='@Icons.Material.Filled.Search' IconSize='Size.Small'
                    Clearable='true' Variant='Variant.Outlined' />
                    <MudButton Variant='Variant.Filled' Color='Color.Secondary'>Apply Filter</MudButton>
                </div>
            </div>
        </MudDrawer>
    </div>
    <MudContainer Class='modeofpaymentpage' Fixed='false' MaxWidth='MaxWidth.ExtraExtraLarge'> 
        @if(!dataFetched)
        {
            <SkeletonPageList />
        } 
        else 
        {
            <MudTable Class="configtables " Items="@GlobalClassList.modeOfPaymentList" Hover="true"
                Breakpoint="Breakpoint.Xs" FixedHeader='true' FixedFooter='true' Bordered='true' Dense='true'
                RowsPerPage='30' Filter='new Func<ModeOfPaymentModel,bool>(FilterItems)'>
                <ToolBarContent>
                    <MudText Typo='Typo.caption'>
                        @GlobalClassList.modeOfPaymentList.Count() 
                        @(GlobalClassList.modeOfPaymentList.Count() == 1 ? "item" : "items") 
                        in Total
                    </MudText>
                    <MudSpacer />
                    <MudTooltip Text="Refresh Table">
                        <MudIconButton Icon="@Icons.Material.Filled.Refresh" Size="Size.Small" OnClick='(()=>{searchTerm = "";})' ></MudIconButton>
                    </MudTooltip>
                    <MudMenu StartIcon='@Icons.Material.Filled.MoreVert' AnchorOrigin='Origin.TopLeft' 
                            TransformOrigin='Origin.TopRight' Dense='true' Size='Size.Small' Label='More'>
                        <MudMenuItem OnClick='(() => ModeOfPaymentDialog(new ModeOfPaymentModel(), Enums.ActionMode.Create))'>
                            <div class='d-flex align-center gap-2 '>
                                <MudIcon Icon='@Icons.Material.Filled.Add' Size='Size.Small' />
                                <MudText Typo='Typo.body2'>Add</MudText>
                            </div>
                        </MudMenuItem>
                    </MudMenu>
                </ToolBarContent>
                <ColGroup>
                    <col />
                    <col style='width:20px;' />
                </ColGroup>
                <HeaderContent> 
                    <MudTh Class='customheader-1'>
                        <MudTableSortLabel InitialDirection="SortDirection.Ascending" SortBy="new Func<ModeOfPaymentModel, object>(x=>x.ModeName)">
                            Mode of Payment
                        </MudTableSortLabel>
                    </MudTh>
                    <MudTh Class='customheader-1 text-center pa-2'>Action</MudTh>
                </HeaderContent>
                <RowTemplate>
                        <MudTd DataLabel="Payment Mode">@context.ModeName</MudTd>
                        <MudTd Class='text-center pa-2'>
                            <MudMenu Icon='@Icons.Material.Filled.MoreVert' AnchorOrigin='Origin.TopLeft' 
                                TransformOrigin='Origin.TopRight' Dense='true' Size='Size.Small'>
                                <MudMenuItem OnClick='(() => ModeOfPaymentDialog(context, Enums.ActionMode.Update))'>
                                    <div class='d-flex align-center gap-2'>
                                        <MudIcon Icon='@Icons.Material.Filled.Edit' Size='Size.Small' />
                                        <MudText Typo='Typo.body2'>Edit</MudText>
                                    </div>
                                </MudMenuItem>
                            </MudMenu>
                        </MudTd>
                </RowTemplate>
                <PagerContent>
                    <MudTablePager PageSizeOptions='@pageSize'/>
                </PagerContent>
            </MudTable>
        }
    </MudContainer>
</div>

@code {
    private bool dataFetched, openSideFilter;
    private int[] pageSize = new int[] { 30, 50, 100, 500, 1000 };
    private string searchTerm = string.Empty, visibility = "visibility-animation-hide";
          
     protected override async Task OnInitializedAsync()
    {
        GlobalClass.pageTitle = "Configuration - MODE OF PAYMENT";
        while (GlobalClass.currentUserAccount == null || GlobalClassList.modeOfPaymentList == null)
            await Task.Delay(1);
        await AppState.UpdateMainLayoutComponent(true);
        await Common.Privileges.GetAllowedFunctions(accessLevelService, Enums.AISModules.ModeofPayment);
        CompletedFetch(); 
        SignalR();
    }

    void CompletedFetch()
    {
        dataFetched = true;
        StateHasChanged();
    }

    private async Task ModeOfPaymentDialog(ModeOfPaymentModel modeOfPayment, Enums.ActionMode action)
    {
        Enums.AISModuleFunctions function = action == Enums.ActionMode.Update? Enums.AISModuleFunctions.Edit : Enums.AISModuleFunctions.Add;
        if (!Common.Privileges.isPrivilegeFunction(function))
        {
           string act = action == Enums.ActionMode.Update ? "edit" : "add";
           Extensions.ShowAlert(String.Format("Account has been restricted to {0} Mode of Payment.", act), Variant.Filled, SnackbarService, Severity.Error);
           return;
        }
        var parameters = new DialogParameters();
        GlobalClass.modeOfPayment = modeOfPayment;
        string dialogTitle = GlobalClass.modeOfPayment.Id != 0 ? "Edit Mode of Payment" : "Add Mode of Payment";
        string buttonText = GlobalClass.modeOfPayment.Id != 0 ? "Update" : "Add";
        Color color = GlobalClass.modeOfPayment.Id != 0 ? Color.Info : Color.Success;
        parameters.Add("color", color);
        parameters.Add("dialogTitle", dialogTitle);
        parameters.Add("buttonText", buttonText);
        parameters.Add("currentAction", action); var options = new DialogOptions() { CloseButton = false, MaxWidth = MaxWidth.ExtraSmall, FullWidth = true, NoHeader = false, DisableBackdropClick = false };
        var resultDialog = await dialogService.Show<Shared.Dialogs.ModeOfPaymentDialogs.ModeOfPaymentDialog>("", parameters, options).Result;
        if (!resultDialog.Canceled)
        {
            if ((Enums.ActionMode)resultDialog.Data == Enums.ActionMode.Create)
                Extensions.ShowAlert("Mode of Payment successfully saved.", Variant.Filled,SnackbarService,Severity.Success);
            else if ((Enums.ActionMode)resultDialog.Data == Enums.ActionMode.Update)
                Extensions.ShowAlert("Mode of Payment successfully updated.", Variant.Filled,SnackbarService,Severity.Info);
            else if ((Enums.ActionMode)resultDialog.Data == Enums.ActionMode.Deactivate)
                Extensions.ShowAlert("Mode of Payment has been deactivated.", Variant.Filled,SnackbarService,Severity.Warning);
            else
                await LoadPaymentModes();
        } else if (resultDialog.Canceled)
            Extensions.ShowAlertV2("Action cancelled.", Variant.Filled, SnackbarService, Severity.Normal, Icons.Material.Filled.Cancel, Defaults.Classes.Position.BottomCenter);
    }

    private bool FilterItems(ModeOfPaymentModel items)
    {
        if (string.IsNullOrEmpty(searchTerm))
            return true;
        if (items.ModeName.Contains(searchTerm, StringComparison.InvariantCultureIgnoreCase))
            return true;
        return false;
    }
    private void OpenSideFilter()
    {
        openSideFilter = !openSideFilter;
        if(openSideFilter)
        visibility = "visibility-animation-show";
        if(!openSideFilter)
        visibility = "visibility-animation-hide";
    }
    private void SignalR()
    {
        try
        {
            if(GlobalVariable.AMSHubConnection != null)
                GlobalVariable.AMSHubConnection.On<ModeOfPaymentModel>("SaveModeOfPayment",(modeOfPayment) => 
                {
                    GlobalClassList.modeOfPaymentList.RemoveAll(mode => mode.Id == modeOfPayment.Id);
                    if(modeOfPayment.IsActive == true)
                        GlobalClassList.modeOfPaymentList.Insert(0,modeOfPayment);
                    StateHasChanged();
                });
        }catch (Exception ex)
        {
            Console.WriteLine(ex.Message);
            throw;
        }
    }
    private async Task LoadPaymentModes() => GlobalClassList.modeOfPaymentList = await modeOfPaymentService.LoadModeOfPaymentList(GlobalClass.token);
}


