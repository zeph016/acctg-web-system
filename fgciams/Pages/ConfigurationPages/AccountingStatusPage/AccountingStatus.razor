@page "/accounting-status"

@inject IAccountingStatusService accountingStatusService
@inject Blazored.LocalStorage.ILocalStorageService localStorage
@inject IDialogService dialogService
@inject ISnackbar snackBarService

<div class='page-cont'>
    <div class='drawer-right'>
        <MudDrawer Class='pa-1' @bind-Open='openSideFilter' Fixed='false' Anchor='Anchor.Right' Elevation='0' 
        Variant='DrawerVariant.Mini' OpenMiniOnHover='false'>
            <div class='drawer-right__filtercont'>
                <div class='icon-area d-flex align-center'>
                    <MudIconButton OnClick='OpenSideFilter' Icon='@Icons.Filled.FilterList' arial-label='Close Filter' Size='Size.Medium' />
                </div>
                <div class='filter-title d-flex align-center'>
                    <p class='title875'>Filter</p>
                    <MudSpacer />
                    <MudIconButton OnClick='OpenSideFilter' Icon='@Icons.Filled.Close' aria-label='Close Filter' Size='Size.Medium' />
                </div>
                <div class='filter-content d-flex flex-column pl-4 pr-4 gap-1 @visibility'>
                    <MudTextField Class='txtfield-75' @bind-Value='searchTerm' Placeholder='Status Name' Immediate=true
                    Adornment='Adornment.Start' AdornmentIcon='@Icons.Material.Filled.Search' IconSize='Size.Small'
                    Clearable='true' Variant='Variant.Outlined'/>
                    <MudButton Variant='Variant.Filled' Color='Color.Secondary'>Apply Filter</MudButton>
                </div>
            </div>
        </MudDrawer>
    </div>
    <MudContainer Class='acctgstatuspage' Fixed='false' MaxWidth='MaxWidth.ExtraExtraLarge'>
        @if (!dataFetched)
        {
           
        }
        else
        {
            <MudTable Class='configtables' Items="GlobalClassList.accountingStatusList" Hover="true"
            Breakpoint="Breakpoint.Sm" FixedHeader='true' FixedFooter='true' Bordered='true' Dense='true'
            RowsPerPage='30' Striped='true' Filter='new Func<AccountingStatusModel,bool>(FilterItems)'>
                <ToolBarContent>
                    <MudText Typo='Typo.caption'>
                        @GlobalClassList.accountingStatusList.Count() 
                        @(GlobalClassList.accountingStatusList.Count() == 1 ? "Item" : "Items") 
                        in Total
                    </MudText>
                    <MudSpacer />
                    <MudTooltip Text="Refresh Table">
                        <MudIconButton Icon="@Icons.Filled.Refresh" Size="Size.Small" OnClick='(()=>{searchTerm = "";})' ></MudIconButton>
                    </MudTooltip>
                    <MudMenu StartIcon='@Icons.Filled.MoreVert' AnchorOrigin='Origin.TopLeft' ActivationEvent='MouseEvent.MouseOver'
                    TransformOrigin='Origin.TopRight' Dense='true' Size='Size.Small' Label='More'>
                        <MudMenuItem OnClick='(() => AcctgStatusDialog(new AccountingStatusModel()))'>
                            <div class='d-flex align-center gap-2'>
                                <MudIcon Icon='@Icons.Filled.Add' Size='Size.Medium'></MudIcon>
                                <MudText Typo='Typo.body2'>Add</MudText>
                            </div>
                        </MudMenuItem>
                        <MudMenuItem OnClick='OpenSideFilter'>
                            <div class='d-flex align-center gap-2'>
                            <MudIcon Icon='@Icons.Filled.FilterList' />
                            <MudText Typo='Typo.body2'>Filter</MudText>
                            </div>
                        </MudMenuItem>
                    </MudMenu>
                </ToolBarContent>
                <ColGroup>
                    <col style='width: 60%;' />
                    <col class='text-center' style='width: 50px;' />
                    <col style='width: 50px;' />
                    <col />
                    <col />
                </ColGroup>
                <HeaderContent>
                    <MudTh Class='customheader-1'>
                        <MudTableSortLabel InitialDirection="SortDirection.Ascending" SortBy="new Func<AccountingStatusModel, object>(x=>x.StatusName)">
                            Status Name
                        </MudTableSortLabel>
                    </MudTh>
                    <MudTh Class='customheader-1'>Icon</MudTh>
                    <MudTh Class='customheader-1'>Color</MudTh>
                    <MudTh Class='customheader-1'>Category</MudTh>
                    <MudTh Class='customheader-1 text-center'>Action</MudTh>
                </HeaderContent>
                <RowTemplate>
                    <MudTd DataLabel="Status Name">@context.StatusName</MudTd>
                    <MudTd DataLabel="Status Icon">
                        @if(context.StatusIcon != null || !String.IsNullOrEmpty(context.StatusIcon))
                        {
                            <MudIcon Icon="@Extensions.Icon(context.StatusIcon)" Color="Color.Primary"/>
                        } else {
                            <MudIcon Icon="@Icons.Filled.NotInterested" Color="Color.Primary"/>
                        }
                    </MudTd>
                    <MudTd DataLabel="Status Color" style="align-items:center;justify-content:center;">
                            <div class='smallColorBox' style='@($"background-color:{@context.StatusColor};")'></div>
                    </MudTd>
                    <MudTd Class='wspace-nowrap' DataLabel="Category">
                        <MudText Typo='Typo.body2'>@Extensions.GetEnumDescription(@context.StatusEnumCategoryId)</MudText>
                    </MudTd>
                    <MudTd Class='text-center'>
                        <MudMenu Icon='@Icons.Filled.MoreVert' AnchorOrigin='Origin.TopLeft' ActivationEvent='MouseEvent.MouseOver'
                        TransformOrigin='Origin.TopRight' Dense='true' Size='Size.Small'>
                            <MudMenuItem OnClick='(() => AcctgStatusDialog(context))'>
                                <div class='d-flex align-center gap-2'>
                                    <MudIcon Icon='@Icons.Filled.Edit' Size='Size.Small'/>
                                    <MudText Typo='Typo.body2'>Edit</MudText>
                                </div>
                            </MudMenuItem>
                        </MudMenu>
                    </MudTd>
                </RowTemplate>
                <PagerContent>
                    <MudTablePager PageSizeOptions="@pageSize" />
                </PagerContent>
            </MudTable>
        }
    </MudContainer>
    
</div>

@code {
    private bool dataFetched, openSideFilter;
    private int[] pageSize = new int[] { 30, 50, 100, 500, 1000 };
    private string searchTerm = string.Empty, visibility = "visibility-animation-hide";
    private static List<object> iconTypes = new List<object>();
    protected override async Task OnInitializedAsync()
    {
        GlobalClass.pageTitle = "ACCOUNTING STATUS";
        while (GlobalClass.currentUserAccount == null || GlobalClassList.accountingStatusList == null)
            await Task.Delay(1);
        CompletedFetch();
        SignalR();
    }
    void CompletedFetch()
    {
        dataFetched = true;
        StateHasChanged();
    }

    private async Task AcctgStatusDialog(AccountingStatusModel acctgStatus)
    {
        var parameters = new DialogParameters();
        GlobalClass.acctgStatus = acctgStatus;
        acctgStatus.IsActive = true;
        string dialogTitle = GlobalClass.acctgStatus.Id != 0 ? "Edit Status" : "Add Status";
        string buttonText = GlobalClass.acctgStatus.Id != 0 ? "Update" : "Add";
        Color color = GlobalClass.acctgStatus.Id != 0 ? Color.Info : Color.Success;
        parameters.Add("color", color);
        parameters.Add("dialogTitle", dialogTitle);
        parameters.Add("buttonText", buttonText);
        var options = new DialogOptions()
        {
            CloseButton = false,
            MaxWidth = MaxWidth.ExtraSmall,
            FullWidth = true,
            NoHeader = false,
            DisableBackdropClick = false
        };
        var resultDialog = await dialogService.Show<Shared.Dialogs.AccountingStatusDialogs.AccountingStatusDialog>("",
        parameters, options).Result;
        if (!resultDialog.Cancelled)
        {
            if ((int)resultDialog.Data == 0)
                ShowAlert("The new status is successfully saved.", Variant.Filled, Severity.Success);
            else if ((int)resultDialog.Data == 1)
                ShowAlert("The updated status is successfully saved.", Variant.Filled, Severity.Info);
            else if ((int)resultDialog.Data == 2)
                ShowAlert("The status has been removed from the list.", Variant.Filled, Severity.Info);
        }
    }
    private bool FilterItems(AccountingStatusModel items)
    {
        if (string.IsNullOrEmpty(searchTerm))
            return true;
        if (items.StatusName.Contains(searchTerm, StringComparison.InvariantCultureIgnoreCase))
            return true;
        return false;
    }

    private void ShowAlert(string message, Variant variant, Severity severity)
    {
        snackBarService.Clear();
        snackBarService.Configuration.PositionClass = Defaults.Classes.Position.BottomCenter;
        snackBarService.Configuration.SnackbarVariant = variant;
        snackBarService.Configuration.MaxDisplayedSnackbars = 10;
        snackBarService.Add($"{message}", severity);
    }
    private void OpenSideFilter()
    {
        openSideFilter = !openSideFilter;
        if(openSideFilter)
            visibility = "visibility-animation-show";
        if(!openSideFilter)
            visibility = "visibility-animation-hide";
    }
       private void SignalR()
    {
        try
        {
            if(GlobalVariable.AMSHubConnection != null)
                GlobalVariable.AMSHubConnection.On<AccountingStatusModel>("SaveAccountingStatus",(acctgModel) => 
                {
                    GlobalClassList.accountingStatusList.RemoveAll(acctg => acctg.Id == acctgModel.Id);
                    if(acctgModel.IsActive == true)
                        GlobalClassList.accountingStatusList.Insert(0,acctgModel);
                    StateHasChanged();
                });
        }catch (Exception ex)
        {
            Console.WriteLine(ex.Message);
            throw;
        }
    }
}
