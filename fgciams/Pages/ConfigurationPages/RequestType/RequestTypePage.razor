@page "/request/type"

@inject IRequestTypeService requestTypeService
@inject IDialogService dialogService
@inject ISnackbar snackbarService
@inject ApplicationState AppState

<div class='page-cont'>
  <div class='drawer-right'>
    <MudDrawer Class='pa-1' @bind-Open='openSideFilter' Fixed='false' Anchor='Anchor.Right' Elevation='0' Variant='DrawerVariant.Mini' OpenMiniOnHover='false'>
      <div class='drawer-right__filtercont'>
        <div class='icon-area d-flex align-center'>
          <MudIconButton OnClick='OpenSideFilter' Icon="@Icons.Material.Filled.FilterList" aria-label="Filter" Size='Size.Medium' />
        </div>
        <div class='filter-title d-flex align-center'>
          <p class='title875'>Filter</p>
          <MudSpacer />
          <MudIconButton OnClick='OpenSideFilter' Icon="@Icons.Material.Filled.Close" aria-label="Close Filter" Size='Size.Medium' />
        </div>
        <div class='filter-content d-flex flex-column pl-4 pr-4 gap-1 @visibility'>
          <MudTextField Class='txtfield-75' @bind-Value='searchTerm' Placeholder='Request Type Name'
          Adornment='Adornment.Start' AdornmentIcon='@Icons.Material.Filled.Search' IconSize='Size.Small'
          Clearable='true' Variant='Variant.Outlined' />
          <MudButton Variant='Variant.Filled' Color='Color.Secondary'>Apply Filter</MudButton>
        </div>
      </div>
    </MudDrawer>
  </div>
  <MudContainer Class='requesttype' Fixed='false' MaxWidth='MaxWidth.ExtraExtraLarge'>
      @if (!dataFetched)
      {
        <SkeletonPageList />
      }
      else 
      {
        <MudTable Class='configtables ' Items="@GlobalClassList.requestTypes" Hover="true" 
          Breakpoint='Breakpoint.Xs' FixedHeader='true' FixedFooter='true' Bordered='true' Dense='true' 
          RowsPerPage='30' Filter='new Func<RequestTypeModel,bool>(FilterItems)'>
          <ToolBarContent>
            <MudText Typo='Typo.caption'>
              @GlobalClassList.requestTypes.Count() 
              @(GlobalClassList.requestTypes.Count() == 1 ? "item" : "items") 
              in Total
            </MudText>
            <MudSpacer />
            <MudTooltip Text="Refresh Table">
                <MudIconButton Icon="@Icons.Material.Filled.Refresh" Size="Size.Small" OnClick='(()=>{searchTerm = "";})' ></MudIconButton>
            </MudTooltip>
            <MudMenu StartIcon='@Icons.Material.Filled.MoreVert' AnchorOrigin='Origin.TopLeft' ActivationEvent='MouseEvent.MouseOver'
              TransformOrigin='Origin.TopRight' Dense='true' Size='Size.Small' Label='More'>
                  <MudMenuItem OnClick='(() => RequestTypeDialog(new RequestTypeModel(), Enums.ActionMode.Create))'>
                      <div class='d-flex align-center gap-2 '>
                          <MudIcon Icon='@Icons.Material.Filled.Add' Size='Size.Small' />
                          <MudText Typo='Typo.body2'>Add</MudText>
                      </div>
                  </MudMenuItem>
              </MudMenu>
          </ToolBarContent>
            <ColGroup>
              <col/>
              <col/>
              <col style='width:20px;' />
            </ColGroup>
          <HeaderContent>
              <MudTh Class='customheader-1'>Type</MudTh>
              <MudTh Class='customheader-1'>Remarks</MudTh>
              <MudTh Class="customheader-1 text-center pa-2">Action</MudTh>
          </HeaderContent>
          <RowTemplate>
              <MudTd DataLabel="Bank">@context.TypeName</MudTd>
              <MudTd DataLabel="ShortcutName">@context.Remarks</MudTd>
              <MudTd class="text-center pa-2">
                <MudMenu Icon='@Icons.Material.Filled.MoreVert' AnchorOrigin='Origin.TopLeft'
                  TransformOrigin='Origin.TopRight' Dense='true' Size='Size.Small' ActivationEvent='MouseEvent.MouseOver'>
                  <MudMenuItem OnClick='(() => RequestTypeDialog(context, Enums.ActionMode.Update))'>
                    <div class='d-flex align-center gap-2 '>
                      <MudIcon Icon='@Icons.Material.Filled.Edit' Size='Size.Small' />
                      <MudText Typo='Typo.body2'>Edit</MudText>
                    </div>
                  </MudMenuItem>
                </MudMenu>
              </MudTd>
          </RowTemplate>
          <PagerContent>
              <MudTablePager />
          </PagerContent>
        </MudTable>
      }
  </MudContainer>
</div>


@code{
  private bool dataFetched, openSideFilter;
  private int[] pageSize = new int[] { 30, 50, 100, 500, 1000 };
  private string searchTerm = string.Empty, visibility = "visibility-animation-hide";

  protected override async Task OnInitializedAsync()
  {
    GlobalClass.pageTitle = "Configuration - REQUEST TYPES";
    while (GlobalClass.currentUserAccount == null || GlobalClassList.requestTypes == null)
      await Task.Delay(1);
    await AppState.UpdateMainLayoutComponent(true);
    RequestTypeHub();
    CompletedFetch();
  }

  void CompletedFetch()
  {
      dataFetched = true;
      StateHasChanged();
  }

  private async Task RequestTypeDialog(RequestTypeModel requestType, Enums.ActionMode action)
  {
    var parameters = new DialogParameters();
    GlobalClass.requestType = requestType;
    string dialogTitle = GlobalClass.requestType.Id != 0 ? "Edit Status" : "Add Status";
    string buttonText = GlobalClass.requestType.Id != 0 ? "Update" : "Add";
    Color color = GlobalClass.requestType.Id != 0 ? Color.Info : Color.Success;
    parameters.Add("color", color);
    parameters.Add("dialogTitle", dialogTitle);
    parameters.Add("buttonText", buttonText);
    parameters.Add("currentAction", action);
    var options = new DialogOptions() { CloseButton = false, MaxWidth = MaxWidth.ExtraSmall, FullWidth = true, NoHeader = false, DisableBackdropClick = false };
    var resultDialog = await dialogService.Show<Shared.Dialogs.RequestTypeDialogs.RequestTypeDialog>("", parameters, options).Result;
    if (!resultDialog.Canceled)
    {
      if ((Enums.ActionMode)resultDialog.Data == Enums.ActionMode.Create)
        Extensions.ShowAlert("Request Type successfully added.", Variant.Filled,snackbarService,Severity.Success);
      else if ((Enums.ActionMode)resultDialog.Data == Enums.ActionMode.Update)
        Extensions.ShowAlert("Request Type successfully updated.", Variant.Filled,snackbarService,Severity.Info);
      else if ((Enums.ActionMode)resultDialog.Data == Enums.ActionMode.Deactivate)
        Extensions.ShowAlert("Request Type has been deactivated.", Variant.Filled,snackbarService,Severity.Warning);
      GlobalClassList.requestTypes = GlobalClassList.requestTypes.Where(x => x.IsActive == true).ToList();
    } else if (resultDialog.Canceled)
      Extensions.ShowAlert("Action Cancelled.", Variant.Filled,snackbarService,Severity.Normal);
  }

  private bool FilterItems(RequestTypeModel items)
  {
    if (string.IsNullOrEmpty(searchTerm))
      return true;
    if (items.TypeName.Contains(searchTerm, StringComparison.InvariantCultureIgnoreCase))
      return true;
    return false;
  }

  private void OpenSideFilter()
  {
    openSideFilter = !openSideFilter;
    if(openSideFilter)
      visibility = "visibility-animation-show";
    if(!openSideFilter)
      visibility = "visibility-animation-hide";
  }
  private void RequestTypeHub()
  {
    try
    {
      if(GlobalVariable.AMSHubConnection != null)
        GlobalVariable.AMSHubConnection.On<RequestTypeModel>("SaveRequestType", (_type) =>{

        GlobalClassList.requestTypes.RemoveAll(x=>x.Id == _type.Id);
        GlobalClassList.requestTypes.Add(_type);
        GlobalClassList.requestTypes = GlobalClassList.requestTypes.Where(x=>x.IsActive == true).OrderBy(x=>x.TypeName).ToList();
        StateHasChanged();

        });
    }
    catch (System.Exception ex)
    {
      Console.WriteLine(ex.Message);
       // TODO
    }
  }
}


