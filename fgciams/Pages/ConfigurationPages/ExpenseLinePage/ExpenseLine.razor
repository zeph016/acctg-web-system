@page "/expense-line/list"

@inject IDialogService dialogService
@inject ISnackbar snackbarService
@inject IExpenseLineService expenseLineService
@inject ApplicationState AppState

<div class='page-cont'>
    <div class='drawer-right'>
        <MudDrawer Class='pa-1' @bind-Open='openSideFilter' Fixed='false' Anchor='Anchor.Right' Elevation='0' Variant='DrawerVariant.Mini' OpenMiniOnHover='false'>
            <div class='drawer-right__filtercont'>
                <div class="icon-area d-flex align-center">
                    <MudIconButton OnClick='OpenSideFilter' Icon="@Icons.Material.Filled.FilterList" aria-label="Filter" Size='Size.Medium' />
                </div>
                <div class="filter-title d-flex align-center">
                    <p class='title875'>Filter</p>
                    <MudSpacer />
                    <MudIconButton OnClick='OpenSideFilter' Icon="@Icons.Material.Filled.Close" aria-label="Close Filter" Size='Size.Medium' />
                </div>
                <div class='filter-content d-flex flex-column pl-4 pr-4 gap-1 @visibility'>
                    <MudGrid Spacing='1'>
                        <MudItem Class='d-flex align-center justify-center' xs=2>
                            <MudCheckBox @bind-Checked="isExpense" Dense Size='Size.Small' Color='Color.Info' UnCheckedColor='Color.Dark' />
                        </MudItem>
                        <MudItem class='d-flex align-center justify-center' xs=10>
                                <MudTextField Immediate=true Class='txtfield-75 mr-2' @bind-Value='searchTerm' Placeholder='Expense Line'
                                Adornment='Adornment.Start' AdornmentIcon='@Icons.Material.Filled.Search' IconSize='Size.Small'
                                Clearable='true' Variant='Variant.Outlined' Disabled='!isExpense'/>
                        </MudItem>
                        <MudItem Class='d-flex align-center justify-center' xs=2>
                            <MudCheckBox @bind-Checked="isAccountType" Dense Size='Size.Small' Color='Color.Info' UnCheckedColor='Color.Dark' />
                        </MudItem>
                        <MudItem class='d-flex align-center justify-center' xs=10>
                            <MudSelect Class='txtfield-75 mr-2' MultiSelectionTextFunc='@(new Func<List<string>, string>(GetSelectedAccountType))' 
                                @bind-SelectedValues='selectedAccountType'  @bind-Value='selectedAT' Label='Account Type' 
                                IconSize='Size.Small'  Disabled='!isAccountType' Placeholder='Account Type' Variant='Variant.Outlined'
                                AnchorOrigin='Origin.BottomCenter' TransformOrigin='Origin.TopCenter' Clearable Dense MultiSelection>
                                @if(GlobalClassList.listOfAccountTypes != null)
                                @foreach (var item in GlobalClassList.listOfAccountTypes)
                                {
                                    <MudSelectItem Value="@item">@item.TypeName</MudSelectItem>
                                }
                            </MudSelect>
                        </MudItem>
                        <MudItem Class='d-flex align-center justify-center' xs=2>
                            <MudCheckBox @bind-Checked="isAccountLine" Dense Size='Size.Small' Color='Color.Info' UnCheckedColor='Color.Dark' />
                        </MudItem>
                        <MudItem class='d-flex align-center justify-center' xs=10>
                            <MudSelect Class='txtfield-75 mr-2' MultiSelectionTextFunc='@(new Func<List<string>, string>(GetSelectedAccountLine))' 
                                @bind-SelectedValues='selectedAccountLine'  @bind-Value='selectedAL' Label='Account Line' 
                                IconSize='Size.Small'  Disabled='!isAccountLine' Placeholder='Account Line' Variant='Variant.Outlined'
                                AnchorOrigin='Origin.BottomCenter' TransformOrigin='Origin.TopCenter' Clearable Dense MultiSelection>
                                @if(GlobalClassList.accountLineTypes != null)
                                @foreach (var item in GlobalClassList.accountLineTypes)
                                {
                                    <MudSelectItem Value="@item">@item.LineTypeName</MudSelectItem>
                                }
                            </MudSelect>
                        </MudItem>
                        <MudItem Class='d-flex align-center justify-center' xs=2>
                            <MudCheckBox @bind-Checked="isAccountLineGroup" Dense Size='Size.Small' Color='Color.Info' UnCheckedColor='Color.Dark' />
                        </MudItem>
                        <MudItem class='d-flex align-center justify-center' xs=10>
                            <MudSelect Class='txtfield-75 mr-2' MultiSelectionTextFunc='@(new Func<List<string>, string>(GetSelectedALGroups))' 
                                @bind-SelectedValues='selectedAccountLineGroup' @bind-Value='selectedALG' Label='Account Line Group' 
                                IconSize='Size.Small'  Disabled='!isAccountLineGroup' Placeholder='Account Line Group' Variant='Variant.Outlined'
                                AnchorOrigin='Origin.BottomCenter' TransformOrigin='Origin.TopCenter' Clearable Dense MultiSelection>
                                @if(GlobalClassList.accountLineGroups != null)
                                @foreach (var item in GlobalClassList.accountLineGroups)
                                {
                                    <MudSelectItem Value="@item">@item.LineGroupName</MudSelectItem>
                                }
                            </MudSelect>
                        </MudItem>
                        <MudItem Class='d-flex align-center justify-center' xs=2>
                            <MudCheckBox @bind-Checked="isReportGroup" Dense Size='Size.Small' Color='Color.Info' UnCheckedColor='Color.Dark' />
                        </MudItem>
                        <MudItem class='d-flex align-center justify-center' xs=10>
                            <MudSelect Class='txtfield-75 mr-2' MultiSelectionTextFunc='@(new Func<List<string>,string>(GetSelectedReportGroup))' 
                                @bind-SelectedValues='selectedReportGroups' @bind-Value='selectedReportGroup' Label='Report Group' 
                                IconSize='Size.Small'  Disabled='!isReportGroup' Placeholder='Report Group' Variant='Variant.Outlined'
                                AnchorOrigin='Origin.BottomCenter' TransformOrigin='Origin.TopCenter' Clearable Dense MultiSelection>
                                @foreach (Enums.AccountReportGroup item in Enum.GetValues(typeof(Enums.AccountReportGroup)))
                                {
                                    <MudSelectItem Value="@Extensions.GetEnumDescription(item)">@Extensions.GetEnumDescription(item)</MudSelectItem>
                                }
                            </MudSelect>
                        </MudItem>
                        <MudItem Class='d-flex align-center justify-center' xs=6>
                            <MudButton OnClick='( ()=> ReloadTable() )' Variant='Variant.Filled' Color='Color.Secondary'>Reset</MudButton>
                        </MudItem>
                        <MudItem Class='d-flex align-center justify-center' xs=6>
                            <MudButton OnClick='( ()=> AdvancedSearch() )' Variant='Variant.Filled' Color='Color.Secondary'>Apply Filter</MudButton>
                        </MudItem>
                    </MudGrid>
                </div>
            </div>
        </MudDrawer>
    </div>
    <MudContainer Class='divisionpage' Fixed='false' MaxWidth='MaxWidth.ExtraExtraLarge'>
        @if(!dataFetched)
        {
            <SkeletonPageList />
        }
        else
        {
            <MudTable Class='table-style-1' Items="@GlobalClassList.expenseLineList" Hover 
                Breakpoint="Breakpoint.Xs" FixedHeader FixedFooter Bordered Dense
                RowsPerPage='15' Filter='new Func<ExpenseLineModel,bool>(FilterItems)'>
                <ToolBarContent>
                    <MudText Typo='Typo.caption'>
                        @GlobalClassList.expenseLineList.Count() 
                        @(GlobalClassList.expenseLineList.Count() == 1 ? "item" : "items") 
                        in Total
                    </MudText>
                    <MudSpacer/>
                    <MudTooltip Text="Refresh Table">
                        <MudIconButton Class='@(isLoading ? "mudbtnico-rotate":"")' Icon="@Icons.Material.Filled.Refresh" Size="Size.Small" OnClick='(()=>  ReloadTable() )' 
                            Color='@(isLoading ? Color.Info : Color.Default)'/>
                    </MudTooltip>
                    <MudMenu Class='overflow-hidden mudbtnico-rotate-90' StartIcon='@Icons.Material.Filled.MoreVert' AnchorOrigin='Origin.BottomCenter' ActivationEvent="MouseEvent.MouseOver"
                        TransformOrigin='Origin.TopRight' Dense Size='Size.Small' Label='More'>
                         <MudMenuItem OnClick='(() => ExpenseLineDialog(new ExpenseLineModel(), Enums.ActionMode.Create))'>
                            <div class='d-flex align-center gap-2 '>
                                <MudIcon Icon='@Icons.Material.Filled.Add' Size='Size.Small' Color='Color.Dark' />
                                <MudText Typo='Typo.body2' Color='Color.Dark'>Add</MudText>
                            </div>
                        </MudMenuItem>
                    </MudMenu>
                </ToolBarContent>
                <ColGroup>
                    <col />
                    <col style='width: 1%'/>
                    <col style='width: 1%'/>
                    <col style='width: 1%'/>
                    <col style='width: 1%'/>
                    <col style='width: 1%'/>
                    <col style='width: 1%'/>
                    <col style='width: 1%'/>
                    <col style='width: 50px;' />
                    <col style='width: 50px;' />
                </ColGroup>
                <HeaderContent>
                    <MudTh Class='customheader-6 text-center'>
                        <MudTableSortLabel Class='mudsort-icon-15px pad-bott05px' InitialDirection="SortDirection.Ascending" 
                        SortBy="new Func<ExpenseLineModel, object>(x=>x.ExpenseName)">
                            Expense Name
                        </MudTableSortLabel>
                    </MudTh>
                    <MudTh Class='customheader-6 text-center'>Type</MudTh>
                    <MudTh Class='customheader-6 text-center'>Line</MudTh>
                    <MudTh Class='customheader-6 text-center'>Group</MudTh>
                    <MudTh Class='customheader-6 text-center'>Report</MudTh>
                    <MudTh Class='customheader-6 text-center'>AR</MudTh>
                    <MudTh Class='customheader-6 text-center'>Ledger</MudTh>
                    <MudTh Class='customheader-6 text-center'>EWT</MudTh>
                    <MudTh Class='customheader-6 text-center'>-</MudTh>
                    <MudTh Class='customheader-6 text-center pa-2'>Action</MudTh>
                </HeaderContent>
                <RowTemplate>
                    <MudTd DataLabel="Expense Name">
                        <div class='dynamic-div-1 px-1'>
                            <small>@context.ExpenseName</small>
                        </div>
                    </MudTd>
                    <MudTd Class='text-center' DataLabel="Account Type Name">
                        <MudChip Class='chip-radius-5 font-bold font10 txt-uppercase' Variant='Variant.Outlined' Color='Color.Error' Size='Size.Small'>
                            @context.AccountTypeName
                        </MudChip>
                    </MudTd>
                    <MudTd Class='text-center' DataLabel="Line Type">
                        <MudChip Class='chip-radius-5 font-bold font10 txt-uppercase' Variant='Variant.Outlined' Color='Color.Dark' Size='Size.Small'>
                            @context.AccountLineTypeName
                        </MudChip>
                    </MudTd>
                    <MudTd Class='text-center' DataLabel="Line Group Name">
                        <MudChip Class='chip-radius-5 font-bold font10 txt-uppercase' Variant='Variant.Outlined' Color='Color.Primary' Size='Size.Small'>
                            @context.AccountLineGroupName
                        </MudChip>
                    </MudTd>
                    <MudTd Class='text-center' DataLabel="Account Report">
                         <MudChip Class='chip-radius-5 font-bold font10 txt-uppercase' Variant='Variant.Outlined' Color='Color.Secondary' Size='Size.Small'>
                            @Extensions.GetEnumDescription((Enums.AccountReportGroup)context.AccountReportGroupId)
                        </MudChip>
                    </MudTd>
                    <MudTd Class='text-center' DataLabel="Account Default Balance">
                        <MudChip Class='chip-radius-5 font-bold font10 txt-uppercase' Variant='Variant.Outlined' Color='Color.Info' Size='Size.Small'>
                            @Extensions.GetEnumDescription((Enums.AccountDefaultBalance)context.AccountDefaultBalanceId)
                        </MudChip>
                    </MudTd>
                    <MudTd Class='text-center' DataLabel='With Ledger'>
                        <MudCheckBox Class='chkbxfont10 chkbxbold' Checked=@context.WithLedger ReadOnly Size='Size.Small'
                            Color='Color.Info' UnCheckedColor='Color.Dark' Dense />                 
                    </MudTd>
                    <MudTd Class='text-center' DataLabel='With EWT'>
                         <MudCheckBox Class='chkbxfont10 chkbxbold' Checked=@context.IsEWT ReadOnly Size='Size.Small' 
                            Color='Color.Info' UnCheckedColor='Color.Dark' Dense />
                    </MudTd>
                    <MudTd Class='text-center' DataLabel='Remark'>
                        <MudToggleIconButton @bind-Toggled='context.isShowChild'
                          Icon="@Icons.Material.Filled.ExpandMore" Color="@Color.Tertiary" Title="Show Remarks" Size='Size.Small' ToggledSize='Size.Small'
                          ToggledIcon="@Icons.Material.Filled.ExpandLess" ToggledColor="@Color.Info" ToggledTitle="Hide Remarks"/>
                    </MudTd>
                    <MudTd Class='text-center pa-2'>
                        <MudMenu Class='mudbtnico-rotate-90' Icon='@Icons.Material.Filled.MoreVert' AnchorOrigin='Origin.BottomLeft' ActivationEvent="MouseEvent.MouseOver"
                            TransformOrigin='Origin.TopRight' Dense Size='Size.Small'>
                            <MudMenuItem OnClick='(() => ExpenseLineDialog(context, Enums.ActionMode.Update))'>
                                <div class='d-flex align-center gap-2 '>
                                    <MudIcon Icon='@Icons.Material.Filled.Edit' Size='Size.Small'  Color='Color.Dark' />
                                    <MudText Typo='Typo.body2' Color='Color.Dark'>Edit</MudText>
                                </div>
                            </MudMenuItem>
                        </MudMenu>
                    </MudTd>
                </RowTemplate>
                <ChildRowContent>
                    <MudTr>
                        <td colspan="1"></td>
                        <td colspan="8">
                            <MudPaper Elevation='1' Square>
                                <div class='transition-05s-ease overflow-hidden bgc-F4F5FB' style='@(context.isShowChild ? "max-height:500px" : "max-height:0px")'>
                                    <div class="d-flex flex-column px-4 py-2">
                                        <MudText Class='font12 font-bold txt-uppercase'>remarks:</MudText>
                                        <MudText Class='font10'>@(String.IsNullOrEmpty(context.Remarks) ? "No Remarks":context.Remarks)</MudText>
                                    </div>
                                </div>
                            </MudPaper>
                        </td>
                        <td colspan="1"></td>
                    </MudTr>
                </ChildRowContent>
                <PagerContent>
                    <MudTablePager PageSizeOptions='@GlobalVariable.pageSize' />
                </PagerContent>
            </MudTable>
        }
    </MudContainer>
</div>

@code
{
    private bool dataFetched, openSideFilter, isLoading;
    private string searchTerm = string.Empty, visibility = "visibility-animation-hide";
    private bool isAccountLineGroup, isExpense, isAccountType, isAccountLine, isReportGroup;
    private IEnumerable<AccountLineGroupModel> selectedAccountLineGroup = new HashSet<AccountLineGroupModel>();
    private IEnumerable<AccountTypeModel> selectedAccountType = new HashSet<AccountTypeModel>();
    private IEnumerable<AccountLineTypeModel> selectedAccountLine = new HashSet<AccountLineTypeModel>();
    private IEnumerable<string> selectedReportGroups = new HashSet<string>();
    private List<ExpenseLineModel> originalList = new List<ExpenseLineModel>(); 
    private AccountLineGroupModel selectedALG = new AccountLineGroupModel();
    private AccountTypeModel selectedAT = new AccountTypeModel();
    private AccountLineTypeModel selectedAL = new AccountLineTypeModel();
    private string selectedReportGroup = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        GlobalClass.pageTitle = "Configuration - Expense Line";
        while (GlobalClass.currentUserAccount == null || GlobalClassList.expenseLineList == null)
            await Task.Delay(1);
        await AppState.UpdateMainLayoutComponent(true);
        CompletedFetch();
        SignalR();
    }
    private void CompletedFetch()
    {
        dataFetched = true;
        StateHasChanged();
    }
    @* private async Task<TableData<PettyCashModel>> LoadPettyCashInServer(TableState tableState)
    {
        isLoading = true;
    } *@
    private bool FilterItems(ExpenseLineModel items)
    {
        if (string.IsNullOrEmpty(searchTerm))
            return true;
        if (items.ExpenseName.Contains(searchTerm, StringComparison.InvariantCultureIgnoreCase))
            return true;
        return false;
    }
    private async Task AdvancedSearch()
    {
        await LoadExpenseLine();
        if(isAccountType || isAccountLine || isAccountLineGroup || isReportGroup)
        {
            var exp = new List<ExpenseLineModel>();
            //account type
            if(isAccountType)
            {
                selectedAccountType.ToList().ForEach( selected =>
                {
                    exp.AddRange(GlobalClassList.expenseLineList.Where( ex => ex.AccountTypeName.Contains(selected.TypeName, StringComparison.InvariantCultureIgnoreCase)).ToList());
                });
                GlobalClassList.expenseLineList = exp;
            }
            //account line
            if(isAccountLine)
            {
                exp = new();
                selectedAccountLine.ToList().ForEach( selected =>
                {
                    exp.AddRange(GlobalClassList.expenseLineList.Where( ex => ex.AccountLineTypeName.Contains(selected.LineTypeName, StringComparison.InvariantCultureIgnoreCase)).ToList());
                });
                GlobalClassList.expenseLineList = exp;
            }
            //account line group
            if(isAccountLineGroup)
            {
                exp = new();
                selectedAccountLineGroup.ToList().ForEach( selected =>
                {
                    exp.AddRange(GlobalClassList.expenseLineList.Where( ex => ex.AccountLineGroupName.Contains(selected.LineGroupName, StringComparison.InvariantCultureIgnoreCase)).ToList());
                });
                GlobalClassList.expenseLineList = exp;
            }
            //Report group
            if(isReportGroup)
            {
                exp = new();
                selectedReportGroups.ToList().ForEach( selected =>
                {
                    exp.AddRange(GlobalClassList.expenseLineList.Where( report => Extensions.GetEnumDescription(report.AccountReportGroupId).Equals(selected)).ToList());
                });
                GlobalClassList.expenseLineList = exp;
            }
            GlobalClassList.expenseLineList = exp;
        } else {
            GlobalClassList.expenseLineList = originalList;
            originalList = GlobalClassList.expenseLineList;
        }
        StateHasChanged();
        
    }
    private async Task ReloadTable()
    {
        selectedAccountLineGroup = new HashSet<AccountLineGroupModel>();
        selectedAccountType = new HashSet<AccountTypeModel>();
        selectedAccountLine = new HashSet<AccountLineTypeModel>();
        selectedReportGroups = new HashSet<string>();
        searchTerm = "";//Expense name
        isExpense = isAccountLineGroup = isAccountType = isAccountLine = isReportGroup = false;
        GetSelectedAccountType(new());
        GetSelectedAccountLine(new());
        GetSelectedALGroups(new());
        GetSelectedReportGroup(new ());
        await LoadExpenseLine();
    }
    private void OpenSideFilter()
    {
        openSideFilter = !openSideFilter;
        if(openSideFilter)
        visibility = "visibility-animation-show";
        if(!openSideFilter)
        visibility = "visibility-animation-hide";
    }
    private async Task ExpenseLineDialog(ExpenseLineModel expenseLine, Enums.ActionMode action)
    {
        var parameters = new DialogParameters();
        GlobalClass.expenseLine = expenseLine;
        string dialogTitle = GlobalClass.expenseLine.Id != 0 ? "Edit Expense Line" : "Add Expense Line";
        string buttonText = GlobalClass.expenseLine.Id != 0 ? "Update" : "Add";
        Color color = GlobalClass.expenseLine.Id != 0 ? Color.Info : Color.Success;
        parameters.Add("color", color);
        parameters.Add("dialogTitle", dialogTitle);
        parameters.Add("buttonText", buttonText);
        parameters.Add("currentAction", action);
        var options = new DialogOptions() { CloseButton = false, MaxWidth = MaxWidth.Small, FullWidth = true, NoHeader = false, DisableBackdropClick = false };
        var resultDialog = await dialogService.Show<Shared.Dialogs.ExpenseLineDialogs.ExpenseLineDialog>("", parameters, options).Result;
        if (!resultDialog.Canceled)
        {
            if ((Enums.ActionMode)resultDialog.Data == Enums.ActionMode.Create)
                Extensions.ShowAlert("Expense Line successfully added.", Variant.Filled, snackbarService, Severity.Success);
            else if ((Enums.ActionMode)resultDialog.Data == Enums.ActionMode.Update)
                Extensions.ShowAlert("Expense Line updated successfully.", Variant.Filled, snackbarService, Severity.Info);
            else if ((Enums.ActionMode)resultDialog.Data == Enums.ActionMode.Deactivate)
                Extensions.ShowAlert("Expense Line has been deactivated.", Variant.Filled, snackbarService, Severity.Info);
            else
                await LoadExpenseLine();
            StateHasChanged();
        } else if (resultDialog.Canceled)
            Extensions.ShowAlert("Action Cancelled.", Variant.Filled,snackbarService,Severity.Normal);
    }
    private void SignalR()
    {
        try
        {
            if(GlobalVariable.AMSHubConnection != null)
                GlobalVariable.AMSHubConnection.On<ExpenseLineModel>("SaveExpenseLine",(expenseLineModel) => 
                {
                    GlobalClassList.expenseLineList.RemoveAll(expense => expense.Id == expenseLineModel.Id);
                    if(expenseLineModel.IsActive == true)
                        GlobalClassList.expenseLineList.Insert(0,expenseLineModel);
                    StateHasChanged(); 
                });
        }catch (Exception ex)
        {
            Console.WriteLine(ex.Message);
            throw;
        }
    }
    private bool ShowChild(bool isShow,ExpenseLineModel expenseLine)
    {
        @* GlobalClassList.expenseLineList.ForEach(model => {
            if(model.Id != expenseLine.Id)
                model.isShowChild = false;
        }); *@
        return isShow = !isShow;
    }
    private async Task LoadExpenseLine()
    {
        GlobalClassList.expenseLineList = await expenseLineService.LoadExpenseLine(GlobalClass.token);
        originalList = GlobalClassList.expenseLineList;
    }
    private string GetSelectedALGroups(List<string> list)
    {
        return selectedAccountLineGroup.ToList().Count > 0 ? selectedAccountLineGroup.Select(x=>x.LineGroupName).Aggregate( ( LG1,LG2) => LG1+","+LG2) : string.Empty;
    }
    private string GetSelectedAccountType(List<string> list)
    {
        return selectedAccountType.ToList().Count > 0 ? selectedAccountType.Select( x => x.TypeName).Aggregate( ( T1,T2) => T1+","+T2) : string.Empty;
    }
    private string GetSelectedAccountLine(List<string> list)
    {
        return selectedAccountLine.ToList().Count > 0 ? selectedAccountLine.Select( x => x.LineTypeName).Aggregate( ( L1,L2) => L1+","+L2) : string.Empty;
    }
    private string GetSelectedReportGroup(List<string> list)
    {
        return selectedReportGroups.ToList().Count > 0 ? selectedReportGroups.Select( x => x).Aggregate( ( x1,x2) => x1+","+ x2) : string.Empty;
    }
}