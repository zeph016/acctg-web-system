@page "/account-type/list"

@inject ISnackbar snackbarService
@inject IDialogService dialogService
@inject IAccountTypeService accountTypeService
@inject ApplicationState AppState

<div class='page-cont'>
    <div class='drawer-right'>
        <MudDrawer Class='pa-1' @bind-Open='openSideFilter' Fixed='false' Anchor='Anchor.Right' Elevation='0' Variant='DrawerVariant.Mini' OpenMiniOnHover='false'>
            <div class='drawer-right__filtercont'>
                <div class="icon-area d-flex align-center">
                    <MudIconButton OnClick='OpenSideFilter' Icon="@Icons.Material.Filled.FilterList" aria-label="Filter" Size='Size.Medium' />
                </div>
                <div class="filter-title d-flex align-center">
                    <p class='title875'>Filter</p>
                    <MudSpacer />
                    <MudIconButton OnClick='OpenSideFilter' Icon="@Icons.Material.Filled.Close" aria-label="Close Filter" Size='Size.Medium' />
                </div>
                <div class='filter-content d-flex flex-column pl-4 pr-4 gap-1 @visibility'>
                    <MudTextField Immediate=true Class='txtfield-75' @bind-Value='searchTerm' Placeholder='Type name'
                    Adornment='Adornment.Start' AdornmentIcon='@Icons.Material.Filled.Search' IconSize='Size.Small'
                    Clearable='true' Variant='Variant.Outlined' />
                    <MudButton Variant='Variant.Filled' Color='Color.Secondary'>Apply Filter</MudButton>
                </div>
            </div>
        </MudDrawer>
    </div>
    <MudContainer Class='divisionpage' Fixed='false' MaxWidth='MaxWidth.ExtraExtraLarge'>
        @if(!dataFetched)
        {
            <SkeletonPageList />
        }
        else
        {
            <MudTable Class='configtables ' Items="@GlobalClassList.listOfAccountTypes" Hover="true" 
                Breakpoint="Breakpoint.Xs" FixedHeader='true' FixedFooter='true' Bordered='true' Dense='true'
                RowsPerPage='30' Filter='new Func<AccountTypeModel,bool>(FilterItems)'>
                <ToolBarContent>
                    <MudText Typo='Typo.caption'>
                        @GlobalClassList.listOfAccountTypes.Count() 
                        @(GlobalClassList.listOfAccountTypes.Count() == 1 ? "item" : "items") 
                        in Total
                    </MudText>
                    <MudSpacer/>
                    <MudTooltip Text="Refresh Table">
                        <MudIconButton Icon="@Icons.Material.Filled.Refresh" Size="Size.Small" OnClick='(()=>{searchTerm = "";})' ></MudIconButton>
                    </MudTooltip>
                    <MudMenu StartIcon='@Icons.Material.Filled.MoreVert' AnchorOrigin='Origin.TopLeft' ActivationEvent="MouseEvent.MouseOver"
                        TransformOrigin='Origin.TopRight' Dense='true' Size='Size.Small' Label='More'>
                         <MudMenuItem OnClick='(() => AccountTypeDialog(new AccountTypeModel(), Enums.ActionMode.Create))'>
                            <div class='d-flex align-center gap-2 '>
                                <MudIcon Icon='@Icons.Material.Filled.Add' Size='Size.Small' />
                                <MudText Typo='Typo.body2'>Add</MudText>
                            </div>
                        </MudMenuItem>
                    </MudMenu>
                </ToolBarContent>
                <ColGroup>
                    <col />
                    <col />
                    <col style='width: 40px' />
                </ColGroup>
                <HeaderContent>
                    <MudTh Class='customheader-1'>
                         <MudTableSortLabel InitialDirection="SortDirection.Ascending" 
                        SortBy="new Func<AccountTypeModel, object>(x=>x.TypeName)">
                            Type Name
                        </MudTableSortLabel>
                    </MudTh>
                    <MudTh Class='customheader-1'>Remarks</MudTh>
                    <MudTh Class='customheader-1 text-center pa-2'>Action</MudTh>
                </HeaderContent>
                <RowTemplate>
                        <MudTd DataLabel="Type name">@context.TypeName</MudTd>
                        <MudTd DataLabel="Remarks">@context.Remarks</MudTd>
                        <MudTd Class='text-center pa-2'>
                            <MudMenu Icon='@Icons.Material.Filled.MoreVert' AnchorOrigin='Origin.TopLeft' ActivationEvent="MouseEvent.MouseOver"
                            TransformOrigin='Origin.TopRight' Dense='true' Size='Size.Small'>
                                 <MudMenuItem OnClick='(() => AccountTypeDialog(context, Enums.ActionMode.Update))'>
                                    <div class='d-flex align-center gap-2 '>
                                        <MudIcon Icon='@Icons.Material.Filled.Edit' Size='Size.Small' />
                                        <MudText Typo='Typo.body2'>Edit</MudText>
                                    </div>
                                </MudMenuItem>
                            </MudMenu>
                        </MudTd>
                </RowTemplate>
                <PagerContent>
                    <MudTablePager PageSizeOptions='@pageSize' />
                </PagerContent>
            </MudTable>
        }
    </MudContainer>
</div>
@code {
    private bool dataFetched, openSideFilter;
    private int[] pageSize = new int[] {30, 50, 100, 500, 1000 };
    private string searchTerm = string.Empty, visibility = "visibility-animation-hide";
    protected override async Task OnInitializedAsync()
    {
        GlobalClass.pageTitle = "Configuration - Account Type"; 
        while (GlobalClass.currentUserAccount == null || GlobalClassList.listOfAccountTypes == null)
            await Task.Delay(1);
        await AppState.UpdateMainLayoutComponent(true);
        CompletedFetch();
        SignalR();
    }
    private void CompletedFetch()
    {
        dataFetched = true;
        StateHasChanged();
    }
    private bool FilterItems(AccountTypeModel items)
    {
        if (string.IsNullOrEmpty(searchTerm))
            return true;
        if (items.TypeName.Contains(searchTerm, StringComparison.InvariantCultureIgnoreCase) )
            return true;
        return false;
    }
    private void OpenSideFilter()
    {
        openSideFilter = !openSideFilter;
        if(openSideFilter)
        visibility = "visibility-animation-show";
        if(!openSideFilter)
        visibility = "visibility-animation-hide";
    }
    private async Task AccountTypeDialog(AccountTypeModel accountTypeModel, Enums.ActionMode action)
    {
        var parameters = new DialogParameters();
        GlobalClass.accountTypeModel = accountTypeModel;
        string dialogTitle = GlobalClass.accountTypeModel.Id != 0 ? "Edit Account Type" : "Add Account Type";
        string buttonText = GlobalClass.accountTypeModel.Id != 0 ? "Update" : "Add";
        Color color = GlobalClass.accountTypeModel.Id != 0 ? Color.Info : Color.Success;
        parameters.Add("color", color);
        parameters.Add("dialogTitle", dialogTitle);
        parameters.Add("buttonText", buttonText);
        parameters.Add("currentAction", action);
        var options = new DialogOptions() { CloseButton = false, MaxWidth = MaxWidth.ExtraSmall, FullWidth = true, NoHeader = false, DisableBackdropClick = false };
        var resultDialog = await dialogService.Show<Shared.Dialogs.AccountTypeDialogs.AccountTypeDialog>("", parameters, options).Result;
        if (!resultDialog.Canceled)
        {
            if ((Enums.ActionMode)resultDialog.Data == Enums.ActionMode.Create)
                Extensions.ShowAlert("Account Type successfully added.", Variant.Filled, snackbarService, Severity.Success);
            else if ((Enums.ActionMode)resultDialog.Data == Enums.ActionMode.Update)
                Extensions.ShowAlert("Account Type updated successfully.", Variant.Filled, snackbarService, Severity.Info);
            else if ((Enums.ActionMode)resultDialog.Data == Enums.ActionMode.Deactivate)
                Extensions.ShowAlert("Account Type has been deactivated.", Variant.Filled, snackbarService, Severity.Info);
            else
                await LoadAccountType();
        } else if (resultDialog.Canceled)
            Extensions.ShowAlert("Action Cancelled.", Variant.Filled,snackbarService,Severity.Normal);
    }
    private void SignalR()
    {
        try
        {
            if(GlobalVariable.AMSHubConnection != null)
                GlobalVariable.AMSHubConnection.On<AccountTypeModel>("SaveAccountType",(accountType) => 
                {
                    GlobalClassList.listOfAccountTypes.RemoveAll(accountTypes => accountTypes.Id == accountType.Id);
                    if(accountType.IsActive == true)
                        GlobalClassList.listOfAccountTypes.Insert(0,accountType);
                    StateHasChanged();
                });
        }catch (Exception ex)
        {
            Console.WriteLine(ex.Message);
            throw;
        }
    }
    private async Task LoadAccountType()
    {
        GlobalClassList.listOfAccountTypes = await accountTypeService.LoadAccountType(GlobalClass.token);
    }
}