@page "/bank"

@inject IBankService bankService
@inject IDialogService dialogService
@inject ISnackbar snackbarService
@inject ApplicationState AppState

<div class='page-cont'>
  <div class='drawer-right'>
    <MudDrawer Class='pa-1' @bind-Open='openSideFilter' Fixed='false' Anchor='Anchor.Right' Elevation='0' Variant='DrawerVariant.Mini' OpenMiniOnHover='false'>
      <div class='drawer-right__filtercont'>
        <div class='icon-area d-flex align-center'>
          <MudIconButton OnClick='OpenSideFilter' Icon="@Icons.Filled.FilterList" aria-label="Filter" Size='Size.Medium' />
        </div>
        <div class='filter-title d-flex align-center'>
          <p class='title875'>Filter</p>
          <MudSpacer />
          <MudIconButton OnClick='OpenSideFilter' Icon="@Icons.Filled.Close" aria-label="Close Filter" Size='Size.Medium' />
        </div>
        <div class='filter-content d-flex flex-column pl-4 pr-4 gap-1 @visibility'>
          <MudTextField Class='txtfield-75' @bind-Value='searchTerm' Placeholder='Bank Name'
          Adornment='Adornment.Start' AdornmentIcon='@Icons.Material.Filled.Search' IconSize='Size.Small'
          Clearable='true' Variant='Variant.Outlined' />
          <MudButton Variant='Variant.Filled' Color='Color.Secondary'>Apply Filter</MudButton>
        </div>
      </div>
    </MudDrawer>
  </div>
  <MudContainer Class='bankpage' Fixed='false' MaxWidth='MaxWidth.ExtraExtraLarge'>
    @if(!dataFetched)
    {
      <SkeletonPageList />
    }
    else
    {
      <MudTable Class='configtables row-popup-anim-2px' Items="@GlobalClassList.banks"  Hover="true" Breakpoint='Breakpoint.Sm' 
      FixedHeader='true' FixedFooter='true' Bordered='true' Dense='true' RowsPerPage='30'
      Filter='new Func<BankModel,bool>(FilterItems)'>
        <ToolBarContent>
            <MudText Typo='Typo.caption'>
              @GlobalClassList.banks.Count() 
              @(GlobalClassList.banks.Count() == 1 ? "item" : "items") 
              in total
            </MudText>
            <MudSpacer />
            <MudTooltip Text="Refresh Table">
            <MudIconButton Icon="@Icons.Filled.Refresh" Size="Size.Small" OnClick='(()=>{searchTerm = "";})' ></MudIconButton>
            </MudTooltip>
            <MudMenu StartIcon='@Icons.Filled.MoreVert' AnchorOrigin='Origin.TopLeft' ActivationEvent='MouseEvent.MouseOver'
              TransformOrigin='Origin.TopRight' Dense='true' Size='Size.Small' Label='More'>
              <MudMenuItem OnClick='(() => BankDialog(new BankModel(), Enums.ActionMode.Create))'>
                    <div class='d-flex align-center gap-2 menu-grow-anim'>
                        <MudIcon Icon='@Icons.Filled.Add' Size='Size.Small'/>
                        <MudText Typo='Typo.body2'>Add</MudText>
                    </div>
              </MudMenuItem>
            </MudMenu>
        </ToolBarContent>
        <ColGroup>
          <col />
          <col />
          <col />
          <col />
          <col style='width:20px' />
          <col />
          <col style='width:20px;'/>
          <col style='width:20px;'/>
        </ColGroup>
        <HeaderContent>
            <MudTh Class='customheader-1'>Bank</MudTh>
            <MudTh Class='customheader-1'> </MudTh>
            <MudTh Class='customheader-1'>Branch</MudTh>
            <MudTh Class='customheader-1'>Account No.</MudTh>
            <MudTh Class='customheader-1 text-center'>Currency</MudTh>
            <MudTh Class='customheader-1 text-center'>Beg. Balance</MudTh>
            <MudTh Class='customheader-1 text-center pa-2'>Contact</MudTh>
            <MudTh Class='customheader-1 text-center pa-2'>Action</MudTh>
        </HeaderContent>
        <RowTemplate>
            <MudTd DataLabel="Bank">@context.BankName</MudTd>
            <MudTd DataLabel="ShortcutName">@context.ShortcutName</MudTd>
            <MudTd DataLabel="Branch">@context.BankBranch</MudTd>
            <MudTd DataLabel="AccountNo.">@context.AccountNo</MudTd>
            <MudTd Class='text-center' DataLabel="Currency">@Extensions.GetEnumDescription(context.CurrencyId)</MudTd>
            <MudTd Class='text-right' DataLabel="Beg.Balance"> @context.BeginningBalance.ToString("N2") </MudTd>
            <MudTd Class='text-center pa-2' DataLabel='Contact'>
              <MudToggleIconButton @bind-Toggled='context.subTable'
                Icon="@Icons.Filled.ExpandMore" Color="Color.Dark" Title="Show" Size='Size.Small' ToggledSize='Size.Small'
                ToggledIcon="@Icons.Filled.ExpandLess" ToggledColor="@Color.Info" ToggledTitle="Collapse"/>
            </MudTd>
            <MudTd Class='text-center pa-2'>
              <MudMenu Icon='@Icons.Filled.MoreVert' AnchorOrigin='Origin.TopLeft' ActivationEvent='MouseEvent.MouseOver'
                TransformOrigin='Origin.TopRight' Dense='true' Size='Size.Small' >
                 <MudMenuItem OnClick='(()=> BankDialog(context, Enums.ActionMode.Update))'>
                   <div class='d-flex align-center gap-2'>
                      <MudIcon Icon='@Icons.Filled.Edit' Size='Size.Small'/>
                      <MudText Typo='Typo.body2'>Edit</MudText>
                    </div>
                 </MudMenuItem>
              </MudMenu>
            </MudTd>
        </RowTemplate>
        <ChildRowContent>
           <MudTr>
            <td colspan='3'></td>
            <td colspan='4'>
                <div class='d-flex align-center justify-end transition-05s-ease overflow-hidden' style='@(context.subTable ? "max-height:500px" : "max-height:0px")'>
                  <MudPaper Class='d-flex align-center justify-content-between gap-2 ma-2 pa-2 bgc-e7f2fb min-width50' Elevation='1'>
                      <MudAvatar Class='bgc-gainsb' Size='Size.Medium'>
                          <MudIcon Color="Color.Dark" Icon="@Icons.Filled.Person" Size="Size.Medium" />
                      </MudAvatar>
                      <div class='d-flex align-start flex-column'>
                        @if(!string.IsNullOrWhiteSpace(context.ContactPerson))
                        {
                          <MudText Class='font12 font-bold'>@context.ContactPerson</MudText>
                          <MudText Class='font10'>Contact: @context.ContactNo</MudText>
                          <MudText Class='font10'>Remarks: @context.Remarks</MudText>
                        }
                        else
                        {
                          <MudText Class='font12 font-bold'>No contacts</MudText>
                        }
                      </div>
                  </MudPaper>
                </div>
            </td>
            <td colspan='1'></td>
           </MudTr>
        </ChildRowContent>
        <PagerContent>
            <MudTablePager PageSizeOptions='@pageSize'/>
        </PagerContent>
      </MudTable>
    }
  </MudContainer>
</div>

@code{
  private bool dataFetched, openSideFilter;
  private int[] pageSize = new int[] { 30, 50, 100, 500, 1000 };
  private string searchTerm = string.Empty, visibility = "visibility-animation-hide";
  protected override async Task OnInitializedAsync()
  {
    GlobalClass.pageTitle= "Configuration - BANK";
    while (GlobalClass.currentUserAccount == null || GlobalClassList.banks == null)
      await Task.Delay(1);
    await AppState.UpdateMainLayoutComponent(true);
    BankHub();
    CompletedFetch();
  }
  void CompletedFetch()
  {
    dataFetched = true;
    StateHasChanged();
  }
  async Task<List<BankModel>> LoadBanks()
  {
    GlobalClassList.banks = await bankService.LoadBanks(GlobalClass.token);
    return GlobalClassList.banks;
  }

  private async Task BankDialog(BankModel selectedBank, Enums.ActionMode action)
  {
    var parameters = new DialogParameters();
    GlobalClass.bank = selectedBank;
    string dialogTitle = GlobalClass.bank.Id != 0 ? "Edit Bank Details" : "Add Bank";
    string buttonText = GlobalClass.bank.Id != 0 ? "Update" : "Add";
    Color color = GlobalClass.bank.Id != 0 ? Color.Info : Color.Success;
    var _maxWidth = GlobalClass.bank.Id != 0 ? MaxWidth.Medium : MaxWidth.Small;
    parameters.Add("color", color);
    parameters.Add("dialogTitle", dialogTitle);
    parameters.Add("buttonText", buttonText);
    parameters.Add("currentAction", action);
    var options = new DialogOptions() { CloseButton = false, MaxWidth = _maxWidth, FullWidth = true, NoHeader = false, DisableBackdropClick = false };
    var resultDialog = await dialogService.Show<Shared.Dialogs.BankDialogs.BankDialog>("",parameters,options).Result;
    if(!resultDialog.Cancelled)
    {
      if ((Enums.ActionMode)resultDialog.Data == Enums.ActionMode.Create)
        Extensions.ShowAlert("Bank successfully added.", Variant.Filled,snackbarService,Severity.Success);
      else if ((Enums.ActionMode)resultDialog.Data == Enums.ActionMode.Update)
        Extensions.ShowAlert("Bank successfully updated.", Variant.Filled,snackbarService,Severity.Info);
      else if ((Enums.ActionMode)resultDialog.Data == Enums.ActionMode.Deactivate)
         Extensions.ShowAlert("Bank has been deactivated.", Variant.Filled,snackbarService,Severity.Warning);
      GlobalClassList.banks = GlobalClassList.banks.Where(x=>x.IsActive == true).ToList();
    }
    else if (resultDialog.Cancelled)
      Extensions.ShowAlert("Action Cancelled.", Variant.Filled,snackbarService,Severity.Normal);
  }

  private bool FilterItems(BankModel items)
  {
      if (string.IsNullOrEmpty(searchTerm))
          return true;
      if (items.BankName.Contains(searchTerm, StringComparison.InvariantCultureIgnoreCase))
          return true;
      return false;
  }

  private void OpenSideFilter()
  {
    openSideFilter = !openSideFilter;
    if(openSideFilter)
      visibility = "visibility-animation-show";
    if(!openSideFilter)
      visibility = "visibility-animation-hide";
  }
  private void BankHub()
  {
    if(GlobalVariable.AMSHubConnection != null)
      GlobalVariable.AMSHubConnection.On<BankModel>("SaveBank", (_bank) => {

        GlobalClassList.banks.RemoveAll(x=>x.Id == _bank.Id);
        GlobalClassList.banks.Add(_bank);
        GlobalClassList.banks = GlobalClassList.banks.Where(x=>x.IsActive == true).OrderBy(x=>x.BankName).ToList();
        StateHasChanged();

        });
  }
}
