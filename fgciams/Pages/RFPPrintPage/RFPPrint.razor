@page "/rfpreport/print"

@inject IRequestForPaymentService requestForPaymentService
@inject NavigationManager navigationManager
@inject IDialogService dialogService
@inject ISnackbar snackBar

<div class='page-cont pa-2'>
    <div>
        <MudPaper Class='d-flex align-stretch flex-column pa-2' Height='calc(100vh - 100px)'>
            <iframe src="@pdfReport"></iframe>
            <div class='d-flex pa-2'>
                <MudSpacer />
                <MudButton OnClick='(()=> Back())' Variant='Variant.Text'>Back</MudButton>
                <MudButton OnClick='(()=> SaveRFP())' Variant='Variant.Filled' Color='Color.Success' Disabled='isSaved'>Save</MudButton>
            </div>
        </MudPaper>
    </div>
</div>


@code{

    string pdfReport = default!;
    bool isSaved;

    protected override async Task OnInitializedAsync()
    {
        GlobalClass.pageTitle = "Print Report";
        Task t = Task.WhenAll(LoadPDFReport());
        await t;
    }
    private async Task LoadPDFReport()
    {
        pdfReport = await requestForPaymentService.GenerateRFPReport(GlobalClass.forPrintingOrSaveRFP);
        pdfReport += "#toolbar=0";
    }
    private async Task SaveRFP()
    {
        var parameters = new DialogParameters();
        string contentText = "Request for payment ";
        string dialogTitle = GlobalClass.forPrintingOrSaveRFP.Id == 0 ? "Create " + contentText : "Update " + contentText;
        parameters.Add("contentText", contentText);
        parameters.Add("actionMode", GlobalClass.forPrintingOrSaveRFP.Id == 0 ? Enums.ActionMode.Create : Enums.ActionMode.Update);
        var options = new DialogOptions()
        {
            CloseButton = false,
            MaxWidth = MaxWidth.ExtraSmall,
            FullWidth = true,
            NoHeader = false,
            DisableBackdropClick = true
        };
        var resultDialog = await dialogService.Show<Shared.Dialogs.GenericPromptDialogs.GenericPrompt>(dialogTitle, parameters, options).Result;
        if (!resultDialog.Cancelled)
        {
            var SavedRFP = new RequestForPaymentModel();
            if (GlobalClass.forPrintingOrSaveRFP.Id == 0)
            {
               SavedRFP = await requestForPaymentService.AddRequestPayment(GlobalClass.forPrintingOrSaveRFP, GlobalClass.token);
               Extensions.ShowAlert("Request for payment successfully added", Variant.Filled, snackBar,Severity.Success);
               isSaved = true;
            }
            else
            {
                SavedRFP = await requestForPaymentService.UpdateRequestPayment(GlobalClass.forPrintingOrSaveRFP, GlobalClass.token);
                Extensions.ShowAlert("Request for payment successfully updated", Variant.Filled, snackBar,Severity.Success);
                isSaved = true;
            }
            pdfReport = await requestForPaymentService.GenerateRFPReport(SavedRFP);

            await GlobalVariable.AMSHubConnection.InvokeAsync("SaveRequestForPayment", SavedRFP);
        }
    }
    private void Back()
    {
      if(!isSaved)
      {
        GlobalClass.requestForPayment = GlobalClass.forPrintingOrSaveRFP;
        GlobalClassList.requestForPayments = GlobalClass.forPrintingOrSaveRFP.RequestForPaymentDetails.ToList();
        navigationManager.NavigateTo($"/requestpayment");
      }
      else
      {
        navigationManager.NavigateTo($"/requestpaymentlist");
        GlobalClass.forPrintingOrSaveRFP = default!;
      }
       
       
    }
}