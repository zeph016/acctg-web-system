@page "/voucher/list"
@page "/voucher-list"

@inject IDialogService dialogService
@inject IVoucherService voucherService
@inject NavigationManager navigationManager
@inject ISnackbar snackBar

<div class='page-cont'>
  <div class='drawer-right'>
    <MudDrawer Class='pa-1' @bind-Open='openSideFilter' Fixed='false' Anchor='Anchor.Right' Elevation='0' Variant='DrawerVariant.Mini' OpenMiniOnHover='false'>
      <div class='drawer-right__filtercont'>
        <div class='icon-area d-flex align-center'>
          <MudIconButton OnClick='OpenSideFilter' Icon='@Icons.Filled.FilterList' arial-label='Close Filter' Size='Size.Medium' />
        </div>
        <div class='filter-title d-flex align-center'>
          <p class='title875'>Filter</p>
          <MudSpacer />
          <MudIconButton OnClick='OpenSideFilter' Icon='@Icons.Filled.Close' aria-label='Close Filter' Size='Size.Medium' />
        </div>
        <div class='filter-content d-flex flex-column pl-4 pr-4 gap-1 @visibility'>
          <MudTextField Class='txtfield-75' @bind-Value='searchTerm' Placeholder='Control Number'
          Adornment='Adornment.Start' AdornmentIcon='@Icons.Material.Filled.Search' IconSize='Size.Small'
          Clearable='true' Variant='Variant.Outlined'/>
          <MudButton Class='wspace-nowrap' Variant='Variant.Filled' Color='Color.Secondary'>Apply Filter</MudButton>
        </div>
      </div>
    </MudDrawer>
  </div>

  <MudContainer Class='voucherlist' Fixed='false' MaxWidth='MaxWidth.ExtraExtraLarge'>
    @if (!dataFetched)
    {
      <MudPaper Class='ma-1 pa-1' style="height: calc(100vh - 125px);">
        <MudSkeleton SkeletonType='SkeletonType.Rectangle' Height='calc(100vh - 135px)' Animation='Animation.Wave' />
      </MudPaper>
    }
    else
    {
      <MudPaper>
        <MudTable Class='configtables' Items=GlobalClassList.Vouchers Hover='true' Height='calc(100vh - 150px)'
        Breakpoint='Breakpoint.Sm' FixedHeader FixedFooter Bordered Dense Striped='false'
        RowsPerPage='30'>
          <ToolBarContent>
            <MudText Typo='Typo.caption'>
              @GlobalClassList.Vouchers.Count()
              @(GlobalClassList.Vouchers.Count() == 1 ? "item" : "items")
              in Total
            </MudText>
          </ToolBarContent>
          <ColGroup>
            <col style='width: 20px' />
            <col />
            <col />
            <col />
            <col />
            <col />
            <col />
            <col />
            <col style='width: 20px' />
          </ColGroup>
          <HeaderContent>
            <MudTh Class='customheader-1'>
              <MudTableSortLabel Class='lbl75' InitialDirection='SortDirection.Descending'
              SortBy='new Func<VoucherModel, object>(x=>x.ControlNumber)'>
                Control No.
              </MudTableSortLabel>
            </MudTh>
            <MudTh Class='customheader-1'>Payee</MudTh>
            <MudTh Class='customheader-1'>Description</MudTh>
            <MudTh Class='customheader-1'>Prepared by</MudTh>
            <MudTh Class='customheader-1'>Verified by</MudTh>
            <MudTh Class='customheader-1'>Approved by</MudTh>
            <MudTh Class='customheader-1 text-center'>Status</MudTh>
            <MudTh Class='customheader-1 text-right'>Amount</MudTh>
            <MudTh Class='customheader-1'>Action</MudTh>
          </HeaderContent>
          <RowTemplate>
            <MudTd DataLabel='control no.'>
              <div class='d-flex align-center'>
                  <MudChip Class='chip-radius-5 txt-uppercase font-bold font10' Color='Color.Error' Size='Size.Small'>
                    @context.ControlNumber
                  </MudChip>
                  <MudChip Class='chip-radius-5 font-bold font10' Variant='Variant.Text' Icon='@Icons.Filled.CalendarMonth' Color='Color.Dark' Size='Size.Small'>
                    @Convert.ToDateTime(context.VoucherDate).ToShortDateString()
                  </MudChip>
              </div>
            </MudTd>
            <MudTd Class='wbreak-breakword font12'>@context.PayeeName</MudTd>
            <MudTd Class='wbreak-breakword font12'>@context.Description</MudTd>
            <MudTd Class='wbreak-breakword font12'>@context.PreparedByName</MudTd>
            <MudTd Class='wbreak-breakword font12'>@context.VerifiedByName</MudTd>
            <MudTd Class='wbreak-breakword font12'>@context.ApprovedByName</MudTd>
            <MudTd Class='text-left' DataLabel='Status'>
            <MudChip Class='chip-radius-5 font-bold font10' Color='Color.Info' Variant='Variant.Filled' Size='Size.Small'>
                @context.StatusName
              </MudChip>
            </MudTd>
            <MudTd Class='wspace-nowrap text-right' DataLabel='Amount'>
              @if (context.TotalAmount > 0)
              {
                <MudText Class='font-bold color-green' Typo='Typo.body2'>
                  @Extensions.GetEnumDescription(Enums.BankCurrency.PhilippinePeso) @context.TotalAmount.ToString("N2")
                </MudText>
              }
              else
              {
                <MudText Class='font-bold' Typo='Typo.body2' Color='Color.Error'>
                  @Extensions.GetEnumDescription(Enums.BankCurrency.PhilippinePeso) @context.TotalAmount.ToString("N2")
                </MudText>
              }
            </MudTd>
            <MudTd Class='text-center' DataLabel='Action'>
              <MudMenu Icon='@Icons.Filled.MoreVert' AnchorOrigin='Origin.BottomLeft'
              TransformOrigin='Origin.TopCenter' Dense='true' Size='Size.Small'>
                @if(!ViewMenu(context) && CheckAccessLevel())
                {
                  <MudMenuItem OnClick='(()=> EditVoucher(context))'>
                    <a class='d-flex align-center gap-2'>
                      <MudIcon Icon='@Icons.Filled.Edit' Size='Size.Small'/>
                      <MudText Typo='Typo.body2'>Edit</MudText>
                    </a>
                  </MudMenuItem>
                  <MudMenuItem OnClick='(()=> ApprovedVoucher(context))'>
                    <div class='d-flex align-center gap-2'>
                      <MudIcon Icon='@Icons.Filled.ThumbUp' Size='Size.Small' />
                      <MudText Typo='Typo.body2'>Approved</MudText>
                    </div>
                  </MudMenuItem>
                  <MudMenuItem OnClick='(()=> CancelVoucher(context))'>
                    <div class='d-flex align-center gap-2'>
                      <MudIcon Icon='@Icons.Filled.FreeCancellation' Size='Size.Small' />
                      <MudText Typo='Typo.body2'>Cancel</MudText>
                    </div>
                  </MudMenuItem>
                }
                <MudMenuItem OnClick='(()=> navigationManager.NavigateTo($"/voucher-audit/{context.Id}"))'>
                  <a class='d-flex align-center gap-2'>
                    <MudIcon Icon='@Icons.Filled.Checklist' Size='Size.Small' />
                    <MudText Typo='Typo.body2'>Audit Trail</MudText>
                  </a>
              </MudMenuItem>
                <MudMenuItem OnClick='(() => context.ShowReport = ShowReport(context.ShowReport, context))'>
                  <div class='d-flex align-center gap-2'>
                    <MudIcon Icon='@Icons.Filled.PictureAsPdf' Size='Size.Small' />
                    <MudText Typo='Typo.body2'>Show Report</MudText>
                  </div>
                </MudMenuItem>
              </MudMenu>
            </MudTd>
          </RowTemplate>
          <ChildRowContent>
              @if (context.ShowReport)
                  {
                    <td colspan="9">
                      <div class='d-flex align-center pa-2 bgc-f2f2f2'>
                          <MudSpacer />
                          <MudButton OnClick='(() => context.ShowReport = ShowReport(context.ShowReport, context))' EndIcon="@Icons.Rounded.Close" IconColor='Color.Error' Size='Size.Small' >
                              Close Report
                          </MudButton>
                      </div>
                      <MudTr Class='d-flex align-stretch justify-center default-report-container'>
                          @if (string.IsNullOrWhiteSpace(PDFContent))
                          {
                          <MudOverlay Visible='true' DarkBackground="false" AutoClose="true">
                              <MudProgressCircular Color="Color.Primary" Indeterminate="true" />
                          </MudOverlay>
                          }
                          else
                          {
                          <iframe src='@PDFContent' />
                          }
                      </MudTr>
                    </td>
                  }
          </ChildRowContent>
        </MudTable>
      </MudPaper>
    }
  </MudContainer>
</div>

@code{
  private bool dataFetched, openSideFilter;
  private string PDFContent = string.Empty, searchTerm = string.Empty, visibility = "visibility-animation-hide";
  protected override async Task OnInitializedAsync()
  {
    GlobalClass.pageTitle = "voucher list";
    if (GlobalClass.currentUserAccount == null || string.IsNullOrEmpty(GlobalVariable.AMSHubConnection.ConnectionId))
      await Task.Delay(1);

    VoucherHubConnection();
    Task t = Task.WhenAll(LoadVouchers());
    await t;
    if (t.Status == TaskStatus.RanToCompletion)
      CompletedFetch();
  }

  void CompletedFetch()
  {
    dataFetched = true;
    Task.Run(StateHasChanged);
  }
  private async Task LoadVouchers()
  {
    var filterParameter = new FilterParameter()
    {

    };
    GlobalClassList.Vouchers = await voucherService.LoadVouchers(filterParameter, GlobalClass.token);
  }
  private async Task<bool> PromptMessage(Enums.ActionMode actionMode)
  {
        bool isNotCancel;
        var parameters = new DialogParameters();
        string contentText = "Voucher ";
        string dialogTitle = actionMode == Enums.ActionMode.Cancel ? "Cancel " + contentText : "Approve " + contentText;
        parameters.Add("contentText", contentText);
        parameters.Add("actionMode", actionMode == Enums.ActionMode.Cancel ? Enums.ActionMode.Cancel : Enums.ActionMode.Approve);
        var options = new DialogOptions()
        {
            CloseButton = false,
            MaxWidth = MaxWidth.ExtraSmall,
            FullWidth = true,
            NoHeader = false,
            DisableBackdropClick = true
        };
        var resultDialog = await dialogService.Show<Shared.Dialogs.GenericPromptDialogs.GenericPrompt>(dialogTitle, parameters, options).Result;
        if (!resultDialog.Cancelled)
            isNotCancel = true;
        else
            isNotCancel = false;

      StateHasChanged();

      return isNotCancel;
  }
  private void EditVoucher(VoucherModel voucher)
  {
    GlobalClass.voucher = voucher;
    navigationManager.NavigateTo($"/voucher/create");
  }
  private async Task ApprovedVoucher(VoucherModel voucher)
  {
    if(await PromptMessage(Enums.ActionMode.Approve))
    {
      voucher.AccountingStatusId = GlobalClassList.accountingStatusList.Where(x=>x.StatusEnumCategoryId == Enums.AccountingStatusEnumCategory.VA).Select(x=>x.Id).FirstOrDefault();
      voucher.Activity = "Update voucher status to approved";
      voucher.UserId = GlobalClass.currentUserAccount.EmployeeId;
      voucher.IsActive = true;
      var updatedStatus = await voucherService.UpdateVoucherStatus(voucher, GlobalClass.token);
      Extensions.ShowAlert("Voucher approved", Variant.Filled, snackBar, Severity.Success);
      await GlobalVariable.AMSHubConnection.InvokeAsync("SaveVoucher", updatedStatus);
    }
    else
      Extensions.ShowAlert("Action Cancelled", Variant.Filled, snackBar, Severity.Normal);
  }
  private async Task CancelVoucher(VoucherModel voucher)
  {
    if(await PromptMessage(Enums.ActionMode.Cancel))
    {
      voucher.AccountingStatusId = GlobalClassList.accountingStatusList.Where(x=>x.StatusEnumCategoryId == Enums.AccountingStatusEnumCategory.VC).Select(x=>x.Id).FirstOrDefault();
      voucher.Activity = "Update voucher status to cancelled";
      voucher.UserId = GlobalClass.currentUserAccount.EmployeeId;
      voucher.IsActive = true;
      var updatedStatus = await voucherService.UpdateVoucherStatus(voucher, GlobalClass.token);
      Extensions.ShowAlert("Voucher cancelled", Variant.Filled, snackBar, Severity.Success);
      await GlobalVariable.AMSHubConnection.InvokeAsync("SaveVoucher", updatedStatus);
    }
    else
      Extensions.ShowAlert("Action Cancelled", Variant.Filled, snackBar, Severity.Normal);
  }
  private bool ViewMenu(VoucherModel voucher)
  {
    var accountingStatusList = new AccountingStatusModel();
    accountingStatusList = GlobalClassList.accountingStatusList.Where(x => x.Id == voucher.AccountingStatusId).FirstOrDefault();
    return accountingStatusList?.StatusEnumCategoryId == Enums.AccountingStatusEnumCategory.VA;
  }
  private bool ShowReport(bool isShow, VoucherModel voucher)
  {
    Task.Run(async()=> await LoadVoucherReport(voucher));
    return isShow = !isShow;
  }
  private async Task LoadVoucherReport(VoucherModel voucher)
  {
    PDFContent = await voucherService.GenerateReport(voucher);
  }

  private void OpenSideFilter()
  {
    openSideFilter = !openSideFilter;
    if(openSideFilter)
    visibility = "visibility-animation-show";
    if(!openSideFilter)
    visibility = "visibility-animation-hide";
  }
  private void VoucherHubConnection()
  {
    try
    {
      var statusId = GlobalClassList.accountingStatusList
      .Where(x=>x.StatusEnumCategoryId == Enums.AccountingStatusEnumCategory.VC)
      .Select(x=>x.Id).FirstOrDefault();

      GlobalVariable.AMSHubConnection.On<VoucherModel>("SaveVoucher", (_voucher) =>{

        GlobalClassList.Vouchers.RemoveAll(x=>x.Id == _voucher.Id);
        GlobalClassList.Vouchers.Add(_voucher);
        GlobalClassList.Vouchers = GlobalClassList.Vouchers.Where(x=>x.AccountingStatusId != statusId).OrderBy(x=>x.ControlNumber).ToList();
        StateHasChanged();

      });
    }
    catch (System.Exception ex)
    {
       // TODO
    }
  }
   private bool CheckAccessLevel()
    {
      switch(GlobalClass.currentUserAccount.AccessLevel)
      {
        case Enums.AccountingAccessLevel.AccountingViewer :
        case Enums.AccountingAccessLevel.OthersViewer :
          return false;
      }

    return true;
    }
}