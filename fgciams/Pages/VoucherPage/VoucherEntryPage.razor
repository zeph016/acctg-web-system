@page "/voucher/create"

@inject IDialogService dialogService
@inject IVoucherService voucherService
@inject IGlobalService globalService
@inject ISnackbar snackbarService
@inject NavigationManager navigationManager

<div class='page-cont d-flex'>
    <div class='drawer-no-top'>
        <MudDrawer Class='rounded-tl rounded-bl' @bind-Open='openEditDrawer' Width='45%' Height='auto' Anchor='Anchor.Right' Elevation='3'
        Variant='DrawerVariant.Temporary' DisableOverlay='true'>
            <MudDrawerHeader Class='d-flex align-center gap-1 bgc-542d6f' Dense>
                <MudIcon Class='color-white' Icon='@Icons.Filled.EditNote' Size='Size.Medium' />
                <MudText Class='color-white font-bold' Typo="Typo.h6">Voucher Details</MudText>
                <MudSpacer />
                @* <MudIconButton OnClick='(() => openEditDrawer = !openEditDrawer)' Icon='@Icons.Filled.Close' Color='Color.Error' Size='Size.Small' /> *@
            </MudDrawerHeader>
            <MudNavMenu Class='pa-2'>
                <MudGrid Spacing='2'>
                    <MudItem xs=12>
                        <MudTextField @bind-Value='@selectedVoucherDetailModel.ProjectName' Label='Project/Payee'
                        @onclick='(()=> VoucherDetailLookups(Enums.LookUpType.Project, selectedVoucherDetailModel))' 
                        Required='reqProj' Error='reqProj' ReadOnly></MudTextField>
                    </MudItem>
                    <MudItem xs=6>
                        <MudTextField @bind-Value='@selectedVoucherDetailModel.ExpenseName' Label='Expense'
                        @onclick='(()=> VoucherDetailLookups(Enums.LookUpType.ExpLine, selectedVoucherDetailModel))' 
                        Required='reqExp' Error='reqExp' ReadOnly></MudTextField>
                    </MudItem>
                    <MudItem xs=6>
                        <MudTextField @bind-Value='@selectedVoucherDetailModel.DivisionName' Label='Division'
                        @onclick='(()=> VoucherDetailLookups(Enums.LookUpType.Division, selectedVoucherDetailModel))' 
                        Required='reqDiv' Error='reqDiv' ReadOnly></MudTextField>
                    </MudItem>
                    <MudItem xs=12>
                        <MudTextField @bind-Value='selectedVoucherDetailModel.Description' Variant='Variant.Outlined' Lines=4 Label='Description' />
                    </MudItem>
                    @* <MudItem Class='d-flex align-center' xs=6>
                        <MudText Class='txt-uppercase font-bold font12 mr-2'>Debit:</MudText>
                    </MudItem>
                     <MudItem Class='d-flex align-center' xs=6>
                        <MudText Class='txt-uppercase font-bold font12 mr-2'>Credit:</MudText>
                    </MudItem>
                    <MudItem Class='d-flex align-center gap-2' xs=6>
                        <MudText Class='font-bold font12'>@Extensions.GetEnumDescription(Enums.BankCurrency.PhilippinePeso)</MudText> 
                        <MudNumericField Class='txt-search-overflow txt-top-0 txtfield-right' @bind-Value='selectedVoucherDetailModel.Debit' Variant='Variant.Filled'
                        HideSpinButtons Format='N2' Error='reqDebt'/>
                    </MudItem>
                    <MudItem Class='d-flex align-center gap-2' xs=6>
                        <MudText Class='font-bold font12'>@Extensions.GetEnumDescription(Enums.BankCurrency.PhilippinePeso)</MudText> 
                        <MudNumericField Class='txt-search-overflow txt-top-0 txtfield-right' @bind-Value='selectedVoucherDetailModel.Credit' Variant='Variant.Filled'
                        HideSpinButtons Format='N2' Error='reqCred'/>
                    </MudItem> *@
                    <MudItem xs=6>
                        <MudText Class='txt-uppercase font-bold font12 mr-2'>Amount:</MudText>
                    </MudItem>
                    <MudItem xs=6>
                          @* EMPTY *@
                    </MudItem>
                    <MudItem Class='d-flex align-center gap-2' xs=6>
                        <MudText Class='font-bold font12'>@Extensions.GetEnumDescription(Enums.BankCurrency.PhilippinePeso)</MudText> 
                        <MudNumericField Class='txt-search-overflow txt-top-0 txtfield-right' @bind-Value='selectedVoucherDetailModel.Amount' Variant='Variant.Filled'
                        HideSpinButtons Format='N2' Error='reqAmt'/>
                    </MudItem>
                    <MudItem xs=6>
                         @* EMPTY *@
                    </MudItem>
                </MudGrid>
                <div class='d-flex align-center gap-1 pa-2'>
                    <MudSpacer />
                    <MudButton OnClick='ClearChanges' Variant='Variant.Text' Size='Size.Small'>Cancel</MudButton>
                    <MudButton OnClick='SaveEntryChanges' StartIcon="@Icons.Material.Filled.DoneAll" Variant='Variant.Filled' Color='Color.Success' Size='Size.Small'>Done</MudButton>
                </div>
            </MudNavMenu>
        </MudDrawer>
    </div>
    @if (!dataFetched)
    {
        <MudPaper Class='d-flex flex-1 ma-2 pa-2'>
          <MudSkeleton SkeletonType='SkeletonType.Rectangle' Height='100%' Width='100%' Animation='Animation.Wave' />
        </MudPaper>
    }
    else
    {
        <MudContainer Class='voucherpage pt-2 pr-2 pb-2 pl-2 gap-2' Fixed='false' MaxWidth='MaxWidth.Large'>
            <MudCard Class='flex-1' Square>
                <MudCardContent Class='pa-2'>
                    <div class='voucherpage__grid'>
                        <div class="voucher-header d-flex align-center pa-2 gap-1">
                            <MudImage Class='fgcilogocont__imglogo' Src='images/fglogo/fgci1.png' Alt='fgci logo' Height='30' Width='30'/>
                            <MudText Class='fgcilogocont__lblfirst'>F. GURREA</MudText>
                            <MudText Class='fgcilogocont__lblsecond'>Construction, Inc.</MudText>
                            <MudSpacer />
                             <MudButton OnClick='New' EndIcon='fa-regular fa-file' Variant='Variant.Filled' Color='Color.Tertiary' Size='Size.Small'>new</MudButton>
                        </div>
                        <div class="voucher-date">
                            <MudText Class='d-flex align-center justify-center pa-2 font-bold font14'>@voucherDate.ToShortDateString()</MudText>
                        </div>
                        <div class="voucher-payee d-flex align-center pa-2 gap-2">
                            <MudText Class='txt-uppercase font-bold font10'>Pay To:</MudText>
                            <MudTextField Class='font14-txtfield txt-top-0' @bind-Value='GlobalClass.voucher.PayeeName'
                            @onclick='(() => Lookup("payee"))' ReadOnly> </MudTextField>
                        </div>
                        <div class="voucher-status d-flex align-center justify-start gap-2 pa-2">
                            <MudText Class='txt-uppercase font-bold font10'>Voucher No.:</MudText>
                            <MudSpacer />
                            @if (GlobalClass.voucher.Id == 0)
                            {
                                <MudChip Class='chip-radius-5 txt-uppercase font-bold font10' Color='Color.Error' Size='Size.Small'>Auto Generated</MudChip>
                            }
                            else
                            {
                                <MudChip Class='chip-radius-5 txt-uppercase font-bold font10' Color='Color.Default' Size='Size.Small'>@GlobalClass.voucher.ControlNumber</MudChip>
                            }
                            <MudSpacer />
                        </div>
                        <div class="voucher-rfp d-flex align-center pa-2 gap-2 overflowx-auto overflowy-hidden">
                            <MudText Class='wspace-nowrap font10 font-bold txt-uppercase'>RFP:</MudText>
                            <MudTooltip Text='Add RFP'>
                                <MudIconButton OnClick='(()=> AddRFP())' Icon="@Icons.Material.Filled.Add" aria-label="Add RFP" Color='Color.Info' Size='Size.Small' />
                            </MudTooltip>
                            @foreach (var item in GlobalClass.voucher.VoucherRFP)
                            { 
                                <MudChip OnClose='(()=> RemoveVoucherRFP(item))' Size='Size.Small'>@item.RFPControlNumber</MudChip>
                            }
                        </div>
                        <div class="voucher-desc d-flex align-center pa-2 gap-2">
                            <MudText Class='txt-uppercase font-bold font10'>Description:</MudText>
                            <MudTextField Class='txtfield-overflow-ellipsis font14-txtfield txt-top-0' @bind-Value=GlobalClass.voucher.Description />
                        </div>
                        <div class="voucher-remarks d-flex align-center pa-2 gap-2">
                            <MudText Class='txt-uppercase font-bold font10'>Remarks:</MudText>
                            <MudTextField Class='txtfield-overflow-ellipsis font14-txtfield txt-top-0' @bind-Value=GlobalClass.voucher.Remarks />
                        </div>
                        <div class="voucher-details d-flex">
                            <div class='d-flex flex-column border-thin-right'>
                                <div class='pa-2'>
                                    <MudText Class='wspace-nowrap font10 font-bold txt-uppercase'>Period:</MudText>
                                    <MudDatePicker Class='txt-top-0 font14-txtfield txtfield-right' bind-Date='GlobalClass.voucher.Period'
                                    IconSize='Size.Small'></MudDatePicker>
                                </div>
                                <div class='pa-2'>
                                    <MudText Class='wspace-nowrap font10 font-bold txt-uppercase'>Prev. Period:</MudText>
                                    <MudDatePicker Class='txt-top-0 font14-txtfield txtfield-right' bind-Date='GlobalClass.voucher.PeriodFrom'
                                    IconSize='Size.Small'></MudDatePicker>
                                </div>
                                <div class='d-flex align-center flex-column justify-end pa-2 gap-2 wspace-nowrap'>
                                    <MudText Class='wspace-nowrap font12 font-bold txt-uppercase align-self-start'>Total Amount:</MudText>
                                    @if (GlobalClass.voucher.TotalAmount > 0)
                                    {
                                        <MudText Class='font-bold align-self-end' Color='Color.Tertiary' Typo='Typo.body2'>
                                        @Extensions.GetEnumDescription(Enums.BankCurrency.PhilippinePeso) @GlobalClass.voucher.TotalAmount.ToString("N2")
                                        </MudText>
                                    }
                                    else
                                    {
                                        <MudText Class='font-bold align-self-end' Typo='Typo.body2' Color='Color.Error'>
                                        @Extensions.GetEnumDescription(Enums.BankCurrency.PhilippinePeso) @GlobalClass.voucher.TotalAmount.ToString("N2")
                                        </MudText>
                                    }
                                </div>
                            </div>
                            <MudTable Class='small-toolbar-gutter flex-1 overflow-auto' Items='GlobalClass.voucher.VoucherDetails' Bordered='true' Striped='true'
                            Dense='true' Elevation='0' FixedHeader='true' Height='auto' Square>
                                <ToolBarContent>
                                    <div class='d-flex flex-1 align-center gap-2'>
                                        <MudText Class='txt-uppercase font-bold font12'>Voucher Detail</MudText>
                                        <MudSpacer />
                                        <MudTooltip Text='Add Detail'>
                                            <MudButton OnClick='(()=> AddNew())' StartIcon="@Icons.Filled.Add" aria-label="add"  Color='Color.Info' Size='Size.Small'>Add Detail</MudButton>
                                        </MudTooltip>
                                        <MudTooltip Text='Reset Details'>
                                            <MudButton OnClick='ResetVoucherTable' StartIcon="@Icons.Filled.Refresh" aria-label="add" Color='Color.Warning' Variant='Variant.Text' Size='Size.Small'>
                                                Reset
                                            </MudButton>
                                        </MudTooltip>
                                    </div>
                                </ToolBarContent>
                                <ColGroup>
                                    <col />
                                </ColGroup>
                                <HeaderContent>
                                    <MudTh Class='wspace-nowrap customheader-1'></MudTh>
                                </HeaderContent>
                                <RowTemplate>
                                    <MudTd>
                                        <MudCard Class='d-flex'>
                                            <div class='d-flex flex-column gap-2 pa-2 border-thin-right'>
                                                <MudTooltip Text='Add Details'>
                                                    <MudIconButton OnClick='(() => EditRow(context))' Icon='@Icons.Filled.Edit' Color='Color.Tertiary' Size='Size.Small' />
                                                </MudTooltip>
                                                <MudTooltip Text='Remove Detail'>
                                                    <MudIconButton OnClick='(() => RemoveRFP(context))' Icon='@Icons.Filled.RemoveCircle' Color='Color.Error' Size='Size.Small' />
                                                </MudTooltip>
                                            </div>
                                            <MudCardContent Class='d-flex flex-column pa-2'>
                                                <div class='d-flex flex-column pa-2'>
                                                    <MudText Class='txt-uppercase font-bold font10'>Charging</MudText>
                                                    <MudText Class='font-bold font14'>@context.ProjectName</MudText>
                                                </div>
                                                <div class='d-flex gap-1'>
                                                    @if (context.ExpenseId != 0)
                                                    {
                                                        <MudChip Class='chip-radius-5 txt-uppercase font-bold font10' Color='Color.Dark' Size='Size.Small'>
                                                            @context.ExpenseName
                                                        </MudChip>
                                                    }
                                                    @if (context.DivisionId != 0)
                                                    {
                                                        <MudChip Class='chip-radius-5 txt-uppercase font-bold font10' Color='Color.Dark' Size='Size.Small'>
                                                            @context.DivisionName
                                                        </MudChip>
                                                    }
                                                
                                                </div>
                                                <div class='d-flex flex-column pa-2'>
                                                    <MudText Class='txt-uppercase font-bold font10'>
                                                        Description:
                                                        <MudToggleIconButton @bind-Toggled="@context.showDesc"
                                                        Icon="@Icons.Filled.KeyboardArrowDown" Color="@Color.Info" Title="Off" Size='Size.Small'
                                                        ToggledIcon="@Icons.Filled.KeyboardArrowUp" ToggledColor="@Color.Secondary" ToggledTitle="On" ToggledSize='Size.Small' />
                                                    </MudText>
                                                    <MudText Class='transition-05s-ease pa-2 font12 rounded bgc-f2f2f2 overflow-hidden' style='@(context.showDesc ? "height:100%" : "height:30px")'>@context.Description</MudText>
                                                </div>
                                                <div class='wspace-nowrap d-flex align-start gap-2 pa-2'>
                                                    <MudText Class='pl-2 txt-uppercase font-bold font12'>
                                                        Amount :
                                                    </MudText>
                                                    @if (context.Amount <= 0)
                                                    {
                                                        <MudText Class='font-bold font12' Color='Color.Error'>
                                                            @Extensions.GetEnumDescription(Enums.BankCurrency.PhilippinePeso) @context.Amount.ToString("N2")
                                                        </MudText>
                                                    }
                                                    else
                                                    {
                                                        <MudText Class='font-bold font12' Color='Color.Tertiary'>
                                                            @Extensions.GetEnumDescription(Enums.BankCurrency.PhilippinePeso) @context.Amount.ToString("N2")
                                                        </MudText>
                                                    }
                                                </div>
                                            </MudCardContent>
                                        </MudCard>
                                    </MudTd>
                                </RowTemplate>
                            </MudTable>
                        </div>
                        <div class="voucher-signatories d-flex align-center justify-space-between pa-2 gap-2">
                            <div class='d-flex align-center gap-2 width25'>
                                @if(preparedByImg.Count() == 0)
                                {
                                    <MudAvatar>
                                        <MudIcon Icon='@Icons.Filled.AccountCircle' Size='Size.Large' />
                                    </MudAvatar>
                                }
                                else
                                {
                                    <MudAvatar Image='@($"data:image/png;base64, {Convert.ToBase64String(preparedByImg)}")' Size='Size.Medium' />
                                }
                                <MudTextField Class='txt-top-0 txt-search-overflow font14-txtfield font-bold' @bind-Value=GlobalClass.voucher.PreparedByName HelperText='PREPARED BY' 
                                @onclick='(()=> Lookup("prepare"))' ReadOnly></MudTextField>
                            </div>
                            @* <MudSpacer /> *@
                            <div class='d-flex align-center gap-2 width25'>
                                @if(verifiedByImg.Count() == 0)
                                {
                                    <MudAvatar>
                                        <MudIcon Icon='@Icons.Filled.AccountCircle' Size='Size.Large' />
                                    </MudAvatar>
                                }
                                else
                                {
                                    <MudAvatar Image='@($"data:image/png;base64, {Convert.ToBase64String(verifiedByImg)}")' Size='Size.Medium' />
                                }
                                <MudTextField Class='txt-top-0 txt-search-overflow font14-txtfield font-bold' @bind-Value=GlobalClass.voucher.VerifiedByName HelperText='VERIFIED BY' 
                                @onclick='(()=> Lookup("verify"))' ReadOnly></MudTextField>
                            </div>
                             @* <MudSpacer /> *@
                            <div class='d-flex align-center gap-2 width25'>
                                @if(approvedByImg.Count() == 0)
                                {
                                    <MudAvatar>
                                        <MudIcon Icon='@Icons.Filled.AccountCircle' Size='Size.Large' />
                                    </MudAvatar>
                                }
                                else
                                {
                                    <MudAvatar Image='@($"data:image/png;base64, {Convert.ToBase64String(approvedByImg)}")' Size='Size.Medium' />
                                }
                                <MudTextField Class='txt-top-0 txt-search-overflow font14-txtfield font-bold width50' @bind-Value='GlobalClass.voucher.ApprovedByName' HelperText='APPROVED BY' 
                                @onclick='(() => Lookup("approve"))' ReadOnly></MudTextField>
                            </div>
                        </div>
                    </div>
                </MudCardContent>
                <MudCardActions>
                    <MudSpacer />
                    <MudButton Variant="Variant.Text" Size='Size.Medium'>Cancel</MudButton>
                    <MudButton OnClick='(()=> SaveVoucher())' Variant="Variant.Filled" Color='Color.Primary' Size='Size.Medium'>Save voucher</MudButton>
                </MudCardActions>
            </MudCard>
        </MudContainer>
    }
</div>

@code{
    #region Properties
    private List<VoucherDetailModel> voucherDetails = new List<VoucherDetailModel>();
    private DivisionModel selectedDivision = new DivisionModel();
    private Project selectedProject = new Project();
    private ExpenseLineModel selectedExpLine = new ExpenseLineModel();
    private Project payee = new Project();
    private DateTime voucherDate = DateTime.Now.Date;
    private bool dataFetched, openEditDrawer, reqProj, reqExp, reqDiv, reqDebt, reqCred, reqAmt;
    private byte[] preparedByImg= new byte[]{}, verifiedByImg = new byte[]{}, approvedByImg = new byte[]{};
    private VoucherDetailModel selectedVoucherDetailModel = new VoucherDetailModel();

    #endregion

    #region Methods

    protected override async Task OnInitializedAsync()
    {
        GlobalClass.pageTitle = "Voucher entry";
        while (GlobalClass.currentUserAccount == null)
            await Task.Delay(1);

        Task t = Task.WhenAll(InitializedComponent());
        await t;
        if (t.Status == TaskStatus.RanToCompletion)
            CompletedFetch();
    }
    async Task InitializedComponent()
    {
        await Task.Delay(1);
        navigationManager.LocationChanged += OnLocationChanged;
        if (GlobalClass.voucher == null || GlobalClass.voucher.Id == 0)
        {
            GlobalClass.voucher = new VoucherModel();
            GlobalClass.voucher.PreparedByName = GlobalClass.currentUserAccount.EmployeeName;
            GlobalClass.voucher.PreparedById = GlobalClass.currentUserAccount.EmployeeId;
            preparedByImg = GlobalClass.currentUserAccount.Picture;
            voucherDate = DateTime.Now.Date;
        }
        else
        {
           await DisplayOtherProperties();
        }
    }

    void CompletedFetch()
    {
        dataFetched = true;
        Task.Run(StateHasChanged);
    }

    #region Location Changed
    private void OnLocationChanged(object? sender, LocationChangedEventArgs args)
    {
        GlobalClass.voucher = new();
        Dispose();
    }


    public void Dispose()
    {
        navigationManager.LocationChanged -= OnLocationChanged;
    }

    #endregion

    #region Save Voucher

    private void SaveVoucher()
    {
      GlobalClass.forPrintingOrSaveVoucher = MapProperties();
      navigationManager.NavigateTo($"/voucher/print");
    }

    #endregion

    #region Add New Voucher Details

    private void AddNew()
    {
        var temp = 1;
        GlobalClass.voucher.VoucherDetails.Add(new VoucherDetailModel());
        foreach (var item in GlobalClass.voucher.VoucherDetails)
        {
            item.TemporaryId = temp++;
        }
    }

    #endregion

    #region DisplayOtherProperties

    private async Task DisplayOtherProperties()
    {
        voucherDate = GlobalClass.voucher.VoucherDate;
        payee.ProjectId = GlobalClass.voucher.PayeeId;
        payee.ProjectCategoryId = GlobalClass.voucher.PayeeCategoryId;
        payee.ProjectName = GlobalClass.voucher.PayeeName;

        preparedByImg = await GetEmployeeImg(GlobalClass.voucher.PreparedById);
        verifiedByImg = await GetEmployeeImg(GlobalClass.voucher.VerifiedById);
        approvedByImg = await GetEmployeeImg(GlobalClass.voucher.ApprovedById);
    }

    #endregion

    #region Map Properties

    VoucherModel MapProperties()
    {
        GlobalClass.voucher.VoucherDate = voucherDate;
        GlobalClass.voucher.PayeeId = payee.ProjectId;
        GlobalClass.voucher.PayeeCategoryId = payee.ProjectCategoryId;
        GlobalClass.voucher.UserId = GlobalClass.currentUserAccount.EmployeeId;
        GlobalClass.voucher.IsActive = true;

        GlobalClass.voucher.AccountingStatusId = GlobalClassList.accountingStatusList
        .Where(x => x.StatusEnumCategoryId == Enums.AccountingStatusEnumCategory.VG)
        .Select(x => x.Id)
        .FirstOrDefault();

        if(GlobalClass.voucher.Id == 0)
          GlobalClass.voucher.Activity = "Add Voucher";
        else
          GlobalClass.voucher.Activity = "Update Voucher";

        if(GlobalClass.voucher.RemovedVoucherDetails.Count() != 0)
        {
          GlobalClass.voucher.RemovedVoucherDetails.ForEach(x=>
          {
            GlobalClass.voucher.Activity += " and removed voucher details";
          });
        }

        return GlobalClass.voucher;
    }

    #endregion

    #region Employee Lookup

    private async Task Lookup(string role)
    {
        var parameters = new DialogParameters();
        string dialogTitle = role == "payee" ? "Payee Look Up" : "Employee Look Up";
        Enums.LookUpType lookUpType = role == "payee" ? Enums.LookUpType.Project : Enums.LookUpType.Employee;
        parameters.Add("dialogTitle", dialogTitle);
        parameters.Add("buttonText", "Select");
        parameters.Add("color", Color.Success);
        parameters.Add("lookUpType", lookUpType);
        var options = new DialogOptions()
        {
            CloseButton = false,
            MaxWidth = MaxWidth.Small,
            FullWidth = true,
            NoHeader = false,
            DisableBackdropClick = true
        };
        var resultDialog = await dialogService.Show<Shared.Dialogs.LookUpDialog.GlobalGenericLookup>(dialogTitle, parameters, options).Result;
        if (!resultDialog.Cancelled)
        {
            if (lookUpType == Enums.LookUpType.Employee) {
                var employee = (UserAccount)resultDialog.Data;
                if (role == "prepare")
                    PreparedbyEmployee(employee);
                if (role == "verify")
                    VerifiedbyEmployee(employee);
                if (role == "approve")
                    ApprovedbyEmployee(employee);
            }
            else if (role == "payee")
                PayeeEmployee((Project)resultDialog.Data);
            StateHasChanged();
        }
    }
    private void PreparedbyEmployee(UserAccount employee)
    {
        GlobalClass.voucher.PreparedById = employee.EmployeeId;
        GlobalClass.voucher.PreparedByName = employee.EmployeeName;
        preparedByImg = employee.Picture;
    }
    private void VerifiedbyEmployee(UserAccount verify)
    {
        GlobalClass.voucher.VerifiedById = verify.EmployeeId;
        GlobalClass.voucher.VerifiedByName = verify.EmployeeName;
        verifiedByImg = verify.Picture;
    }
    private void ApprovedbyEmployee(UserAccount approve)
    {
        GlobalClass.voucher.ApprovedById = approve.EmployeeId;
        GlobalClass.voucher.ApprovedByName = approve.EmployeeName;
        approvedByImg = approve.Picture;
    }

    private void PayeeEmployee(Project payee)
    {
        GlobalClass.voucher.PayeeId = payee.ProjectId;
        GlobalClass.voucher.PayeeName = payee.ProjectName;
    }

    #endregion

    #region Voucher Details Lookup
    private async Task VoucherDetailLookups(Enums.LookUpType lookUpType, VoucherDetailModel voucherDetail)
    {
        var parameters = new DialogParameters();
        string dialogTitle = "";
        if(lookUpType == Enums.LookUpType.Division)
            dialogTitle = "Division";
        if(lookUpType == Enums.LookUpType.Project)
            dialogTitle = "Name / Project / Equip";
        if(lookUpType == Enums.LookUpType.ExpLine)
            dialogTitle = "Expense";
            
        parameters.Add("dialogTitle", dialogTitle);
        parameters.Add("buttonText", "Select");
        parameters.Add("color", Color.Success);
        parameters.Add("lookUpType", lookUpType);
        var options = new DialogOptions()
        {
            CloseButton = false,
            MaxWidth = MaxWidth.Small,
            FullWidth = true,
            NoHeader = false,
            DisableBackdropClick = false
        };
        var resultDialog = await dialogService.Show<Shared.Dialogs.LookUpDialog.GlobalGenericLookup>(dialogTitle, parameters, options).Result;
        if (!resultDialog.Cancelled)
        {
            if (lookUpType == Enums.LookUpType.Division)
            {
                selectedDivision = (DivisionModel)resultDialog.Data;
                AddDivision(voucherDetail);
            }
            if (lookUpType == Enums.LookUpType.Project)
            {
                selectedProject = (Project)resultDialog.Data;
                AddProjectLine(voucherDetail);
            }
            if (lookUpType == Enums.LookUpType.ExpLine)
            {
                selectedExpLine = (ExpenseLineModel)resultDialog.Data;
                AddExpense(voucherDetail);
            }
        }
    }

    #endregion

    #region Add RFP

    private async Task AddRFP()
    {
        var parameters = new DialogParameters();
        string dialogTitle = "Request for payments";
        parameters.Add("dialogTitle", dialogTitle);
        parameters.Add("buttonText", "Select");
        parameters.Add("color", Color.Success);
        parameters.Add("lookUpType", Enums.LookUpType.RFPVoucher);
        var options = new DialogOptions()
        {
            CloseButton = false,
            MaxWidth = MaxWidth.Large,
            FullWidth = true,
            NoHeader = false,
            DisableBackdropClick = true
        };
        var resultDialog = await dialogService.Show<Shared.Dialogs.GlobalRFPLiquidationLookUp.GlobalRFPLiquidationLookUp>(dialogTitle, parameters, options).Result;
        if (!resultDialog.Cancelled)
        {
            foreach (var item in GlobalClass.voucher.VoucherDetails)
                Console.WriteLine(item.ProjectId);
            StateHasChanged();
        }
    }

    #endregion

    #region Add Division

    private void AddDivision(VoucherDetailModel voucherDetail)
    {

        if (voucherDetail.Id == 0)
        {
            GlobalClass.voucher.VoucherDetails.Where(x => x.TemporaryId == voucherDetail.TemporaryId).ToList().ForEach(x =>
            {
                x.DivisionId = selectedDivision.Id;
                x.DivisionName = selectedDivision.divisionName;
            });

        }
        else
        {
            GlobalClass.voucher.VoucherDetails.Where(x => x.Id == voucherDetail.Id).ToList().ForEach(x =>
            {
                x.DivisionId = selectedDivision.Id;
                x.DivisionName = selectedDivision.divisionName;
            });
        }
        StateHasChanged();
    }

    #endregion

    #region Add Project

    private void AddProjectLine(VoucherDetailModel voucherDetail)
    {
        if (voucherDetail.Id == 0)
        {
            GlobalClass.voucher.VoucherDetails.Where(x => x.TemporaryId == voucherDetail.TemporaryId).ToList().ForEach(x =>
            {
                x.ProjectId = selectedProject.ProjectId;
                x.ProjectName = selectedProject.ProjectName;
                x.ProjectCategoryId = selectedProject.ProjectCategoryId;
            });

        }
        else
        {
            GlobalClass.voucher.VoucherDetails.Where(x => x.Id == voucherDetail.Id).ToList().ForEach(x =>
            {
                x.ProjectId = selectedProject.ProjectId;
                x.ProjectName = selectedProject.ProjectName;
                x.ProjectCategoryId = selectedProject.ProjectCategoryId;
            });
        }
        StateHasChanged();
    }

    #endregion

    #region Add Expense

    private void AddExpense(VoucherDetailModel voucherDetail)
    {


        if (voucherDetail.Id == 0)
        {
            GlobalClass.voucher.VoucherDetails.Where(x => x.TemporaryId == voucherDetail.TemporaryId).ToList().ForEach(x =>
            {
                x.ExpenseId = selectedExpLine.Id;
                x.ExpenseName = selectedExpLine.ExpenseName;
            });

        }
        else
        {
            GlobalClass.voucher.VoucherDetails.Where(x => x.Id == voucherDetail.Id).ToList().ForEach(x =>
            {
                x.ExpenseId = selectedExpLine.Id;
                x.ExpenseName = selectedExpLine.ExpenseName;
            });
        }
        StateHasChanged();

    }

    #endregion

    #region Payee Lookup

    private async void PayeeLookUp()
    {
        var parameters = new DialogParameters();
        string dialogTitle = "Payee Look Up";
        parameters.Add("dialogTitle", dialogTitle);
        parameters.Add("buttonText", "Select");
        parameters.Add("color", Color.Success);
        parameters.Add("lookUpType", Enums.LookUpType.Project);
        var options = new DialogOptions()
        {
            CloseButton = false,
            MaxWidth = MaxWidth.Small,
            FullWidth = true,
            NoHeader = false,
            DisableBackdropClick = false
        };
        var resultDialog = await dialogService.Show<Shared.Dialogs.LookUpDialog.GlobalGenericLookup>(dialogTitle, parameters, options).Result;
        if (!resultDialog.Cancelled)
        {
            payee = (Project)resultDialog.Data;
            StateHasChanged();
        }
    }

    #endregion

    #region Remove RFP Voucher
    private async void RemoveRFP(VoucherDetailModel voucherDetail)
    {
      if(voucherDetail.Id != 0)
      {
        var parameters = new DialogParameters();
        string contentText = "Voucher details";
        string dialogTitle = "Remove " + contentText;
        parameters.Add("contentText", contentText);
        parameters.Add("actionMode", Enums.ActionMode.Delete);
        var options = new DialogOptions()
        {
            CloseButton = false,
            MaxWidth = MaxWidth.ExtraSmall,
            FullWidth = true,
            NoHeader = false,
            DisableBackdropClick = true
        };
        var resultDialog = await dialogService.Show<Shared.Dialogs.GenericPromptDialogs.GenericPrompt>(dialogTitle, parameters, options).Result;
        if(!resultDialog.Cancelled)
        {
          voucherDetail.IsActive = false;
          GlobalClass.voucher.RemovedVoucherDetails.Add(voucherDetail);
          GlobalClass.voucher.VoucherDetails = GlobalClass.voucher.VoucherDetails.Where(x=>x.IsActive == true).ToList();
        }
      }
      else
      {
          voucherDetail.IsActive = false;
          GlobalClass.voucher.RemovedVoucherDetails.Add(voucherDetail);
          GlobalClass.voucher.VoucherDetails = GlobalClass.voucher.VoucherDetails.Where(x=>x.IsActive == true).ToList();
      }
      GlobalClass.voucher.TotalAmount = GlobalClass.voucher.VoucherDetails.Sum(x=>x.Amount);
      StateHasChanged();
      
    }

    #endregion

    #region Remove RFP 

    private void RemoveVoucherRFP(VoucherRFPModel voucherRFP)
    {
      voucherRFP.IsActive = false;
      GlobalClass.voucher.VoucherRFP.Remove(voucherRFP);
      GlobalClass.voucher.RemovedVoucherRFP.Add(voucherRFP);
      StateHasChanged();
    }

    #endregion

    #region Get Employee Image
    private async Task<byte[]> GetEmployeeImg(long employeeId)
    {
        var employeeDetail = await globalService.GetEmployeeById(employeeId, GlobalClass.token);
        return employeeDetail.Picture;
    }
    #endregion

    #region Reset Voucher Detail Table
    private void ResetVoucherTable()
    {
        GlobalClass.voucher.VoucherDetails = new List<VoucherDetailModel>();
    }
    #endregion

    #region Edit Row
    private void EditRow(VoucherDetailModel model)
    {
        Console.WriteLine(model.ProjectId);
        selectedVoucherDetailModel = new VoucherDetailModel();
        selectedVoucherDetailModel = model;
        if (!openEditDrawer)
            openEditDrawer = !openEditDrawer;
    }
    #endregion

    #region Save Entry Changes
    private void SaveEntryChanges()
    {
        if(!ValidateEntries()) {
            Extensions.ShowAlert("Please complete required fields", Variant.Filled, snackbarService, Severity.Error);
            return;
        }
        openEditDrawer = !openEditDrawer;
    }
    #endregion

    #region  Validate Entries
    private bool ValidateEntries()
    {
        ResetEntryValidations();
        if (selectedVoucherDetailModel.ProjectId == 0)
            reqProj = true;
        if (selectedVoucherDetailModel.ExpenseId == 0)
            reqExp = true;
        if (selectedVoucherDetailModel.DivisionId == 0)
            reqDiv = true;
        if (reqProj || reqExp || reqDiv)
            return false;
        return true;
    }
    #endregion

    #region Reset Entry Validations
    private void ResetEntryValidations()
    {
        reqProj = false;
        reqExp = false;
        reqDiv = false;
    }
    #endregion

    #region Clear Entry Changes
    private void ClearChanges()
    {
        openEditDrawer = !openEditDrawer;
        ResetEntryValidations();
    }
    #endregion

    #region New Voucher Entry
    public void New()
    {
        Console.WriteLine("new");
        GlobalClass.voucher = new VoucherModel();
        @* MapDefaultDetails();
        showReport = false; *@
    }
    #endregion

    #endregion
}