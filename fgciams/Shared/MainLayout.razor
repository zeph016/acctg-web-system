@inherits LayoutComponentBase

@inject IAccountingStatusService accountingStatusService
@inject IDivisionService divisionService
@inject IUserAccountService userAccountService
@inject IModeOfPaymentService modeOfPaymentService
@inject IBillingDocumentService billingDocumentService
@inject IBankService bankService
@inject IRequestTypeService requestTypeService
@inject IPayeeService payeeService
@inject IPayeeCategoryService payeeCategoryService
@inject IProjectChargingLineService projectChargingService
@inject ISubContractorCompanyService subContractorCompanyService
@inject ISubConGeneralInformationService subConGeneralInformationService
@inject ISubContractorPositionService subConPositionService
@inject IRequestForPaymentService requestForPaymentService
@inject IPettyCashService pettyCashService
@inject ILiquidationService liquidationService
@inject IJSRuntime jsRuntimeService
@inject Blazored.LocalStorage.ILocalStorageService localStorageService
@inject NavigationManager navigationManager
@inject IDialogService dialogService
@inject IExpenseLineService expenseLineService
@inject IAccountTypeService accountTypeService
@inject IAccountingLineService accountLineService
@inject IAccountLineTypeService accountLineTypeService
@inject ITermsOfPaymentService termsOfPaymentService
@inject IMuniCityService muniCityService
@inject ITaxCodeService taxCodeService
@inject IGlobalService GlobalService
@inject IConfiguration config
@inject ISnackbar Snackbar
@inject ICheckService checkService
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject IScopeOfWorkService scopeOfWorkService
@inject ICollectionService collectionService
@inject IVoucherService voucherService

@inject ApplicationState AppState
@implements IDisposable

<MudThemeProvider/>
<MudDialogProvider/>
<MudSnackbarProvider/>

<MudLayout>
    <MudAppBar Class='topbar' Fixed='true' Elevation='0' Dense='true'>
        <AuthorizeView>
            <Authorized>
                <MudText Class='topbar__tbxpagetitle' Style='@updateStyleStr' >@GlobalClass.pageTitle</MudText>
                <MudSpacer/>
                <MudBadge Content='0' Origin='Origin.TopLeft' Color='Color.Error' Overlap='true' style='@drawerStyleStr'>
                    <MudIconButton Icon="@Icons.Material.Filled.Notifications" Color="Color.Default" Size='Size.Small'/>
                </MudBadge>
                <div class='usercp'>
                    <MudExpansionPanels Class='usercp__expansionpanel-header' DisableBorders='userCPborderVal' Elevation='userCPElevationVal'> 
                        <MudExpansionPanel Class='usercp__expansionpanel' IsExpandedChanged='ToggleUserCP' Style='@userCPExpPanelStyleStr'>
                            <TitleContent>
                                <div class='d-flex usercp__infocontainer' style='@userCPInfoStyleStr'>
                                    @if(!dataFetched) 
                                    {
                                        <MudSkeleton class='usercp__skeletonavatar' SkeletonType='SkeletonType.Circle' Animation='Animation.Wave' Height='40px' Width='40px'/>
                                        <div>
                                            <MudSkeleton SkeletonType='SkeletonType.Rectangle' Animation='Animation.Wave' Height='40px' Width='160px'/>
                                        </div>
                                    }
                                    else
                                    {
                                        <MudAvatar Class='usercp__avatar' Image='@($"data:image/png;base64, {Convert.ToBase64String(@GlobalClass.currentUserAccount.Picture)}")'/>
                                        <div>
                                            <MudText Class='usercp__lblusername'>@GlobalClass.currentUserAccount.FirstName</MudText>
                                            <MudText Class='usercp__lbldesignation'>@Extensions.GetEnumDescription(GlobalClass.currentUserAccount.AccessLevel)</MudText>
                                        </div>
                                    }
                                </div>
                            </TitleContent>
                            <ChildContent>
                                <div><hr class='horizline'></div>
                                <MudContainer Class='d-flex usercp__btncontainer' Fixed='false' MaxWidth='MaxWidth.ExtraExtraLarge'>
                                    <MudButton Class='usercp__btnsettings' Href='/configurations' Variant='Variant.Text' StartIcon='@Icons.Material.Filled.Settings' Size='Size.Medium'>Settings</MudButton>
                                    <MudSpacer/>
                                    <MudButton Class='usercp__btntohub' OnClick='() => LogOut(false)' Variant='Variant.Text' StartIcon='@Icons.Material.Filled.ExitToApp' Size='Size.Medium'>Back to Hub</MudButton>
                                </MudContainer>
                                <div><hr class='horizline'></div>
                                <MudButton Class='usercp__btnlogout' OnClick='() => LogOut(true)' Variant='Variant.Filled' StartIcon='@Icons.Material.Filled.Logout' Color='Color.Error'>Log Out</MudButton>
                            </ChildContent>
                        </MudExpansionPanel>
                    </MudExpansionPanels>
                </div>
            </Authorized>
        </AuthorizeView>
    </MudAppBar>
    <MudDrawer Class='main-drawer' @bind-Open="_drawerOpen" Fixed='true' Elevation='0' Variant='@DrawerVariant.Mini' OpenMiniOnHover='false'>
        <MudDrawerHeader Class='drawer-header'>
            <MudIconButton OnClick="@((e) => DrawerToggle())" Icon="@Icons.Material.Filled.Menu" Color="Color.Inherit" Edge="Edge.Start" />
            <MudText Class='drawer-header__header-text text-center'>ACCOUNTING INTEGRATED</MudText>
        </MudDrawerHeader>
        <AuthorizeView>
            <Authorized>
                <MudNavMenu>
                    <MudNavLink Href='/dashboard' Match="NavLinkMatch.All" Icon="@Icons.Material.Filled.Dashboard">
                        <MudText Class='fweight500 fontpad-t-2px' Typo='Typo.body2'>DASHBOARD</MudText>
                    </MudNavLink>    
                    <MudNavGroup Title='PETTY CASH' Icon='fa-solid fa-coins' HideExpandIcon style='@HidePettyCash'>
                        <MudNavLink Href='/petty-cash' Match="NavLinkMatch.All" Icon="@Icons.Material.Filled.LibraryAddCheck" style='@HideEntry'>PETTY CASH ENTRY</MudNavLink>
                        <MudNavLink Href='/petty-cash/list' Match="NavLinkMatch.All" Icon="@Icons.Material.Filled.ViewList" >PETTY CASH LIST</MudNavLink>
                    </MudNavGroup>
                    <MudNavGroup Title='LIQUIDATION' Icon='@Icons.Material.Filled.ReceiptLong' HideExpandIcon style='@HideLiquidation'>
                        <MudNavLink Href='/liquidation' Match="NavLinkMatch.All" Icon="@Icons.Material.Filled.LibraryAddCheck" style='@HideEntry'>LIQUIDATION ENTRY</MudNavLink>
                        <MudNavLink Href='/liquidation/list' Match="NavLinkMatch.All" Icon="@Icons.Material.Filled.ViewList">LIQUIDATION LIST</MudNavLink>
                    </MudNavGroup>
                    <MudNavGroup Title='REQUEST FOR PAYMENT' Icon='@Icons.Material.Filled.Payments' HideExpandIcon style='@HideRFP'>
                        <MudNavLink Href='/request-payment/create' Match="NavLinkMatch.All" Icon="@Icons.Material.Filled.LibraryAddCheck"style='@HideEntry'>RFP ENTRY</MudNavLink>
                        <MudNavLink Href='/request-payment/list' Match="NavLinkMatch.All" Icon="@Icons.Material.Filled.ViewList">RFP LIST</MudNavLink>
                    </MudNavGroup>
                    <MudNavGroup Title='VOUCHER' Icon='fa-solid fa-receipt' HideExpandIcon style='@HideVoucher'>
                        <MudNavLink Href='/voucher' Match="NavLinkMatch.All" Icon="@Icons.Material.Filled.LibraryAddCheck" style='@HideEntry'>VOUCHER ENTRY</MudNavLink>
                        <MudNavLink Href='/voucher/list' Match="NavLinkMatch.All" Icon="@Icons.Material.Filled.ViewList" >VOUCHER LIST</MudNavLink>
                </MudNavGroup>
                    <MudNavGroup Title='CHECK WRITER' Icon='@Icons.Material.Filled.CreditScore' HideExpandIcon style='@HideVoucher'>
                        <MudNavLink Href='/check/create' Match="NavLinkMatch.All" Icon="@Icons.Material.Filled.LibraryAddCheck" style='@HideEntry'>CHECK ENTRY</MudNavLink>
                        <MudNavLink Href='/check/list' Match="NavLinkMatch.All" Icon="@Icons.Material.Filled.ViewList" style='@HideEntry'>CHECK LIST</MudNavLink>
                        <MudNavLink Href='/debit/create' Match="NavLinkMatch.All" Icon="@Icons.Material.Filled.LibraryAddCheck" style='@HideEntry'>DEBIT ENTRY</MudNavLink>
                        <MudNavLink Href='/debit/list' Match="NavLinkMatch.All" Icon="@Icons.Material.Filled.ViewList" style='@HideEntry'>DEBIT LIST</MudNavLink>
                    </MudNavGroup>
                    <MudNavGroup Title='VOUCHER ROUTE' Icon='fa-solid fa-route' HideExpandIcon style='@HideVoucher'>
                        <MudNavLink Href='/voucher/route/list' Match="NavLinkMatch.All" Icon="@Icons.Material.Filled.Route" style='@HideEntry'>VOUCHER ROUTING</MudNavLink>
                        <MudNavLink Href='/voucher/batch' Match="NavLinkMatch.All" Icon="@Icons.Material.Filled.LibraryAddCheck">BATCH ENTRY</MudNavLink>
                        <MudNavLink Href='/voucher/batch/list' Match="NavLinkMatch.All" Icon="@Icons.Material.Filled.ViewList" >BATCH LIST</MudNavLink>
                    </MudNavGroup>
                    <MudNavGroup Title='COLLECTIONS' Icon='icon-stack1' HideExpandIcon style='@HideVoucher'>
                        <MudNavLink Href='/collection/list' Match="NavLinkMatch.All" Icon="@Icons.Material.Filled.ViewList">COLLECTIONS</MudNavLink>
                        <MudNavLink Href='/billing/list' Match="NavLinkMatch.All" Icon="@Icons.Material.Filled.ViewList">BILLINGS</MudNavLink>
                        <MudNavLink Href='/bank-deposit/list' Match="NavLinkMatch.All" Icon="@Icons.Material.Filled.ViewList">BANK DEPOSITS</MudNavLink>
                    </MudNavGroup>
                    <MudNavGroup Title='LEDGERS' Icon='icon-book' HideExpandIcon style='@HideVoucher'>
                        <MudNavLink Href='/ar-ledger/list' Match="NavLinkMatch.All" Icon="@Icons.Material.Filled.ViewList" >AR LEDGER</MudNavLink>
                        <MudNavLink Href='/ap-ledger/list' Match="NavLinkMatch.All" Icon="@Icons.Material.Filled.ViewList" >AP LEDGER</MudNavLink>
                        <MudNavLink Href='/bank-ledger/list' Match="NavLinkMatch.All" Icon="@Icons.Material.Filled.ViewList" >BANK LEDGER</MudNavLink>
                        <MudNavLink Href='/subcon-ledger/list' Match="NavLinkMatch.All" Icon="@Icons.Material.Filled.ViewList" >SUB-CON LEDGER</MudNavLink>
                        <MudNavLink Href='/subcon-ar-ledger/list' Match="NavLinkMatch.All" Icon="@Icons.Material.Filled.ViewList" >SUB-CON AR LEDGER</MudNavLink>
                        <MudNavLink Href='/subcon-ap-ledger/list' Match="NavLinkMatch.All" Icon="@Icons.Material.Filled.ViewList" >SUB-CON AP LEDGER</MudNavLink>
                        <MudNavLink Href='/or/list' Match="NavLinkMatch.All" Icon="@Icons.Material.Filled.ViewList" >OR LISTING</MudNavLink>
                        <MudNavLink Href='/project-ledger/list' Match="NavLinkMatch.All" Icon="@Icons.Material.Filled.ViewList" >PROJECT LEDGER</MudNavLink>
                        <MudNavLink Href='/journal' Match="NavLinkMatch.All" Icon="@Icons.Material.Filled.ViewList" >JOURNAL</MudNavLink>
                    </MudNavGroup>
                </MudNavMenu>
                <MudSpacer />           
                <MudNavMenu Class='pb-2'>
                    <MudNavLink Class='pb-2' OnClick='NavigateToConfig' Match='NavLinkMatch.All' Icon='@Icons.Material.Filled.Settings'>
                        <MudText Class='fweight500 fontpad-t-2px' Typo='Typo.body2'>SETTINGS</MudText>
                    </MudNavLink>
                    @* <div class='d-flex align-center justify-center'>
                        <MudIcon Class='fa-solid fa-calculator fa-icon-center' OnClick='(() => navigationManager.NavigateTo($"/test"))'  Size='Size.Medium' />
                    </div> *@
                </MudNavMenu>
            </Authorized>
           <NotAuthorized>
                    <MudNavMenu Class='pb-2'>
                         <MudNavLink Class='txt-uppercase' Href='http://10.0.0.7:8000' Match='NavLinkMatch.All' Icon='@Icons.Material.Filled.Home'>
                            Back To Hub
                         </MudNavLink>
                    </MudNavMenu>
           </NotAuthorized>
        </AuthorizeView>
    </MudDrawer>
    <MudMainContent>
        @* <MudContainer Class='main-body' Fixed='true'>
            @Body@
        </MudContainer> *@
        <div class='main-body overflow-hidden'>
            @* <CascadingValue Value=UpdateLayout> *@
                @Body
            @* </CascadingValue> *@
        </div>
    </MudMainContent>
    <MudAppBar Class='footerbar' Fixed='true' Elevation='0' Dense='true' Bottom='true'>
        <MudText>
            v1.0.0.1-testbuild-01032023
        </MudText>
        <MudIconButton Class='footerbar__btn-hardreload' OnClick='RefreshPage' Icon='@Icons.Material.Filled.Refresh' aria-label='Refresh Page'>
        </MudIconButton>
        <MudSpacer />
        <MudText>
            <div @ref='timeElement'></div>
        </MudText>
        <MudIconButton Class='footerbar__btn-fullscreen' OnClick='ToggleFullScreen' Icon='@Icons.Material.Filled.Fullscreen' aria-label='Toggle Full Screen'>
        </MudIconButton>
    </MudAppBar>
</MudLayout>

@code {
    #region Properties
    private HubConnection signalHubConnection = default!;
    private string? systemIconSource = $"images/icons/budget.png", drawerStyleStr = "display: none;", 
    userCPExpPanelStyleStr = "background-color: #fafafa;", userCPInfoStyleStr = "width: 250px; text-overflow: ellipsis; overflow: hidden; white-space: nowrap;",
    currentUrl, HideRFP = "", HideLiquidation="", HideVoucher = "", HideConfiguration = "", HidePettyCash = "", HideEntry;
    private bool _drawerOpen, _isFullScreen, _hideExpandDrawerIcon, dataFetched, showLoadingOverlay = true, 
    userCPOpen, userCPborderVal, isConfigPage;
    private int userCPElevationVal = 0;
    ElementReference timeElement;
    EventCallback UpdateLayout => EventCallback.Factory.Create(this, UpdateAlert);
    string updateStyleStr = string.Empty;
    FilterParameter filterParameter = new FilterParameter();
    #endregion

    public override async Task SetParametersAsync(ParameterView parameters)
    {
        if(navigationManager.Uri.Contains("configurations"))
        {
            Console.WriteLine(navigationManager.Uri);
            isConfigPage = true;
            _drawerOpen = false;
        }
        else
        {
            _drawerOpen = true;
        }
        await base.SetParametersAsync(parameters);
    }
    protected override async Task OnInitializedAsync()
    {
        await LoadServerTime();
        if (GlobalClass.currentUserAccount != null)
        {
            await LoadGlobalLists();
            CheckAccessLevel();
            navigationManager.LocationChanged += OnLocationChanged;
            AppState.OnChange += StateHasChanged;
        }
        Console.WriteLine("Initialized MainLayout");
        CompletedFetch();
    }

    void CompletedFetch()
    {
        dataFetched = true;
        showLoadingOverlay = false;
        StateHasChanged();
    }

    private async Task LoadGlobalLists()
    {
        Task t = Task.WhenAll(LoadAcctgStatusList(), LoadDivisionList(), LoadPaymentModes(), 
        LoadBillingDocs(), LoadBanks(), LoadRequestTypes(),
        LoadPayees(), LoadPayeeCategories(), LoadChargingLines(),
        LoadSubContractors(), LoadSubConGenInfos(), LoadSubConPositions(), LoadNotRFPLiquidation(),
        LoadExpenseLine(), LoadAccountLineGroup(),LoadAccountType(),LoadAccountLineType(),SignalRHubConnection(),LoadCheck(),
        LoadTerms(),LoadMunicipalityCities(),LoadTaxCode(),LoadScopeOfWorkList(),LoadCollections());
        await t;
    }
    private async Task LoadScopeOfWorkList()
    {
        GlobalClassList.scopeOfWork = await scopeOfWorkService.LoadScopeOfWork(GlobalClass.token);
    }
    async Task LoadMunicipalityCities()
    {
        GlobalClassList.muniCityList = await  muniCityService.LoadMuniCity(GlobalClass.token);
    }
    async Task LoadTaxCode()
    {
        GlobalClassList.taxCodes = await taxCodeService.LoadTaxCode(new FilterParameter(){isActive=true},GlobalClass.token);
    }
    private async Task LoadCheck()
    {
      GlobalClassList.listOfChecks = await checkService.LoadCheck(new FilterParameter(){isActive=true}, GlobalClass.token);
    }
    private async Task LoadAccountType()
    {
        GlobalClassList.listOfAccountTypes = await accountTypeService.LoadAccountType(GlobalClass.token);
    }
    private async Task LoadAcctgStatusList()
    {
        GlobalClassList.accountingStatusList = await accountingStatusService.LoadAccountingStatusList(GlobalClass.token);
    }

    private async Task LoadDivisionList()
    {
        GlobalClassList.divisionList = await divisionService.LoadDivisionList(GlobalClass.token);
    }

    private async Task LoadPaymentModes()
    {
        GlobalClassList.modeOfPaymentList = await modeOfPaymentService.LoadModeOfPaymentList(GlobalClass.token);
    }

    private async Task LoadBillingDocs()
    {
        GlobalClassList.billingDocumentList = await billingDocumentService.LoadListOfBillingDocuments(GlobalClass.token);
        GlobalClassList.billingDocumentList = GlobalClassList.billingDocumentList.OrderBy(x=>x.Id).ToList();
    }

    private async Task LoadBanks()
    {
        GlobalClassList.banks = await bankService.LoadBanks(GlobalClass.token);
    }

    private async Task LoadRequestTypes()
    {
      GlobalClassList.requestTypes = await requestTypeService.LoadRequestType(GlobalClass.token);
    }

    private async Task LoadPayees()
    {
        GlobalClassList.payeeList = await payeeService.LoadPayee(GlobalClass.token);
    }

    private async Task LoadPayeeCategories()
    {
        GlobalClassList.payeeCategoryList = await payeeCategoryService.LoadListOfPayeeCategory(GlobalClass.token);
    }

    private async Task LoadChargingLines()
    {
        GlobalClassList.projectChargingLines = await projectChargingService.LoadProjectChargingLine(GlobalClass.token);
    }

    private async Task LoadSubContractors()
    {
        GlobalClassList.subContractorCompanies = await subContractorCompanyService.LoadSubContractorCompany(GlobalClass.token);
    }
    private async Task LoadExpenseLine()
    {
        GlobalClassList.expenseLineList = await expenseLineService.LoadExpenseLine(GlobalClass.token);
    }
    private async Task LoadSubConGenInfos()
    {
        GlobalClassList.subConGeneralInformations = await subConGeneralInformationService.LoadSubConGenInfo(GlobalClass.token);
    }

    private async Task LoadSubConPositions()
    {
        GlobalClassList.subContractorPositions = await subConPositionService.LoadSubContractorPosition(GlobalClass.token);
    }
    private async Task LoadNotRFPLiquidation()
    {
      GlobalClassList.LiquidationNotInRFP = await liquidationService.LiquidationNotRFP(GlobalClass.token);
    }
    private async Task LoadAccountLineGroup()
    {
      GlobalClassList.accountLineGroups = await accountLineService.LoadAccountLineGroup(GlobalClass.token);
    }
    private async Task LoadAccountLineType()
    {
      GlobalClassList.accountLineTypes = await accountLineTypeService.LoadAccountLineType(GlobalClass.token);
    }
    private async Task LoadTerms()
    {
      GlobalClassList.termsOfPayments = await termsOfPaymentService.LoadTermsOfPayment(GlobalClass.token);
      GlobalClassList.termsOfPayments = GlobalClassList.termsOfPayments.OrderBy(x => x.Id).ToList();
    }
    private async Task LoadCollections()
    {
        GlobalClassList.collectionList = await collectionService.GetCollections(filterParameter,GlobalClass.token);
    }
    private async Task LoadVouchers()
    {
        GlobalClassList.Vouchers = await voucherService.LoadVouchers(filterParameter, GlobalClass.token);
    }
    private async Task SignalRHubConnection()
    {
      try
      {
        var connection = Extensions.ConnectionBuilder(config["SignalRHub"] + "amshub");
        GlobalVariable.AMSHubConnection = connection;
        await GlobalVariable.AMSHubConnection.StartAsync();
      }
      catch (System.Exception ex)
      {
         Extensions.ShowAlert(ex.Message, Variant.Filled, Snackbar, Severity.Error);
      }
    }
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
            await jsRuntimeService.InvokeVoidAsync("startTime", timeElement);
    }

    private async void LogOut(bool isLogOut)
    {
        var parameters = new DialogParameters();
        string dialogTitle = !isLogOut ? "To Hub" : "Log Out";
        string contentText = !isLogOut ? "Return to Hub?" : "Log Out from Accounting Management System?";
        string buttonText = !isLogOut ? "To Hub" : "Log Out";
        parameters.Add("dialogTitle", dialogTitle);
        parameters.Add("contentText", contentText);
        parameters.Add("buttonText", buttonText);

        var options = new DialogOptions()
        {
            CloseButton = false,
            MaxWidth = MaxWidth.ExtraSmall,
            FullWidth = true,
            NoHeader = false,
            DisableBackdropClick = false
        };

        var resultDialog = await dialogService.Show<Shared.Dialogs.LogOut.LogOutDialog>(dialogTitle,parameters,options).Result;
        if (!resultDialog.Canceled)
        {
            if (isLogOut) {
                await localStorageService.RemoveItemAsync("token");
                await jsRuntimeService.InvokeVoidAsync("DeleteCookie");
                await AuthenticationStateProvider.GetAuthenticationStateAsync();
            }
            NavigateToPage($"http://10.0.0.7:8000"); //server 7 main hub
        }
    }
    private void DrawerToggle()
    {
        _drawerOpen = !_drawerOpen;
        GlobalVariable.hideExpandIcon = !GlobalVariable.hideExpandIcon;
    }

    private async void RefreshPage()
    {
        await jsRuntimeService.InvokeVoidAsync("HardReload");
    }
    private async void ToggleFullScreen()
    {
        if(!_isFullScreen) {
            await jsRuntimeService.InvokeVoidAsync("openFullScreen");
            _isFullScreen = !_isFullScreen;
        } else {
             await jsRuntimeService.InvokeVoidAsync("closeFullScreen");
            _isFullScreen = !_isFullScreen;
        }
    }
    private void ToggleUserCP()
    {
        userCPOpen = !userCPOpen;
        if (userCPOpen) {
            userCPborderVal = false;
            userCPElevationVal = 1;
            userCPExpPanelStyleStr = "background: color: white;";
            userCPInfoStyleStr = "width: 250px;";
        } else if (!userCPOpen) {
            userCPborderVal = true;
            userCPElevationVal = 0;
            userCPExpPanelStyleStr = "background-color: #fafafa;";
            userCPInfoStyleStr = "width: 250px; text-overflow: ellipsis; overflow: hidden; white-space: nowrap;";
        }
    }

    private void DisableLinks()
    {
        drawerStyleStr = "display: none;";
    }
    private void EnableLinks()
    {
        drawerStyleStr = "display: block;";
    }
    private void NavigateToPage(string location)
    {
        navigationManager.NavigateTo($"{location}");
    }

    private async void NavigateToConfig()
    {
        _drawerOpen = false;
        isConfigPage = true;
        navigationManager.NavigateTo($"/configurations");
    }

    private void PageTitle(string pageTitle)
    {
        Console.WriteLine(pageTitle);
        GlobalClass.pageTitle = pageTitle;
    }
    private void CheckAccessLevel()
    {
      switch(GlobalClass.currentUserAccount.AccessLevel)
      {
        case Enums.AccountingAccessLevel.AccountingRequestor :
        case Enums.AccountingAccessLevel.OthersRequestor :

          HideConfiguration = "display: none";
          HideVoucher = "display: none";

        break;

        case Enums.AccountingAccessLevel.AccountingViewer :
        case Enums.AccountingAccessLevel.OthersViewer :

          HideEntry = "display : none";
          HideConfiguration = "display : none";

        break;
        
        case Enums.AccountingAccessLevel.AccountingIssuer :

          HideConfiguration = "display : none";

        break;

        default :
        HideConfiguration = "";
        break;
      }
    }
    private void OnLocationChanged(object? sender, LocationChangedEventArgs args)
    {
        if (isConfigPage) {
            isConfigPage = !isConfigPage;
            _drawerOpen = false;
        }
    }
    
    void IDisposable.Dispose()
    {
        navigationManager.LocationChanged -= OnLocationChanged;
        AppState.OnChange -= StateHasChanged;
    }
    private async Task OpenVATDialog()
    {
        var options = new DialogOptions()
        {
            CloseButton = false,
            MaxWidth = MaxWidth.ExtraSmall,
            FullWidth = true,
            NoHeader = false,
            DisableBackdropClick = false
        };
        var resultDialog = await dialogService.Show<Shared.Dialogs.VATDialogs.VATDialog>("", options).Result;
        if (!resultDialog.Canceled)
        {
            if ((int)resultDialog.Data == 0)
                Extensions.ShowAlert("VAT successfully added.", Variant.Filled, Snackbar, Severity.Success);
            else if ((int)resultDialog.Data == 1)
                Extensions.ShowAlert("VAT updated successfully.", Variant.Filled, Snackbar ,Severity.Info);
        }
    }

    public void UpdateAlert()
    {
        Console.WriteLine("Invoked");
        if (AppState.IsDirty)
        {
            updateStyleStr = "background-color: inherit";
        }
        else
        {
            updateStyleStr = "";
        }
    }

    private async Task LoadServerTime()
    {
        var result = await GlobalService.GetServerTime();
        if (result != null)
            GlobalVariable.ServerTime = result.Value;
        else
            Extensions.ShowAlertV2("Cannot get server time. Please check connections", Variant.Filled,Snackbar,Severity.Warning,Icons.Material.Filled.Cancel,Defaults.Classes.Position.BottomCenter);
    }
}