@inherits LayoutComponentBase

@inject IAccountingStatusService accountingStatusService
@inject IDivisionService divisionService
@inject IUserAccountService userAccountService
@inject IModeOfPaymentService modeOfPaymentService
@inject IBillingDocumentService billingDocumentService
@inject IBankService bankService
@inject IRequestTypeService requestTypeService
@inject IPayeeService payeeService
@inject IPayeeCategoryService payeeCategoryService
@inject IProjectChargingLineService projectChargingService
@inject ISubContractorCompanyService subContractorCompanyService
@inject ISubConGeneralInformationService subConGeneralInformationService
@inject ISubContractorPositionService subConPositionService
@inject IRequestForPaymentService requestForPaymentService
@inject IPettyCashService pettyCashService
@inject ILiquidationService liquidationService
@inject IJSRuntime jsRuntimeService
@inject Blazored.LocalStorage.ILocalStorageService localStorageService
@inject NavigationManager navigationManager
@inject IDialogService dialogService
@inject IExpenseLineService expenseLineService
@inject IAccountTypeService accountTypeService
@inject IAccountingLineService accountLineService
@inject IAccountLineTypeService accountLineTypeService
@inject ITermsOfPaymentService termsOfPaymentService
@inject IMuniCityService muniCityService
@inject ITaxCodeService taxCodeService
@inject IGlobalService GlobalService
@inject IConfiguration config
@inject ICheckService checkService
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject IScopeOfWorkService scopeOfWorkService
@inject ICollectionService collectionService
@inject IVoucherService voucherService
@inject IRequestForPaymentService requrestForPaymentService
@inject ICustomerService customerService
@inject ISnackbar SnackbarService
@inject ApplicationState AppState
@implements IDisposable

<MudThemeProvider @ref="@_mudThemeProvider" @bind-IsDarkMode="@_isDarkMode"/>
<MudDialogProvider/>
<MudSnackbarProvider/>

<MudLayout  @onclick='RefreshPopUps'>
    <MudAppBar Class='topbar' Fixed='true' Elevation='0' Dense>
        <AuthorizeView>
            <Authorized>
                <MudText Class='topbar__tbxpagetitle' Style='@updateStyleStr'> @GlobalClass.pageTitle</MudText>
                <MudSpacer/>
                <MudTooltip Text='@(!_isDarkMode ? "Dark Mode" : "Light Mode")' Arrow Placement='Placement.Top'>
                    <MudIconButton OnClick='ToggleTheme' Icon='@(!_isDarkMode ? Icons.Material.Filled.DarkMode : Icons.Material.Filled.LightMode)' 
                        Size='Size.Small'/>
                </MudTooltip>
                <MudBadge Class='zindex-1' Content='@ApplicationState.Notifications.Where(x=>x.IsSeen == false).Count()' Color="Color.Error" Overlap Visible>
                    <MudIconButton OnClick="OpenNotification" 
                        Icon="@(!ApplicationState.IsNotificationSilent ? Icons.Material.Filled.Notifications : Icons.Material.Filled.NotificationsOff)"  Color="Color.Default" Size='Size.Small'/>
                </MudBadge>
                <div class='usercp'>
                    <MudExpansionPanels Class='usercp__expansionpanel-header' DisableBorders='userCPborderVal' Elevation='userCPElevationVal'> 
                        <MudExpansionPanel Class='usercp__expansionpanel' IsExpandedChanged='ToggleUserCP'>
                            <TitleContent>
                                <div class='d-flex usercp__infocontainer' style='@userCPInfoStyleStr'>
                                    @if(GlobalClass.currentUserAccount == null) 
                                    {
                                        <MudSkeleton class='usercp__skeletonavatar' SkeletonType='SkeletonType.Circle' Animation='Animation.Wave' Height='40px' Width='40px'/>
                                        <div>
                                            <MudSkeleton SkeletonType='SkeletonType.Rectangle' Animation='Animation.Wave' Height='40px' Width='160px'/>
                                        </div>
                                    }
                                    else
                                    {
                                        <MudAvatar Class='usercp__avatar' Image='@($"data:image/png;base64, {Convert.ToBase64String(@GlobalClass.currentUserAccount.Picture)}")'/>
                                        <div>
                                            <MudText Class='usercp__lblusername'>@GlobalClass.currentUserAccount.FirstName</MudText>
                                            <MudText Class='usercp__lbldesignation'>@Extensions.GetEnumDescription(GlobalClass.currentUserAccount.AccessLevel)</MudText>
                                        </div>
                                    }
                                </div>
                            </TitleContent>
                            <ChildContent>
                                <MudDivider />
                                <div Class='d-flex usercp__btncontainer py-2'>
                                    <MudButton Class='usercp__btnsettings' Href='/configurations' Variant='Variant.Text' StartIcon='@Icons.Material.Filled.Settings' Size='Size.Small' Disabled='@IsDisabledSettings()'>Settings</MudButton>
                                    <MudSpacer/>
                                    <MudButton Class='usercp__btntohub' OnClick='() => LogOut(false)' Variant='Variant.Text' StartIcon='@Icons.Material.Filled.ExitToApp' Size='Size.Small'>Back to Hub</MudButton>
                                </div>
                                <MudDivider />
                                <div class='py-2'>
                                    <MudButton Class='usercp__btnlogout' OnClick='() => LogOut(true)' Variant='Variant.Filled' StartIcon='@Icons.Material.Filled.Logout' Color='Color.Error' DisableElevation>
                                        Log Out
                                    </MudButton>
                                </div>
                                
                            </ChildContent>
                        </MudExpansionPanel>
                        <MudPopover Open="@_isNotificationOpen"  AnchorOrigin='Origin.BottomRight' TransformOrigin='Origin.TopRight' OverflowBehavior='OverflowBehavior.FlipAlways'
                            Paper='false'>
                            <CascadingValue Value='@ApplicationState'>
                                <NotificationListComponent NotificationListModel='GlobalClassList.notificationList' NotificationClick='OpenNotification'
                                    CallbackStateHasChanged='(() => StateHasChanged())'/>
                            </CascadingValue>
                        </MudPopover>
                    </MudExpansionPanels>
                </div>
            </Authorized>
        </AuthorizeView>
    </MudAppBar>
    <MudDrawer Class='main-drawer' @bind-Open="_drawerOpen" Fixed Elevation='0' Variant='@DrawerVariant.Mini'>
        <MudDrawerHeader Class='drawer-header'>
            <MudIconButton OnClick="@((e) => DrawerToggle())" Icon="@Icons.Material.Filled.Menu" Color="Color.Inherit" Edge="Edge.Start" />
            <MudText Class='drawer-header__header-text text-center'>ACCOUNTING INTEGRATED</MudText>
        </MudDrawerHeader>
        <AuthorizeView>
            <Authorized>
                <MainLayoutMenuComponent NavigateTo='NavigateToConfig'/>
            </Authorized>
           <NotAuthorized>
                    <MudNavMenu Class='pb-2'>
                         <MudNavLink Class='txt-uppercase' Href='http://10.0.0.7:8000' Match='NavLinkMatch.All' Icon='@Icons.Material.Filled.Home'>
                            Back To Hub
                         </MudNavLink>
                    </MudNavMenu>
           </NotAuthorized>
        </AuthorizeView>
    </MudDrawer>
    <MudMainContent>
        <div class='main-body overflow-hidden'>
            @Body
        </div>
    </MudMainContent>
    <MudAppBar Class='footerbar' Fixed Elevation='0' Dense Bottom>
        <MudText>
            v1.0.0.1-testbuild-04152023-1
        </MudText>
        <MudIconButton Class='footerbar__btn-hardreload' OnClick='RefreshPage' Icon='@Icons.Material.Filled.Refresh' aria-label='Refresh Page'>
        </MudIconButton>
        <MudSpacer />
        <MudText>
            <div @ref='timeElement'></div>
        </MudText>
        <MudIconButton Class='footerbar__btn-fullscreen' OnClick='ToggleFullScreen' Icon='@Icons.Material.Filled.Fullscreen' aria-label='Toggle Full Screen'>
        </MudIconButton>
    </MudAppBar>
</MudLayout>
@* <NotificationDetector /> *@

@code {
    #region Properties
    private HubConnection signalHubConnection = default!;
    private string? systemIconSource = $"images/icons/budget.png", drawerStyleStr = "display: none;", 
    userCPExpPanelStyleStr = "background-color: #fafafa;", userCPInfoStyleStr = "width: 250px; text-overflow: ellipsis; overflow: hidden; white-space: nowrap;";
    private bool _drawerOpen, _isFullScreen, _hideExpandDrawerIcon, dataFetched, showLoadingOverlay = true, 
    userCPOpen, userCPborderVal = true, isConfigPage;
    private int userCPElevationVal = 0;
    ElementReference timeElement;
    string updateStyleStr = string.Empty;
    FilterParameter filterParameter = new FilterParameter();
    public AppStoreState ApplicationState = new();
    private bool _isNotificationOpen = false, _isDarkMode;
    private MudThemeProvider _mudThemeProvider = new();
    #endregion

    public override async Task SetParametersAsync(ParameterView parameters)
    {
        if(navigationManager.Uri.Contains("configurations"))
        {
            Console.WriteLine(navigationManager.Uri);
            isConfigPage = true;
            _drawerOpen = false;
        }
        else
        {
            _drawerOpen = true;
        }
        await base.SetParametersAsync(parameters);
    }

    protected override async Task OnInitializedAsync()
    {
        if (GlobalClass.currentUserAccount != null)
        {
            Task t = Task.WhenAll(LoadServerTime(),LoadGlobalLists(),GetNotificationFromStorage());
            await t;
            if (t.Status == TaskStatus.RanToCompletion)
            {
                NotificationSignalR();
                ApplicationState.OnChange += StateHasChanged;
                AppState.OnChange += StateHasChanged;
                navigationManager.LocationChanged += OnLocationChanged;
                CompletedFetch();
            }
        }
    }
    private async Task GetNotificationFromStorage()
    {
        ApplicationState.IsNotificationSilent = await Extensions.CheckNotificationSetting(localStorageService);
        var notifications = await Extensions.GetNotifications(localStorageService);
        if (notifications != null && notifications.Count() != 0)
            ApplicationState.Notifications = notifications;
        else
            await Extensions.SetNotificationsLocalStorage(localStorageService, new());
         StateHasChanged();
    }

    private void CompletedFetch()
    {
        dataFetched = true;
        showLoadingOverlay = false;
        StateHasChanged();
    }

    private async Task LoadGlobalLists()
    {
        Task t = Task.WhenAll(LoadAcctgStatusList(), LoadDivisionList(), LoadPaymentModes(), 
        LoadBillingDocs(), LoadBanks(), LoadRequestTypes(),
        LoadPayees(), LoadPayeeCategories(), LoadChargingLines(),
        LoadSubContractors(), LoadSubConGenInfos(), LoadSubConPositions(), LoadNotRFPLiquidation(),
        LoadExpenseLine(), LoadAccountLineGroup(),LoadAccountType(),LoadAccountLineType(),SignalRHubConnection(),LoadCheck(),
        LoadTerms(),LoadMunicipalityCities(),LoadTaxCode(),LoadScopeOfWorkList(),LoadCollections(),
        LoadChargings(),LoadCustomerTypes());
        await t;
        await LoadPayeesVoucher();
    }
    private async Task LoadChargings() =>  GlobalClassList.projectList = (await LoadCharging("")).ToList();
    private async Task LoadRequesteForPayments() =>  GlobalClassList.requestForPaymentsList = await  requrestForPaymentService.LoadRequestPayment(new FilterParameter(),GlobalClass.token);
    private async Task LoadScopeOfWorkList() =>  GlobalClassList.scopeOfWork = await scopeOfWorkService.LoadScopeOfWork(GlobalClass.token);
    private async Task LoadMunicipalityCities() => GlobalClassList.muniCityList = await muniCityService.LoadMuniCity(GlobalClass.token);
    private async Task LoadTaxCode() => GlobalClassList.taxCodes = await taxCodeService.LoadTaxCode(new FilterParameter(){isActive=true},GlobalClass.token);
    private async Task LoadCheck() => GlobalClassList.listOfChecks = await checkService.LoadCheck(new FilterParameter(){isActive=true, PageNo = 0, PageSize = 15, CheckCategoryId = Enums.CheckCategory.Check}, GlobalClass.token);
    private async Task LoadAccountType() => GlobalClassList.listOfAccountTypes = await accountTypeService.LoadAccountType(GlobalClass.token);
    private async Task LoadAcctgStatusList() => GlobalClassList.accountingStatusList = await accountingStatusService.LoadAccountingStatusList(GlobalClass.token);
    private async Task LoadDivisionList() => GlobalClassList.divisionList = await divisionService.LoadDivisionList(GlobalClass.token);
    private async Task LoadPaymentModes() => GlobalClassList.modeOfPaymentList = await modeOfPaymentService.LoadModeOfPaymentList(GlobalClass.token);
    private async Task LoadBanks() => GlobalClassList.banks = await bankService.LoadBanks(GlobalClass.token);
    private async Task LoadRequestTypes() => GlobalClassList.requestTypes = await requestTypeService.LoadRequestType(GlobalClass.token);
    private async Task LoadPayees() => GlobalClassList.payeeList = await payeeService.LoadPayee(GlobalClass.token);
    private async Task LoadPayeesVoucher() => GlobalClassList.voucherPayeeList = await GlobalService.LoadPayees(new FilterParameter(){IsPayee=true,PayeeName="",isActive=false, IsAll = true},GlobalClass.token);
    private async Task LoadPayeeCategories() => GlobalClassList.payeeCategoryList = await payeeCategoryService.LoadListOfPayeeCategory(GlobalClass.token);
    private async Task LoadChargingLines() => GlobalClassList.projectChargingLines = await projectChargingService.LoadProjectChargingLine(GlobalClass.token);
    private async Task LoadSubContractors() => GlobalClassList.subContractorCompanies = await subContractorCompanyService.LoadSubContractorCompany(GlobalClass.token);
    private async Task LoadExpenseLine() => GlobalClassList.expenseLineList = await expenseLineService.LoadExpenseLine(GlobalClass.token);
    private async Task LoadSubConGenInfos() => GlobalClassList.subConGeneralInformations = await subConGeneralInformationService.LoadSubConGenInfo(GlobalClass.token);
    private async Task LoadSubConPositions() => GlobalClassList.subContractorPositions = await subConPositionService.LoadSubContractorPosition(GlobalClass.token);
    private async Task LoadNotRFPLiquidation() => GlobalClassList.LiquidationNotInRFP = await liquidationService.LiquidationNotRFP(GlobalClass.token);
    private async Task LoadAccountLineGroup() => GlobalClassList.accountLineGroups = await accountLineService.LoadAccountLineGroup(GlobalClass.token);
    private async Task LoadAccountLineType() => GlobalClassList.accountLineTypes = await accountLineTypeService.LoadAccountLineType(GlobalClass.token);
    private async Task LoadCollections() => GlobalClassList.collectionList = await collectionService.GetCollections(filterParameter,GlobalClass.token);
    private async Task LoadVouchers() => GlobalClassList.Vouchers = await voucherService.LoadVouchers(filterParameter, GlobalClass.token);
    private async Task LoadCustomerTypes() => GlobalClassList.customerTypeList = await customerService.LaodCustomerTypes(GlobalClass.token);
    private async Task LoadBillingDocs()
    {
        GlobalClassList.billingDocumentList = await billingDocumentService.LoadListOfBillingDocuments(GlobalClass.token);
        GlobalClassList.billingDocumentList = GlobalClassList.billingDocumentList.OrderBy(x=>x.Id).ToList();
    }
    private async Task LoadTerms()
    {
      GlobalClassList.termsOfPayments = await termsOfPaymentService.LoadTermsOfPayment(GlobalClass.token);
      GlobalClassList.termsOfPayments = GlobalClassList.termsOfPayments.OrderBy(x => x.Id).ToList();
    }
    private async Task SignalRHubConnection()
    {
      try
      {
        var connection = Extensions.ConnectionBuilder(config["SignalRHub"] + "amshub");
        GlobalVariable.AMSHubConnection = connection;
        await GlobalVariable.AMSHubConnection.StartAsync();
      }
      catch (System.Exception ex)
      {
         Extensions.ShowAlert(ex.Message, Variant.Filled, SnackbarService, Severity.Error);
      }
    }
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
            await jsRuntimeService.InvokeVoidAsync("startTime", timeElement);
    }

    private async void LogOut(bool isLogOut)
    {
        var parameters = new DialogParameters();
        string dialogTitle = !isLogOut ? "To Hub" : "Log Out";
        string contentText = !isLogOut ? "Return to Hub?" : "Log Out from Accounting Management System?";
        string buttonText = !isLogOut ? "To Hub" : "Log Out";
        parameters.Add("dialogTitle", dialogTitle);
        parameters.Add("contentText", contentText);
        parameters.Add("buttonText", buttonText);

        var options = new DialogOptions()
        {
            CloseButton = false,
            MaxWidth = MaxWidth.ExtraSmall,
            FullWidth = true,
            NoHeader = false,
            DisableBackdropClick = false
        };

        var resultDialog = await dialogService.Show<Shared.Dialogs.LogOut.LogOutDialog>(dialogTitle,parameters,options).Result;
        if (!resultDialog.Canceled)
        {
            if (isLogOut) {
                await localStorageService.RemoveItemAsync("token");
                await jsRuntimeService.InvokeVoidAsync("DeleteCookie");
                await AuthenticationStateProvider.GetAuthenticationStateAsync();
            }
            NavigateToPage($"http://10.0.0.7:8000"); //server 7 main hub
        }
    }
    private void DrawerToggle()
    {
        _drawerOpen = !_drawerOpen;
        GlobalVariable.hideExpandIcon = !GlobalVariable.hideExpandIcon;
    }
    private async void RefreshPage()
    {
        await jsRuntimeService.InvokeVoidAsync("HardReload");
    }
    private async void ToggleFullScreen()
    {
        if(!_isFullScreen) {
            await jsRuntimeService.InvokeVoidAsync("openFullScreen");
            _isFullScreen = !_isFullScreen;
        } else {
             await jsRuntimeService.InvokeVoidAsync("closeFullScreen");
            _isFullScreen = !_isFullScreen;
        }
    }
    private void ToggleUserCP()
    {
        userCPOpen = !userCPOpen;
        if (userCPOpen) {
            userCPborderVal = false;
            userCPElevationVal = 1;
            userCPExpPanelStyleStr = "background: color: white;";
            userCPInfoStyleStr = "width: 250px;";
        } else if (!userCPOpen) {
            userCPborderVal = true;
            userCPElevationVal = 0;
            userCPExpPanelStyleStr = "background-color: #fafafa;";
            userCPInfoStyleStr = "width: 250px; text-overflow: ellipsis; overflow: hidden; white-space: nowrap;";
        }
    }

    private void DisableLinks() => drawerStyleStr = "display: none;";
    private void EnableLinks() => drawerStyleStr = "display: block;";
    private void NavigateToPage(string location)
    {
        navigationManager.NavigateTo($"{location}");
    }

    private void NavigateToConfig()
    {
        _drawerOpen = false;
        isConfigPage = true;
        navigationManager.NavigateTo($"/configurations");
    }

    private void PageTitle(string pageTitle)
    {
        Console.WriteLine(pageTitle);
        GlobalClass.pageTitle = pageTitle;
    }
    private void OnLocationChanged(object? sender, LocationChangedEventArgs args)
    {
        if (isConfigPage) {
            isConfigPage = !isConfigPage;
            _drawerOpen = false;
        }
    }
    
    void IDisposable.Dispose()
    {
        navigationManager.LocationChanged -= OnLocationChanged;
        AppState.OnChange -= StateHasChanged;
        ApplicationState.OnChange -= StateHasChanged;
    }
    private async Task OpenVATDialog()
    {
        var options = new DialogOptions()
        {
            CloseButton = false,
            MaxWidth = MaxWidth.ExtraSmall,
            FullWidth = true,
            NoHeader = false,
            DisableBackdropClick = false
        };
        var resultDialog = await dialogService.Show<Shared.Dialogs.VATDialogs.VATDialog>("", options).Result;
        if (!resultDialog.Canceled)
        {
            if ((int)resultDialog.Data == 0)
                Extensions.ShowAlert("VAT successfully saved.", Variant.Filled, SnackbarService, Severity.Success);
            else if ((int)resultDialog.Data == 1)
                Extensions.ShowAlert("VAT successfully udated.", Variant.Filled, SnackbarService, Severity.Info);
        }
    }

    public void UpdateAlert()
    {
        Console.WriteLine("Invoked");
        if (AppState.IsDirty)
            updateStyleStr = "background-color: inherit";
        else
            updateStyleStr = "";
    }

    public void UpdateDrawerStatus()
    {
        Console.WriteLine("Invoked");
        _drawerOpen = AppState.DrawerState;
    }

    private async Task LoadServerTime()
    {
        var result = await GlobalService.GetServerTime();
        if (result != null)
            GlobalVariable.ServerTime = result.Value;
        else
            Extensions.ShowAlertV2("Cannot get server time. Please check connections", Variant.Filled,SnackbarService,Severity.Warning,Icons.Material.Filled.Cancel,Defaults.Classes.Position.BottomCenter);
    }
    private async Task<IEnumerable<Project>> LoadCharging(string chargingName)
    {
      var filterParameter = new FilterParameter()
      {
        IsProject = true,
        ProjectName = chargingName,
        IsId = false,
        IsAll = true
      };
      var charging = await GlobalService.LoadChargeProjectLine(filterParameter, GlobalClass.token);
      return charging;
    }
    private void OpenNotification()
    {
        _isNotificationOpen = !_isNotificationOpen;
        StateHasChanged();
    }
    private void NotificationSignalR()
    {
        if(GlobalVariable.AMSHubConnection != null)
        {
            GlobalVariable.AMSHubConnection.On<NotificationModel>("ApproveNotification", async (notification) => 
            {
                
                Console.WriteLine(ApplicationState.TemporaryEmployeeList.Count());
                if(GlobalClass.currentUserAccount.AccessLevel == Enums.AISUserAccessLevel.Administrator) 
                {
                    Task t = ShowNotificationCard(notification);
                    await t;
                    if (t.Status == TaskStatus.RanToCompletion)
                        StateHasChanged();
                } 
                else if (GlobalClass.currentUserAccount.EmployeeId == Convert.ToInt64(notification.ApproverId) 
                || GlobalClass.currentUserAccount.EmployeeId == Convert.ToInt64(notification.PreparedById))
                {
                    Task t = ShowNotificationCard(notification);
                    await t;
                    if (t.Status == TaskStatus.RanToCompletion)
                        StateHasChanged();
                }
               StateHasChanged();
            });
        }
    }

    private async Task<UserAccount> GetSenderAccount(long employeeId)
    {
        var result =  ApplicationState.TemporaryEmployeeList.Where(x => x.EmployeeId == employeeId).FirstOrDefault();
        if (result != null)
            return result;
        else
        {
            result = await GlobalService.GetEmployeeById(employeeId, GlobalClass.token);
            if (result != null)
            {
                ApplicationState.TemporaryEmployeeList.Add(result);
                await ApplicationState.UpdateStoreState();
                return result;
            }
            else
                return new();
        }
    }
    private int NotificationsNumberNotSeen()
    {
        return ApplicationState.Notifications.Where( n => n.IsSeen == false).ToList().Count;
    }
    private bool IsDisabledSettings()
    {
        if(GlobalClass.currentUserAccount.AccessLevel == Enums.AISUserAccessLevel.NonAccountingAdmin ||
        GlobalClass.currentUserAccount.AccessLevel == Enums.AISUserAccessLevel.NonAccountingRequestor || 
        GlobalClass.currentUserAccount.AccessLevel == Enums.AISUserAccessLevel.NonAccountingViewer)
        {
            return true;
        }
        return false;
    }

    private async Task PlayAudioFile()
    {
        ApplicationState.IsNotificationSilent = await Extensions.CheckNotificationSetting(localStorageService);
        if (!ApplicationState.IsNotificationSilent)
            await jsRuntimeService.InvokeVoidAsync("PlayAudioFile", "/notificationSound/notification-audio1.wav");
    }

    private void RefreshPopUps()
    {
        _isNotificationOpen = false;
    }

    private async Task ShowNotificationCard(NotificationModel notification)
    {
        Task<UserAccount> GetSenderTask = GetSenderAccount(notification.SenderId);
        await GetSenderTask;
        if (GetSenderTask.Status == TaskStatus.RanToCompletion)
        {
            Task AddNotifTask = AddNotification(notification);
            await AddNotifTask;
            if (AddNotifTask.Status == TaskStatus.RanToCompletion)
            {
                await PlayAudioFile();
                Extensions.ShowNotificationSnackbar(SnackbarService,notification,navigationManager,localStorageService, GetSenderTask.Result);
            }
        }
    }

    private async Task AddNotification(NotificationModel notification)
    {
        var notificationList = await Extensions.GetNotifications(localStorageService);
        notificationList.Add(notification);
        ApplicationState.Notifications = notificationList;
        await ApplicationState.UpdateStoreState();
        await Extensions.SetNotificationsLocalStorage(localStorageService, notificationList);
    }
    public void NotifyChange()
    {
        InvokeAsync(StateHasChanged);
    }

    private async Task ToggleTheme()
    {
        _isDarkMode = !_isDarkMode;
        await Extensions.SetDarkMode(localStorageService, _isDarkMode);
    }
}