@inject ICollectionService collectionService
@inject IDialogService dialogService
@inject IGlobalService globalService
@inject ISnackbar SnackbarService

<EditForm Model="@GlobalClass.collection" OnValidSubmit="OnValidSubmit" OnInvalidSubmit='OnInvalidInput'>
<DataAnnotationsValidator/>
<MudDialog Class='customdialog2'>
    <TitleContent>
        <div class='d-flex align-center'>
            @if (GlobalClass.collection.Id != 0)
            {
                <MudIcon Icon="@Icons.Material.Filled.Edit" Class="mr-3" />
            }
            else
            {
                <MudIcon Icon="@Icons.Material.Filled.Add" Class="mr-3" />
            }
            <MudText Class='txt-uppercase' Typo='Typo.h6'>@dialogTitle</MudText>
        </div>
    </TitleContent>
    <DialogContent>
        <MudGrid>
            <MudItem xs=7>
                <MudPaper Class='pa-2' Elevation='0'>
                    <MudGrid Class='pa-2' Spacing='1'>
                        <MudItem xs='4'>
                            <MudTextField Class='tfield-color-blred' @bind-Value='GlobalClass.collection.ControlNumber' Label='Control No.' Text='@(GlobalClass.collection.Id != 0 ? GlobalClass.collection.ControlNumber:"Auto")' Variant='Variant.Outlined'
                                Margin='Margin.Dense' ReadOnly />                    
                        </MudItem>
                        <MudItem xs='4'>
                            <MudDatePicker @bind-Date='GlobalClass.collection.TransactionDate' Label='Transaction Date' IconSize='Size.Small' DisableToolbar Variant='Variant.Outlined'
                                HelperText='Required*' Margin='Margin.Dense' For='@(()=>GlobalClass.collection.TransactionDate)'/>
                        </MudItem>
                        <MudItem xs='4'>
                            <MudSelect @bind-Value="GlobalClass.collection.CollectionCategoryId"  Label='Collection Category' Variant='Variant.Outlined'
                                Text="@Extensions.GetEnumDescription(GlobalClass.collection.CollectionCategoryId)" Placeholder="Collection Category" Margin='Margin.Dense'
                                AnchorOrigin="Origin.BottomCenter" HelperText='Required*' >
                                @foreach (Enums.CollectionCategory collectionCategory in Enum.GetValues(typeof(Enums.CollectionCategory)))
                                {
                                    <MudSelectItem Value="@collectionCategory">@Extensions.GetEnumDescription(collectionCategory)</MudSelectItem>
                                }
                            </MudSelect>
                        </MudItem>
                        <MudItem xs='12'>
                            <MudText Class='lblhelper-type'>Project/Charging</MudText>
                            <BlazoredTypeahead SearchMethod='LoadCharging' Context='proj'
                                ValueChanged="((Project p)=>OnRowProjectValueChanged(p))" 
                                Value="charging" 
                                ValueExpression="(()=>charging)"
                                Debounce="300" MaximumSuggestions='5' MinimumLength='3' Placeholder='Project/Charging' DisableClear>
                                <SelectedTemplate>
                                    <div class='overflow-hidden'>
                                    @if (proj.ProjectId != 0) {
                                            <MudTooltip Class='wspace-nowrap' Text="@proj.ProjectName">
                                                <MudText Class='font12'>@proj.ProjectName</MudText>
                                            </MudTooltip>
                                    } else {
                                            <MudText Class='font12'> - </MudText>
                                    }
                                    </div>
                                </SelectedTemplate>
                                    <ResultTemplate>
                                        <div class='d-flex flex-column'>
                                            <small class='font-bold'>@proj.ProjectName</small>
                                            <small>@proj.Location</small>
                                            <small>@Extensions.ProjectReference(proj)</small>
                                        </div>
                                    </ResultTemplate>
                            </BlazoredTypeahead>
                            <div class="validation-font12">
                                <ValidationMessage For="@(() => GlobalClass.collection.ChargeName)" />
                            </div>
                        </MudItem>
                        <MudItem xs='8'>
                            <MudText Class='lblhelper-type'>Customer</MudText>
                            <BlazoredTypeahead SearchMethod='LoadCharging' Context='customer'
                                ValueChanged='((Project p) => OnCustomerValueChanged(p))'
                                ValueExpression='(()=> currentCustomer)'
                                Value='currentCustomer'
                                Debounce="300" MaximumSuggestions='10' MinimumLength='3' Placeholder='Customer' DisableClear>
                                <SelectedTemplate>
                                    <div class='overflow-hidden'>
                                    @if (customer.ProjectId != 0) {
                                            <MudTooltip Class='wspace-nowrap' Text="@customer.ProjectName">
                                                <MudText Class='font12'>@customer.ProjectName</MudText>
                                            </MudTooltip>
                                    } else {
                                            <MudText Class='font12'> - </MudText>
                                    }
                                    </div>
                                </SelectedTemplate>
                                <ResultTemplate>
                                    <div class='d-flex flex-column'>
                                        <small class='font-bold'>@customer.ProjectName</small>
                                        <small>@customer.Location</small>
                                        <small>@Extensions.ProjectReference(customer)</small>
                                    </div>
                                </ResultTemplate>
                            </BlazoredTypeahead>
                        </MudItem>
                        <MudItem xs='4'>
                            <MudText Class='lblhelper-type'>Expense</MudText>
                            <BlazoredTypeahead SearchMethod='LoadExpenseLine' Context='rowExpenseLine'
                                ValueChanged='((ExpenseLineModel exp) => OnRowSelectedExpenseLine(exp))'
                                ValueExpression='(()=>expenseLine)'
                                Value='expenseLine'
                                Debounce="300" MaximumSuggestions='5' MinimumLength='3' Placeholder='Expense line' DisableClear>
                                <SelectedTemplate>
                                    <div class='overflow-hidden wspace-nowrap'>
                                        @if (!String.IsNullOrEmpty(rowExpenseLine.ExpenseName)) {
                                        <MudText Class='font12'>@rowExpenseLine.ExpenseName</MudText>
                                        } else {
                                        <MudText Class='font12'> - </MudText>
                                        }
                                    </div>
                                </SelectedTemplate>
                                <ResultTemplate>
                                    @rowExpenseLine.ExpenseName
                                </ResultTemplate>
                            </BlazoredTypeahead>
                            <div class="validation-font12">
                                <ValidationMessage For="@(() => GlobalClass.collection.ExpenseName)" />
                            </div>
                        </MudItem>
                        @* <MudItem xs='4'>
                            <MudNumericField Class='txtfield-right' @bind-Value='GlobalClass.collection.Tax' Format="N2" Label='Tax %' HideSpinButtons 
                                Variant='Variant.Outlined' Margin='Margin.Dense' />
                        </MudItem> *@
                        <MudItem xs='8'>
                            <div class='@(GlobalClass.collection.ContractAmount > 0 ? "tfield-color-green":"tfield-color-red")'>
                                <MudNumericField Class='txtfield-right' @bind-Value='GlobalClass.collection.ContractAmount' Format='N2' Label='Contract Amount' HideSpinButtons
                                Variant='Variant.Outlined' Margin='Margin.Dense' Adornment="Adornment.Start" AdornmentText="₱"/>
                            </div>
                        </MudItem>
                        <MudItem xs='4'>
                            <MudTextField @bind-Value='GlobalClass.collection.License' Label='License' Placeholder='@(string.IsNullOrWhiteSpace(GlobalClass.collection.License) ? "None":"")' 
                                HideSpinButtons Variant='Variant.Outlined' Margin='Margin.Dense' />
                        </MudItem>
                        @* <MudItem xs='6'>
                            <div class='@(GlobalClass.collection.NetAmount > 0 ? "tfield-color-green":"tfield-color-red")'>
                                <MudNumericField Class='txtfield-right' @bind-Value='GlobalClass.collection.NetAmount' Format='N2' Label='Gross Amount' HideSpinButtons
                                Variant='Variant.Outlined' Margin='Margin.Dense' For='@(()=>GlobalClass.collection.GrossAmount)' Adornment="Adornment.Start" AdornmentText="₱" ReadOnly/>
                            </div>
                        </MudItem> *@
                        <MudItem xs='4'>
                            <div class='@(GlobalClass.collection.NetAmount > 0 ? "tfield-color-green":"tfield-color-red")'>
                                <MudNumericField ValueChanged='((decimal d) => CalculatePercent(d))' Value='GlobalClass.collection.NetAmount' Class='txtfield-right' onclick='this.select()' Format='N2' Label='Net Amount' HideSpinButtons
                                Variant='Variant.Outlined' Margin='Margin.Dense' For='@(()=>GlobalClass.collection.NetAmount)' Adornment="Adornment.Start" AdornmentText="₱" DebounceInterval='2000' Immediate/>
                            </div>
                        </MudItem>
                        <MudItem xs='4'>
                            <div class='@(GlobalClass.collection.PrevNetAmount > 0 ? "tfield-color-green":"tfield-color-red")'>
                                <MudNumericField @bind-Value='GlobalClass.collection.PrevNetAmount' Class='txtfield-right' onclick='this.select()' Format='N2' Label='Previous Net' HideSpinButtons
                                Variant='Variant.Outlined' Margin='Margin.Dense' For='@(()=>GlobalClass.collection.PrevNetAmount)' Adornment="Adornment.Start" AdornmentText="₱" DebounceInterval='2000' Immediate ReadOnly/>
                            </div>
                        </MudItem>
                        <MudItem xs='4'>
                            <div class='@(GlobalClass.collection.ToDateNetAmount > 0 ? "tfield-color-green":"tfield-color-red")'>
                                <MudNumericField @bind-Value='GlobalClass.collection.ToDateNetAmount' Class='txtfield-right' onclick='this.select()' Format='N2' Label='To Date Net' HideSpinButtons
                                Variant='Variant.Outlined' Margin='Margin.Dense' For='@(()=>GlobalClass.collection.ToDateNetAmount)' Adornment="Adornment.Start" AdornmentText="₱" DebounceInterval='2000' Immediate ReadOnly/>
                            </div>
                        </MudItem>
                        <MudItem xs='4'>
                            <div class='@(GlobalClass.collection.Percentage > 0 ? "tfield-color-green":"tfield-color-red")'>
                                <MudNumericField ValueChanged='((decimal d) => CalculateNetAmount(d))' Value='GlobalClass.collection.Percentage' Class='txtfield-right' onclick='this.select()' Format='N2' Label='Present %' HideSpinButtons
                                Variant='Variant.Outlined' Margin='Margin.Dense' Adornment="Adornment.End" AdornmentText="%"  DebounceInterval='2000' Immediate/>
                            </div>
                        </MudItem>
                        <MudItem xs='4'>
                            <div class='@(GlobalClass.collection.PrevPercentage > 0 ? "tfield-color-green":"tfield-color-red")'>
                                <MudNumericField ValueChanged='((decimal d) => CalculateNetAmount(d))' Value='GlobalClass.collection.PrevPercentage' Class='txtfield-right' onclick='this.select()' Format='N2' Label='Previous %' HideSpinButtons
                                Variant='Variant.Outlined' Margin='Margin.Dense' Adornment="Adornment.End" AdornmentText="%"  DebounceInterval='2000' Immediate ReadOnly/>
                            </div>
                        </MudItem>
                        <MudItem xs='4'>
                            <div class='@(GlobalClass.collection.ToDatePercentage > 0 ? "tfield-color-green":"tfield-color-red")'>
                                <MudNumericField ValueChanged='((decimal d) => CalculateNetAmount(d))' Value='GlobalClass.collection.ToDatePercentage' Class='txtfield-right' onclick='this.select()' Format='N2' Label='To Date %' HideSpinButtons
                                Variant='Variant.Outlined' Margin='Margin.Dense' Adornment="Adornment.End" AdornmentText="%"  DebounceInterval='2000' Immediate ReadOnly/>
                            </div>
                        </MudItem>
                        <MudItem xs=4>
                            <MudTextField @bind-Value='GlobalClass.collection.ReferenceNo' Label='Reference No.' Variant='Variant.Outlined' Placeholder='@(string.IsNullOrWhiteSpace(GlobalClass.collection.ReferenceNo) ? "None":"")'
                                HelperText='Required*' Margin='Margin.Dense' For='@(()=>GlobalClass.collection.ReferenceNo)' />
                        </MudItem>
                        <MudItem xs='8'>
                            <MudTextField @bind-Value='GlobalClass.collection.Description' Label='Description/Particulars' Placeholder='@(string.IsNullOrWhiteSpace(GlobalClass.collection.Description) ? "None":"")' HelperText='Optional' 
                                HideSpinButtons Variant='Variant.Outlined' Margin='Margin.Dense' />
                        </MudItem>
                        <MudItem xs='12'>
                            <MudTextField @bind-Value='GlobalClass.collection.Remarks' onclick="this.select()" Lines='2' Label='Remarks' Placeholder='' HelperText='Optional' 
                                HideSpinButtons Variant='Variant.Outlined' />
                        </MudItem>
                    </MudGrid>
                </MudPaper>
            </MudItem>
            <MudItem xs=5>
                 <MudPaper Elevation='0' Height='100%'>
                    <TransactionTableComponent TransactionsList='transactionsList.AsEnumerable().Reverse().ToList()' 
                    ContractAmount='GlobalClass.collection.ContractAmount' ProjectName='@GlobalClass.collection.ChargeName'/>
                 </MudPaper>
            </MudItem>
        </MudGrid>
    </DialogContent>
    <DialogActions>
        <MudSpacer />
        <MudButton Class='btn-ios-d font12' OnClick="Cancel" Variant='Variant.Text' Size='Size.Small' DisableElevation>Cancel</MudButton>
        <MudButton Class='btn-ios-d font12' ButtonType="ButtonType.Submit" Variant='Variant.Filled' Color='@(currentAction == Enums.ActionMode.Create ? Color.Success:Color.Info)' Size='Size.Small' DisableElevation>
            @(currentAction == Enums.ActionMode.Create ? "Add" : currentAction == Enums.ActionMode.Update ? "Update" : "")
        </MudButton>
    </DialogActions>
</MudDialog>
</EditForm>
@code
{
    [CascadingParameter] public MudDialogInstance MudDialog { get; set; } = default!;
    [Parameter] public Color color { get; set; }
    [Parameter] public string dialogTitle { get; set; } = string.Empty;
    [Parameter] public string buttonText { get; set; } = string.Empty;
    [Parameter] public Enums.ActionMode currentAction { get; set; }
    private Project charging = new();
    private ExpenseLineModel expenseLine = new();
    private Project currentCustomer = new();
    private bool isReadOnlyCheckNumber {get;set;}
    private bool isEditingAmount = false;
    private List<CollectionModel> transactionsList = new();
    protected override async Task OnInitializedAsync()
    {
        DefualtProperties();
        if(GlobalClass.collection.Id != 0)
        {
            await RemapProperties();
        } else {
            expenseLine = GlobalClassList.expenseLineList.Where( e => e.ExpenseName == "AR Projects").FirstOrDefault()?? new();
            GlobalClass.collection.ExpenseName = expenseLine.ExpenseName;
            GlobalClass.collection.ExpenseId = expenseLine.Id;
        }
    }
    private async Task Submit()
    {
        var parameters = new DialogParameters();
        string contentText = " Collection";
        string dialogTitle = "Add";
        parameters.Add("contentText", contentText);
        parameters.Add("dialogTitle", dialogTitle);
        parameters.Add("actionMode", GlobalClass.collection.Id == 0? Enums.ActionMode.Create : Enums.ActionMode.Update);
        parameters.Add("controlNumber", GlobalClass.collection.ControlNumber == string.Empty? "" : GlobalClass.collection.ControlNumber);
        var options = new DialogOptions() { CloseButton = false, MaxWidth = MaxWidth.ExtraSmall, FullWidth = true, NoHeader = false, DisableBackdropClick = true };
        var resultDialog = await dialogService.Show<Shared.Dialogs.GenericPromptDialogs.GenericPrompt>(dialogTitle, parameters, options).Result;
        if (!resultDialog.Canceled) 
        {   
            GlobalClass.collection.UserId = GlobalClass.currentUserAccount.EmployeeId;
            GlobalClass.collection.CollectionId = GlobalClass.collection.Id;
            GlobalClass.collection.IsBilling = true;
            GlobalClass.collection.GrossAmount = GlobalClass.collection.NetAmount;
            GlobalClass.collection.TransactionDate = Convert.ToDateTime(GlobalClass.collection.TransactionDate?.ToString("yyyy-MM-dd HH:mm:ss tt"));
            if(GlobalClass.collection.Id == 0)
            {
                GlobalClass.collection.Activity = "Add Billing";
                GlobalClass.collection = await collectionService.SaveCollection(GlobalClass.collection,GlobalClass.token);
            } else {
                GlobalClass.collection.Activity = "Update Billing";
                GlobalClass.collection = await collectionService.UpdateCollection(GlobalClass.collection,GlobalClass.token);
            }
            MudDialog.Cancel();
            Extensions.ShowAlert("Billing successfully saved.",Variant.Filled,SnackbarService,Severity.Success);
        }
    }
    private void Cancel()
    {
        MudDialog.Cancel();
    }
    private async Task<IEnumerable<Project>> LoadCharging(string chargingName)
    {
      var filterParameter = new FilterParameter()
      {
        IsProject = true,
        ProjectName = chargingName,
        IsId = false
      };
      var charging = await globalService.LoadChargeProjectLine(filterParameter, GlobalClass.token);
      return charging;
    }
    private void OnCustomerValueChanged(Project p)
    {
        currentCustomer = p;
        GlobalClass.collection.CustomerId = p.ProjectId;
        GlobalClass.collection.CustomerCategoryId = p.ProjectCategoryId;
    }
    private async void OnRowProjectValueChanged(Project project)
    {
        charging = project;
        GlobalClass.collection.rowCharging = project;
        GlobalClass.collection.ChargeId = project.ProjectId;
        GlobalClass.collection.ChargeName = project.ProjectName;
        GlobalClass.collection.ChargeCategoryId = project.ProjectCategoryId;
        await GetProjectReference(project);
    }
    private async Task GetProjectReference(Project project)
    {   
        if(project.ProjectCategoryId == Enums.ProjectCategory.Project)
        {   
            GlobalClass.collection.PrevPercentage = await globalService.GetProjectPreviousPercentage(project.ProjectId , GlobalClass.token);
            CollectionModel customer = await globalService.GetProjectContract(project.ProjectId , GlobalClass.token);
            //Showing
            //currentCustomer = (await LoadCharging(GlobalClass.collection.CustomerName)).FirstOrDefault()?? new();
            currentCustomer.ProjectName = customer.CustomerName;
            currentCustomer.ProjectId = customer.CustomerId;
            //Saving
            GlobalClass.collection.CustomerId = customer.CustomerId;
            GlobalClass.collection.CustomerName = customer.CustomerName;
            GlobalClass.collection.ContractAmount = customer.ContractAmount;
            GlobalClass.collection.License = customer.License;
            GlobalClass.collection.StatusId = (GlobalClassList.accountingStatusList.Where( s => s.StatusEnumCategoryId == Enums.AccountingStatusEnumCategory.CLG).FirstOrDefault()?? new()).Id;
            GlobalClass.collection.CustomerCategoryId = customer.CustomerCategoryId;
            PreviousNetAndTodate(GlobalClass.collection);
        }
        StateHasChanged();
    }
    private async Task<IEnumerable<ExpenseLineModel>> LoadExpenseLine(string expenseName)
    {
      return await Task.Run(() => 
      GlobalClassList.expenseLineList
        .Where(exp => exp.WithLedger && exp.ExpenseName.ToLower().Contains(expenseName.ToLower()))
        .ToList());
    }
    private void OnRowSelectedExpenseLine(ExpenseLineModel exp)
    {
        expenseLine = exp;
        GlobalClass.collection.ExpenseName = exp.ExpenseName;
        GlobalClass.collection.ExpenseId = expenseLine.Id;
    }
    private async Task OnValidSubmit()
    {
        if(GlobalClass.collection.CollectionExpenses.Any(exp => exp.isAmountNotValid || exp.isExpenseNameEmpty))
            Extensions.ShowAlert("Please fill the required field in collection expense.", Variant.Filled, SnackbarService,Severity.Error);
        else 
            await Submit();
    }
    private void OnInvalidInput() => Extensions.ShowAlert("Please fill the required field.", Variant.Filled, SnackbarService,Severity.Error);
    private void BankPaymentTypeOnClick(Enums.CollectionPaymentType type) => CollectionPaymentTypeState(type);
    private void CollectionPaymentTypeState(Enums.CollectionPaymentType c)
    {
        GlobalClass.collection.PaymentTypeId = c;
        isReadOnlyCheckNumber = GlobalClass.collection.PaymentTypeId == Enums.CollectionPaymentType.Cash ? true : false;
        if(isReadOnlyCheckNumber)
            GlobalClass.collection.CheckNumber = string.Empty;
        StateHasChanged();
    }
    private void DefualtProperties()
    {
        GlobalClass.collection.Remarks = (string.IsNullOrWhiteSpace(GlobalClass.collection.Remarks) ? "None" : GlobalClass.collection.Remarks);
        GlobalClass.collection.IsBilling = true;
        GlobalClass.collection.CollectionType = Enums.CollectionType.Billing;
        GlobalClass.collection.CollectionTypeId = Enums.CollectionType.Billing;
        GlobalClass.collection.OfficialReceipt = "0";
        GlobalClass.collection.CheckNumber ="0";
    }
    private async Task RemapProperties()
    {
        charging = (await LoadCharging(GlobalClass.collection.ChargeName)).FirstOrDefault()?? new();
        currentCustomer = (await LoadCharging(GlobalClass.collection.CustomerName)).FirstOrDefault()?? new();
        expenseLine = (await LoadExpenseLine(GlobalClass.collection.ExpenseName)).FirstOrDefault()?? new();
        GlobalClass.collection.CollectionExpenses = (await collectionService.GetCollection(GlobalClass.collection.Id,GlobalClass.token)).CollectionExpenses;
        CollectionPaymentTypeState(GlobalClass.collection.PaymentTypeId);
        GlobalClass.collection.CheckNumber = "None";
        await GetProjectReference(charging);
    }
    private void CalculatePercent(decimal d)
    {
        GlobalClass.collection.NetAmount = d;
        isEditingAmount = false;
        if(isEditingAmount == false)
            if(GlobalClass.collection.ContractAmount > 0)
            {
                GlobalClass.collection.Percentage = (GlobalClass.collection.NetAmount * 100) / GlobalClass.collection.ContractAmount; 
                GlobalClass.collection.ToDatePercentage = GlobalClass.collection.Percentage + GlobalClass.collection.PrevPercentage;
                GlobalClass.collection.ToDateNetAmount = GlobalClass.collection.PrevNetAmount + GlobalClass.collection.NetAmount;
                StateHasChanged();
            }
    }
    private void CalculateNetAmount(decimal d)
    {
        GlobalClass.collection.Percentage = d;
        isEditingAmount = true;
        if(isEditingAmount)
        {
            GlobalClass.collection.NetAmount = ( GlobalClass.collection.Percentage /  100 ) *GlobalClass.collection.ContractAmount;
            GlobalClass.collection.ToDatePercentage = d + GlobalClass.collection.PrevPercentage;
            GlobalClass.collection.ToDateNetAmount = GlobalClass.collection.PrevNetAmount + GlobalClass.collection.NetAmount;
            StateHasChanged();
        }
    }
    private void PreviousNetAndTodate(CollectionModel collection)
    {
        transactionsList = GlobalClassList.collectionList
                                                .Where( c => 
                                                    c.ChargeId == collection.ChargeId && c.ChargeCategoryId == collection.ChargeCategoryId &&
                                                    c.CustomerId == collection.CustomerId
                                                ).ToList();
        GlobalClass.collection.PrevNetAmount = transactionsList.Sum( c => c.NetAmount);
        GlobalClass.collection.ToDateNetAmount = GlobalClass.collection.PrevNetAmount + GlobalClass.collection.NetAmount;
        GlobalClass.collection.ToDatePercentage = GlobalClass.collection.Percentage + GlobalClass.collection.PrevPercentage;
        StateHasChanged();
    }
}