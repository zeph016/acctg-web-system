@inject IVoucherRouteService routeService
@inject NavigationManager navigationManager
@inject IGlobalService globalService
@inject ISnackbar snackBarService
@inject IDialogService dialogService

<MudDialog Class='customdialog'>
    <TitleContent>
        <div class='d-flex align-center'>
            <MudIcon Icon="@Icons.Filled.Route" Class="mr-3" />
            <MudText Typo='Typo.h6'>Route Vouchers</MudText>
        </div>
    </TitleContent>
    <DialogContent>
        <div class='customdialog__content-container pa-0'>
            <MudGrid Spacing='1'>
                <MudItem xs="6">
                    <MudText Class='d-flex wspace-nowrap txt-uppercase font-bold font10 pl-1'>
                        Date
                        <MudText Class='font10 font-bold' Color='Color.Error'>*</MudText>
                    </MudText>
                    <MudDatePicker Class='txt-top-0 font14-txtfield txtfield-right' @bind-Date='GlobalClass.voucherRoute.RouteDate' IconSize='Size.Small' />
                </MudItem>
                <MudItem xs=6></MudItem>
                <MudItem xs="12">
                    <MudText Class='d-flex wspace-nowrap txt-uppercase font-bold font10 pl-1'>
                        Location
                        <MudText Class='font10 font-bold' Color='Color.Error'>*</MudText>
                    </MudText>
                    <BlazoredTypeahead SearchMethod='LoadRoutes' DisableClear placeholder='Route to'
                    @bind-Value='locationRoute' Debounce='500' MaximumSuggestions='5'>
                        <SelectedTemplate>
                            @if (locationRoute.ProjectId != 0) {
                                <MudText Class='font12'>@context.ProjectName | @context.Location</MudText>
                            } else if (notValidLocation) {
                            <MudText Class='font12 font-bold txt-uppercase' Color='Color.Error'>Required</MudText>
                            } else {
                                <MudText Class='font12'> - </MudText>
                            }
                        </SelectedTemplate>
                        <ResultTemplate>
                            @context.ProjectName | @context.Location    
                        </ResultTemplate>
                    </BlazoredTypeahead>
                </MudItem>
                <MudItem xs="12">
                    <MudText Class='d-flex wspace-nowrap txt-uppercase font-bold font10 pl-1'>
                        Reason
                    </MudText>
                    <MudTextField @bind-Value="@GlobalClass.voucherRoute.Reason"  Variant="Variant.Outlined" Margin="Margin.Dense"
                        Lines='2' />
                </MudItem>
                <MudItem xs="12">
                    <MudText Class='d-flex wspace-nowrap txt-uppercase font-bold font10 pl-1'>
                       Remarks
                    </MudText>
                    <MudTextField @bind-Value="@GlobalClass.voucherRoute.Remarks"  Variant="Variant.Outlined" Margin="Margin.Dense"
                        Lines='2' />
                </MudItem>
                <MudItem xs="12">
                    <MudText Class='font12 font-bold'>Vouchers:</MudText>
                    <div class='d-flex align-center'>
                        @if(GlobalClassList.selectedVoucherToRoute.Count != 0)
                        {
                            foreach(var vouchers in GlobalClassList.selectedVoucherToRoute)
                            {
                                <MudChip Size='Size.Small'>@vouchers.ControlNumber</MudChip>
                            }
                        }
                    </div>
                </MudItem>
            </MudGrid>
        </div>
    </DialogContent>
    <DialogActions>
        <MudButton Class='btn-ios-d font12' OnClick="Cancel" Variant='Variant.Text'>Cancel</MudButton>
        <MudButton Class='btn-ios-d font12' OnClick="(()=>Validate())" Variant='Variant.Filled' Color="Color.Info">Route</MudButton>
    </DialogActions>
</MudDialog>

@code{
    [CascadingParameter] public MudDialogInstance MudDialog { get; set; } = default!;
    private List<Project> locationRoutesList = new();
    private Project locationRoute = new();
    private bool notValidLocation;
    private void Cancel()
    {
        MudDialog.Close(DialogResult.Ok(3));
    }
    private async Task Validate()
    {
        if(IsValidated())
        {
            await Prompt();
        }else
            Extensions.ShowAlert("Cannot route vouchers, location is required",Variant.Filled,snackBarService,Severity.Error);
    }
    private async Task SaveVoucherRoute()
    {
        //props needed
        GlobalClass.voucherRoute.LocationId = locationRoute.ProjectId;
        GlobalClass.voucherRoute.LocationCategoryId = locationRoute.ProjectCategoryId;
        GlobalClass.voucherRoute.UserId = GlobalClass.currentUserAccount.EmployeeId;
        GlobalClass.voucherRoute.Activity = "Add Route"; 
        await routeService.SaveRouteVouchers(GlobalClass.voucherRoute,GlobalClass.token);
    }
    private async Task<IEnumerable<Project>> LoadRoutes(string employeeName)
    {
        var filterParameter = new FilterParameter()
        {
            IsProject = true,
            ProjectName = employeeName
        };
        var locations = await globalService.LoadLocationRoutes(filterParameter,GlobalClass.token);
        return locations;
    }
    private async Task LocationRouteList()
    {
        locationRoutesList = await globalService.LoadLocationRoutes(new FilterParameter(){isActive=true},GlobalClass.token);

    }
    bool IsValidated()
    {
        ResetValidation();
        if(locationRoute.ProjectId == 0)
        {
            notValidLocation = true;
            return false;
        }
        return true;
    }
    void ResetValidation()
    {
        notValidLocation = false;
    }
    private async Task Prompt()
    {
        var parameters = new DialogParameters();
        string contentText = "Voucher/s";
        string dialogTitle = Enums.ActionMode.Route + contentText;
        parameters.Add("contentText", contentText);
        parameters.Add("actionMode", Enums.ActionMode.Route);
        var options = new DialogOptions()
        {
            CloseButton = false,
            MaxWidth = MaxWidth.ExtraSmall,
            FullWidth = true,
            NoHeader = false,
            DisableBackdropClick = true
        };
        var resultDialog = await dialogService.Show<Shared.Dialogs.GenericPromptDialogs.GenericPrompt>(dialogTitle, parameters, options).Result;
        if (!resultDialog.Cancelled)
        {   
            await SaveVoucherRoute();
            Extensions.ShowAlert("Voucher/s has been routed.",Variant.Filled,snackBarService,Severity.Info);
            MudDialog.Cancel();
            GlobalClass.voucherRoute = new();
            GlobalClassList.selectedVoucherToRoute.Clear();
        }   
    }
}