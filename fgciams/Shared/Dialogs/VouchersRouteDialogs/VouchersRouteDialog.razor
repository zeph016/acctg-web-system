@inject IVoucherRouteService routeService
@inject NavigationManager navigationManager
@inject IGlobalService globalService
@inject ISnackbar SnackbarService
@inject IDialogService dialogService

<MudDialog Class='customdialog3'>
    <TitleContent>
        <div class='d-flex align-center'>
            <MudIcon Icon="@Icons.Material.Filled.Route" Class="mr-1"  Size='Size.Medium' />
            <MudText Typo='Typo.button'>Route Vouchers</MudText>
        </div>
    </TitleContent>
    <DialogContent>
        <MudPaper Square Elevation='0'>
            <div class="vroutedialog">
                <div class='vroutedialog__grid'>
                    <div class="vroutedialog-lbldate">
                        <MudSpacer />
                        <p class='vroutedialog__lbl'>Date:</p>
                    </div>
                    <div class="vroutedialog-date">
                        <MudDatePicker Class='txt-top-0 font12-txtfield txtfield-right mt-1' @bind-Date='GlobalClass.voucherRoute.RouteDate' IconSize='Size.Small'  @ref='@datePicker'
                            Margin='Margin.Dense' DisableToolbar DisableUnderline >
                            <PickerActions>
                                <MudButton Class='btn-ios-d font12' OnClick='DateRangeToday' Size='Size.Small' DisableElevation>
                                    Today
                                </MudButton>
                                <MudSpacer />
                                <MudButton Class='btn-ios-d font12' OnClick='CancelDateRangePicker' Size='Size.Small' DisableElevation>
                                    Cancel
                                </MudButton>
                                <MudButton Class='btn-ios-d font12' OnClick='SubmitDateRangePicker' Size='Size.Small' DisableElevation Color='Color.Primary' Variant='Variant.Filled'>
                                    Submit
                                </MudButton>
                            </PickerActions>
                        </MudDatePicker>
                    </div>
                    <div class="vroutedialog-location">
                        <p class='vroutedialog__lbl'>Location:</p>
                        <BlazoredTypeahead SearchMethod='LoadRoutes' DisableClear placeholder='Route to'
                            @bind-Value='locationRoute' Debounce="300" MaximumSuggestions='5'>
                            <SelectedTemplate>
                                @if (locationRoute.ProjectId != 0) {
                                    <MudText Class='font12'>@context.ProjectName | @context.Location</MudText>
                                } else if (notValidLocation) {
                                <MudText Class='font12 font-bold txt-uppercase' Color='Color.Error'>Required</MudText>
                                } else {
                                    <MudText Class='font12'> - </MudText>
                                }
                            </SelectedTemplate>
                            <ResultTemplate>
                                <div class='d-flex flex-column'>
                                    <small class='font-bold'>@context.ProjectName</small>
                                    <small>@context.Location</small>
                                    <small>@Extensions.ProjectReference(context)</small>
                                </div> 
                            </ResultTemplate>
                        </BlazoredTypeahead>
                    </div>
                    <div class="vroutedialog-reason">
                        <p class='vroutedialog__lbl'>Reason:</p>
                        <MudTextField @bind-Value="@GlobalClass.voucherRoute.Reason"  Variant="Variant.Outlined" Margin="Margin.Dense"
                            Lines='3' />
                    </div>
                    <div class="vroutedialog-remarks">
                        <p class='vroutedialog__lbl'>Remarks:</p>
                        <MudTextField @bind-Value="@GlobalClass.voucherRoute.Remarks"  Variant="Variant.Outlined" Margin="Margin.Dense"
                            Lines='3' />
                    </div>
                    <div class="vroutedialog-controlnumbers">
                        <div class='vroutedialog-controlnumbers__grid'>
                            <div class="vroutediasub-title">
                                <p class='vroutedialog__lbl'>Vouchers</p>
                            </div>
                            <div class="vroutediasub-content">
                                @if(GlobalClassList.selectedVoucherToRoute.Count != 0)
                                {
                                    foreach(var vouchers in GlobalClassList.selectedVoucherToRoute)
                                    {
                                        <MudChip Size='Size.Small' Color='Color.Error' Label Variant='Variant.Outlined'>
                                            <small class='font-bold'>@vouchers.ControlNumber</small>
                                        </MudChip>
                                    }
                                }
                            </div>
                            <div class="vroutediasub-footer">
                                <strong class='vroutedialog__lbl'>Selected: @GlobalClassList.selectedVoucherToRoute.Count()</strong>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </MudPaper>
    </DialogContent>
    <DialogActions>
        <MudButton Class='btn-ios-d font12' OnClick="Cancel" Variant='Variant.Text' Size='Size.Small' DisableElevation>Cancel</MudButton>
        <MudButton Class='btn-ios-d font12' OnClick="(()=>Validate())" Variant='Variant.Filled' Color="Color.Info" 
            Size='Size.Small' DisableElevation>
            Route
        </MudButton>
    </DialogActions>
</MudDialog>

@code{
    [CascadingParameter] public MudDialogInstance MudDialog { get; set; } = default!;
    private List<Project> locationRoutesList = new();
    private Project locationRoute = new();
    private bool notValidLocation;

    private MudDatePicker datePicker = new MudDatePicker();
    private void Cancel() => MudDialog.Close(DialogResult.Ok(3));
    private async Task Validate()
    {
        if(IsValidated())
        {
            await Prompt();
        }else
            Extensions.ShowAlert("Cannot route vouchers, location is required.",Variant.Filled,SnackbarService,Severity.Error);
    }
    private async Task SaveVoucherRoute()
    {
        //props needed
        GlobalClass.voucherRoute.LocationId = locationRoute.ProjectId;
        GlobalClass.voucherRoute.LocationCategoryId = locationRoute.ProjectCategoryId;
        GlobalClass.voucherRoute.UserId = GlobalClass.currentUserAccount.EmployeeId;
        GlobalClass.voucherRoute.Activity = "Add Route"; 
        await routeService.SaveRouteVouchers(GlobalClass.voucherRoute,GlobalClass.token);
    }
    private async Task<IEnumerable<Project>> LoadRoutes(string employeeName)
    {
        var filterParameter = new FilterParameter()
        {
            IsProject = true,
            ProjectName = employeeName
        };
        var locations = await globalService.LoadLocationRoutes(filterParameter,GlobalClass.token);
        return locations;
    }
   
    bool IsValidated()
    {
        ResetValidation();
        if(locationRoute.ProjectId == 0)
        {
            notValidLocation = true;
            return false;
        }
        return true;
    }

    private async Task Prompt()
    {
        var parameters = new DialogParameters();
        string contentText = "Voucher/s";
        string dialogTitle = Enums.ActionMode.Route + contentText;
        parameters.Add("contentText", contentText);
        parameters.Add("dialogTitle", "Route Vouchers");
        parameters.Add("actionMode", Enums.ActionMode.Route);
        var options = new DialogOptions()
        {
            CloseButton = false,
            MaxWidth = MaxWidth.ExtraSmall,
            FullWidth = true,
            NoHeader = false,
            DisableBackdropClick = true
        };
        var resultDialog = await dialogService.Show<Shared.Dialogs.GenericPromptDialogs.GenericPrompt>(dialogTitle, parameters, options).Result;
        if (!resultDialog.Canceled)
        {   
            await SaveVoucherRoute();
            Extensions.ShowAlert("Voucher/s routed.",Variant.Filled,SnackbarService,Severity.Info);
            MudDialog.Cancel();
            GlobalClass.voucherRoute = new();
            GlobalClassList.selectedVoucherToRoute.Clear();
        }   
    }

    private void DateRangeToday()
    {
        GlobalClass.voucherRoute.RouteDate = DateTime.Now;
        SubmitDateRangePicker();
    }

    private void ResetValidation() => notValidLocation = false;
    private void CancelDateRangePicker() => datePicker.Close(false);
    private void SubmitDateRangePicker() =>  datePicker.Close(true);
    private async Task LocationRouteList() => locationRoutesList = await globalService.LoadLocationRoutes(new FilterParameter(){isActive=true},GlobalClass.token);
}