@inject ISnackbar SnackbarService

<MudDialog Class='customdialog'>
    <TitleContent>
        <div class='d-flex align-center'>
            <MudText Class='txt-uppercase ltr-spacing-1px' Typo='Typo.h6'>@dialogTitle</MudText>
            <MudSpacer />
            @if(!string.IsNullOrWhiteSpace(controlNumber))
            {
                <MudChip Class='txt-uppercase font-bold' Label Variant='Variant.Filled'>
                    <small class='color-white'>@controlNumber</small>
                </MudChip>
            }
        </div>
    </TitleContent>
    <DialogContent>
        <MudText Class='font14 pa-2'>
            @contentText
        </MudText>
        @if(isVoid)
        {
            <MudTextField T=string @bind-value='@GlobalVariable.PromptRemarks' Class='font14 pa-2' Label='Remarks'></MudTextField>
        }
        <MudText Class="font12 mud-text-secondary pa-2">@note</MudText>
        @if(isCheckModule)
        {
            <MudDatePicker @bind-Date='GlobalClass.checkModel.StatusDate' Label='Status Date' Margin='Margin.Dense'></MudDatePicker>
        }
    </DialogContent>
    <DialogActions>
        <MudButton Class='btn-ios-d font12' OnClick="Cancel" Variant='Variant.Text' Size='Size.Small' DisableElevation>Cancel</MudButton>
        <MudButton Class='btn-ios-d font12' OnClick="Submit" Variant='Variant.Filled' Color="@color" Size='Size.Small' DisableElevation>@buttonText</MudButton>
    </DialogActions>
</MudDialog>

@code {
    [CascadingParameter] MudDialogInstance MudDialog { get; set; } = new MudDialogInstance();
    [Parameter] public string dialogTitle { get; set; } = string.Empty;
    [Parameter] public string contentText { get; set; } = string.Empty;
    [Parameter] public string buttonText { get; set; } = string.Empty;
    [Parameter] public Enums.ActionMode actionMode { get; set; }
    [Parameter] public bool isCheckModule { get; set; } = false;
    [Parameter] public string controlNumber { get; set; } = string.Empty;
    [Parameter] public string note { get; set; } = string.Empty;
    [Parameter] public bool isVoid { get; set; } = false;
    private Color color { get; set; }
    private bool dataFetched;
    private DateTime? checkStatusDate = DateTime.Now;

    public override async Task SetParametersAsync(ParameterView parameters)
    {
        await base.SetParametersAsync(parameters);
    }

    protected override void OnInitialized()
    {
        contentText = contentText.ToLowerInvariant();
        Console.WriteLine(actionMode);
        CheckActionsMode();
        CompletedFetch();
    }

    private void CompletedFetch()
    {
        dataFetched = true;
        Task.Run(StateHasChanged);
    }

    private void Submit()
    {
        if(actionMode == Enums.ActionMode.Void)
            if(GlobalVariable.PromptRemarks.Equals(string.Empty))
                Extensions.ShowAlert("Remarks are required.", Variant.Filled, SnackbarService, Severity.Error);
            else
                MudDialog.Close(DialogResult.Ok(true));
        else
            MudDialog.Close(DialogResult.Ok(true));
            
    }
    private void Cancel() => MudDialog.Cancel();

    private void CheckActionsMode()
    {
        if (actionMode == Enums.ActionMode.Create) {
            contentText = $"Are you sure you want to"
                            + $"{(contentText.Contains("collection", StringComparison.InvariantCultureIgnoreCase) ? " deposit" : " save")}"
                            + $" this {contentText}?";
            buttonText = "Add";
            color = Color.Info;
        } else if (actionMode == Enums.ActionMode.Update) {
            contentText = $"Are you sure you want to update this {contentText}?";
            buttonText = "Update";
            color = Color.Info;
        } else if (actionMode == Enums.ActionMode.Approve) {
            contentText = $"Are you sure you want to approve {contentText}?";
            buttonText = "Approve";
            color = Color.Success;
        } else if (actionMode == Enums.ActionMode.Cancel) {
            contentText = $"Are you sure you want to cancel {contentText}?";
            buttonText = "Confirm";
            color = Color.Error;
        } else if (actionMode == Enums.ActionMode.Receive) {
            contentText = $"Are you sure you want to receive {contentText}?";
            buttonText = "Receive";
            color = Color.Info;
        } else if(actionMode == Enums.ActionMode.Delete) {
            contentText = $"Are you sure you want to remove {contentText}?";
            buttonText = "Remove";
            color = Color.Error;
        }
        else if(actionMode == Enums.ActionMode.Void)
        {
            contentText = $"Are you sure you want to void {contentText}?";
            buttonText = "Confirm";
            color = Color.Error;
        }
        else if(actionMode == Enums.ActionMode.Release)
        {
            contentText = $"Are you sure you want to release this {contentText}?";
            buttonText = "Release";
            color = Color.Info;
        }
        else if(actionMode == Enums.ActionMode.Clear)
        {
            contentText = $"Are you sure you want to clear this {contentText}?";
            buttonText = "Clear";
            color = Color.Info;
        }
        else if(actionMode == Enums.ActionMode.Deactivate)
        {
            contentText = $"Are you sure you want to deactivate this {contentText}?";
            note = "Note: This will remove the item from the list.";
            buttonText = "Deactivate";
            color = Color.Error;
        }
        else if(actionMode == Enums.ActionMode.Route)
        {
            contentText = $"Are you sure you want to route this {contentText}?";
            buttonText = "Route";
            color = Color.Info;
        }
        else if(actionMode == Enums.ActionMode.Invalid)
        {
            contentText = $"Are you sure you want to remove the EWT of the payee?";
            buttonText = "OK";
            note = "Note: This will not affect the EWT value of payee in configuration.";
            color = Color.Warning;
        }
        else if (actionMode == Enums.ActionMode.Prompt)
        {
            contentText = $"Are you sure you want to {contentText}?";
            color = Color.Success;
        }
    }
}

