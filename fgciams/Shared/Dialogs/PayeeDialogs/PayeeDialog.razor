@inject IPayeeService payeeService
@inject IPayeeCategoryService payeeCategoryService
@inject ISnackbar SnackbarService
@inject IDialogService dialogService

<MudDialog Class="customdialog2">
    <TitleContent>
        <div class='d-flex align-center'>
            @if (GlobalClass.payee.Id != 0)
            {
                <MudIcon Icon="@Icons.Material.Filled.Edit" Class="mr-3" />
            }
            else
            {
                <MudIcon Icon="@Icons.Material.Filled.Add" Class="mr-3" />
            }
            <MudText Class='txt-uppercase' Typo='Typo.h6'>@dialogTitle</MudText>
        </div>
    </TitleContent>
    <DialogContent>
        <MudPaper Class='pa-2' Elevation='0'>
            <MudGrid Class='pa-2' Spacing='1'>
                <MudItem xs='12'>
                    <MudTextField @bind-Value='@GlobalClass.payee.PayeeName' Label='Payee Name' Error=@notValidPayee ErrorText="Required*" HelperText="Required*"
                        Margin='Margin.Dense' />
                </MudItem>
                <MudItem xs='3'>
                    <MudTextField @bind-Value='@GlobalClass.payee.ShortcutName' Label='Short Name' Error=@notValidShortName ErrorText="Required*" HelperText="Required*"
                         Margin='Margin.Dense' />
                </MudItem>
                 <MudItem xs='6'>
                    @if(isCorporated)
                    {
                     <MudTextField @bind-Value='@GlobalClass.payee.TINNo' Label='TIN #' Mask="@(new PatternMask("000-000-000-00000"))" HelperText='Required*'
                        Error=@notValidTIN ErrorText="Required*" Margin='Margin.Dense' />
                    } else 
                    {
                        <MudTextField @bind-Value='@GlobalClass.payee.TINNo' Label='TIN #' Mask="@(new PatternMask("000-000-000"))" HelperText='Required*'
                        Error=@notValidTIN ErrorText="Required*" Margin='Margin.Dense' />
                    }
                </MudItem>
                <MudItem xs='3'>
                     <MudCheckBox T='bool' CheckedChanged='( ()=> isCorporated = !isCorporated )' Checked='@isCorporated' Label='Corporated' Size='Size.Medium'/>
                </MudItem>
                <MudItem xs='6'>
                    <MudTextField @bind-Value='@GlobalClass.payee.PayeeContactNo' Label='Contact #'  Mask="@(new PatternMask("0000 000 0000"))" HelperText="ex. 0922 132 4444 Required*"
                         Margin='Margin.Dense' />
                </MudItem>
                <MudItem xs='6'>
                    @if (GlobalClass.payee.Id != 0)
                    {
                        <MudSelect @bind-Value='@GlobalClass.payee.PayeeCategoryId' Label='Category' Error=@notValidCategory ErrorText="Required*" HelperText="Required*"  Margin='Margin.Dense' >
                            @foreach (var item in GlobalClassList.payeeCategoryList)
                            {
                                <MudSelectItem Value="@item.Id">@item.CategoryName</MudSelectItem>
                            }
                        </MudSelect>
                    }
                    else
                    {
                        <MudSelect @bind-Value='@GlobalClass.payee.PayeeCategory' Label='Category' Error=@notValidCategory ErrorText="Required*" HelperText="Required*"  Margin='Margin.Dense' >
                            @foreach (var item in GlobalClassList.payeeCategoryList)
                            {
                                <MudSelectItem Value="@item">@item.CategoryName</MudSelectItem>
                            }
                        </MudSelect>
                    }
                </MudItem>
                <MudItem xs='12'>
                    <MudTextField @bind-Value='@GlobalClass.payee.PayeeAddress' Variant='Variant.Text' Label='Address'
                        Margin='Margin.Dense' HelperText='Required*' />
                </MudItem>
                <MudItem xs='12'>
                    <MudTextField @bind-Value='@GlobalClass.payee.Remarks' Variant='Variant.Filled' Lines='2' Label='Remarks'
                        Margin='Margin.Dense' />
                </MudItem>
                <MudItem xs='10'>
                    <MudSelect Margin="Margin.Dense" Text="@GlobalClass.payee.TaxCodeName" Label='Tax Code' Placeholder="Code" HelperText="Required*"
                        Variant='Variant.Outlined' T='TaxCodeModel' Value='taxCode'  ValueChanged="@((TaxCodeModel tc)=>SelectedTaxCode(tc))">
                        @foreach (var item in GlobalClassList.taxCodes)
                        {
                            <MudSelectItem Value="@item">@item.Description</MudSelectItem>
                        }
                    </MudSelect>
                </MudItem>
                <MudItem xs='2'>
                    <MudTextField @bind-Value='@GlobalClass.payee.TaxRate' Format="N2" Margin="Margin.Dense" Label='Rate' ReadOnly=true
                    Variant='Variant.Outlined'/>
                </MudItem>
            </MudGrid>
        </MudPaper>
    </DialogContent>
    <DialogActions>
        @if(GlobalClass.payee.Id != 0)
        {
            <MudCheckBox @bind-Checked='@GlobalClass.payee.IsActive' Label='Active' ReadOnly=@isReadOnly
                Size='Size.Small' Color='Color.Dark' Dense />
        }
         <MudCheckBox @bind-Checked='@GlobalClass.payee.HasInvoice' Label='Invoice?' 
            Size='Size.Small' Color='Color.Dark' Dense />
        <MudSpacer />
        <MudButton Class='btn-ios-d font12' OnClick="Cancel" Variant='Variant.Text' Size='Size.Small' DisableElevation>Cancel</MudButton>
        <MudButton Class='btn-ios-d font12' OnClick="Submit" Variant='Variant.Filled' Color='@(!GlobalClass.payee.IsActive ? Color.Error : @color)' Size='Size.Small' DisableElevation>
            @(!GlobalClass.payee.IsActive ? "Deactivate" : @buttonText)
        </MudButton>
    </DialogActions>
</MudDialog>

@code{
    [CascadingParameter] MudDialogInstance MudDialog { get; set; } = default!;
    [Parameter] public Color color { get; set; }
    [Parameter] public string dialogTitle { get; set; } = string.Empty;
    [Parameter] public string buttonText { get; set; } = string.Empty;
    [Parameter] public Enums.ActionMode currentAction { get; set; }
    private bool isReadOnly = false;
    private bool notValidPayee,notValidCategory,notValidShortName,notValidTIN,isCorporated = false;
    private TaxCodeModel taxCode = new();
    protected override async Task OnInitializedAsync()
    {
        if (currentAction == Enums.ActionMode.Create)
        {
            taxCode = GlobalClassList.taxCodes.Where(x=>x.TaxRate==0).FirstOrDefault()?? new();
            GlobalClass.payee.IsActive = true;
            isReadOnly = true;
        } else
        {
            taxCode = GlobalClassList.taxCodes.Where( x => x.Id == GlobalClass.payee.TaxCodeId).FirstOrDefault()?? new();
        }
        await Task.Delay(1);
    }

    private void Cancel()
    {
        GlobalClass.payee.IsActive = !GlobalClass.payee.IsActive ? true : true;
        MudDialog.Cancel();
    }

    private async Task Submit()
    {
        if(!GlobalClass.payee.IsActive)
        {
            if(!Common.Privileges.isPrivilegeFunction(Enums.AISModuleFunctions.Delete))
            {
               Extensions.ShowAlert("Account has been restricted to deactivate Payee.", Variant.Filled, SnackbarService, Severity.Error);
                return;
            }
            currentAction = Enums.ActionMode.Deactivate;
            await Prompt();
        }
        else if (IsValidated())
            await Prompt();
        else
            Extensions.ShowAlert("Cannot "+currentAction.ToString().ToLower()+" payee"+GlobalVariable.errorPromptText,Variant.Filled,SnackbarService,Severity.Error);
    }
    private async Task Prompt()
    {
        var parameters = new DialogParameters();
        string contentText = "Payee";
        string dialogTitle = currentAction.ToString();
        parameters.Add("contentText", contentText);
        parameters.Add("dialogTitle", dialogTitle);
        parameters.Add("actionMode", currentAction);
        var options = new DialogOptions() { CloseButton = false, MaxWidth = MaxWidth.ExtraSmall, FullWidth = true, NoHeader = false, DisableBackdropClick = true };
        var resultDialog = await dialogService.Show<Shared.Dialogs.GenericPromptDialogs.GenericPrompt>(dialogTitle, parameters, options).Result;
        if (!resultDialog.Canceled) 
        {   
            try
            {
                if (currentAction == Enums.ActionMode.Create) {
                    GlobalClass.payee.PayeeCategoryId = GlobalClass.payee.PayeeCategory.Id;
                    GlobalClass.payee = await payeeService.AddPayee(GlobalClass.payee, GlobalClass.token);
                    GlobalClassList.payeeList.Add(GlobalClass.payee);
                } 
                else
                {
                    GlobalClass.payee = await payeeService.UpdatePayee(GlobalClass.payee, GlobalClass.token);
                }
                if(GlobalVariable.AMSHubConnection != null)
                    await GlobalVariable.AMSHubConnection.InvokeAsync("SavePayee",GlobalClass.payee);
                MudDialog.Close(DialogResult.Ok(currentAction));
            } catch(Exception ex) {
                Extensions.ShowAlert(ex.Message,Variant.Filled,SnackbarService,Severity.Info);
            }
        }
        else if (currentAction == Enums.ActionMode.Deactivate)
        {
            GlobalClass.payee.IsActive = !GlobalClass.payee.IsActive;
            MudDialog.Cancel();
        }
    }
    private bool IsValidated()
    {
        ResetValidation();
        if(String.IsNullOrEmpty(GlobalClass.payee.PayeeName))
            notValidPayee = true;
        if(String.IsNullOrEmpty(GlobalClass.payee.ShortcutName))
            notValidShortName = true;
        if(String.IsNullOrEmpty(GlobalClass.payee.TINNo))
            notValidTIN = true;
        if(GlobalClass.payee.PayeeCategory == null || String.IsNullOrEmpty(GlobalClass.payee.PayeeCategory.CategoryName))
            notValidCategory = true;
        if(notValidPayee || notValidCategory || notValidShortName || notValidTIN) {
            GlobalVariable.errorPromptText = " incomplete field/s."; return false; }
         if(GlobalClassList.payeeList.Any(x=>x.PayeeName == GlobalClass.payee.PayeeName && x.Id != GlobalClass.payee.Id)) {
            GlobalVariable.errorPromptText = " duplicate entry found for payee name."; return false;}
        return true;
    }
    private void ResetValidation()
    {
        notValidTIN = false;
        notValidPayee = false;
        notValidCategory = false;
        notValidShortName = false;
    }
    private void SelectedTaxCode(TaxCodeModel tc)
    {
        taxCode = tc;
        GlobalClass.payee.TaxCodeId = taxCode.Id;
        GlobalClass.payee.TaxRate = decimal.Round(taxCode.TaxRate,2);
    }
}