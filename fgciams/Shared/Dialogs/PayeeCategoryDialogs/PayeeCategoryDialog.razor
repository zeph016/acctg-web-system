@inject IPayeeCategoryService payeeCategoryServices
@inject Blazored.LocalStorage.ILocalStorageService ILocalStorageService

<MudDialog Class="customdialog">
    <TitleContent>
        <div class='d-flex align-center'>
            @if (GlobalClass.payeeCategory.Id != 0)
            {
                <MudIcon Icon="@Icons.Filled.Edit" Class="mr-3 mb-n1ank" />
            }
            else
            {
                <MudIcon Icon="@Icons.Filled.Add" Class="mr-3 mb-n1" />
            }
            <MudText Typo='Typo.h6'>@dialogTitle</MudText>
        </div>
    </TitleContent>
    <DialogContent>
        <div class='customdialog__content-container'>
            <MudGrid Spacing='1'>
                <MudItem xs='9'>
                    <MudTextField @bind-Value='@GlobalClass.payeeCategory.CategoryName' Label='Category Name' />
                </MudItem>
                <MudItem Class='d-flex align-center' xs='3'>
                    <MudCheckBox @bind-Checked='@GlobalClass.payeeCategory.IsActive' Label='Active' />
                </MudItem>
            </MudGrid>
        </div>
    </DialogContent>
    <DialogActions>
        <MudButton OnClick="Cancel" Variant='Variant.Text'>Cancel</MudButton>
        <MudButton OnClick="Submit" Variant='Variant.Filled' Color="@color">@buttonText</MudButton>
    </DialogActions>
</MudDialog>
@code{
    [CascadingParameter] MudDialogInstance MudDialog { get; set; } = default!;
    [Parameter] public Color color { get; set; }
    [Parameter] public string dialogTitle { get; set; } = string.Empty;
    [Parameter] public string buttonText { get; set; } = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        if (GlobalClass.payeeCategory.Id == 0)
            GlobalClass.payeeCategory.IsActive = true;
        await Task.Delay(1);
    }

    void Cancel()
    {
        MudDialog.Cancel();
    }

    private async Task Submit()
    {
        if (GlobalClass.payeeCategory.Id != 0)
        {
            await payeeCategoryServices.UpdatePayeeCategory(GlobalClass.payeeCategory, GlobalClass.token);
            MudDialog.Close(DialogResult.Ok(1));
        }
        else
        {
            GlobalClass.payeeCategory = await payeeCategoryServices.AddPayeeCategory(GlobalClass.payeeCategory, GlobalClass.token);
            GlobalClassList.payeeCategoryList.Add(GlobalClass.payeeCategory);
            MudDialog.Close(DialogResult.Ok(0));
        }
       
    }
} 