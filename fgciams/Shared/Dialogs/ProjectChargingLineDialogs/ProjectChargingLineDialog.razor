 @inject IProjectChargingLineService projectChargingLineService
 @inject ISnackbar snackbar
 @inject IDialogService dialogService

 <MudDialog Class="customdialog2">
   <TitleContent>
        <div class='d-flex align-center'>
            @if (GlobalClass.projectChargingLine.Id != 0)
            {
                <MudIcon Icon="@Icons.Filled.Edit" Class="mr-3 mb-n1ank" />
            }
            else
            {
                <MudIcon Icon="@Icons.Filled.Add" Class="mr-3 mb-n1" />
            }
            <MudText Class='txt-uppercase' Typo='Typo.h6'>@dialogTitle</MudText>
        </div>
    </TitleContent>
    <DialogContent>
      <MudPaper Class='pa-2' Elevation='0'>
        <MudGrid Class='pa-2' Spacing='1'>
          <MudItem xs='12'>
            <MudTextField @bind-Value='@GlobalClass.projectChargingLine.ProjectName' Label='Project Name' Error=@reqProjectName ErrorText='Project name is required'
              HelperText='Required*' Margin='Margin.Dense' />
          </MudItem>
          <MudItem xs='12'>
            <MudTextField @bind-Value='@GlobalClass.projectChargingLine.Remarks' Variant='Variant.Filled' Lines='3' Label='Remarks' 
              Margin='Margin.Dense' />
          </MudItem>
        </MudGrid>
      </MudPaper>
    </DialogContent>
    <DialogActions>
      @if(GlobalClass.projectChargingLine.Id != 0) 
      {
        <MudCheckBox @bind-Checked='@GlobalClass.projectChargingLine.IsActive' Label='Active' 
          Size='Size.Small' Color='Color.Dark' Dense/>
      }
      <MudSpacer />
      <MudButton Class='btn-ios-d font12' OnClick="Cancel" Variant='Variant.Text' Size='Size.Small' DisableElevation>Cancel</MudButton>
      <MudButton Class='btn-ios-d font12' OnClick="Submit" Variant='Variant.Filled' Color='@(!GlobalClass.projectChargingLine.IsActive ? Color.Error : @color)' Size='Size.Small' DisableElevation>
        @(!GlobalClass.projectChargingLine.IsActive ? "Deactivate" : @buttonText)
      </MudButton>
    </DialogActions>
</MudDialog>

@code{
  [CascadingParameter] MudDialogInstance MudDialog { get; set; } = default!;
  [Parameter] public Color color { get; set; }
  [Parameter] public string dialogTitle { get; set; } = string.Empty;
  [Parameter] public string buttonText { get; set; } = string.Empty;
  [Parameter] public Enums.ActionMode currentAction { get; set; }
  private bool reqProjectName;

  protected override async Task OnInitializedAsync()
  {
    if (currentAction == Enums.ActionMode.Create)
        GlobalClass.projectChargingLine.IsActive = true;
    await Task.Delay(1);
  }
  void Cancel()
  {
    GlobalClass.projectChargingLine.IsActive = !GlobalClass.projectChargingLine.IsActive ? true : true;
    MudDialog.Cancel();
  }
  private async Task Submit()
  {
    if(!GlobalClass.projectChargingLine.IsActive)
    {
      currentAction = Enums.ActionMode.Deactivate;
      await PromptMessage();
    }
    else if (ValidateEntries())
      await PromptMessage();
    else
      Extensions.ShowAlert("Cannot " 
        + (currentAction == Enums.ActionMode.Create ? "add" : (currentAction == Enums.ActionMode.Update ? "update" : "")) 
        + " Project Charging Line, Incomplete fields.", Variant.Filled, snackbar, Severity.Error);
  }
  private bool ValidateEntries()
  {
    bool valid = true;
    if(string.IsNullOrEmpty(GlobalClass.projectChargingLine.ProjectName)) {

      reqProjectName = true;
      valid = false;

    } else reqProjectName = false;

    return valid;
  }
  private async Task PromptMessage()
  {
      var parameters = new DialogParameters();
      string contentText = "project ";
      string dialogTitle = currentAction.ToString();
      parameters.Add("actionMode", currentAction);
      parameters.Add("dialogTitle", dialogTitle);
      parameters.Add("contentText", contentText);
      var options = new DialogOptions() { CloseButton = false, MaxWidth = MaxWidth.ExtraSmall, FullWidth = false, NoHeader = false, DisableBackdropClick = true };
      var resultDialog = await dialogService.Show<Shared.Dialogs.GenericPromptDialogs.GenericPrompt>(dialogTitle, parameters, options).Result;
      if (!resultDialog.Cancelled)
      {
        try
        {
          if (currentAction == Enums.ActionMode.Create) {
            GlobalClass.projectChargingLine = await projectChargingLineService.AddProjectChargingLine(GlobalClass.projectChargingLine, GlobalClass.token);
            GlobalClassList.projectChargingLines.Add(GlobalClass.projectChargingLine);
          } else
              await projectChargingLineService.UpdateProjectChargingLine(GlobalClass.projectChargingLine, GlobalClass.token);
            MudDialog.Close(DialogResult.Ok(currentAction));
        }
        catch (SystemException ex) {
          Extensions.ShowAlert(ex.Message, Variant.Filled, snackbar, Severity.Error);
        }
      }
      else if (currentAction == Enums.ActionMode.Deactivate)
      {
        GlobalClass.projectChargingLine.IsActive = !GlobalClass.projectChargingLine.IsActive;
        MudDialog.Cancel();
      }
  }
}