 @inject IProjectChargingLineService projectChargingLineService
 @inject ISnackbar snackbar

 <MudDialog Class="customdialog">
   <TitleContent>
        <div class='d-flex align-center'>
            @if (GlobalClass.projectChargingLine.Id != 0)
            {
                <MudIcon Icon="@Icons.Filled.Edit" Class="mr-3 mb-n1ank" />
            }
            else
            {
                <MudIcon Icon="@Icons.Filled.Add" Class="mr-3 mb-n1" />
            }
            <MudText Typo='Typo.h6'>@dialogTitle</MudText>
        </div>
    </TitleContent>
    <DialogContent>
      <div class='customdialog__content-conainer'>
        <MudGrid Spacing='1'>
          <MudItem xs='9'>
            <MudTextField @bind-Value='@GlobalClass.projectChargingLine.ProjectName' Label='Project Name'/>
          </MudItem>
          <MudItem Class='d-flex align-center' xs='3'>
            <MudCheckBox @bind-Checked='@GlobalClass.projectChargingLine.IsActive' Label='Active' />
          </MudItem>
          <MudItem xs='12'>
            <MudTextField @bind-Value='@GlobalClass.projectChargingLine.Remarks' Variant='Variant.Filled' Lines='3' Label='Remarks' />
          </MudItem>
        </MudGrid>
      </div>
    </DialogContent>
    <DialogActions>
        <MudButton OnClick="Cancel" Variant='Variant.Text'>Cancel</MudButton>
        <MudButton OnClick="Submit" Variant='Variant.Filled' Color="@color">@buttonText</MudButton>
    </DialogActions>
</MudDialog>

@code{
  [CascadingParameter] MudDialogInstance MudDialog { get; set; } = default!;
  [Parameter] public Color color { get; set; }
  [Parameter] public string dialogTitle { get; set; } = string.Empty;
  [Parameter] public string buttonText { get; set; } = string.Empty;

  protected override async Task OnInitializedAsync()
  {
    if (GlobalClass.projectChargingLine.Id == 0)
        GlobalClass.projectChargingLine.IsActive = true;
    await Task.Delay(1);
  }
  void Cancel()
  {
      MudDialog.Cancel();
  }
  private async Task Submit()
  {
    if (GlobalClass.projectChargingLine.Id != 0)
    {
      try
      {
        await projectChargingLineService.UpdateProjectChargingLine(GlobalClass.projectChargingLine, GlobalClass.token);
        MudDialog.Close(DialogResult.Ok(1));
      }
      catch (System.Exception ex)
      {
         // TODO
         Extensions.ShowAlert(ex.Message, Variant.Filled, snackbar, Severity.Normal);
      }
    }
    else
    {
      try
      {
        GlobalClass.projectChargingLine = await projectChargingLineService.AddProjectChargingLine(GlobalClass.projectChargingLine, GlobalClass.token);
        GlobalClassList.projectChargingLines.Add(GlobalClass.projectChargingLine);
        MudDialog.Close(DialogResult.Ok(0));
      }
      catch (System.Exception ex)
      {
         // TODO
          Extensions.ShowAlert(ex.Message, Variant.Filled, snackbar, Severity.Normal);
      }
    }
  }
}