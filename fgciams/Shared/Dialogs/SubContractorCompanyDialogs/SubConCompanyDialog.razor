@inject ISubContractorCompanyService subContractorCompanyService
@inject ISnackbar snackbarService

<MudDialog Class="customdialog">
  <TitleContent>
      <div class='d-flex align-center'>
          @if (GlobalClass.subContractorCompany.Id != 0)
          {
              <MudIcon Icon="@Icons.Filled.Edit" Class="mr-3 mb-n1ank" />
          }
          else
          {
              <MudIcon Icon="@Icons.Filled.Add" Class="mr-3 mb-n1" />
          }
          <MudText Typo='Typo.h6'>@dialogTitle</MudText>
      </div>
  </TitleContent>
    <DialogContent>
      <div class='customdialog__content-container'>
        <MudGrid Spacing='1'>
          <MudItem xs='12'>
            <MudTextField @bind-Value='@GlobalClass.subContractorCompany.CompanyName' Label='Company Name' Error=@reqSubCom ErrorText='Company name is required'/>
          </MudItem>
          <MudItem xs='9'>
            <MudTextField @bind-Value='@GlobalClass.subContractorCompany.ShortcutName' Label='Short Name' Error=@reqSubComShrt ErrorText='Shortcut name is required'/>
          </MudItem>
          @if(GlobalClass.subContractorCompany.Id != 0) {

          <MudItem Class='d-flex align-center' xs='3'>
            <MudCheckBox @bind-Checked='@GlobalClass.subContractorCompany.IsActive' Label='Active' />
          </MudItem>

          }
  
          <MudItem xs='12'>
            <MudTextField @bind-Value='@GlobalClass.subContractorCompany.Remarks' Label='Remarks' />
          </MudItem>
        </MudGrid>
      </div>
    </DialogContent>
    <DialogActions>
        <MudButton OnClick="Cancel" Variant='Variant.Text'>Cancel</MudButton>
        <MudButton OnClick="Submit" Variant='Variant.Filled' Color="@color">@buttonText</MudButton>
    </DialogActions>
</MudDialog>
@code{
  [CascadingParameter] MudDialogInstance MudDialog { get; set; } = default!;
  [Parameter] public Color color { get; set; }
  [Parameter] public string dialogTitle { get; set; } = string.Empty;
  [Parameter] public string buttonText { get; set; } = string.Empty;
  private bool reqSubCom, reqSubComShrt;
  protected override async Task OnInitializedAsync()
  {
      if (GlobalClass.subContractorCompany.Id == 0)
        GlobalClass.subContractorCompany.IsActive = true;
      await Task.Delay(1);
  }
  void Cancel()
  {
    MudDialog.Cancel();
  }

  private async Task Submit()
  {
    if (GlobalClass.subContractorCompany.Id != 0)
    {
      if(ValidateEntries()) {
        GlobalClass.subContractorCompany = await subContractorCompanyService.UpdateSubContractorCompany(GlobalClass.subContractorCompany, GlobalClass.token);
        MudDialog.Close(DialogResult.Ok(1));
      } else Extensions.ShowAlert("Please complete all required fields", Variant.Filled, snackbarService, Severity.Error);

    }
    else
    {
      if(ValidateEntries()) {
        GlobalClass.subContractorCompany = await subContractorCompanyService.AddSubContractorCompany(GlobalClass.subContractorCompany, GlobalClass.token);
        GlobalClassList.subContractorCompanies.Add(GlobalClass.subContractorCompany);
        MudDialog.Close(DialogResult.Ok(0));
      } else Extensions.ShowAlert("Please complete all required fields", Variant.Filled, snackbarService, Severity.Error);
      
    }
      if(GlobalVariable.AMSHubConnection != null && ValidateEntries())
        await GlobalVariable.AMSHubConnection.InvokeAsync("SaveSubContractorCompany", GlobalClass.subContractorCompany);
  }
  private bool ValidateEntries()
  {
    bool valid = true;
    if(string.IsNullOrEmpty(GlobalClass.subContractorCompany.CompanyName)) {

      reqSubCom = true;
      valid = false;

    } else reqSubCom = false;

    if(string.IsNullOrEmpty(GlobalClass.subContractorCompany.ShortcutName)) {

      reqSubComShrt = true;
      valid = false;

    } else reqSubComShrt = false;

    return valid;
  }
}