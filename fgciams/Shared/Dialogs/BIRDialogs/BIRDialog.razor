
@inject IBIRService birService
@inject IGlobalService globalService
@inject NavigationManager navigationManager
@inject ISupplierService supplierService
@inject ISnackbar SnackbarService

<MudDialog Class='customdialog2'>
    <TitleContent>
        <div class='d-flex align-center'>
            <MudIcon Icon="@Icons.Material.Filled.DocumentScanner" Class="mr-3" />
            <MudText Typo='Typo.h6'>B.I.R.</MudText>
        </div>
    </TitleContent>
    <DialogContent>
        @if(dataFetch)
        {
            <div class='font14-txtfield'>
                <MudGrid Spacing='1'>
                    <MudItem xs=4>
                        <MudPaper Class='d-flex align-center gap-2 pa-2'>
                            <MudText Class='wspace-nowrap font10 font-bold txt-uppercase'>Period: </MudText>
                            <MudDateRangePicker Class='txt-top-0 font14-txtfield txtfield-right' @bind-DateRange='@voucherPeriod' IconSize='Size.Small' 
                                Margin='Margin.Dense' DisableToolbar @ref='@dateRangePeriod'>
                                 <PickerActions>
                                    <MudButton Class='btn-ios-d font12' OnClick='(() => DateRangeToday(new(), dateRangePeriod))' Size='Size.Small' DisableElevation>
                                        Today
                                    </MudButton>
                                    <MudSpacer />
                                    <MudButton Class='btn-ios-d font12' OnClick='(() => CancelDateRangePicker(new(), dateRangePeriod))' Size='Size.Small' DisableElevation>
                                        Cancel
                                    </MudButton>
                                    <MudButton Class='btn-ios-d font12' OnClick='(() => SubmitDateRangePicker(new(), dateRangePeriod))' Size='Size.Small' DisableElevation Color='Color.Primary' Variant='Variant.Filled'>
                                        Submit
                                    </MudButton>
                                </PickerActions>
                            </MudDateRangePicker>
                        </MudPaper>
                    </MudItem>
                    <MudItem xs=4></MudItem>
                    <MudItem xs=4>
                        <MudPaper Class='d-flex align-center justify-space-around gap-2 pa-2'>
                            <p class='rflex-bold-title'>Control No.:</p>
                            <MudChip Color='Color.Error' Size='Size.Small' Label Variant='Variant.Outlined'>
                                <p class='font14'>@GlobalClass.voucher.ControlNumber</p>
                            </MudChip>
                        </MudPaper>
                    </MudItem>
                    <MudItem xs=12>
                        <MudPaper Class='d-flex flex-column pa-2 gap-2'>
                            <p class='rflex-bold-title'>Authorized Personnel</p>
                            <MudGrid Spacing='1'>
                                <MudItem xs=6>
                                     <MudTextField @bind-Value='@GlobalClass.voucherBIRModel.Personnel'  Margin='Margin.Dense'
                                 Placeholder="Full name" Variant='Variant.Outlined' />
                                </MudItem>
                                <MudItem xs=6>
                                    <MudTextField Mask="@(new PatternMask("000-000-000-000"))" @bind-Value='@GlobalClass.voucherBIRModel.PersonnelTin' Margin='Margin.Dense'
                                        Label='TIN' Placeholder="TIN" Variant='Variant.Outlined' /> 
                                </MudItem>
                            </MudGrid>
                        </MudPaper>
                    </MudItem>
                    <MudItem xs=12>
                        <MudPaper Class='d-flex flex-column pa-2 gap-2'>
                            <p class='rflex-bold-title'>Other Details</p>
                            <MudGrid Spacing='1'>
                                <MudItem xs=4>
                                     <MudTextField @bind-Value='@GlobalClass.voucherBIRModel.DV'  Margin='Margin.Dense'  Label='DV No.'
                                 Placeholder="Type here" Variant='Variant.Outlined' />
                                </MudItem>
                                <MudItem xs=2>
                                    <MudSelect T='string' @bind-Value='taxCode' Text='taxCode'  Margin='Margin.Dense'  Label='Code' Variant='Variant.Outlined'>
                                            @foreach(string codes in taxCodesATC)
                                            {
                                                <MudSelectItem Value="codes">@codes</MudSelectItem>
                                            }
                                    </MudSelect>
                                </MudItem>
                                <MudItem xs=2>
                                     <MudDatePicker @bind-Date='@GlobalClass.voucherBIRModel.VoucherDate'  Margin='Margin.Dense'  Label='DV Date'
                                  Variant='Variant.Outlined'></MudDatePicker>
                                </MudItem>
                                <MudItem xs=4>
                                    <MudTextField @bind-Value='@GlobalClass.voucherBIRModel.EWTText' Margin='Margin.Dense'
                                        Label='EWT' Placeholder="Type here" Variant='Variant.Outlined' /> 
                                </MudItem>
                            </MudGrid>
                        </MudPaper>
                    </MudItem>
                    <MudItem xs=12>
                        <MudPaper Class='d-flex flex-column pa-2 gap-2'>
                            <MudGrid Spacing='1' Class='pr-2'>
                                <MudItem xs=11>
                                     <MudTextField @bind-Value='@GlobalClass.voucherBIRModel.Expenses'  Margin='Margin.Dense'  Label='Expenses'
                                 Placeholder="Type here" Variant='Variant.Outlined' />
                                </MudItem>
                                 <MudItem xs=1 Class='d-flex align-center'>
                                    <MudCheckBox @bind-Checked='@GlobalClass.voucherBIRModel.ShowExpense' Label='Show' Dense></MudCheckBox>
                                </MudItem>
                            </MudGrid>
                        </MudPaper>
                    </MudItem>
                    <MudItem xs=6>
                        <MudPaper Class='d-flex flex-column pa-2 gap-2'>
                            <p class='rflex-bold-title'>Payee</p>
                            <BlazoredTypeahead SearchMethod='LoadPayee' DisableClear placeholder='Search'
                                ValueExpression="@(()=>payee)" MinimumLength='3' Value="payee" ValueChanged="@((Project p) => SelectedPayee(p) )" Debounce="300" MaximumSuggestions='10'>
                                <SelectedTemplate>
                                    <div class='overflow-hidden wspace-nowrap'>
                                        @if (context.ProjectId != 0) {
                                            <MudText Class='font14'>@context.ProjectName</MudText>
                                        } else {
                                            <MudText Class='font14'> Payee </MudText>
                                        }
                                    </div>
                                </SelectedTemplate>
                                <ResultTemplate>
                                    <div class='d-flex flex-column'>
                                        <small class='font-bold'>@context.ProjectName</small>
                                        <small>@context.Location</small>
                                        <small>@Extensions.ProjectReference(context)</small>
                                    </div>
                                </ResultTemplate>
                            </BlazoredTypeahead>
                            <MudTextField @bind-Value='@GlobalClass.voucherBIRModel.PayeeRegisteredAddress' Margin='Margin.Dense'
                                Label='Address' Placeholder="Address" ReadOnly=@readOnlyAddress Variant='Variant.Outlined' Lines='3'/>
                            <MudGrid Spacing='1'>
                                <MudItem xs=8>
                                    <MudTextField Mask="@(new PatternMask("000-000-000-000"))" @bind-Value='@GlobalClass.voucherBIRModel.PayeeTIN' Margin='Margin.Dense'
                                        Label='TIN' Placeholder="TIN" ReadOnly=@readOnlyTIN Variant='Variant.Outlined'/>
                                </MudItem>
                                <MudItem xs=4>
                                     <MudTextField Mask="@(new PatternMask("0000"))" @bind-Value='@GlobalClass.voucherBIRModel.PayeeZipCode' Margin='Margin.Dense'
                                Label='Zip Code' Placeholder="Zip Code" ReadOnly=@readOnlyZIPCode Variant='Variant.Outlined' />
                                </MudItem>
                            </MudGrid>
                        </MudPaper>
                    </MudItem>
                    <MudItem xs=6>
                        <MudPaper Class='d-flex flex-column pa-2 gap-2'>
                            <p class='rflex-bold-title'>Payor</p>
                            <BlazoredTypeahead SearchMethod='LoadPayor' DisableClear placeholder='Search'
                                ValueExpression="@(()=>payor)" MinimumLength='3' Value="payor" ValueChanged="@((Project p) => SelectedPayor(p) )" Debounce="300" MaximumSuggestions='10'>
                                <SelectedTemplate>
                                    <div class='overflow-hidden wspace-nowrap'>
                                        @if (context.ProjectId != 0) {
                                            <MudText Class='font14'>@context.ProjectName</MudText>
                                        } else {
                                            <MudText Class='font14'> Payor </MudText>
                                        }
                                    </div>
                                </SelectedTemplate>
                                <ResultTemplate>
                                    <div class='d-flex flex-column'>
                                        <small class='font-bold'>@context.ProjectName</small>
                                        <small>@context.Location</small>
                                        <small>@Extensions.ProjectReference(context)</small>
                                    </div>
                                </ResultTemplate>
                            </BlazoredTypeahead>
                            <MudTextField @bind-Value='@GlobalClass.voucherBIRModel.PayorRegisteredAddress' Margin='Margin.Dense'
                                Label='Address' Placeholder="Address" Variant='Variant.Outlined' Lines='3'/>
                            <MudGrid Spacing='1'>
                                <MudItem xs=8>
                                    <MudTextField Mask="@(new PatternMask("000-000-000-000"))" @bind-Value='@GlobalClass.voucherBIRModel.PayorTIN' Margin='Margin.Dense'
                                        Label='TIN' Placeholder="TIN" Variant='Variant.Outlined' /> 
                                </MudItem>
                                <MudItem xs=4>
                                    <MudTextField Mask="@(new PatternMask("0000"))" @bind-Value='@GlobalClass.voucherBIRModel.PayorZipCode' Margin='Margin.Dense'
                                        Label='Zip Code' Placeholder="Zip Code" Variant='Variant.Outlined' />
                                </MudItem>
                            </MudGrid>
                        </MudPaper>
                    </MudItem>
                </MudGrid>
            </div>
        }
        else
        {
            <SkeletonBIRDialog />
        }
    </DialogContent>
    <DialogActions>
        <div class='px-4 d-flex align-center justify-content-end gap-2'>
            <MudButton Class='btn-ios-d pa-1 font12' OnClick="Cancel" Variant='Variant.Text' DisableElevation>Cancel</MudButton>
            <MudButton Class='btn-ios-d py-1 px-2 font12' OnClick="Submit" Variant='Variant.Filled' Color="Color.Info" DisableElevation>Generate</MudButton>
        </div>
    </DialogActions>
</MudDialog>
@code {
    [CascadingParameter]
    public MudDialogInstance MudDialog { get; set; } = new MudDialogInstance();
    private bool dataFetch = false;
    private DateRange voucherPeriod = new DateRange();
    private Project payee = new();
    private Project payor = new();
    private SupplierModel currentSupplier = new();
    private bool readOnlyAddress,readOnlyZIPCode,readOnlyTIN;
    private MudDateRangePicker dateRangePeriod = new MudDateRangePicker();
    private List<string> taxCodesATC = new();
    private string taxCode = string.Empty;
    protected override async Task OnInitializedAsync()
    {
        Task t= Task.WhenAll(LoadVoucherBIR());
        await t;
        if(t.Status == TaskStatus.RanToCompletion) {
            if(GlobalClass.voucherBIRModel.Id != 0)
            {
                //Display payee,payor,dates if have BIR
                await DisplayProperties();
            } else {
                if(GlobalClass.voucher.PayeeId != 0 )
                {
                    payee = (await globalService.LoadPayees(new FilterParameter(){IsProject=true,
                    ProjectName=GlobalClass.voucher.PayeeName},GlobalClass.token)).FirstOrDefault()?? new();
                    if(payee.ProjectCategoryId == Enums.ProjectCategory.Supplier)
                    {
                        await PayeeInformation(payee.ProjectId);
                    } else {
                        GlobalClass.voucherBIRModel.PayeeRegisteredAddress = payee.Location;
                        await PayeeTin(payee.ProjectId);
                    }
                    GlobalClass.voucherBIRModel.PayeeName = payee.ProjectName;
                    GlobalClass.voucherBIRModel.PayeeId = payee.ProjectId;
                    GlobalClass.voucherBIRModel.PayeeCategoryId = payee.ProjectCategoryId;
                    DefaultDateRange();
                    await DefaultPayor();
                    if(GlobalClass.voucherBIRModel.PayorId != 0)
                    {
                       payor = (await LoadPayor(GlobalClass.voucherBIRModel.PayorName)).Where(x=>x.ProjectId == GlobalClass.voucherBIRModel.PayorId).FirstOrDefault()?? new();
                    }
                } else {
                    payee = new();
                }
                GlobalClass.voucherBIRModel.DV = GlobalClass.voucher.ControlNumber;
                GlobalClass.voucherBIRModel.PayorZipCode = "5000";
                DefaultEWTText();
                taxCodesATC = GlobalClassList.taxCodes.Where( code => GlobalClass.voucher.EWTValue == code.TaxRate)
                    .SelectMany(code => new List<string>() { code.ATCInd, code.ATCCorp }).Distinct().AsEnumerable().Reverse().ToList();
                taxCode = taxCodesATC.FirstOrDefault()?? "";
            }
            VoucherExpense();
        }
        CompletedFetch();
    }
    private void DefaultEWTText()
    {
        var ewt = GlobalClass.voucher.VoucherDetails.Where( vd => vd.IsEWT).FirstOrDefault()?? new();
        if(ewt.Id == 0)
             GlobalClass.voucherBIRModel.EWTText = "No EWT";
        else
             GlobalClass.voucherBIRModel.EWTText = ewt.ProjectName;

    }
    private void VoucherExpense()
    {
        List<VoucherDetailModel> newList = GlobalClass.voucher.VoucherDetails
            .Where( v => !v.IsEWT )
            .GroupBy( g => g.ExpenseName)
            .Select( g => new VoucherDetailModel{
                ExpenseName = g.First().ExpenseName,
                SumOfGroup = g.Sum( d => d.Amount),
            }).ToList();
        GlobalClass.voucherBIRModel.Expenses = String.Join(", ", newList
                .Where( v => !v.IsEWT )
                .Select( v => v.ExpenseName+" = ₱"+v.SumOfGroup.ToString("N2")));
    }
    private async Task<IEnumerable<Project>> LoadPayee(string projectName)
    {
       var filterParameter = new FilterParameter()
        {
            IsProject = true,
            ProjectName = projectName,
            IsId = false
        };
        return await globalService.LoadPayees(filterParameter,GlobalClass.token);
        
    }
    private async Task<IEnumerable<Project>> LoadPayor(string projectName)
    {
        return (await globalService.LoadPayorList(new FilterParameter(),GlobalClass.token)).Where( p => p.ProjectName.Contains(projectName,StringComparison.InvariantCultureIgnoreCase)).ToList();
    }
    void CompletedFetch()
    {
        GlobalClass.voucherBIRModel.PreparedBy = GlobalClass.currentUserAccount.EmployeeName;
        GlobalClass.voucherBIRModel.VoucherId = GlobalClass.voucher.Id;
        GlobalClass.voucherBIRModel.Voucher = GlobalClass.voucher;
        dataFetch = true;
        StateHasChanged();
    }
    private async Task LoadVoucherBIR()
    {
        var current = new VoucherBIRModel();
        current = await birService.GetVoucherBIR(GlobalClass.voucher.Id,GlobalClass.token);
        if(current.Id != 0)
            GlobalClass.voucherBIRModel = current;
        GlobalClass.voucherBIRModel.VoucherDetails = GlobalClass.voucher.VoucherDetails;
    }
    private async Task SelectedPayee(Project p)
    {
        payee = p;
        GlobalClass.voucherBIRModel.PayeeId = p.ProjectId;
        GlobalClass.voucherBIRModel.PayeeCategoryId = p.ProjectCategoryId;
        if(p.ProjectCategoryId == Enums.ProjectCategory.Supplier)
        {
            await PayeeInformation(p.ProjectId);
        } else {
            await PayeeTin(payee.ProjectId);
            GlobalClass.voucherBIRModel.PayeeRegisteredAddress = p.Location;
        }
        GlobalClass.voucherBIRModel.PayeeName = p.ProjectName;
    }
    private async Task<SupplierModel> GetSupplier(long id)
    {
        return currentSupplier =  await supplierService.GetSupplier(id,GlobalClass.token)?? new();
    }
    private void SelectedPayor(Project p)
    {
        payor = p;
        Console.WriteLine(p.ProjectId);
        PayorInformation(p);
        //GlobalClass.voucherBIRModel.PayorRegisteredAddress = p.Location;
        
    }
    void Cancel() 
    {
        MudDialog.Close(DialogResult.Ok(3));
        navigationManager.NavigateTo($"/voucher/list");
    }
    private void Submit()
    {
        GlobalClass.voucherBIRModel.PeriodFrom = voucherPeriod.Start;
         GlobalClass.voucherBIRModel.VoucherDetails.ForEach ( vDetails => 
        {
            if(vDetails.IsEWT == true)
            {
                //for reporting ATC and description
                vDetails.TaxCodeDescription = GlobalClassList.taxCodes.Where( code => GlobalClass.voucher.EWTValue == code.TaxRate).Select( code => code.Description).FirstOrDefault()?? "";
                vDetails.TaxCodeATC = taxCode;
                //vDetails.TaxCodeATC = GlobalClassList.taxCodes.Where( code => GlobalClass.voucher.EWTValue == code.TaxRate).Select( code => code.ATCInd).FirstOrDefault()?? "";
            }
        });
        if(GlobalClass.voucherBIRModel.PeriodFrom.HasValue)
        {
            GlobalClass.voucherBIRModel.PeriodTo = voucherPeriod.End;
            GlobalClass.voucherBIRModel.Voucher = GlobalClass.voucher;
            navigationManager.NavigateTo($"/voucher/list");//Purpose to refresh BIR print page
            navigationManager.NavigateTo($"bir/print");
            MudDialog.Close();
        } else
            Extensions.ShowAlert("Voucher period is requred.",Variant.Filled,SnackbarService,Severity.Warning);
    
    }
    private async Task DisplayProperties()
    {
        if(GlobalClass.voucherBIRModel.Id == 0)
        {
            payee = (await globalService.LoadPayees(new FilterParameter(){IsProject=true,
            ProjectName=GlobalClass.voucher.PayeeName},GlobalClass.token)).FirstOrDefault()?? new();
            GlobalClass.voucherBIRModel.PayeeName = payee.ProjectName;
            GlobalClass.voucherBIRModel.PayeeId = payee.ProjectId;
            GlobalClass.voucherBIRModel.PayeeCategoryId = payee.ProjectCategoryId;
            Console.WriteLine("no id");
        } else {
            payee = (await globalService.LoadPayees(new FilterParameter(){IsProject=true,
            ProjectName=GlobalClass.voucherBIRModel.PayeeName},GlobalClass.token)).FirstOrDefault()?? new();
            GlobalClass.voucherBIRModel.PayeeName = payee.ProjectName;
            GlobalClass.voucherBIRModel.PayeeId = payee.ProjectId;
            GlobalClass.voucherBIRModel.PayeeCategoryId = payee.ProjectCategoryId;
            if(GlobalClass.voucherBIRModel.PayeeCategoryId == Enums.ProjectCategory.Supplier)
            {
            //ReadOnly Address,ZIP Code,TINd);
                readOnlyAddress = true; //readOnlyZIPCode = true; readOnlyTIN = true;
            }
        }
        payor.ProjectName = GlobalClass.voucherBIRModel.PayorName;
        payor = (await LoadPayor(GlobalClass.voucherBIRModel.PayorName)).Where(x=>x.ProjectId == GlobalClass.voucherBIRModel.PayorId).FirstOrDefault()?? new();
        PayorInformation(payor);
    }
    private async Task PayeeInformation(long projectID)
    {
        if(await GetSupplier(projectID) != null)
        {
            GlobalClass.voucherBIRModel.PayeeRegisteredAddress = currentSupplier.Address;
            GlobalClass.voucherBIRModel.PayeeTIN = currentSupplier.TIN;
        }
    }
    private async Task PayeeTin(long projectID)
    {
        var payee = await globalService.GetPayee(projectID,GlobalClass.token);
        GlobalClass.voucherBIRModel.PayeeTIN = payee.TINNo;
    }
    private void PayorInformation(Project payor)
    {
        GlobalClass.voucherBIRModel.PayorId = payor.ProjectId;
        GlobalClass.voucherBIRModel.PayorName = payor.ProjectName;
        PayorDetails();
    }

    private void DateRangeToday(MudDatePicker datePickerName, MudDateRangePicker dateRangePickerName)
    {
        voucherPeriod = new DateRange(DateTime.Now.AddDays(-1).Date, DateTime.Now.Date);
        SubmitDateRangePicker(new(), dateRangePickerName);
    }
    private void DefaultDateRange()
    {
        var now = DateTime.Now;
        GlobalClass.voucherBIRModel.VoucherDate = GlobalClass.voucher.VoucherDate;
        if(GlobalClass.voucher.VoucherDate.Month >= 1 || GlobalClass.voucher.VoucherDate.Month <= 3)
            voucherPeriod = new DateRange(new DateTime(now.Year,01,1,9,15,0),new DateTime(now.Year,03,DateTime.DaysInMonth(now.Year, 3),9,15,0));
        else if(GlobalClass.voucher.VoucherDate.Month >= 4 || GlobalClass.voucher.VoucherDate.Month <= 6)
            voucherPeriod = new DateRange(new DateTime(now.Year,04,1,9,15,0),new DateTime(now.Year,06,DateTime.DaysInMonth(now.Year, 6),9,15,0));
        else if(GlobalClass.voucher.VoucherDate.Month >= 7 || GlobalClass.voucher.VoucherDate.Month <= 9)
            voucherPeriod = new DateRange(new DateTime(now.Year,07,1,9,15,0),new DateTime(now.Year,09,DateTime.DaysInMonth(now.Year, 9),9,15,0));
        else 
            voucherPeriod = new DateRange(new DateTime(now.Year,10,1,9,15,0),new DateTime(now.Year,12,DateTime.DaysInMonth(now.Year, 12),9,15,0));
    }
    private async Task DefaultPayor()
    {
        payor = (await LoadPayor("F. Gurrea Construction, Inc.")).Where(x=>x.ProjectId == 1 && x.ProjectCategoryId == Enums.ProjectCategory.Company).FirstOrDefault()?? new();
        PayorInformation(payor);
        //GlobalClass.voucherBIRModel.PayorRegisteredAddress = payor.Location;
    }
    private void CancelDateRangePicker(MudDatePicker datePickerName, MudDateRangePicker dateRangePickerName) => dateRangePickerName.Close(false);
    private void SubmitDateRangePicker(MudDatePicker datePickerName, MudDateRangePicker dateRangePickerName) => dateRangePickerName.Close(true);

    private void PayorDetails()
    {
        switch (GlobalClass.voucherBIRModel.PayorId)
        {
            //FG
            case 1:
                GlobalClass.voucherBIRModel.PayorRegisteredAddress = "Q. Abeto St., Mandurriao, Iloilo City";
                GlobalClass.voucherBIRModel.PayorTIN = "002-006-594-000";
                GlobalClass.voucherBIRModel.Personnel = "L. SENDICO / Govt. EE Benefits Officer II";
                GlobalClass.voucherBIRModel.PersonnelTin = "131-019-875-000";
            break;
            //Fix resources
            case 16:
                GlobalClass.voucherBIRModel.PayorRegisteredAddress = "San Rafael, Mandurriao, Iloilo City";
                GlobalClass.voucherBIRModel.PayorTIN = "006-231-093-000";
                GlobalClass.voucherBIRModel.Personnel = "FERN IVES L. GURREA / Authorized Representative";
                GlobalClass.voucherBIRModel.PersonnelTin = "281-744-618-000";
            break;
            //Golden road
            case 6:
                GlobalClass.voucherBIRModel.PayorRegisteredAddress = "Q. Abeto St., Mandurriao, Iloilo City";
                GlobalClass.voucherBIRModel.PayorTIN = "000-250-840-000";
                GlobalClass.voucherBIRModel.Personnel = "MA. FEMIE LAPI-AN / SUPERVISOR";
                GlobalClass.voucherBIRModel.PersonnelTin = "150-622-385-000";
            break;
            //Good fortune
            case 7:
                GlobalClass.voucherBIRModel.PayorRegisteredAddress = "397 Rizal Street, Brgy. Osmeña, City Proper, Iloilo City";
                GlobalClass.voucherBIRModel.PayorTIN = "000-250-687-000";
                GlobalClass.voucherBIRModel.Personnel = "AILYN GALARAGA  / President";
                GlobalClass.voucherBIRModel.PersonnelTin = "136-804-347-000";
            break;  
            //Top most
            case 12:
                GlobalClass.voucherBIRModel.PayorRegisteredAddress = "Brgy. Calajunan, Mandurriao, Iloilo City";
                GlobalClass.voucherBIRModel.PayorTIN = "000-251-381-000";
                GlobalClass.voucherBIRModel.Personnel = "RAYMUND E. TABUGA / General Manager";
                GlobalClass.voucherBIRModel.PersonnelTin = "117-366-889-000";
            break;  
            default:
                GlobalClass.voucherBIRModel.Personnel = "L. SENDICO / Govt. EE Benefits Officer II";
                GlobalClass.voucherBIRModel.PersonnelTin = "131-019-875-000";
            break;
        }
        StateHasChanged();
    }
}