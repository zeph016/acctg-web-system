@inject IPettyCashService pettyCashService
@inject ILiquidationService liquidationService
@inject IAccountingPOBillingService accountingPOBillingService
@inject IGlobalService globalService
@inject ILiquidationService liquidationService
@inject IRequestForPaymentService requestForPaymentService
@inject IVoucherService voucherService
@inject NavigationManager navigationManager
@inject ISnackbar snackbarService
@inject IDialogService dialogService
@inject IGlobalService globalService

<MudDialog Class="customdialog-table-only">
  <TitleContent>
    <div class='d-flex align-center'>
      <MudIcon Icon='@Icons.Filled.FormatListBulleted' Class="mr-3 mb-n1" />
      <MudText Class='txt-uppercase' Typo='Typo.h6'>
        @dialogTitle
      </MudText>
      <MudSpacer />
      <MudToggleIconButton @bind-Toggled='openSideFilter'
      Icon='@Icons.Filled.FilterList' Color="Color.Tertiary" ToggledSize='Size.Medium'
      ToggledIcon='@Icons.Filled.FilterList' ToggledColor="Color.Error" Size='Size.Medium' />
    </div>
  </TitleContent>
  <DialogContent>
    <div class='drawer-right pa-2 gap-2'>
      <MudDrawer Class='gap-2 pa-2' @bind-Open='openSideFilter' Anchor='Anchor.Right' Elevation='2' Variant='DrawerVariant.Persistent' Width='290px'>
        <div class='d-flex align-center'>
          <MudSpacer />
          <MudText Class='font-bold' Typo='Typo.caption'>CLOSE FILTER</MudText>
          <MudToggleIconButton @bind-Toggled='openSideFilter' Title='Close Filter'
          Icon='@Icons.Filled.Close' Color="Color.Tertiary" ToggledSize='Size.Small'
          ToggledIcon='@Icons.Filled.Close' ToggledColor="Color.Error" Size='Size.Small' />
        </div>
        <div class='d-flex flex-column gap-2'>
          @if(lookUpType != Enums.LookUpType.Voucher)
          {
            <MudTextField @bind-Value='controlNumber' Placeholder='Control Number'></MudTextField>
          }
          @if(lookUpType != Enums.LookUpType.POBilling && lookUpType != Enums.LookUpType.Voucher)
          {
            <BlazoredTypeahead SearchMethod=LoadProject 
            @bind-Value='payee' Debounce="500" placeholder='Payee' >
              <SelectedTemplate>
              @context.ProjectName | @context.Location
              </SelectedTemplate>
              <ResultTemplate>
              @context.ProjectName | @context.Location
            </ResultTemplate>
            </BlazoredTypeahead>
            <div class='d-flex flex-column pa-2'>
              <MudCheckBox Dense @bind-Checked='IsDate' Label='Filter Date' Size='Size.Small' />
              <MudDatePicker @bind-Date='dateFrom' Label='Date From' PickerVariant="PickerVariant.Dialog" Disabled='!IsDate' />
              <MudDatePicker @bind-Date='dateTo' Label='Date From' PickerVariant="PickerVariant.Dialog" Disabled='!IsDate' />
            </div>
          }
          @if(lookUpType == Enums.LookUpType.Voucher)
          {
            <div class='d-flex align-center gap-2'>
              <MudCheckBox Class='pt-1' @bind-Checked="@filterParameter.IsControlNumber" Dense Size='Size.Small'/>
              <MudTextField Class='txtfield-75' Immediate=true @bind-Value='filterParameter.ControlNumber' Placeholder='Control Number'
              Clearable='true' Disabled="@(!filterParameter.IsControlNumber)" Variant='Variant.Outlined' />
            </div>
            <div class='d-flex align-center gap-2'>
                <MudCheckBox Class='pt-1' @bind-Checked="@filterParameter.IsDate" Dense Size='Size.Small' />
                <MudDateRangePicker Class='txtfield-75' @bind-DateRange=@dateRangeFilter IconSize='Size.Small'
                Placeholder="Date Range" Disabled="@(!filterParameter.IsDate)" Variant='Variant.Outlined' />
            </div>
            <div class='d-flex align-center gap-2'>
                <MudCheckBox Class='pt-1' @bind-Checked="@filterParameter.IsRequestor" Dense Size='Size.Small' />
                <MudTextField Class='txtfield-75' @bind-Value='requestor.EmployeeName' Placeholder='Requested By' ReadOnly='true'
                    @onclick='(() => LookUp(Enums.LookUpType.Employee, "Requestor"))' IconSize='Size.Small' Disabled="@(!filterParameter.IsRequestor)" Variant='Variant.Outlined'>
                  </MudTextField>
            </div>
            <div class='d-flex align-center gap-2'>
                <MudCheckBox Class='pt-1' @bind-Checked="@filterParameter.IsPayee" Dense Size='Size.Small' />
                <MudTextField Class='txtfield-75' @bind-Value='payee.ProjectName' Placeholder='Payee' ReadOnly='true'
                    @onclick='(() => LookUp(Enums.LookUpType.Project, "Payee"))' IconSize='Size.Small' Disabled="@(!filterParameter.IsPayee)" Variant='Variant.Outlined' >
                    </MudTextField>
            </div>
            <div class='d-flex align-center gap-2'>
              <MudCheckBox Class='pt-1' @bind-Checked="@filterParameter.IsAccountingStatus" Dense Size='Size.Small' />
              <MudSelect Class='txtfield-75' MultiSelectionTextFunc='@(new Func<List<string>, string>(AccountingStatus))' @bind-SelectedValues='hasAccountingStatus' IconSize='Size.Small'
              @bind-Value="selectedStatus" Dense="true" MultiSelection=true Disabled='!filterParameter.IsAccountingStatus' Placeholder='Accounting Status' Variant='Variant.Outlined'>
                @if(GlobalClassList.accountingStatusList != null)
                {
                    foreach (var item in GlobalClassList.accountingStatusList.Where(x=> 
                    (int)x.StatusEnumCategoryId == 11 || 
                    (int)x.StatusEnumCategoryId == 12 || 
                    (int)x.StatusEnumCategoryId == 13 ))
                    {
                    <MudSelectItem Value="@item">@item.StatusName</MudSelectItem>
                    }
                }
              </MudSelect>
            </div>
          }
          <div class='d-flex align-center justify-end pt-1'>
            <MudButton OnClick='(()=> ApplyFilter())' Variant='Variant.Filled' Color='Color.Secondary'>Apply Filter</MudButton>
          </div>
        </div>
      </MudDrawer>
    </div>
    @if (!dataFetched)
    {
      <SkeletonGlobalRFP />
    }
    else
    {
      @if(lookUpType == Enums.LookUpType.PettyCash)
      {
        <MudTable Class='configtables overflow-auto' Items="GlobalClassList.notLiquidatedPettyCashList" Bordered=true ReadOnly=false 
          Dense=true Elevation='0' Height='calc(100vh - 270px)' Square='true' FixedHeader='true'>
          <ColGroup>
            <col style='width: 20px' />
            <col style='width: 1%' />
            <col />
            <col />
            <col />
            <col style='width: 1%' />
            <col style='width: 1%' />
          </ColGroup>
          <HeaderContent>
              <MudTh Class='customheader-1 text-center pa-2'>Select</MudTh>
              <MudTh Class='customheader-1 text-center'>
                <MudTableSortLabel InitialDirection='SortDirection.Descending'
                SortBy='new Func<PettyCashModel, object>(x=>x.ControlNumber)'>
                   Control #
                </MudTableSortLabel>
              </MudTh>
              <MudTh Class='customheader-1'>Payee Name</MudTh>
              <MudTh Class='customheader-1'>Particulars</MudTh>
              <MudTh Class='customheader-1 text-right'>Requested by</MudTh>
              <MudTh Class='customheader-1 text-center'>Status</MudTh>
              <MudTh Class='customheader-1 text-center'>
                <MudTableSortLabel InitialDirection='SortDirection.None'
                SortBy='new Func<PettyCashModel, object>(x=>x.Amount)'>
                   Amount
                </MudTableSortLabel>
              </MudTh>
          </HeaderContent>
          <RowTemplate>
            <MudTd Class='text-center pa-2'>
              <MudIconButton OnClick='(()=> SelectPettyCash(context))' Icon='@Icons.Filled.AddCircle' aria-label="Select" Color='Color.Success' Size='Size.Small' />
            </MudTd>
            <MudTd DataLabel='ControlNumber'>
              <div class='d-flex align-center'>
                 <MudChip Class='chip-radius-5 txt-uppercase font-bold font10' Color='Color.Error' Size='Size.Small'>
                    @context.ControlNumber
                 </MudChip>
                  <MudChip Class='chip-radius-5 font-bold font10' Variant='Variant.Text' Icon='@Icons.Filled.CalendarMonth' Color='Color.Dark' Size='Size.Small'>
                    @Convert.ToDateTime(context.RequestDate).ToShortDateString()
                  </MudChip>
              </div>
            </MudTd>
            <MudTd Class='wbreak-breakword font12' DataLabel='Payee'>@context.PayeeName</MudTd>
            <MudTd Class='wbreak-breakword font12' DataLabel='Particulars'>@context.Particular</MudTd>
            <MudTd Class='wbreak-breakword font12' DataLabel='Requested by'>@context.RequestedByName</MudTd>
            <MudTd Class='text-center wspace-nowrap' DataLabel='Status'>
               <MudChip Class='chip-radius-5 font-bold font10' Size='Size.Small' Style='@Extensions.GetAcctgStatusColor(context.StatusId)'>
                  @context.StatusName
               </MudChip>
            </MudTd>
            <MudTd Class='wspace-nowrap text-right' DataLabel='Amount'>
              <div class='d-flex align-center gap-2'>
                @if (context.Amount > 0)
                {
                  <MudText Class='font-bold color-green' Typo='Typo.body2'>
                    @Extensions.GetEnumDescription(Enums.BankCurrency.PhilippinePeso)
                  </MudText>
                  <MudSpacer />
                  <MudText Class='font-bold color-green' Typo='Typo.body2'>
                    @context.Amount.ToString("N2")
                  </MudText>
                }
                else
                {
                  <MudText Class='font-bold' Typo='Typo.body2' Color='Color.Error'>
                    @Extensions.GetEnumDescription(Enums.BankCurrency.PhilippinePeso)
                  </MudText>
                  <MudSpacer />
                  <MudText Class='font-bold' Typo='Typo.body2' Color='Color.Error'>
                    @context.Amount.ToString("N2")
                  </MudText>
                }
              </div>
            </MudTd>
          </RowTemplate>
        </MudTable>
      }
      @if(lookUpType == Enums.LookUpType.Liquidation)
      {
        <MudTable Class='configtables overflow-auto' Items="GlobalClassList.LiquidationNotInRFP" Bordered=true ReadOnly=false 
          Dense=true Elevation='0' Height='calc(100vh - 270px)' Square='true' FixedHeader='true'>
          <ColGroup>
            <col style='width: 50px' />
            <col style='width: 1%' />
            <col />
            <col style='width: 50px'/>
            <col style='width: 1%' />
            <col style='width: 1%' />
          </ColGroup>
          <HeaderContent>
            <MudTh Class='customheader-1 pa-2'>Select</MudTh>
            <MudTh Class='customheader-1 text-center'>
                <MudTableSortLabel InitialDirection='SortDirection.Ascending'
                SortBy='new Func<LiquidationModel, object>(x=>x.ControlNumber)'>
                  Control No.
                </MudTableSortLabel>
            </MudTh>
            <MudTh Class='customheader-1 text-left'>Prepared By</MudTh>
            <MudTh Class='customheader-1 text-center'>
              <MudToggleIconButton Toggled='isSubTableCollaped' ToggledChanged='() => TableCollapse(Enums.LookUpType.Liquidation)'
              Icon='@Icons.Filled.ExpandMore' Color="Color.Tertiary" ToggledSize='Size.Small'
              ToggledIcon="@Icons.Filled.ExpandLess" ToggledColor="Color.Info" Size='Size.Small' />
            </MudTh>
            <MudTh Class='customheader-1 text-center'>Status</MudTh>
            <MudTh Class='customheader-1 text-right'>
                <MudTableSortLabel InitialDirection='SortDirection.None'
                SortBy='new Func<LiquidationModel, object>(x=>x.TotalAmount)'>
                  Amount
                </MudTableSortLabel>
            </MudTh>
          </HeaderContent>
          <RowTemplate>
            <MudTd Class='text-center pa-2' DataLabel='Select'>
              <MudIconButton OnClick='(()=> SelectLiquidation(context))' Icon='@Icons.Filled.AddCircle' aria-label="Select" Color='Color.Success' Size='Size.Small' />
            </MudTd>
            <MudTd Class='text-center' DataLabel='Control Number'>
              <div class='d-flex align-center'>
                  <MudChip Class='chip-radius-5 txt-uppercase font-bold font10' Color='Color.Error' Size='Size.Small'>
                    @context.ControlNumber
                  </MudChip>
                  <MudChip Class='chip-radius-5 font-bold font10' Variant='Variant.Text' Icon='@Icons.Filled.CalendarMonth' Color='Color.Dark' Size='Size.Small'>
                    @Convert.ToDateTime(context.LiquidationDate).ToShortDateString()
                  </MudChip>
              </div>
            </MudTd>
            <MudTd Class='wbreak-breakword font12' DataLabel='Prepared By'>@context.PreparedByName</MudTd>
            <MudTd Class='text-center'>
              <MudToggleIconButton @bind-Toggled='context.ShowSubTable'
              Icon="@Icons.Filled.Message" Color="Color.Info" ToggledSize='Size.Small'
              ToggledIcon="@Icons.Filled.Message" ToggledColor="Color.Tertiary" Size='Size.Small' />
            </MudTd>
            <MudTd Class='text-center' DataLabel='Status Name'>
              <MudChip Class='chip-radius-5 font-bold font10' Size='Size.Small' Style='@Extensions.GetAcctgStatusColor(context.StatusId)'>
                @context.StatusName
              </MudChip>
            </MudTd>
            <MudTd Class='wspace-nowrap text-right' DataLabel='Amount'>
              <div class='d-flex align-center gap-2'>
                @if (context.TotalAmount > 0)
                {
                  <MudText Class='font-bold color-green' Typo='Typo.body2'>
                    @Extensions.GetEnumDescription(Enums.BankCurrency.PhilippinePeso)
                  </MudText>
                  <MudSpacer />
                  <MudText Class='font-bold color-green' Typo='Typo.body2'>
                    @context.TotalAmount.ToString("N2")
                  </MudText>
                }
                else
                {
                  <MudText Class='font-bold' Typo='Typo.body2' Color='Color.Error'>
                    @Extensions.GetEnumDescription(Enums.BankCurrency.PhilippinePeso)
                  </MudText>
                  <MudSpacer />
                  <MudText Class='font-bold' Typo='Typo.body2' Color='Color.Error'>
                    @context.TotalAmount.ToString("N2")
                  </MudText>
                }
              </div>
            </MudTd>
          </RowTemplate>
          <ChildRowContent>
            @if (context.ShowSubTable)
            {
              <td colspan="3">
                @* EMPTY *@
              </td>
              <td class='pa-2' colspan='3'>
                <MudCard Class='d-flex flex-column justify-start pa-2'>
                  <MudText Class='font-bold' Typo='Typo.overline'>Remarks: </MudText>
                  @if (string.IsNullOrEmpty(context.Remarks))
                  {
                    <MudText Class='pl-2' Typo='Typo.caption'>No Remarks</MudText>
                  }
                  else
                  {
                    <MudText Class='pl-2' Typo='Typo.caption'>@context.Remarks</MudText>
                  }
                </MudCard>
              </td>
            }
          </ChildRowContent>
        </MudTable>
      }
      @if(lookUpType == Enums.LookUpType.POBilling)
      {
        <MudTable Class='configtables overflow-auto' Items="GlobalClassList.POBillingList" Bordered=true ReadOnly=false 
          Dense=true Elevation='0' Height='calc(100vh - 270px)' Square='true' FixedHeader='true'>
          <ColGroup>
            <col style='width: 50px' />
            <col style='width: 1%' />
            <col />
            <col />
            <col style='width: 1%' />
            <col style='width: 1%' />
          </ColGroup>
          <HeaderContent>
              <MudTh Class='customheader-1 text-center pa-2'>Select</MudTh>
              <MudTh Class='customheader-1 text-center'>
                <MudTableSortLabel InitialDirection='SortDirection.Ascending'
                SortBy='new Func<AccountingPOBillingModel, object>(x=>x.ControlNumber)'>
                  Control No.
                </MudTableSortLabel>
              </MudTh>
              <MudTh Class='customheader-1'>Supplier</MudTh>
              <MudTh Class='customheader-1'>Prepared By</MudTh>
              <MudTh Class='customheader-1 text-center'>Status</MudTh>
              <MudTh Class='customheader-1 text-right'>
                  <MudTableSortLabel InitialDirection='SortDirection.None'
                SortBy='new Func<AccountingPOBillingModel, object>(x=>x.TotalAmount)'>
                  Amount
                </MudTableSortLabel>
              </MudTh>
          </HeaderContent>
          <RowTemplate>
            <MudTd Class='text-center pa-2' DataLabel='SELECT'>
              <MudIconButton OnClick='(()=> SelectPOBilling(context))' Icon='@Icons.Filled.AddCircle' aria-label="Select" Color='Color.Success' Size='Size.Small' />
            </MudTd>
            <MudTd DataLabel='Control number'>
              <div class='d-flex align-center'>
                <MudTooltip Text='@context.ControlNumber'>
                    <MudChip Class='chip-radius-5 txt-uppercase font-bold font10' Color='Color.Error' Size='Size.Small'>
                      @context.ControlNumber
                    </MudChip>
                </MudTooltip>
                  <MudTooltip Text="@Convert.ToDateTime(context.BillingDate).ToLongTimeString()">
                    <MudChip Class='chip-radius-5 font-bold font10' Variant='Variant.Text' Icon='@Icons.Filled.CalendarMonth' Color='Color.Dark' Size='Size.Small'>
                        @Convert.ToDateTime(context.BillingDate).ToShortDateString()
                    </MudChip>
                  </MudTooltip>
              </div>
            </MudTd>
            <MudTd Class='wbreak-breakword font12' DataLabel='Supplier'>@context.Supplier</MudTd>
            <MudTd Class='wbreak-breakword font12' DataLabel='Prepared by'>@context.PreparedByName</MudTd>
            <MudTd Class='text-center' DataLabel='Status'>
                <MudChip Class='chip-radius-5 txt-uppercase font-bold font10' Color='Color.Info' Size='Size.Small'>
                  @context.StatusName
                </MudChip>
            </MudTd>
            <MudTd Class='wspace-nowrap text-right' DataLabel='Amount'>
              <div class='d-flex align-center gap-2'>
                @if (context.TotalAmount > 0)
                {
                  <MudText Class='font-bold color-green' Typo='Typo.body2'>
                    @Extensions.GetEnumDescription(Enums.BankCurrency.PhilippinePeso)
                  </MudText>
                  <MudSpacer />
                  <MudText Class='font-bold color-green' Typo='Typo.body2'>
                    @context.TotalAmount.ToString("N2")
                  </MudText>
                }
                else
                {
                  <MudText Class='font-bold' Typo='Typo.body2' Color='Color.Error'>
                    @Extensions.GetEnumDescription(Enums.BankCurrency.PhilippinePeso)
                  </MudText>
                  <MudSpacer />
                  <MudText Class='font-bold' Typo='Typo.body2' Color='Color.Error'>
                    @context.TotalAmount.ToString("N2")
                  </MudText>
                }
              </div>
            </MudTd>
          </RowTemplate>
        </MudTable>
      }
      @if(lookUpType == Enums.LookUpType.PO)
      {
        <MudTable Class='configtables overflow-auto' Items="POList" Bordered=true ReadOnly=false 
          Dense=true Elevation='0' Height='calc(100vh - 270px)' Square='true' FixedHeader='true'>
          <ColGroup>
            <col style='width: 50px' />
            <col style='width: 1%' />
            <col />
            <col />
            <col style='width: 1%' />
            <col style='width: 1%' />
          </ColGroup>
          <HeaderContent>
              <MudTh Class='customheader-1 text-center pa-2'>Select</MudTh>
              <MudTh Class='customheader-1 text-center'>
                <MudTableSortLabel InitialDirection='SortDirection.Ascending'
                SortBy='new Func<POModel, object>(x=>x.PONumber)'>
                  Control No.
                </MudTableSortLabel>
              </MudTh>
              <MudTh Class='customheader-1'>Supplier</MudTh>
              <MudTh Class='customheader-1'>Prepared By</MudTh>
              <MudTh Class='customheader-1 text-center'>Status</MudTh>
              <MudTh Class='customheader-1 text-right'>
                <MudTableSortLabel InitialDirection='SortDirection.None'
                SortBy='new Func<POModel, object>(x=>x.Amount)'>
                  Amount
                </MudTableSortLabel>
              </MudTh>
          </HeaderContent>
          <RowTemplate>
            <MudTd Class='text-center pa-2' DataLabel='SELECT'>
              <MudIconButton OnClick='(()=> SelectPO(context))' Icon='@Icons.Filled.AddCircle' aria-label="Select" Color='Color.Success' Size='Size.Small' />
            </MudTd>
            <MudTd Class='d-flex align-center' DataLabel='Control number'>
              <MudTooltip Text='@context.PONumber'>
                <MudChip Class='chip-radius-5 txt-uppercase font-bold font10' Color='Color.Error' Size='Size.Small'>
                  @context.PONumber
                </MudChip>
              </MudTooltip>
              <MudTooltip Text='@Convert.ToDateTime(context.PODate).ToShortDateString()'>
                <MudChip Class='chip-radius-5 font-bold font10' Variant='Variant.Text' Icon='@Icons.Filled.CalendarMonth' Color='Color.Dark' Size='Size.Small'>
                  @Convert.ToDateTime(context.PODate).ToShortDateString()
                </MudChip>
              </MudTooltip>
            </MudTd>
            <MudTd Class='wbreak-breakword font12' DataLabel='Supplier'>@context.SupplierName</MudTd>
            <MudTd Class='wbreak-breakword font12' DataLabel='Prepared by'>@context.PreparedBy</MudTd>
            <MudTd Class='text-center' DataLabel='Status'>
              <MudChip Class='chip-radius-5 txt-uppercase font-bold font10' Color='Color.Info' Size='Size.Small'>
                @context.POStatusView
              </MudChip>
            </MudTd>
            <MudTd Class='wspace-nowrap text-right' DataLabel='Check Amount'>
              <div class='d-flex align-center gap-2'>
                @if (context.Amount > 0)
                {
                  <MudText Class='font-bold color-green' Typo='Typo.body2'>
                    @Extensions.GetEnumDescription(Enums.BankCurrency.PhilippinePeso)
                  </MudText>
                  <MudSpacer />
                  <MudText Class='font-bold color-green' Typo='Typo.body2'>
                    @context.Amount.ToString("N2")
                  </MudText>
                }
                else
                {
                  <MudText Class='font-bold' Typo='Typo.body2' Color='Color.Error'>
                    @Extensions.GetEnumDescription(Enums.BankCurrency.PhilippinePeso)
                  </MudText>
                  <MudSpacer />
                  <MudText Class='font-bold' Typo='Typo.body2' Color='Color.Error'>
                    @context.Amount.ToString("N2")
                  </MudText>
                }
              </div>
            </MudTd>
          </RowTemplate>
        </MudTable>
      }
      @if(lookUpType == Enums.LookUpType.RFPVoucher)
      {
        <MudTable Class='configtables overflow-auto' Items="noVoucherRFP" Bordered ReadOnly=false 
          Dense Elevation='0' Height='calc(100vh - 270px)' Square FixedHeader>
          <ColGroup>
            <col style='width: 50px' />
            <col style='width: 50px' />
            <col />
            <col />
            <col style='width: 1%' />
            <col style='width: 1%' />
          </ColGroup>
          <HeaderContent>
              <MudTh Class='customheader-1 text-center pa-2'>Select</MudTh>
              <MudTh Class='customheader-1 text-left'>
                <MudTableSortLabel InitialDirection='SortDirection.Descending'
                  SortBy='new Func<RequestForPaymentModel, object>(x=>x.RequestDate)'>
                  Control No.
                </MudTableSortLabel>
              </MudTh>
              <MudTh Class='customheader-1'>Payee</MudTh>
              <MudTh Class='customheader-1'>Requestor</MudTh>
              <MudTh Class='customheader-1 text-center'>Status</MudTh>
              <MudTh Class='customheader-1 text-center'>
                <MudTableSortLabel InitialDirection='SortDirection.None'
                  SortBy='new Func<RequestForPaymentModel, object>(x=>x.Amount)'>
                  Amount
                </MudTableSortLabel>
              </MudTh>
          </HeaderContent>
          <RowTemplate>
            <MudTd Class='text-center pa-0'>
              @if(GlobalClass.voucher.VoucherRFP.Any(x=>x.RequestForPaymentId == context.Id))
              {
                @* <MudTooltip Text='Remove Detail'>
                  <MudIconButton OnClick='(()=> SelectRFP(context))' Icon='@Icons.Filled.RemoveCircle' Color='Color.Error' Size='Size.Small' />
                </MudTooltip> *@
              }
              else
              {
                <MudTooltip Text='Select Detail'>
                  <MudIconButton OnClick='(()=> SelectRFP(context))' Icon='@Icons.Filled.AddCircle' Color='Color.Success' Size='Size.Small' />
                </MudTooltip>
              }
            </MudTd>
            <MudTd Class='overflow-hidden' DataLabel='Control No.'>
              <div class='d-flex align-center wspace-nowrap overflow-auto oflow-el max-width250px'>
                <MudChip Class='chip-radius-5 font-bold font10' Variant='Variant.Text' Icon='@Icons.Filled.CalendarMonth' Color='Color.Dark' Size='Size.Small'>
                  @Convert.ToDateTime(context.RequestDate).ToShortDateString()
                </MudChip>           
                @if(context.RFPDetailTypeId == Enums.RFPDetailTypeId.POBilling)
                {
                  <MudChip Class='chip-radius-5 txt-uppercase font-bold font10' Color='Color.Error' Size='Size.Small'> @context.RFP</MudChip>
                }
                else
                {
                  <MudChip Class='chip-radius-5 txt-uppercase font-bold font10' Color='Color.Error' Size='Size.Small'> @context.ControlNumber</MudChip>
                }
              </div>
            </MudTd>
            <MudTd Class='wbreak-breakword font12' DataLabel='Payee Name'>@context.PayeeName</MudTd>
            <MudTd Class='wbreak-breakword font12' DataLabel='Requestor Name'>@context.RequestedByName</MudTd>
            <MudTd Class='wspace-nowrap pa-0' DataLabel='All Statuses'>
              <MudChip Class='chip-radius-5 txt-uppercase font-bold font10' Color='Color.Info' Size='Size.Small'>
                @context.RFPDetailTypeId
              </MudChip>
              <MudChip Class='chip-radius-5 txt-uppercase font-bold font10' Color='Color.Dark' Size='Size.Small'>
                @context.RequestTypeName
              </MudChip>
              <MudChip Class='chip-radius-5 font-bold font10' Size='Size.Small' Style='@Extensions.GetAcctgStatusColor(Convert.ToInt64(context.AccountingStatusId))'>
                @context.AccountingStaus
              </MudChip>
            </MudTd>
            <MudTd Class='wspace-nowrap text-right' DataLabel='Amount'>
              <div class='d-flex align-center gap-2'>
                @if (context.Amount > 0)
                {
                  <MudText Class='font-bold color-green' Typo='Typo.body2'>
                    @Extensions.GetEnumDescription(Enums.BankCurrency.PhilippinePeso)
                  </MudText>
                  <MudSpacer />
                  <MudText Class='font-bold color-green' Typo='Typo.body2'>
                    @context.Amount.ToString("N2")
                  </MudText>
                }
                else
                {
                  <MudText Class='font-bold' Typo='Typo.body2' Color='Color.Error'>
                    @Extensions.GetEnumDescription(Enums.BankCurrency.PhilippinePeso) 
                  </MudText>
                  <MudSpacer />
                  <MudText Class='font-bold' Typo='Typo.body2' Color='Color.Error'>
                    @context.Amount.ToString("N2")
                  </MudText>
                }
              </div>
            </MudTd>
          </RowTemplate>
        </MudTable>
      }
      @if(lookUpType == Enums.LookUpType.Voucher)
      {
        <MudTable Class='configtables overflow-auto' Items="voucherNotInCheck" Bordered ReadOnly=false 
          Dense Elevation='0' Height='calc(100vh - 270px)' Square FixedHeader>
          <ColGroup>
            <col style='width: 1%' />
            <col style='width: 1%' />
            <col style='width: 30%' />
            <col style='width: 1%' />
            <col style='width: 15%' />
            <col style='width: 15%' />
            <col style='width: 15%' />
          </ColGroup>
          <HeaderContent>
              <MudTh Class='customheader-1 text-center pa-2'>Select </MudTh>
              <MudTh Class='customheader-1'>
                <MudTableSortLabel Class='text-center' InitialDirection='SortDirection.Ascending'
                  SortBy='new Func<RequestForPaymentModel, object>(x=>x.ControlNumber)'>
                    Control No.
                </MudTableSortLabel>
              </MudTh>
              <MudTh Class='customheader-1'>Payee</MudTh>
              <MudTh Class='customheader-1 text-center'>Status</MudTh>
              <MudTh Class='customheader-1 text-center'>Amount</MudTh>
              <MudTh Class='customheader-1 text-center'>Balance</MudTh>
              <MudTh Class='customheader-1 text-right'>
                  <MudTableSortLabel InitialDirection='SortDirection.None'
                  SortBy='new Func<RequestForPaymentModel, object>(x=>x.Amount)'>
                  Check Amount
                </MudTableSortLabel>
              </MudTh>
          </HeaderContent>
          <RowTemplate>
            <MudTd Class='text-center pa-2'>
              <MudTooltip Text='Select Detail'>
                  <MudIconButton OnClick="(()=>SelectVoucher(context))" Icon='@Icons.Filled.AddCircle' Color='Color.Success' Size='Size.Small' />
              </MudTooltip>
            </MudTd> 
            <MudTd Class='wbreak-breakword font12' DataLabel='Payee Name'>
              <div class='d-flex align-center justify-center '>
                <MudChip Class='chip-radius-5 txt-uppercase font-bold font10' Color='Color.Error' Size='Size.Small'>
                  @context.ControlNumber
                </MudChip>
              </div>
            </MudTd>
            <MudTd Class='wbreak-breakword font12' DataLabel='Requestor Name'>@context.PayeeName</MudTd>
            <MudTd Class='wspace-nowrap' DataLabel='Status'>
              <div class='d-flex align-center justify-center '>
                <MudChip Class='chip-radius-5 txt-uppercase font-bold font10' Color='Color.Info' Size='Size.Small'>
                  @context.StatusName
                </MudChip>
              </div>
            </MudTd>
            <MudTd Class='wspace-nowrap' DataLabel='Amount'>
                @if (context.TotalAmount > 0)
              {
                <div Class='d-flex align-center'>
                  <MudText Class="font-bold color-green" Typo='Typo.body2'>@Extensions.GetEnumDescription(Enums.BankCurrency.PhilippinePeso)</MudText>
                  <MudSpacer />
                  <MudText Class="font-bold color-green" Typo='Typo.body2'>@context.TotalAmount.ToString("N2")</MudText>
                </div>
              }
              else
              {
                <div Class='d-flex align-center'>
                  <MudText Class="font-bold" Typo='Typo.body2' Color='Color.Error' >@Extensions.GetEnumDescription(Enums.BankCurrency.PhilippinePeso)</MudText>
                  <MudSpacer />
                  <MudText Class="font-bold" Typo='Typo.body2' Color='Color.Error' >@context.TotalAmount.ToString("N2")</MudText>
                </div>
              }
            </MudTd>
            <MudTd Class='wspace-nowrap' DataLabel='Check Balance'>
              @if (context.CheckBalance > 0)
              {
                <div Class='d-flex align-center'>
                  <MudText Class="font-bold color-green" Typo='Typo.body2'>@Extensions.GetEnumDescription(Enums.BankCurrency.PhilippinePeso)</MudText>
                  <MudSpacer />
                  <MudText Class="font-bold color-green" Typo='Typo.body2'>@context.CheckBalance.ToString("N2")</MudText>
                </div>
              }
              else
              {
                <div Class='d-flex align-center font-bold'>
                  <MudText Class="font-bold" Typo='Typo.body2' Color='Color.Error'>@Extensions.GetEnumDescription(Enums.BankCurrency.PhilippinePeso)</MudText>
                  <MudSpacer />
                  <MudText Class="font-bold" Typo='Typo.body2' Color='Color.Error'>@context.CheckBalance.ToString("N2")</MudText>
                </div>
              }
            </MudTd>
            <MudTd Class='wspace-nowrap' DataLabel='Check Amount'>
                <div class='d-flex align-center gap-2'>
                  @if (context.currentCheckAmount > 0) {
                    <MudText Class="font-bold color-green" Typo='Typo.body2'>@Extensions.GetEnumDescription(Enums.BankCurrency.PhilippinePeso)</MudText>
                    <MudSpacer />
                    <MudNumericField Class='txt-search-overflow txt-top-0 txtfield-right tfield-color-green' @bind-Value="@context.currentCheckAmount"  Culture='CultureInfo.GetCultureInfo("en-PH")'
                    Format='N2' Variant='Variant.Text' Margin='Margin.Dense' HideSpinButtons ErrorText=''/>
                  } else {
                    <MudText Class="font-bold" Typo='Typo.body2' Color='Color.Error'>@Extensions.GetEnumDescription(Enums.BankCurrency.PhilippinePeso)</MudText>
                    <MudSpacer />
                    <MudNumericField Class='txt-search-overflow txt-top-0 txtfield-right tfield-color-red' @bind-Value="@context.currentCheckAmount"  Culture='CultureInfo.GetCultureInfo("en-PH")'
                    Format='N2' Variant='Variant.Text' Margin='Margin.Dense' HideSpinButtons ErrorText=''/>
                  }
                </div>
            </MudTd>
          </RowTemplate>
        </MudTable>
      }
    }
    <div class='d-flex align-center justify-end border-thin bgc-F4F5FB'>
      <MudText Class='pa-2 font-bold' Typo='Typo.overline'>
        Total amount selected:
      </MudText>
      <div class='d-flex align-center justify-end border-thin-left min-width15 pa-2 bgc-white'>
        <MudText Class='pl-1 font-bold color-green' Typo='Typo.overline'>
            @Extensions.GetEnumDescription(Enums.BankCurrency.PhilippinePeso)
        </MudText>
        <MudSpacer />
        <MudText Class='pl-1 font-bold color-green' Typo='Typo.overline'>
            @totalAmounts.ToString("N2")
        </MudText>
      </div>
    </div>
  </DialogContent>
  <DialogActions>
    <MudText Class='d-flex align-center gap-2 pl-1' Typo='Typo.overline'>
      @if (lookUpType == Enums.LookUpType.PettyCash)  
      {
        @(GlobalClass.liquidation.LiquidationDetails.Count()) <MudText>:</MudText> @(GlobalClass.liquidation.LiquidationDetails.Count() > 1 ? "items selected" : "item selected")
      }
      @if (lookUpType == Enums.LookUpType.Liquidation)
      {
        @(GlobalClassList.requestForPayments.Where(x=>x.rfpType==Enums.RFPDetailTypeId.Liquidation).Count()) <MudText>:</MudText> 
        @(GlobalClassList.requestForPayments.Where(x=>x.rfpType==Enums.RFPDetailTypeId.Liquidation).Count() > 1 ? "items selected" : "item selected")
      }
      @if(lookUpType == Enums.LookUpType.POBilling)
      {
        @(GlobalClassList.requestForPayments.Where(x=>x.rfpType==Enums.RFPDetailTypeId.POBilling).Count()) <MudText>:</MudText> 
        @(GlobalClassList.requestForPayments.Where(x=>x.rfpType==Enums.RFPDetailTypeId.POBilling).Count() > 1 ? "items selected" : "item selected")
      }
      @if(lookUpType == Enums.LookUpType.PO)
      {
        @(GlobalClassList.requestForPayments.Where(x=>x.rfpType==Enums.RFPDetailTypeId.PO).Count()) <MudText>:</MudText> 
        @(GlobalClassList.requestForPayments.Where(x=>x.rfpType==Enums.RFPDetailTypeId.PO).Count() > 1 ? "items selected" : "item selected")
      }
      @if (lookUpType == Enums.LookUpType.RFPVoucher)
      {
        @GlobalClass.voucher.VoucherRFP.Count() <MudText>:</MudText> @(GlobalClass.voucher.VoucherRFP.Count() > 1 ? "items selected" : "items selected")
      }
    </MudText>
    <MudSpacer />
    <MudButton OnClick='(()=> CloseDialog())'>Close</MudButton>
  </DialogActions>
</MudDialog>

@code{
  [CascadingParameter] MudDialogInstance MudDialog { get; set; } = default!;
  [Parameter] public Color color { get; set; }
  [Parameter] public string dialogTitle { get; set; } = string.Empty;
  [Parameter] public string buttonText { get; set; } = string.Empty;
  [Parameter] public Enums.LookUpType lookUpType {get; init;}
  [Parameter] public DateRange pettyCashRange {get; set;} = new DateRange();
  private bool dataFetched, openSideFilter, IsDate, isSubTableCollaped;
  private DateTime? dateFrom , dateTo;
  private string payeeName = default!, controlNumber = string.Empty, searchTerm = string.Empty;
  private FilterParameter filterParameter = new();
  private List<POModel> POList = new List<POModel>();
  private List<RequestForPaymentModel> noVoucherRFP = new List<RequestForPaymentModel>();
  private List<string> listRFP = new List<string>();
  private Project payee = new();
  private decimal totalAmounts = 0;
  

  #region Check Properties Filter
  private List<VoucherModel> voucherNotInCheck = new();
  private CheckVoucherModel selectedVouchers = new();
  private DateRange dateRangeFilter = new DateRange(DateTime.Now.Date, DateTime.Now.Date);
  private AccountingStatusModel selectedStatus = new();
  private IEnumerable<AccountingStatusModel> hasAccountingStatus {get; set;} = new HashSet<AccountingStatusModel>();
  private UserAccount requestor  = new();
  #endregion

  protected override async Task OnInitializedAsync()
  {
    @* await Task.Delay(100000); *@
    GlobalClassList.POBillingList = new();
    if(lookUpType == Enums.LookUpType.Voucher)
      totalAmounts = GlobalClass.checkModel.Amount;
    else if (lookUpType == Enums.LookUpType.RFPVoucher)
      totalAmounts = GlobalClass.voucher.VoucherRFP.Sum(x=>x.TotalAmount);
    else if (lookUpType == Enums.LookUpType.PettyCash)
      totalAmounts = GlobalClass.liquidation.LiquidationDetails.Sum(x=>x.ActualAmount);
    else if(lookUpType == Enums.LookUpType.POBilling)
      totalAmounts = GlobalClassList.requestForPayments.Where(x=>x.rfpType == Enums.RFPDetailTypeId.POBilling).Sum(y=>y.Amount);
    else if(lookUpType == Enums.LookUpType.PO)
      totalAmounts = GlobalClassList.requestForPayments.Where(x=>x.rfpType == Enums.RFPDetailTypeId.PO).Sum(y=>y.Amount);
    else if(lookUpType == Enums.LookUpType.Liquidation)
      totalAmounts = GlobalClassList.requestForPayments.Where(x=>x.rfpType == Enums.RFPDetailTypeId.Liquidation).Sum(y=>y.Amount);
    else
      totalAmounts = GlobalClass.liquidation.LiquidationDetails.Sum(x=>x.Amount);


    Task t = Task.WhenAll(InitializeLists());
    await t;
    if (t.Status == TaskStatus.RanToCompletion)
      CompletedFetch();
  }
  void CompletedFetch()
    {
        dataFetched = true;
        Task.Run(StateHasChanged);
    }
  private async Task InitializeLists()
  {
    if (lookUpType == Enums.LookUpType.PettyCash)
      await LoadNotLiquidatedPettyCash();
    if (lookUpType == Enums.LookUpType.POBilling)
      await SearchPOBilling();
    if (lookUpType == Enums.LookUpType.PO)
      await LoadPOs();
    if(lookUpType == Enums.LookUpType.RFPVoucher)
      await LoadNotInVoucher();
    if(lookUpType == Enums.LookUpType.Liquidation)
      await LoadNotInRFPLiquidation();
    if(lookUpType == Enums.LookUpType.Voucher)
      await VoucherNotInCheck(new FilterParameter(){isActive = true});
  }
  private async Task VoucherNotInCheck(FilterParameter filterParameter)
  {
      voucherNotInCheck = await voucherService.VoucherNotInCheck(filterParameter,GlobalClass.token);
      GlobalClass.checkModel.CheckVouchers.ForEach( x => {
        voucherNotInCheck.RemoveAll(voucher => voucher.Id == x.VoucherId);
      });
  }
  private async Task SearchVoucher()
  {
    filterParameter.DateFrom = dateRangeFilter.Start.GetValueOrDefault();
    filterParameter.DateTo = dateRangeFilter.End.GetValueOrDefault();
    filterParameter.AccountingAccessLevel = GlobalClass.currentUserAccount.AccessLevel;
    filterParameter.AccountingStatusId = string.Join(",", hasAccountingStatus.Select(x => x.Id));
    Console.WriteLine(Newtonsoft.Json.JsonConvert.SerializeObject(filterParameter,Newtonsoft.Json.Formatting.Indented));
    await VoucherNotInCheck(filterParameter);
    StateHasChanged();
  }
  private async Task LoadNotLiquidatedPettyCash()
  {
    filterParameter = new FilterParameter()
    {
      IsDate = true,
      DateFrom = pettyCashRange.Start.GetValueOrDefault(),
      DateTo = pettyCashRange.End.GetValueOrDefault()
    };
    var notLiquidated = await liquidationService.GetPettyCashNotLiquidated(filterParameter, GlobalClass.token);
    GlobalClass.liquidation.LiquidationDetails.ForEach(x=>{
       notLiquidated.RemoveAll(p=>p.Id == x.PettyCashId);
    });
    GlobalClassList.notLiquidatedPettyCashList = notLiquidated;
  }
  private async Task LoadNotInRFPLiquidation()
  {
    var notInRFP = await liquidationService.LiquidationNotRFP(GlobalClass.token);
    GlobalClassList.requestForPayments.ForEach(req=>{
      notInRFP.RemoveAll(x=>x.Id == req.LiquidationId);
    });
    GlobalClassList.LiquidationNotInRFP = notInRFP.ToList();

  }
  private async Task SearchPOBilling()
  {
    var filterParameter = new FilterParameter()
    {
      IsControlNumber = true,
      ControlNumber = controlNumber

    };
    var POBillingList = await accountingPOBillingService.LoadAccountingBillingPO(filterParameter, GlobalClass.token);

    GlobalClassList.requestForPayments.ForEach(rfp=>{
      POBillingList.RemoveAll(x=>x.POBillingId == rfp.POBillingId);
    });

    GlobalClassList.POBillingList = POBillingList;
  }
  private async Task LoadPOs()
  {
    var filterParameter = new FilterParameter()
    {
      IsControlNumber = controlNumber == "" ? false : true,
      ControlNumber = controlNumber,
      IsDate = IsDate,
      DateFrom = dateFrom.GetValueOrDefault(),
      DateTo = dateTo.GetValueOrDefault()
    };
    POList = await globalService.LoadPOs(filterParameter, GlobalClass.token);

    GlobalClassList.requestForPayments.ForEach(rfp=>{
      POList.RemoveAll(x=>x.POId == rfp.POId);
    });
  }
  private async Task LoadNotInVoucher()
  {
    var RFP = await voucherService.NotInVoucher(GlobalClass.token);
    GlobalClass.voucher.VoucherRFP.ForEach(rf=> {
      RFP.RemoveAll(x=>x.Id == rf.RequestForPaymentId);
    });
    noVoucherRFP = RFP.OrderByDescending(x=>x.ControlNumber).ThenByDescending(x=>x.RequestDate).ToList();
  }
  private void SelectPettyCash(PettyCashModel pettyCash)
  {
      int temp = 1;
      var liquidationDetail = new LiquidationDetailModel();
      liquidationDetail.PettyCashId = pettyCash.Id;
      liquidationDetail.PayeeId = pettyCash.PayeeId;
      liquidationDetail.PayeeCategoryId = pettyCash.PayeeCategoryId;
      liquidationDetail.IsActive = true;
      liquidationDetail.ControlNumber = pettyCash.ControlNumber;
      liquidationDetail.PayeeName = pettyCash.PayeeName;
      liquidationDetail.Particular = pettyCash.Particular;
      liquidationDetail.Amount = pettyCash.Amount;
      liquidationDetail.ActualAmount = pettyCash.Amount;
      liquidationDetail.PettyCashRemarks = pettyCash.Remarks;
      liquidationDetail.PettyCashRemarks = pettyCash.Remarks;
      liquidationDetail.RequestedByName = pettyCash.RequestedByName;
      liquidationDetail.StatusId = pettyCash.StatusId;
      liquidationDetail.StatusName = pettyCash.StatusName;

      GlobalClassList.notLiquidatedPettyCashList.Remove(pettyCash);
      GlobalClass.liquidation.LiquidationDetails.Add(liquidationDetail);

      totalAmounts += pettyCash.Amount;
      foreach (var item in GlobalClass.liquidation.LiquidationDetails)
      {
          item.TemporaryId = temp++;
      }

  }
  private void SelectPO(POModel poModel)
  {
    int temp = 1;

    var RFPDetails = new RequestForPaymentDetailModel();
    RFPDetails.Amount = poModel.Amount;
    RFPDetails.POId = poModel.POId;
    RFPDetails.PONumber = poModel.PONumber;
    RFPDetails.Particulars = poModel.PONumber;
    RFPDetails.rfpType = Enums.RFPDetailTypeId.PO;
    POList = POList.Where(x=>x.POId != poModel.POId).ToList();
    GlobalClassList.requestForPayments.Add(RFPDetails);

    foreach(var item in GlobalClassList.requestForPayments)
    {
      item.TemporaryId = temp++;
    }
    totalAmounts = GlobalClassList.requestForPayments.Where(x=>x.rfpType == Enums.RFPDetailTypeId.PO).Sum(y=>y.Amount);
  }
  private void SelectLiquidation(LiquidationModel liquidation)
  {
      int temp = 1;
      var RFPDetails = new RequestForPaymentDetailModel();
      RFPDetails.LiquidationId = liquidation.Id;
      RFPDetails.Amount = liquidation.TotalAmount;
      RFPDetails.LiquidationControlNumber = liquidation.ControlNumber;
      RFPDetails.Particulars = liquidation.ControlNumber;
      RFPDetails.Remarks = liquidation.Remarks;
       RFPDetails.rfpType = Enums.RFPDetailTypeId.Liquidation;
      GlobalClassList.LiquidationNotInRFP.Remove(liquidation);
      GlobalClassList.requestForPayments.Add(RFPDetails);
      
      GlobalClassList.requestForPayments.OrderByDescending(x=>x.LiquidationControlNumber);

      foreach (var item in GlobalClassList.requestForPayments)
      {
          item.TemporaryId = temp++;
      }
      totalAmounts = GlobalClassList.requestForPayments.Where(x=>x.rfpType == Enums.RFPDetailTypeId.Liquidation).Sum(y=>y.Amount);
  }
  private void SelectPOBilling(AccountingPOBillingModel poBilling)
  {
      int temp = 1;
      var RFPDetails = new RequestForPaymentDetailModel();
      RFPDetails.POBillingId = poBilling.POBillingId;
      RFPDetails.Amount = poBilling.TotalAmount;
      RFPDetails.POBControlNumber = poBilling.ControlNumber;
      RFPDetails.Particulars = poBilling.ControlNumber;
      RFPDetails.rfpType = Enums.RFPDetailTypeId.POBilling;
      GlobalClassList.POBillingList = GlobalClassList.POBillingList.Where(x=>x.POBillingId != poBilling.POBillingId).ToList();
      GlobalClassList.requestForPayments.Add(RFPDetails);

      foreach (var item in GlobalClassList.requestForPayments)
      {
          item.TemporaryId = temp++;
      }
      totalAmounts = GlobalClassList.requestForPayments.Where(x=>x.rfpType == Enums.RFPDetailTypeId.POBilling).Sum(y=>y.Amount);
  }
  private async Task SelectRFP(RequestForPaymentModel requestForPayment)
  {
    decimal totalAmount = 0;
    VoucherRFPModel voucherRFP = new VoucherRFPModel();
    totalAmounts = totalAmounts + requestForPayment.Amount;

    voucherRFP.RequestForPaymentId = requestForPayment.Id;
    voucherRFP.RFPControlNumber = requestForPayment.RFPDetailTypeId == Enums.RFPDetailTypeId.POBilling ?requestForPayment.RFP : requestForPayment.ControlNumber;
    voucherRFP.IsActive = true;
    voucherRFP.payeeId = requestForPayment.PayeeId;
    voucherRFP.payeeCategory = requestForPayment.PayeeCategoryId;
    voucherRFP.TotalAmount = requestForPayment.Amount;
    noVoucherRFP.Remove(requestForPayment);
    voucherRFP.rfpType = requestForPayment.RFPDetailTypeId;
    voucherRFP.PayeeName = requestForPayment.PayeeName;
    GlobalClass.voucher.VoucherRFP.Add(voucherRFP);

    //GlobalClass.voucher.TotalAmount = totalAmounts;
    GlobalClass.voucher.RFPTotalAmount = totalAmounts;
    

    List<Project> projects = await globalService.LoadPayees(new FilterParameter(){IsPayee=true,PayeeName="",isActive=false},GlobalClass.token);
    var rfp = await requestForPaymentService.LoadRequestPaymentDetail(requestForPayment.Id, GlobalClass.token);
    if(requestForPayment.RFPDetailTypeId == Enums.RFPDetailTypeId.Liquidation)
    {
      var liquidationId =  rfp.Select(x=>x.LiquidationId).FirstOrDefault();
      var liquidationDetails = await liquidationService.LiquidationDetails(Convert.ToInt64(liquidationId), GlobalClass.token);
      GlobalClass.voucher.VoucherDetails = liquidationDetails.Select(details=> new VoucherDetailModel()
      {
        ExpenseId = details.ExpenseLineId,
        ExpenseName = details.ExpenseName,
        ProjectId = details.ChargingId,
        ProjectCategoryId = details.PayeeCategoryId,
        ProjectName = details.ChargingName,
        Description = details.Particular,
        Amount = details.Amount,
        selExp = GlobalClassList.expenseLineList.Where(x=>details.ExpenseLineId == x.Id).FirstOrDefault()?? new(),
        selProj = projects.Where(x=>details.ChargingId == x.ProjectId).FirstOrDefault()?? new(),
        selDiv = GlobalClassList.divisionList.Where(x=>x.divisionName == "None").FirstOrDefault()?? new(),
        selSOW = GlobalClassList.scopeOfWork.Where(x=>x.ScopeName == "None").Select(x=>new SubContractorProjectModel(){
          ScopeOfWork = x.ScopeName,
          ScopeOfWorkId = x.Id,
        }).First(),
        selSubConProject = (projects.Where(x=>x.ProjectName.Contains("None",StringComparison.InvariantCultureIgnoreCase)).Select(x=>new SubContractorProjectModel()
        {
          SubContractorName = x.subContractorName,
          SubContractorId = x.SubLedgerId,
        })).First(),
        isLabor = false,
        selSubConProjectSOWList = new(),
        RFPDetailType = Enums.RFPDetailTypeId.Liquidation,
      }).ToList();
    } else if(requestForPayment.RFPDetailTypeId == Enums.RFPDetailTypeId.Labor) {
      GlobalClass.voucher.VoucherDetails.AddRange(rfp.Select(details=> new VoucherDetailModel()
      {
        ExpenseId = details.ExpenseLineId,
        ProjectId = details.ChargedId,
        ProjectCategoryId = details.ChargedCategoryId,
        ProjectName = details.ChargedName,
        Description = details.Particulars,
        Amount = details.Amount,
        PayeeId = requestForPayment.PayeeId,
        PayeeCategoryId = requestForPayment.PayeeCategoryId,
        isLabor = requestForPayment.RFPDetailTypeId == Enums.RFPDetailTypeId.Labor? true:false,//Disable enable charge
        selExp  = GlobalClassList.expenseLineList.Where(x=>details.ExpenseLineId == x.Id).FirstOrDefault()?? new(),
        selProj = new(),
        selSubConProject = new(),
        selDiv = GlobalClassList.divisionList.Where(x=>x.divisionName == details.DivisionName).FirstOrDefault()?? new(),
      }).ToList());

        GlobalClass.voucher.VoucherDetails.ForEach(async (x)=>{
          x.selProj = (await LoadCharging(x.ProjectName)).FirstOrDefault()?? new();
          x.selSubConProject = (await globalService.VoucherDetailsSubCon(x.ProjectId,GlobalClass.token)).First();
          x.selSubConProjectSOWList = await globalService.VoucherDetailsSubCon(x.ProjectId,GlobalClass.token);
          x.selSOW =  x.selSubConProject;
          //Set subledger for saving
          x.SubLedgerId = x.selSubConProject.SubContractorId;
          x.SubLedgerCategoryId = Enums.ProjectCategory.SubCon;//Temporary
          x.SubLedgerName = x.selSubConProject.SubContractorName;
          //Set subdledger for saving
          x.ScopeOfWorkId = x.selSOW.ScopeOfWorkId;
          x.ScopeOfWorkName = x.selSOW.ScopeOfWork;
        });
        GlobalClass.voucher.WithSubLedger = requestForPayment.RFPDetailTypeId == Enums.RFPDetailTypeId.Labor ? true:false;
    } else {
      GlobalClass.voucher.VoucherDetails.AddRange(rfp.Select(details=> new VoucherDetailModel()
      {
        ExpenseId = details.ExpenseLineId,
        ProjectId = details.ChargedId,
        ProjectCategoryId = details.ChargedCategoryId,
        ProjectName = details.ChargedName,
        Description = details.Particulars,
        Amount = details.Amount,
        PayeeId = requestForPayment.PayeeId,
        PayeeCategoryId = requestForPayment.PayeeCategoryId,
        isLabor = requestForPayment.RFPDetailTypeId == Enums.RFPDetailTypeId.Labor? true:false,//Disable enable charge
        selExp  = GlobalClassList.expenseLineList.Where(x=>details.ExpenseLineId == x.Id).FirstOrDefault()?? new(),
        selSubConProject = new(),
        selDiv = GlobalClassList.divisionList.Where(x=>x.divisionName == details.DivisionName).FirstOrDefault()?? new(),
      }).ToList());
      GlobalClass.voucher.VoucherDetails.ForEach(async(x)=>{
        x.selProj = (await LoadCharging(x.ProjectName)).FirstOrDefault()?? new();
        x.selSubConProject = (projects.Where(x=>x.ProjectName.Contains("None",StringComparison.InvariantCultureIgnoreCase)).Select(x=>new SubContractorProjectModel()
        {
          SubContractorName = x.SubLedgerName,
          SubContractorId = x.SubLedgerId,
        })).First();
        x.selSOW = (GlobalClassList.scopeOfWork.Where(x=>x.ScopeName.Contains("None",StringComparison.InvariantCultureIgnoreCase)).Select(x=>new SubContractorProjectModel(){
          ScopeOfWork = x.ScopeName,
          ScopeOfWorkId = x.Id,
        })).First();
        //Set subledger for saving
          x.SubLedgerId = x.selSubConProject.SubContractorId;
          x.SubLedgerCategoryId = x.SubLedgerCategoryId;
          x.SubLedgerName = x.selSubConProject.SubContractorName;
        //Set sow for saving
        x.ScopeOfWorkId = x.selSOW.ScopeOfWorkId;
        x.ScopeOfWorkName = x.selSOW.ScopeOfWork;
      });
      Console.WriteLine(Newtonsoft.Json.JsonConvert.SerializeObject(GlobalClass.voucher.VoucherDetails,Newtonsoft.Json.Formatting.Indented));
    }
    
  }
  private async Task<IEnumerable<Project>> LoadCharging(string chargingName)
  {
    var filterParameter = new FilterParameter()
    {
      IsProject = true,
      ProjectName = chargingName,
      IsId = false
    };
    var charging = await globalService.LoadChargeProjectLine(filterParameter, GlobalClass.token);
    return charging;
  }
  private void OpenSideFilter()
  {
      openSideFilter = !openSideFilter;
  }
  void CloseDialog()
  {
    MudDialog.Close();
  }
  async Task SearchPettyCash()
  {
      if (payee == null)
          payee = new Project();

      filterParameter = new FilterParameter()
      {
          IsControlNumber = !string.IsNullOrEmpty(controlNumber) ? true : false,
          IsPayee = !string.IsNullOrEmpty(payee.ProjectName) ? true : false,
          PayeeId = payee.ProjectId,
          PayeeCategoryId = payee.ProjectCategoryId,
          IsDate = IsDate,
          DateFrom = Convert.ToDateTime(dateFrom),
          DateTo = Convert.ToDateTime(dateTo),
      };
      GlobalClassList.notLiquidatedPettyCashList = await liquidationService.GetPettyCashNotLiquidated(filterParameter, GlobalClass.token);
  }
  private async Task<IEnumerable<Project>> LoadProject(string projectName)
  {
    var filterParameter = new FilterParameter()
    {
      IsProject = true,
      ProjectName = projectName,
      IsId = false
    };
    var projects = await globalService.LoadPayees(filterParameter, GlobalClass.token);
    return projects;
  }
  private async Task ApplyFilter()
  {
    if (lookUpType == Enums.LookUpType.PettyCash)
      await SearchPettyCash();
    if (lookUpType == Enums.LookUpType.POBilling)
      await SearchPOBilling();
    if(lookUpType == Enums.LookUpType.PO)
      await LoadPOs();
    if(lookUpType == Enums.LookUpType.Voucher)
      await SearchVoucher();
  }
  
  private void TableCollapse(Enums.LookUpType lookUpType)
  {
    isSubTableCollaped = !isSubTableCollaped;
    if (lookUpType == Enums.LookUpType.Liquidation && isSubTableCollaped)
      foreach (var item in GlobalClassList.LiquidationNotInRFP)
        item.ShowSubTable = true;
    else if(lookUpType == Enums.LookUpType.Liquidation && !isSubTableCollaped)
     foreach (var item in GlobalClassList.LiquidationNotInRFP)
        item.ShowSubTable = false;
  }
  private void SelectVoucher(VoucherModel voucher)
  {
    if(isValidatedVoucher(voucher))
    {
      selectedVouchers = new();
      GlobalClass.checkModel.Amount = totalAmounts += voucher.currentCheckAmount;
      GlobalClass.checkModel.AmountInWords = Common.AmountToWords.DecimalToWords(GlobalClass.checkModel.Amount);
      voucherNotInCheck.Remove(voucher);
      selectedVouchers.CheckId = GlobalClass.checkModel.Id;
      selectedVouchers.VoucherId = voucher.Id;
      selectedVouchers.Amount = voucher.currentCheckAmount;
      GlobalClass.checkModel.CheckVouchers.Add(selectedVouchers);
    }
    else
    {
      Extensions.ShowAlert("Check amount should not be greater than the current balance or equal to zero",Variant.Filled,snackbarService,Severity.Error);
    }
  }
  private bool isValidatedVoucher(VoucherModel voucher)
  {
      return  voucher.currentCheckAmount != 0 && voucher.currentCheckAmount <= voucher.CheckBalance;
  }
  private string AccountingStatus(List<string> selectedStatus)
  {
      var status = "";
      foreach (var item in hasAccountingStatus)
      {
      status = string.Join(", ", hasAccountingStatus.Select(x => x.StatusName));      
      }
      return $"{status}";
  }
  private async void LookUp(Enums.LookUpType type, string lookFor)
    {
        var parameters = new DialogParameters();
        string dialogTitle = string.Empty;
        string searchPlaceholderText = string.Empty;
        dialogTitle = lookFor+" Look Up";
        searchPlaceholderText = lookFor;
        parameters.Add("lookUpType", type);
        parameters.Add("dialogTitle", dialogTitle);
        parameters.Add("buttonText", "Select");
        parameters.Add("searchPlaceholderText", searchPlaceholderText);
        parameters.Add("color", Color.Success);
        var options = new DialogOptions()
        {
            CloseButton = false,
            MaxWidth = MaxWidth.Small,
            FullWidth = true,
            NoHeader = false,
            DisableBackdropClick = false
        };
        var resultDialog = await dialogService.Show<Shared.Dialogs.LookUpDialog.GlobalGenericLookup>(dialogTitle, parameters, options).Result;
        if (!resultDialog.Cancelled) {
            if(type == Enums.LookUpType.Employee)
                requestor = (UserAccount) resultDialog.Data;
            else if (type == Enums.LookUpType.Project)
                payee = (Project) resultDialog.Data;
            filterParameter.RequestorId = requestor.EmployeeId;
            filterParameter.PayeeId = payee.ProjectId;
            filterParameter.PayeeCategoryId = payee.ProjectCategoryId;
        }
        StateHasChanged();
    }
}((byte)