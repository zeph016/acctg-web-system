@inject IPettyCashService pettyCashService
@inject ILiquidationService liquidationService
@inject IAccountingPOBillingService accountingPOBillingService
@inject IGlobalService globalService
@inject ILiquidationService liquidationService
@inject IRequestForPaymentService requestForPaymentService
@inject IVoucherService voucherService
@inject NavigationManager navigationManager
@inject ISnackbar SnackbarService
@inject IDialogService dialogService
@inject IGlobalService globalService
@inject IJSRuntime JSRuntime

<MudDialog Class="customdialog-table-only">
  <TitleContent>
    <div class='d-flex align-center'>
      <MudIcon Class='pr-2' Icon='@Icons.Material.Filled.FormatListBulleted' Size='Size.Medium' />
      <MudText Class='txt-uppercase' Typo='Typo.button'>
        @dialogTitle
      </MudText>
      <MudSpacer />
    </div>
  </TitleContent>
  <DialogContent>
    <div class='drawer-right-min'>
      <MudDrawer Class='pa-1' @bind-Open='openSideFilter' Anchor='Anchor.Right' Elevation='0' Variant='DrawerVariant.Mini' OpenMiniOnHover='false'>
        <GlobalTableFilterComponent OpenSideFilterClick='(() => openSideFilter = !openSideFilter)'
          FilterClick='FilterTable' ResetTableClick='ReloadTable'
          contentVisible='openSideFilter' lookUpType='lookUpType'/>
        @* <div class='d-flex align-center'>
          <MudSpacer />
          <MudText Class='font-bold' Typo='Typo.caption'>CLOSE FILTER</MudText>
          <MudToggleIconButton @bind-Toggled='openSideFilter' Title='Close Filter'
          Icon='@Icons.Material.Filled.Close' Color="Color.Tertiary" ToggledSize='Size.Small'
          ToggledIcon='@Icons.Material.Filled.Close' ToggledColor="Color.Error" Size='Size.Small' />
        </div>
        <div class='d-flex flex-column gap-2'>
          @if(lookUpType != Enums.LookUpType.Voucher)
          {
            <MudTextField @bind-Value='controlNumber' Placeholder='Control Number'></MudTextField>
          }
          @if(lookUpType != Enums.LookUpType.POBilling && lookUpType != Enums.LookUpType.Voucher)
          {
            <BlazoredTypeahead SearchMethod=LoadProject 
            @bind-Value='payee' Debounce="500" placeholder='Payee' >
              <SelectedTemplate>
              @context.ProjectName | @context.Location
              </SelectedTemplate>
              <ResultTemplate>
              @context.ProjectName | @context.Location
            </ResultTemplate>
            </BlazoredTypeahead>
            <div class='d-flex flex-column pa-2'>
              <MudCheckBox Dense @bind-Checked='IsDate' Label='Filter Date' Size='Size.Small' />
              <MudDatePicker @bind-Date='dateFrom' Label='Date From' PickerVariant="PickerVariant.Dialog" Disabled='!IsDate' />
              <MudDatePicker @bind-Date='dateTo' Label='Date From' PickerVariant="PickerVariant.Dialog" Disabled='!IsDate' />
            </div>
          }
          @if(lookUpType == Enums.LookUpType.Voucher)
          {
            <div class='d-flex align-center gap-2'>
              <MudCheckBox Class='pt-1' @bind-Checked="@filterParameter.IsControlNumber" Dense Size='Size.Small'/>
              <MudTextField Class='txtfield-75' Immediate=true @bind-Value='filterParameter.ControlNumber' Placeholder='Control Number'
              Clearable='true' Disabled="@(!filterParameter.IsControlNumber)" Variant='Variant.Outlined' />
            </div>
            <div class='d-flex align-center gap-2'>
                <MudCheckBox Class='pt-1' @bind-Checked="@filterParameter.IsDate" Dense Size='Size.Small' />
                <MudDateRangePicker Class='txtfield-75' @bind-DateRange=@dateRangeFilter IconSize='Size.Small'
                Placeholder="Date Range" Disabled="@(!filterParameter.IsDate)" Variant='Variant.Outlined' />
            </div>
            <div class='d-flex align-center gap-2'>
                <MudCheckBox Class='pt-1' @bind-Checked="@filterParameter.IsRequestor" Dense Size='Size.Small' />
                <MudTextField Class='txtfield-75' @bind-Value='requestor.EmployeeName' Placeholder='Requested By' ReadOnly='true'
                    @onclick='(() => LookUp(Enums.LookUpType.Employee, "Requestor"))' IconSize='Size.Small' Disabled="@(!filterParameter.IsRequestor)" Variant='Variant.Outlined'>
                  </MudTextField>
            </div>
            <div class='d-flex align-center gap-2'>
                <MudCheckBox Class='pt-1' @bind-Checked="@filterParameter.IsPayee" Dense Size='Size.Small' />
                <MudTextField Class='txtfield-75' @bind-Value='payee.ProjectName' Placeholder='Payee' ReadOnly='true'
                    @onclick='(() => LookUp(Enums.LookUpType.Project, "Payee"))' IconSize='Size.Small' Disabled="@(!filterParameter.IsPayee)" Variant='Variant.Outlined' >
                    </MudTextField>
            </div>
            <div class='d-flex align-center gap-2'>
              <MudCheckBox Class='pt-1' @bind-Checked="@filterParameter.IsAccountingStatus" Dense Size='Size.Small' />
              <MudSelect Class='txtfield-75' MultiSelectionTextFunc='@(new Func<List<string>, string>(AccountingStatus))' @bind-SelectedValues='hasAccountingStatus' IconSize='Size.Small'
              @bind-Value="selectedStatus" Dense="true" MultiSelection=true Disabled='!filterParameter.IsAccountingStatus' Placeholder='Accounting Status' Variant='Variant.Outlined'>
                @if(GlobalClassList.accountingStatusList != null)
                {
                    foreach (var item in GlobalClassList.accountingStatusList.Where(x=> 
                    (int)x.StatusEnumCategoryId == 11 || 
                    (int)x.StatusEnumCategoryId == 12 || 
                    (int)x.StatusEnumCategoryId == 13 ))
                    {
                    <MudSelectItem Value="@item">@item.StatusName</MudSelectItem>
                    }
                }
              </MudSelect>
            </div>
          }
          <div class='d-flex align-center justify-end pt-1'>
            <MudButton OnClick='(()=> ApplyFilter())' Variant='Variant.Filled' Color='Color.Secondary'>Apply Filter</MudButton>
          </div>
        </div> *@
      </MudDrawer>
    </div>
    <div class='pr-8' >
      @if (!dataFetched)
      {
        <SkeletonGlobalRFP />
      }
      else
      {
        @if(lookUpType == Enums.LookUpType.PettyCash)
        {
          <MudTable Class='table-style-1' Items="GlobalClassList.notLiquidatedPettyCashList" Bordered ReadOnly='false'
            Dense Elevation='0' Height='calc(100vh - 380px)' FixedHeader FixedFooter>
            <ColGroup>
              <col style='width: 1%' />
              <col style='width: 1%' />
              <col />
              <col />
              <col />
              <col style='width: 1%' />
              <col style='width: 1%' />
            </ColGroup>
            <HeaderContent>
              <MudTh Class='customheader-6 text-center'>
                Select
              </MudTh>
              <MudTh Class='customheader-6 text-center'>
                <div class='d-flex align-center justify-space-around'>
                  <MudTableSortLabel Class='mudsort-icon-15px pad-bott05px' InitialDirection='SortDirection.Descending'
                    SortBy='new Func<PettyCashModel, object>(x=>x.ControlNumber)'>
                      Control No.
                  </MudTableSortLabel>
                  <MudTableSortLabel Class='mudsort-icon-15px pad-bott05px' InitialDirection='SortDirection.None'
                    SortBy='new Func<PettyCashModel, object>(x=>x.RequestDate)'>
                      Date
                  </MudTableSortLabel>
                </div>
              </MudTh>
              <MudTh Class='customheader-6'>Payee Name</MudTh>
              <MudTh Class='customheader-6'>Particulars</MudTh>
              <MudTh Class='customheader-6'>Requested by</MudTh>
              <MudTh Class='customheader-6 text-center'>Status</MudTh>
              <MudTh Class='customheader-6 text-center'>
                <MudTableSortLabel Class='mudsort-icon-15px pad-bott05px' InitialDirection='SortDirection.None'
                SortBy='new Func<PettyCashModel, object>(x=>x.Amount)'>
                  Amount
                </MudTableSortLabel>
              </MudTh>
            </HeaderContent>
            <RowTemplate>
              <MudTd Class='text-center'>
                <MudIconButton OnClick='(()=> SelectPettyCash(context))' Icon='@Icons.Material.Filled.AddCircle' aria-label="Select" Color='Color.Success' Size='Size.Small' />
              </MudTd>
              <MudTd DataLabel='ControlNumber'>
                <div class='d-flex align-center'>
                  <MudChip Class='chip-radius-5 txt-uppercase font-bold font10' Color='Color.Error' Size='Size.Small' Variant='Variant.Outlined'>
                      @context.ControlNumber
                  </MudChip>
                  <MudChip Class='chip-radius-5 font-bold font10' Icon='@Icons.Material.Filled.CalendarMonth' Color='Color.Dark' Size='Size.Small'
                    Variant='Variant.Outlined'>
                      @Convert.ToDateTime(context.RequestDate).ToShortDateString()
                  </MudChip>
                </div>
              </MudTd>
              <MudTd DataLabel='Payee'>
                  <div class='dynamic-div-onglobalrfp'>
                    <small>@context.PayeeName</small>
                  </div>
              </MudTd>
              <MudTd DataLabel='Particulars'>
                <div class='dynamic-div-onglobalrfp'>
                  <small>@context.Particular</small>
                </div>
              </MudTd>
              <MudTd DataLabel='Requested by'>
                <div class='dynamic-div-onglobalrfp'>
                  <small>@context.RequestedByName</small>
                </div>
              </MudTd>
              <MudTd DataLabel='Status'>
                <MudChip Class='chip-radius-5 font-bold font10' Size='Size.Small' Style='@Extensions.BorderColor(context.StatusId)'
                  Variant='Variant.Outlined'>
                    @context.StatusName
                </MudChip>
              </MudTd>
              <MudTd DataLabel='Amount'>
                <div class='d-flex align-center justify-space-around pr-1'>
                    <small class='font-bold @(context.Amount > 0 ? "color-green":"color-red")'>
                        @Extensions.GetEnumDescription(Enums.BankCurrency.PhilippinePeso)
                    </small>
                    <MudSpacer />
                    <MudTooltip MudTooltip Text='@context.Amount.ToString("N2")' Arrow Placement="Placement.Top">
                      <small class='globalrfp-amt-indialog @(context.Amount > 0 ? "color-green":"color-red")'>
                          @context.Amount.ToString("N2")
                      </small>
                    </MudTooltip>
                </div>
              </MudTd>
            </RowTemplate>
            <PagerContent>
              <TablePagerAmountsGRFP totalAmounts='totalAmounts'/>
            </PagerContent>
          </MudTable>
        }
        @if(lookUpType == Enums.LookUpType.Liquidation)
        {
          <MudTable Class='table-style-1' Items="GlobalClassList.LiquidationNotInRFP" Bordered ReadOnly=false 
            Dense Elevation='0' Height='calc(100vh - 380px)' FixedHeader FixedFooter>
            <ColGroup>
              <col style='width: 1%' />
              <col style='width: 1%' />
              <col />
              <col style='width: 20px'/>
              <col style='width: 1%' />
              <col style='width: 1%' />
            </ColGroup>
            <HeaderContent>
              <MudTh Class='customheader-6'>Select</MudTh>
              <MudTh Class='customheader-6'>
                <div class='d-flex align-center justify-space-around'>
                  <MudTableSortLabel Class='mudsort-icon-15px pad-bott05px' InitialDirection='SortDirection.Ascending'
                  SortBy='new Func<LiquidationModel, object>(x=>x.ControlNumber)'>
                    Control No.
                  </MudTableSortLabel>
                  <MudTableSortLabel InitialDirection='SortDirection.None'
                    SortBy='new Func<RequestForPaymentModel, object>(x=>x.RequestDate)'>
                    Date
                  </MudTableSortLabel>
                </div>
              </MudTh>
              <MudTh Class='customheader-6 text-left'>Prepared By</MudTh>
              <MudTh Class='customheader-6 text-center'>
                <MudToggleIconButton Toggled='isSubTableCollaped' ToggledChanged='() => TableCollapse(Enums.LookUpType.Liquidation)'
                Icon='@Icons.Material.Filled.ExpandMore' Color="Color.Tertiary" ToggledSize='Size.Small'
                ToggledIcon="@Icons.Material.Filled.ExpandLess" ToggledColor="Color.Info" Size='Size.Small' />
              </MudTh>
              <MudTh Class='customheader-6 text-center'>Status</MudTh>
              <MudTh Class='customheader-6 text-right'>
                  <MudTableSortLabel Class='mudsort-icon-15px pad-bott05px' InitialDirection='SortDirection.None'
                  SortBy='new Func<LiquidationModel, object>(x=>x.TotalAmount)'>
                    Amount
                  </MudTableSortLabel>
              </MudTh>
            </HeaderContent>
            <RowTemplate>
              <MudTd Class='text-center pa-2' DataLabel='Select'>
                <MudIconButton OnClick='(()=> SelectLiquidation(context))' Icon='@Icons.Material.Filled.AddCircle' aria-label="Select" Color='Color.Success' Size='Size.Small' />
              </MudTd>
              <MudTd Class='text-center' DataLabel='Control Number'>
                <div class='d-flex align-center'>
                    <MudChip Class='chip-radius-5 txt-uppercase font-bold font10' Color='Color.Error' Size='Size.Small'
                      Variant='Variant.Outlined'>
                      @context.ControlNumber
                    </MudChip>
                    <MudChip Class='chip-radius-5 font-bold font10' Icon='@Icons.Material.Filled.CalendarMonth' Color='Color.Dark' Size='Size.Small'
                       Variant='Variant.Outlined'>
                      @Convert.ToDateTime(context.LiquidationDate).ToShortDateString()
                    </MudChip>
                </div>
              </MudTd>
              <MudTd DataLabel='Prepared By'>
                <div class='dynamic-div-onglobalrfp'>
                  <small>@context.PreparedByName</small>
                </div>
              </MudTd>
              <MudTd Class='text-center'>
                <MudToggleIconButton @bind-Toggled='context.ShowSubTable'
                Icon="@Icons.Material.Filled.Message" Color="Color.Info" ToggledSize='Size.Small'
                ToggledIcon="@Icons.Material.Filled.Message" ToggledColor="Color.Tertiary" Size='Size.Small' />
              </MudTd>
              <MudTd Class='text-center' DataLabel='Status Name'>
                <MudChip Class='chip-radius-5 font-bold font10' Size='Size.Small' Style='@Extensions.BorderColor(context.StatusId)'
                   Variant='Variant.Outlined'>
                  @context.StatusName
                </MudChip>
              </MudTd>
              <MudTd Class='text-right' DataLabel='Amount'>
                  <div class='d-flex align-center justify-space-around pr-1'>
                    <small class='font-bold @(context.TotalAmount > 0 ? "color-green":"color-red")'>
                        @Extensions.GetEnumDescription(Enums.BankCurrency.PhilippinePeso)
                    </small>
                    <MudSpacer />
                    <MudTooltip MudTooltip Text='@context.TotalAmount.ToString("N2")' Arrow Placement="Placement.Top">
                      <small class='globalrfp-amt-indialog @(context.TotalAmount > 0 ? "color-green":"color-red")'>
                          @context.TotalAmount.ToString("N2")
                      </small>
                    </MudTooltip>
                  </div>
              </MudTd>
            </RowTemplate>
            <ChildRowContent>
              @if (context.ShowSubTable)
              {
                <td colspan="3">
                  @* EMPTY *@
                </td>
                <td class='pa-2' colspan='3'>
                  <MudCard Class='d-flex flex-column justify-start pa-2'>
                    <MudText Class='font-bold' Typo='Typo.overline'>Remarks: </MudText>
                    @if (string.IsNullOrEmpty(context.Remarks))
                    {
                      <MudText Class='pl-2' Typo='Typo.caption'>No Remarks</MudText>
                    }
                    else
                    {
                      <MudText Class='pl-2' Typo='Typo.caption'>@context.Remarks</MudText>
                    }
                  </MudCard>
                </td>
              }
            </ChildRowContent>
            <PagerContent>
              <TablePagerAmountsGRFP totalAmounts='totalAmounts'/>
            </PagerContent>
          </MudTable>
        }
        @if(lookUpType == Enums.LookUpType.POBilling)
        {
          <MudTable Class='table-style-1' Items="GlobalClassList.POBillingList" Bordered ReadOnly=false 
            Dense Elevation='0' Height='calc(100vh - 380px)' FixedHeader FixedFooter>
            <ColGroup>
              <col style='width: 1%' />
              <col style='width: 1%' />
              <col />
              <col />
              <col style='width: 1%' />
              <col style='width: 1%' />
            </ColGroup>
            <HeaderContent>
              <MudTh Class='customheader-6'>Select</MudTh>
              <MudTh Class='customheader-6 text-center'>
                <div class='d-flex align-center justify-space-around'>
                  <MudTableSortLabel Class='mudsort-icon-15px pad-bott05px' InitialDirection='SortDirection.Ascending'
                    SortBy='new Func<AccountingPOBillingModel, object>(x=>x.ControlNumber)'>
                    Control No.
                  </MudTableSortLabel>
                  <MudTableSortLabel InitialDirection='SortDirection.None'
                    SortBy='new Func<AccountingPOBillingModel, object>(x=>x.BillingDate)'>
                    Date
                  </MudTableSortLabel>
                </div>
              </MudTh>
              <MudTh Class='customheader-6'>Supplier</MudTh>
              <MudTh Class='customheader-6'>Prepared By</MudTh>
              <MudTh Class='customheader-6 text-center'>Status</MudTh>
              <MudTh Class='customheader-6 text-right'>
                  <MudTableSortLabel Class='mudsort-icon-15px pad-bott05px' InitialDirection='SortDirection.None'
                    SortBy='new Func<AccountingPOBillingModel, object>(x=>x.TotalAmount)'>
                    Amount
                </MudTableSortLabel>
              </MudTh>
            </HeaderContent>
            <RowTemplate>
              <MudTd Class='text-center pa-2' DataLabel='SELECT'>
                <MudIconButton OnClick='(()=> SelectPOBilling(context))' Icon='@Icons.Material.Filled.AddCircle' aria-label="Select" Color='Color.Success' Size='Size.Small' />
              </MudTd>
              <MudTd DataLabel='Control number'>
                <div class='d-flex align-center'>
                    <MudChip Class='chip-radius-5 txt-uppercase font-bold font10' Color='Color.Error' Size='Size.Small'
                      Variant='Variant.Outlined'>
                      @context.ControlNumber
                    </MudChip>
                    <MudChip Class='chip-radius-5 font-bold font10' Icon='@Icons.Material.Filled.CalendarMonth' Color='Color.Dark' Size='Size.Small'
                      Variant='Variant.Outlined'>
                        @Convert.ToDateTime(context.BillingDate).ToShortDateString()
                    </MudChip>
                </div>
              </MudTd>
              <MudTd DataLabel='Supplier'>
                <div class='dynamic-div-onglobalrfp'>
                  <small> @context.Supplier</small>
                </div>
              </MudTd>
              <MudTd DataLabel='Prepared by'>
                <div class='dynamic-div-onglobalrfp'>
                  <small>@context.PreparedByName</small>
                </div>
              </MudTd>
              <MudTd Class='text-center' DataLabel='Status'>
                  <MudChip Class='chip-radius-5 txt-uppercase font-bold font10' Color='Color.Info' Size='Size.Small'
                    Variant='Variant.Outlined'>
                    @context.StatusName
                  </MudChip>
              </MudTd>
              <MudTd DataLabel='Amount'>
                <div class='d-flex align-center justify-space-around pr-1'>
                    <small class='font-bold @(context.TotalAmount > 0 ? "color-green":"color-red")'>
                        @Extensions.GetEnumDescription(Enums.BankCurrency.PhilippinePeso)
                    </small>
                    <MudSpacer />
                    <MudTooltip MudTooltip Text='@context.TotalAmount.ToString("N2")' Arrow Placement="Placement.Top">
                      <small class='globalrfp-amt-indialog @(context.TotalAmount > 0 ? "color-green":"color-red")'>
                          @context.TotalAmount.ToString("N2")
                      </small>
                    </MudTooltip>
                </div>
              </MudTd>
            </RowTemplate>
            <PagerContent>
              <TablePagerAmountsGRFP totalAmounts='totalAmounts'/>
            </PagerContent>
          </MudTable>
        }
        @if(lookUpType == Enums.LookUpType.PO)
        {
          <MudTable Class='table-style-1' Items="POList" Bordered ReadOnly=false 
            Dense Elevation='0' Height='calc(100vh - 270px)' FixedHeader FixedFooter>
            <ColGroup>
              <col style='width: 1%' />
              <col style='width: 1%' />
              <col />
              <col />
              <col style='width: 1%' />
              <col style='width: 1%' />
            </ColGroup>
            <HeaderContent>
                <MudTh Class='customheader-6'>Select</MudTh>
                <MudTh Class='customheader-6'>
                  <div class='d-flex align-center justify-space-around'>
                    <MudTableSortLabel Class='mudsort-icon-15px pad-bott05px' InitialDirection='SortDirection.Ascending'
                      SortBy='new Func<POModel, object>(x=>x.PONumber)'>
                      Control No.
                    </MudTableSortLabel>
                    <MudTableSortLabel Class='mudsort-icon-15px pad-bott05px' InitialDirection='SortDirection.None'
                      SortBy='new Func<POModel, object>(x=>x.PODate)'>
                      Date
                    </MudTableSortLabel>
                  </div>
                </MudTh>
                <MudTh Class='customheader-6'>Supplier</MudTh>
                <MudTh Class='customheader-6'>Prepared By</MudTh>
                <MudTh Class='customheader-6 text-center'>Status</MudTh>
                <MudTh Class='customheader-6 text-right'>
                  <MudTableSortLabel Class='mudsort-icon-15px pad-bott05px' InitialDirection='SortDirection.None'
                  SortBy='new Func<POModel, object>(x=>x.Amount)'>
                    Amount
                  </MudTableSortLabel>
                </MudTh>
            </HeaderContent>
            <RowTemplate>
              <MudTd Class='text-center' DataLabel='SELECT'>
                <MudIconButton OnClick='(()=> SelectPO(context))' Icon='@Icons.Material.Filled.AddCircle' aria-label="Select" Color='Color.Success' Size='Size.Small' />
              </MudTd>
              <MudTd DataLabel='Control number'>
               <div class='d-flex align-center'>
                  <MudChip Class='chip-radius-5 txt-uppercase font-bold font10' Color='Color.Error' Size='Size.Small'
                    Variant='Variant.Outlined'>
                    @context.PONumber
                  </MudChip>
                
                  <MudChip Class='chip-radius-5 font-bold font10' Icon='@Icons.Material.Filled.CalendarMonth' Color='Color.Dark' Size='Size.Small'
                    Variant='Variant.Outlined'>
                    @Convert.ToDateTime(context.PODate).ToShortDateString()
                  </MudChip>
                </div>
              </MudTd>
              <MudTd DataLabel='Supplier'>
                <div class='dynamic-div-onglobalrfp'>
                  <small>@context.SupplierName</small>
                </div>
              </MudTd>
              <MudTd DataLabel='Prepared by'>
                <div class='dynamic-div-onglobalrfp'>
                  <small>@context.PreparedBy</small>
                </div>
              </MudTd>
              <MudTd DataLabel='Status'>
                <MudChip Class='chip-radius-5 txt-uppercase font-bold font10' Color='Color.Info' Size='Size.Small'
                  Variant='Variant.Outlined'>
                  @context.POStatusView
                </MudChip>
              </MudTd>
              <MudTd DataLabel='Check Amount'>
                <div class='d-flex align-center justify-space-around pr-1'>
                  <small class='font-bold @(context.Amount > 0 ? "color-green":"color-red")'>
                      @Extensions.GetEnumDescription(Enums.BankCurrency.PhilippinePeso)
                  </small>
                  <MudSpacer />
                  <MudTooltip MudTooltip Text='@context.Amount.ToString("N2")' Arrow Placement="Placement.Top">
                    <small class='globalrfp-amt-indialog @(context.Amount > 0 ? "color-green":"color-red")'>
                        @context.Amount.ToString("N2")
                    </small>
                  </MudTooltip>
                </div>
              </MudTd>
            </RowTemplate>
            <PagerContent>
              <TablePagerAmountsGRFP totalAmounts='totalAmounts'/>
            </PagerContent>
          </MudTable>
        }
        @if(lookUpType == Enums.LookUpType.RFPVoucher)
        {
          <MudTable Class='table-style-1' Items="noVoucherRFP" Bordered ReadOnly=false 
            Dense Elevation='0' Height='calc(100vh - 270px)' Square FixedHeader FixedFooter>
            <ColGroup>
              <col style='width: 1%' />
              <col style='width: 1%' />
              <col />
              <col />
              <col style='width: 1%' />
              <col style='width: 1%' />
            </ColGroup>
            <HeaderContent>
                <MudTh Class='customheader-6'>Select</MudTh>
                <MudTh Class='customheader-6'>
                  <div class='d-flex align-center justify-space-around'>
                    <MudTableSortLabel InitialDirection='SortDirection.Descending'
                      SortBy='new Func<RequestForPaymentModel, object>(x=>x.ControlNumber)'>
                      Control No.
                    </MudTableSortLabel>
                    <MudTableSortLabel Class='mudsort-icon-15px pad-bott05px' InitialDirection='SortDirection.None'
                      SortBy='new Func<RequestForPaymentModel, object>(x=>x.RequestDate)'>
                      Date
                    </MudTableSortLabel>
                  </div>
                </MudTh>
                <MudTh Class='customheader-6'>Payee</MudTh>
                <MudTh Class='customheader-6'>Requestor</MudTh>
                <MudTh Class='customheader-6 text-center'>Status</MudTh>
                <MudTh Class='customheader-6 text-center'>
                  <MudTableSortLabel Class='mudsort-icon-15px pad-bott05px' InitialDirection='SortDirection.None'
                    SortBy='new Func<RequestForPaymentModel, object>(x=>x.Amount)'>
                    Amount
                  </MudTableSortLabel>
                </MudTh>
            </HeaderContent>
            <RowTemplate>
              <MudTd Class='text-center pa-0'>
                @if(GlobalClass.voucher.VoucherRFP.Any(x=>x.RequestForPaymentId == context.Id))
                {
                  @* <MudTooltip Text='Remove Detail'>
                    <MudIconButton OnClick='(()=> SelectRFP(context))' Icon='@Icons.Material.Filled.RemoveCircle' Color='Color.Error' Size='Size.Small' />
                  </MudTooltip> *@
                }
                else
                {
                  <MudTooltip Text='Select Detail' Arrow Placement='Placement.Top'>
                    <MudIconButton OnClick='(()=> SelectRFP(context))' Icon='@Icons.Material.Filled.AddCircle' Color='Color.Success' Size='Size.Small' />
                  </MudTooltip>
                }
              </MudTd>
              <MudTd Class='overflow-hidden' DataLabel='Control No.'>
                <div class='d-flex align-center wspace-nowrap overflow-auto oflow-el max-width250px'>
                  <MudChip Class='chip-radius-5 txt-uppercase font-bold font10' OnClick='(() => Extensions.CopyTextToClipboard(context.ControlNumber, SnackbarService, JSRuntime))'
                    Color='Color.Error' Size='Size.Small' Variant='Variant.Outlined'>
                    @(context.RFPDetailTypeId == Enums.RFPDetailTypeId.POBilling ? context.RFP:context.ControlNumber)
                  </MudChip>
                  <MudChip Class='chip-radius-5 font-bold font10' Icon='@Icons.Material.Filled.CalendarMonth' Size='Size.Small'
                    Variant='Variant.Outlined' Color='Color.Dark'>
                    @Convert.ToDateTime(context.RequestDate).ToShortDateString()
                  </MudChip>  
                </div>
              </MudTd>
              <MudTd DataLabel='Payee Name'>
                <div class='dynamic-div-onglobalrfp'>
                  <small>@context.PayeeName</small>
                </div>
              </MudTd>
              <MudTd DataLabel='Requestor Name'>
                <div class='dynamic-div-onglobalrfp'>
                  <small>@context.RequestedByName</small>
                </div>
              </MudTd>
              <MudTd DataLabel='All Statuses'>
                <div class='d-flex align-center'>
                  <MudChip Class='chip-radius-5 txt-uppercase font-bold font10' Color='Color.Dark' Size='Size.Small' Variant='Variant.Outlined'>
                    @context.RFPDetailTypeId
                  </MudChip>
                  <MudChip Class='chip-radius-5 txt-uppercase font-bold font10' Color='Color.Dark' Size='Size.Small' Variant='Variant.Outlined'>
                    @context.RequestTypeName
                  </MudChip>
                  <MudChip Class='chip-radius-5 font-bold font10' Size='Size.Small' Style='@Extensions.BorderColor(Convert.ToInt64(context.AccountingStatusId))'
                    Variant='Variant.Outlined'>
                    @context.AccountingStaus
                  </MudChip>
                </div>
              </MudTd>
              <MudTd DataLabel='Amount'>
                 <div class='d-flex align-center justify-space-around pr-1'>
                   <small class='font-bold @(context.Amount > 0 ? "color-green":"color-red")'>
                     @Extensions.GetEnumDescription(Enums.BankCurrency.PhilippinePeso)
                   </small>
                   <MudSpacer />
                   <MudTooltip MudTooltip Text='@context.Amount.ToString("N2")' Arrow Placement="Placement.Top">
                      <small class='globalrfp-amt-indialog @(context.Amount > 0 ? "color-green":"color-red")'>
                        @context.Amount.ToString("N2")
                      </small>
                   </MudTooltip>
                 </div>
              </MudTd>
            </RowTemplate>
            <PagerContent>
              <TablePagerAmountsGRFP totalAmounts='totalAmounts'/>
            </PagerContent>
          </MudTable>
        }
        @if(lookUpType == Enums.LookUpType.Voucher)
        {
          <MudTable Class='table-style-1' Items="voucherNotInCheck" Bordered ReadOnly=false 
            Dense Elevation='0' Height='calc(100vh - 270px)' Square FixedHeader>
            <ColGroup>
              <col style='width: 1%' />
              <col style='width: 1%' />
              <col  />
              <col style='width: 1%' />
              <col style='width: 10%' />
              <col style='width: 10%' />
              <col style='width: 10px' />
              <col style='width: 10%' />
            </ColGroup>
            <HeaderContent>
                <MudTh Class='customheader-6 text-center'>Select </MudTh>
                <MudTh Class='customheader-6'>
                  <div class='d-flex align-center justify-center'>
                    <MudTableSortLabel Class='text-center' InitialDirection='SortDirection.Ascending'
                      SortBy='new Func<VoucherModel, object>(x=>x.ControlNumber)'>
                        Control No.
                    </MudTableSortLabel>
                  </div>
                </MudTh>
                <MudTh Class='customheader-6'>Payee</MudTh>
                <MudTh Class='customheader-6 text-center'>Status</MudTh>
                <MudTh Class='customheader-6 text-center'>Amount</MudTh>
                <MudTh Class='customheader-6 text-center'>Balance</MudTh>
                <MudTh Class='customheader-6 text-center'>-</MudTh>
                <MudTh Class='customheader-6 text-right'>
                    Check Amount
                </MudTh>
            </HeaderContent>
            <RowTemplate>
              <MudTd Class='text-center pa-2'>
                <MudTooltip Text='Select Detail' Arrow Placement='Placement.Top'>
                    <MudIconButton OnClick="(()=>SelectVoucher(context))" Icon='@Icons.Material.Filled.AddCircle' Color='Color.Success' Size='Size.Small' 
                      Disabled='@(context.currentCheckAmount == 0 ? true:false)' />
                </MudTooltip>
              </MudTd> 
              <MudTd DataLabel='Payee Name'>
                <div class='d-flex align-center justify-center '>
                  <MudChip Class='chip-radius-5 txt-uppercase font-bold font10 cursor-pointer' OnClick='(() => Extensions.CopyTextToClipboard(context.ControlNumber, SnackbarService, JSRuntime))'
                    Color='Color.Error' Size='Size.Small' Variant='Variant.Outlined'>
                    @context.ControlNumber
                  </MudChip>
                </div>
              </MudTd>
              <MudTd DataLabel='Requestor Name'>
                <div class='dynamic-div-onglobalrfp'>
                  <small>@context.PayeeName</small>
                </div>
              </MudTd>
              <MudTd DataLabel='Status'>
                <div class='d-flex align-center justify-center '>
                  <MudChip Class='chip-radius-5 txt-uppercase font-bold font10' Size='Size.Small'
                    Variant='Variant.Outlined' Style='@Extensions.BorderColor(context.AccountingStatusId)'>
                    @context.StatusName
                  </MudChip>
                </div>
              </MudTd>
              <MudTd DataLabel='Amount'>
                <div Class='d-flex align-center gap-1'>
                  <small class='vrfp-amt @(context.TotalAmount > 0 ? "color-green":"color-red")'>
                    @Extensions.GetEnumDescription(Enums.BankCurrency.PhilippinePeso)
                  </small>
                  <MudSpacer />
                  <MudTooltip MudTooltip Text='@context.TotalAmount.ToString("N2")' Arrow Placement="Placement.Top"
                    Color='@(context.TotalAmount > 0 ? Color.Success:Color.Error)'>
                    <small class='vrfp-amt @(context.TotalAmount > 0 ? "color-green":"color-red")' >
                      @context.TotalAmount.ToString("N2")
                    </small>
                  </MudTooltip>
                </div>
              </MudTd>
              <MudTd Class='wspace-nowrap' DataLabel='Check Balance'>
                <div Class='d-flex align-center gap-1'>
                  <small class='vrfp-amt @(context.CheckBalance > 0 ? "color-green":"color-red")'>
                    @Extensions.GetEnumDescription(Enums.BankCurrency.PhilippinePeso)
                  </small>
                  <MudSpacer />
                  <MudTooltip MudTooltip Text='@context.CheckBalance.ToString("N2")' Arrow Placement="Placement.Top"
                    Color='@(context.CheckBalance > 0 ? Color.Success:Color.Error)'>
                    <small class='vrfp-amt @(context.CheckBalance > 0 ? "color-green":"color-red")' >
                      @context.CheckBalance.ToString("N2")
                    </small>
                  </MudTooltip>
                </div>
              </MudTd>
              <MudTd DataLabel='Copy amount'>
                <MudTooltip MudTooltip Text='Copy to check amount' Arrow Placement="Placement.Top">
                  <MudIconButton OnClick='(()=> FillCheckAmount(context) )' Size='Size.Small' Icon='@Icons.Material.Filled.KeyboardDoubleArrowRight' 
                      Disabled='@(context.CheckBalance == 0 ? true:false)' Color='Color.Dark' />
                </MudTooltip>
              </MudTd>
              <MudTd Class='wspace-nowrap' DataLabel='Check Amount'>
                  <div class='d-flex align-center gap-2'>
                      <small class='@(context.currentCheckAmount > 0 ? "font-bold color-green":"font-bold color-red")'>@Extensions.GetEnumDescription(Enums.BankCurrency.PhilippinePeso)</small>
                      <MudSpacer />
                      <MudNumericField Class='@(context.currentCheckAmount > 0 ? "txtnumeric-green-1":"txtnumeric-red-1")' @bind-Value="@context.currentCheckAmount"  Culture='CultureInfo.GetCultureInfo("en-PH")'
                        Format='N2' Variant='Variant.Text' Margin='Margin.Dense' HideSpinButtons ErrorText=''/>
                  </div>
              </MudTd>
            </RowTemplate>
            <PagerContent>
              <TablePagerAmountsGRFP totalAmounts='totalAmounts'/>
            </PagerContent>
          </MudTable>
        }
      }
    </div>
  </DialogContent>
  <DialogActions>
    <MudText Class='d-flex align-center gap-2 pl-1' Typo='Typo.overline'>
      @if (lookUpType == Enums.LookUpType.PettyCash)  
      {
        @(GlobalClass.liquidation.LiquidationDetails.Count()) <MudText>:</MudText> @(GlobalClass.liquidation.LiquidationDetails.Count() > 1 ? "items selected" : "item selected")
      }
      @if (lookUpType == Enums.LookUpType.Liquidation)
      {
        @(GlobalClassList.requestForPayments.Where(x=>x.rfpType==Enums.RFPDetailTypeId.Liquidation).Count()) <MudText>:</MudText> 
        @(GlobalClassList.requestForPayments.Where(x=>x.rfpType==Enums.RFPDetailTypeId.Liquidation).Count() > 1 ? "items selected" : "item selected")
      }
      @if(lookUpType == Enums.LookUpType.POBilling)
      {
        @(GlobalClassList.requestForPayments.Where(x=>x.rfpType==Enums.RFPDetailTypeId.POBilling).Count()) <MudText>:</MudText> 
        @(GlobalClassList.requestForPayments.Where(x=>x.rfpType==Enums.RFPDetailTypeId.POBilling).Count() > 1 ? "items selected" : "item selected")
      }
      @if(lookUpType == Enums.LookUpType.PO)
      {
        @(GlobalClassList.requestForPayments.Where(x=>x.rfpType==Enums.RFPDetailTypeId.PO).Count()) <MudText>:</MudText> 
        @(GlobalClassList.requestForPayments.Where(x=>x.rfpType==Enums.RFPDetailTypeId.PO).Count() > 1 ? "items selected" : "item selected")
      }
      @if(lookUpType == Enums.LookUpType.RFPVoucher)
      {
        @GlobalClass.voucher.VoucherRFP.Count() <MudText>:</MudText> @(GlobalClass.voucher.VoucherRFP.Count() > 1 ? "items selected" : "item selected")
      }
    </MudText>
    <MudSpacer />
     @if (lookUpType == Enums.LookUpType.PettyCash)  
     {
        <GlobalRFPConfirmBtn CloseDialogClick='(() => CloseDialog())'
          itemCount='@GlobalClass.liquidation.LiquidationDetails.Count()' />
     }
      @if (lookUpType == Enums.LookUpType.Liquidation)
      {
        <GlobalRFPConfirmBtn CloseDialogClick='(() => CloseDialog())'
          itemCount='@GlobalClassList.requestForPayments.Where(x=>x.rfpType==Enums.RFPDetailTypeId.Liquidation).Count()' />
      }
      @if(lookUpType == Enums.LookUpType.POBilling)
      {
        <GlobalRFPConfirmBtn CloseDialogClick='(() => CloseDialog())'
          itemCount='@GlobalClassList.requestForPayments.Where(x=>x.rfpType==Enums.RFPDetailTypeId.POBilling).Count()' />
      }
      @if(lookUpType == Enums.LookUpType.PO)
      {
        <GlobalRFPConfirmBtn CloseDialogClick='(() => CloseDialog())'
          itemCount='@GlobalClassList.requestForPayments.Where(x=>x.rfpType==Enums.RFPDetailTypeId.POBilling).Count()' />
      }
      @if(lookUpType == Enums.LookUpType.RFPVoucher)
      {
        <GlobalRFPConfirmBtn CloseDialogClick='(() => CloseDialog())'
          itemCount='@GlobalClass.voucher.VoucherRFP.Count()' />
      }
      @if(lookUpType == Enums.LookUpType.Voucher)
      {
        <GlobalRFPConfirmBtn CloseDialogClick='(() => CloseDialog())'
          itemCount='0' />
      }
  </DialogActions>
</MudDialog>

@code{
  [CascadingParameter] MudDialogInstance MudDialog { get; set; } = default!;
  [Parameter] public Color color { get; set; }
  [Parameter] public string dialogTitle { get; set; } = string.Empty;
  [Parameter] public string buttonText { get; set; } = string.Empty;
  [Parameter] public Enums.LookUpType lookUpType {get; init;}
  [Parameter] public DateRange pettyCashRange {get; set;} = new DateRange();
  private bool dataFetched, openSideFilter, IsDate, isSubTableCollaped, isLoading;
  private DateTime? dateFrom , dateTo;
  private string payeeName = default!, controlNumber = string.Empty, searchTerm = string.Empty;
  private FilterParameter filterParameter = new();
  private List<POModel> POList = new List<POModel>();
  private List<RequestForPaymentModel> noVoucherRFP = new List<RequestForPaymentModel>();
  private List<string> listRFP = new List<string>();
  private Project payee = new();
  private decimal totalAmounts = 0;
  

  #region Check Properties Filter
  private List<VoucherModel> voucherNotInCheck = new();
  private CheckVoucherModel selectedVouchers = new();
  private DateRange dateRangeFilter = new DateRange(DateTime.Now.Date, DateTime.Now.Date);
  private AccountingStatusModel selectedStatus = new();
  private IEnumerable<AccountingStatusModel> hasAccountingStatus {get; set;} = new HashSet<AccountingStatusModel>();
  private UserAccount requestor  = new();
  #endregion

  protected override async Task OnInitializedAsync()
  {
    GlobalClassList.POBillingList = new();
    if(lookUpType == Enums.LookUpType.Voucher)
      totalAmounts = GlobalClass.checkModel.Amount;
    else if (lookUpType == Enums.LookUpType.RFPVoucher)
      totalAmounts = GlobalClass.voucher.VoucherRFP.Sum(x=>x.TotalAmount);
    else if (lookUpType == Enums.LookUpType.PettyCash)
      totalAmounts = GlobalClass.liquidation.LiquidationDetails.Sum(x=>x.ActualAmount);
    else if(lookUpType == Enums.LookUpType.POBilling)
      totalAmounts = GlobalClassList.requestForPayments.Where(x=>x.rfpType == Enums.RFPDetailTypeId.POBilling).Sum(y=>y.Amount);
    else if(lookUpType == Enums.LookUpType.PO)
      totalAmounts = GlobalClassList.requestForPayments.Where(x=>x.rfpType == Enums.RFPDetailTypeId.PO).Sum(y=>y.Amount);
    else if(lookUpType == Enums.LookUpType.Liquidation)
      totalAmounts = GlobalClassList.requestForPayments.Where(x=>x.rfpType == Enums.RFPDetailTypeId.Liquidation).Sum(y=>y.Amount);
    else
      totalAmounts = GlobalClass.liquidation.LiquidationDetails.Sum(x=>x.Amount);


    Task t = Task.WhenAll(InitializeLists());
    await t;
    if (t.Status == TaskStatus.RanToCompletion)
      CompletedFetch();
  }
  void CompletedFetch()
    {
        dataFetched = true;
        Task.Run(StateHasChanged);
    }
  private async Task InitializeLists()
  {
    if (lookUpType == Enums.LookUpType.PettyCash)
      await LoadNotLiquidatedPettyCash();
    if (lookUpType == Enums.LookUpType.POBilling)
      await SearchPOBilling(false);
    if (lookUpType == Enums.LookUpType.PO)
      await LoadPOs(false);
    if(lookUpType == Enums.LookUpType.RFPVoucher)
      await LoadNotInVoucher();
    if(lookUpType == Enums.LookUpType.Liquidation)
      await LoadNotInRFPLiquidation();
    if(lookUpType == Enums.LookUpType.Voucher)
      await VoucherNotInCheck(new FilterParameter(){isActive = true});
  }
  private async Task VoucherNotInCheck(FilterParameter filterParameter)
  {
      voucherNotInCheck = await voucherService.VoucherNotInCheck(filterParameter,GlobalClass.token);
      GlobalClass.checkModel.CheckVouchers.ForEach( x => {
        voucherNotInCheck.RemoveAll(voucher => voucher.Id == x.VoucherId);
      });
  }
  private async Task SearchVoucher()
  {
    filterParameter.DateFrom = dateRangeFilter.Start.GetValueOrDefault();
    filterParameter.DateTo = dateRangeFilter.End.GetValueOrDefault();
    filterParameter.AccountingAccessLevel = GlobalClass.currentUserAccount.AccessLevel;
    filterParameter.AccountingStatusId = string.Join(",", hasAccountingStatus.Select(x => x.Id));
    await VoucherNotInCheck(filterParameter);
    StateHasChanged();
  }
  private async Task LoadNotLiquidatedPettyCash()
  {
    filterParameter = new FilterParameter()
    {
      IsDate = true,
      DateFrom = pettyCashRange.Start.GetValueOrDefault(),
      DateTo = pettyCashRange.End.GetValueOrDefault()
    };
    var notLiquidated = await liquidationService.GetPettyCashNotLiquidated(filterParameter, GlobalClass.token);
    GlobalClass.liquidation.LiquidationDetails.ForEach(x=>{
       notLiquidated.RemoveAll(p=>p.Id == x.PettyCashId);
    });
    GlobalClassList.notLiquidatedPettyCashList = notLiquidated;
  }
  private async Task LoadNotInRFPLiquidation()
  {
    var notInRFP = await liquidationService.LiquidationNotRFP(GlobalClass.token);
    GlobalClassList.requestForPayments.ForEach(req=>{
      notInRFP.RemoveAll(x=>x.Id == req.LiquidationId);
    });
    GlobalClassList.LiquidationNotInRFP = notInRFP.ToList();

  }
  private async Task SearchPOBilling(bool isFilter)
  {
    filterParameter = GlobalVariable.filterParameter;
    if(!isFilter)
    {
        filterParameter = new();
        filterParameter.IsSupplier = true;
        filterParameter.SupplierId = GlobalClass.requestForPayment.PayeeId;
        filterParameter.POSupplierCategory = Extensions.POSupplierCategory(GlobalClass.requestForPayment.PayeeCategoryId);
    }
    var POBillingList = await accountingPOBillingService.LoadAccountingBillingPO(filterParameter, GlobalClass.token);

    GlobalClassList.requestForPayments.ForEach(rfp=>{
      POBillingList.RemoveAll(x=>x.POBillingId == rfp.POBillingId);
    });

    GlobalClassList.POBillingList = POBillingList;
  }
  private async Task LoadPOs(bool isFilter)
  {
    filterParameter = GlobalVariable.filterParameter;
    if(!isFilter)
    {
        filterParameter = new();
        filterParameter.IsSupplier = true;
        filterParameter.SupplierId = GlobalClass.requestForPayment.PayeeId;
        filterParameter.POSupplierCategory = Extensions.POSupplierCategory(GlobalClass.requestForPayment.PayeeCategoryId);
    }
    POList = await globalService.LoadPOs(filterParameter, GlobalClass.token);
    GlobalClassList.requestForPayments.ForEach(rfp=>{
      POList.RemoveAll(x=>x.POId == rfp.POId);
    });
  }
  private async Task LoadNotInVoucher()
  {
    filterParameter = new();
    filterParameter = GlobalVariable.filterParameter;
    var RFP = await voucherService.NotInVoucher(GlobalClass.token);
    GlobalClass.voucher.VoucherRFP.ForEach(rf=> {
      RFP.RemoveAll(x=>x.Id == rf.RequestForPaymentId);
    });
    noVoucherRFP = RFP.OrderByDescending(x=>x.ControlNumber).ThenByDescending(x=>x.RequestDate).ToList();
    if (filterParameter.IsControlNumber)
      noVoucherRFP = noVoucherRFP.Where(x=>x.ControlNumber.Contains(filterParameter.ControlNumber,StringComparison.InvariantCultureIgnoreCase)).ToList();
    if (filterParameter.IsDate)
      noVoucherRFP = noVoucherRFP.Where(x=>x.RequestDate >= filterParameter.DateFrom && x.RequestDate <= filterParameter.DateTo).ToList();
  }
  private void SelectPettyCash(PettyCashModel pettyCash)
  {
      int temp = 1;
      var liquidationDetail = new LiquidationDetailModel();
      liquidationDetail.PettyCashId = pettyCash.Id;
      liquidationDetail.PayeeId = pettyCash.PayeeId;
      liquidationDetail.PayeeCategoryId = pettyCash.PayeeCategoryId;
      liquidationDetail.IsActive = true;
      liquidationDetail.ControlNumber = pettyCash.ControlNumber;
      liquidationDetail.PayeeName = pettyCash.PayeeName;
      liquidationDetail.Particular = pettyCash.Particular;
      liquidationDetail.Amount = pettyCash.Amount;
      liquidationDetail.ActualAmount = pettyCash.Amount;
      liquidationDetail.PettyCashRemarks = pettyCash.Remarks;
      liquidationDetail.PettyCashRemarks = pettyCash.Remarks;
      liquidationDetail.RequestedByName = pettyCash.RequestedByName;
      liquidationDetail.StatusId = pettyCash.StatusId;
      liquidationDetail.StatusName = pettyCash.StatusName;

      GlobalClassList.notLiquidatedPettyCashList.Remove(pettyCash);
      GlobalClass.liquidation.LiquidationDetails.Add(liquidationDetail);

      totalAmounts += pettyCash.Amount;
      foreach (var item in GlobalClass.liquidation.LiquidationDetails)
      {
          item.TemporaryId = temp++;
      }

  }
  private void SelectPO(POModel poModel)
  {
    int temp = 1;

    var RFPDetails = new RequestForPaymentDetailModel();
    RFPDetails.Amount = poModel.Amount;
    RFPDetails.POId = poModel.POId;
    RFPDetails.PONumber = poModel.PONumber;
    RFPDetails.Particulars = string.Empty;
    RFPDetails.rfpType = Enums.RFPDetailTypeId.PO;
    POList = POList.Where(x=>x.POId != poModel.POId).ToList();
    GlobalClassList.requestForPayments.Add(RFPDetails);

    foreach(var item in GlobalClassList.requestForPayments)
    {
      item.TemporaryId = temp++;
    }
    totalAmounts = GlobalClassList.requestForPayments.Where(x=>x.rfpType == Enums.RFPDetailTypeId.PO).Sum(y=>y.Amount);
  }
  private void SelectLiquidation(LiquidationModel liquidation)
  {
      int temp = 1;
      var RFPDetails = new RequestForPaymentDetailModel();
      RFPDetails.LiquidationId = liquidation.Id;
      RFPDetails.Amount = liquidation.TotalAmount;
      RFPDetails.LiquidationControlNumber = liquidation.ControlNumber;
      RFPDetails.Particulars = string.Empty;
      RFPDetails.Remarks = liquidation.Remarks;
       RFPDetails.rfpType = Enums.RFPDetailTypeId.Liquidation;
      GlobalClassList.LiquidationNotInRFP.Remove(liquidation);
      GlobalClassList.requestForPayments.Add(RFPDetails);
      
      GlobalClassList.requestForPayments.OrderByDescending(x=>x.LiquidationControlNumber);

      foreach (var item in GlobalClassList.requestForPayments)
      {
          item.TemporaryId = temp++;
      }
      totalAmounts = GlobalClassList.requestForPayments.Where(x=>x.rfpType == Enums.RFPDetailTypeId.Liquidation).Sum(y=>y.Amount);
  }
  private void SelectPOBilling(AccountingPOBillingModel poBilling)
  {
      int temp = 1;
      var RFPDetails = new RequestForPaymentDetailModel();
      RFPDetails.POBillingId = poBilling.POBillingId;
      RFPDetails.Amount = poBilling.TotalAmount;
      RFPDetails.POBControlNumber = poBilling.ControlNumber;
      RFPDetails.Particulars = string.Empty;
      RFPDetails.rfpType = Enums.RFPDetailTypeId.POBilling;
      GlobalClassList.POBillingList = GlobalClassList.POBillingList.Where(x=>x.POBillingId != poBilling.POBillingId).ToList();
      GlobalClassList.requestForPayments.Add(RFPDetails);

      foreach (var item in GlobalClassList.requestForPayments)
      {
          item.TemporaryId = temp++;
      }
      totalAmounts = GlobalClassList.requestForPayments.Where(x=>x.rfpType == Enums.RFPDetailTypeId.POBilling).Sum(y=>y.Amount);
  }
  private async Task SelectRFP(RequestForPaymentModel requestForPayment)
  {
    decimal totalAmount = 0;
    VoucherRFPModel voucherRFP = new VoucherRFPModel();
    totalAmounts = totalAmounts + requestForPayment.Amount;

    voucherRFP.RequestForPaymentId = requestForPayment.Id;
    voucherRFP.RFPControlNumber = requestForPayment.RFPDetailTypeId == Enums.RFPDetailTypeId.POBilling ?requestForPayment.RFP : requestForPayment.ControlNumber;
    voucherRFP.IsActive = true;
    voucherRFP.payeeId = requestForPayment.PayeeId;
    voucherRFP.payeeCategory = requestForPayment.PayeeCategoryId;
    voucherRFP.TotalAmount = requestForPayment.Amount;
    noVoucherRFP.Remove(requestForPayment);
    voucherRFP.rfpType = requestForPayment.RFPDetailTypeId;
    voucherRFP.PayeeName = requestForPayment.PayeeName;
    GlobalClass.voucher.VoucherRFP.Add(voucherRFP);

    //GlobalClass.voucher.TotalAmount = totalAmounts;
    GlobalClass.voucher.RFPTotalAmount = totalAmounts;
    

    List<Project> projects = await globalService.LoadPayees(new FilterParameter(){IsPayee=true,PayeeName="",isActive=false},GlobalClass.token);
    var rfp = await requestForPaymentService.LoadRequestPaymentDetail(requestForPayment.Id, GlobalClass.token);
    if(requestForPayment.RFPDetailTypeId == Enums.RFPDetailTypeId.Liquidation)
    {
      var liquidationId =  rfp.Select(x=>x.LiquidationId).FirstOrDefault();
      var liquidationDetails = await liquidationService.LiquidationDetails(Convert.ToInt64(liquidationId), GlobalClass.token);
      GlobalClass.voucher.VoucherDetails = liquidationDetails.Select(details=> new VoucherDetailModel()
      {
        RFPPeriodDateFrom = requestForPayment.PeriodDateFrom,
        RFPPeriodDateTo = requestForPayment.PeriodDateTo,
        ExpenseId = details.ExpenseLineId,
        ExpenseName = details.ExpenseName,
        ProjectId = details.ChargingId,
        ProjectCategoryId = details.PayeeCategoryId,
        ProjectName = details.ChargingName,
        Description = details.Particular,
        Amount = details.Amount,
        selExp = GlobalClassList.expenseLineList.Where(x=>details.ExpenseLineId == x.Id).FirstOrDefault()?? new(),
        selProj = projects.Where(x=>details.ChargingId == x.ProjectId).FirstOrDefault()?? new(),
        selSOW = GlobalClassList.scopeOfWork.Where(x=>x.ScopeName == "None").Select(x=>new SubContractorProjectModel(){
          ScopeOfWork = x.ScopeName,
          ScopeOfWorkId = x.Id,
        }).FirstOrDefault()?? new(),
        selSubConProject = (projects.Where(x=>x.ProjectName.Contains("None",StringComparison.InvariantCultureIgnoreCase)).Select(x=>new SubContractorProjectModel()
        {
          SubContractorName = x.subContractorName,
          SubContractorId = x.SubLedgerId,
        })).FirstOrDefault()?? new(),
        isLabor = false,
        selSubConProjectSOWList = new(),
        RFPDetailType = Enums.RFPDetailTypeId.Liquidation,
      }).ToList();
      GlobalClass.voucher.VoucherDetails.ForEach(x=>{
        x.selDiv = GlobalClassList.divisionList.Where(x=>x.divisionName == x.divisionName).FirstOrDefault()?? new();
        x.selProjSubLedger = projects.Where(x=>x.ProjectName == "None").FirstOrDefault()?? new();
        x.SubLedgerId = x.selProjSubLedger.ProjectId;
        x.SubLedgerName = x.selProjSubLedger.ProjectName;
        x.SubLedgerCategoryId = x.selProjSubLedger.ProjectCategoryId;
        x.DivisionId = x.selDiv.Id;
        x.DivisionName = x.selDiv.divisionName;

      });
    } else if(requestForPayment.RFPDetailTypeId == Enums.RFPDetailTypeId.Labor) {
      GlobalClass.voucher.VoucherDetails.AddRange(rfp.Select(details=> new VoucherDetailModel()
      {
        ExpenseId = details.ExpenseLineId,
        ExpenseName = details.ExpenseLineName,
        ProjectId = details.ChargedId,
        
        ProjectCategoryId = details.ChargedCategoryId,
        ProjectName = details.ChargedName,
        Description = details.Particulars,
        Amount = details.Amount,
        RFPPeriodDateFrom = requestForPayment.PeriodDateFrom,
        RFPPeriodDateTo = requestForPayment.PeriodDateTo,
        InvoiceNo = details.InvoiceNo,
        PayeeId = requestForPayment.PayeeId,
        PayeeCategoryId = requestForPayment.PayeeCategoryId,
        isLabor = requestForPayment.RFPDetailTypeId == Enums.RFPDetailTypeId.Labor? true:false,//Disable enable charge
        selExp  = GlobalClassList.expenseLineList.Where(x=>details.ExpenseLineId == x.Id).FirstOrDefault()?? new(),
        selProj = new(),
        selSubConProject = new(),
        RFPDetailType = Enums.RFPDetailTypeId.Labor,
        selDiv = GlobalClassList.divisionList.Where(x=>x.divisionName == details.DivisionName).FirstOrDefault()?? new(),
      }).ToList());
        await Task.Delay(100);
        GlobalClass.voucher.VoucherDetails.ForEach(async (x)=>{
          x.selProj = (await LoadCharging(x.ProjectName)).FirstOrDefault()?? new();
          x.selSubConProject = (await globalService.VoucherDetailsSubCon(x.ProjectId,GlobalClass.token)).FirstOrDefault()?? new();
          x.selSubConProjectSOWList = await globalService.VoucherDetailsSubCon(x.ProjectId,GlobalClass.token);
          x.selSOW =  x.selSubConProject;
          //Set subledger for saving
          x.SubLedgerId = x.selSubConProject.SubContractorId;
          x.SubLedgerCategoryId = Enums.ProjectCategory.SubCon;//Temporary
          x.SubLedgerName = x.selSubConProject.SubContractorName;
          //Set subdledger for saving
          x.ScopeOfWorkId = x.selSOW.ScopeOfWorkId;
          x.ScopeOfWorkName = x.selSOW.ScopeOfWork;
          x.RFPDetailType = Enums.RFPDetailTypeId.Labor;

          x.DivisionId = x.selDiv.Id;
          x.DivisionName = x.selDiv.divisionName;

          x.SubLedgerName = x.selSubConProject.ProjectName;
          x.SubLedgerCategoryId = x.selSubConProject.SubContactorCategoryId;
          x.SubLedgerId = x.selSubConProject.ProjectId;

          x.isLabor = true;
        });
        GlobalClass.voucher.WithSubLedger = requestForPayment.RFPDetailTypeId == Enums.RFPDetailTypeId.Labor ? true:false;
    } else {
      GlobalClass.voucher.VoucherDetails.AddRange(rfp.Select(details=> new VoucherDetailModel()
      {
        ExpenseId = details.ExpenseLineId,
        ProjectId = details.ChargedId,
        ExpenseName = details.ExpenseLineName,

        ProjectCategoryId = details.ChargedCategoryId,
        ProjectName = details.ChargedName,
        Description = details.Particulars,
        Amount = details.Amount,
        RFPPeriodDateFrom = requestForPayment.PeriodDateFrom,
        RFPPeriodDateTo = requestForPayment.PeriodDateTo,
        PayeeId = requestForPayment.PayeeId,
        InvoiceNo = details.InvoiceNo,
        PayeeCategoryId = requestForPayment.PayeeCategoryId,
        isLabor = requestForPayment.RFPDetailTypeId == Enums.RFPDetailTypeId.Labor? true:false,//Disable enable charge
        selExp  = GlobalClassList.expenseLineList.Where(x=>details.ExpenseLineId == x.Id).FirstOrDefault()?? new(),
        selSubConProject = new(),
        selDiv = GlobalClassList.divisionList.Where(x=>x.divisionName == details.DivisionName).FirstOrDefault()?? new(),
      }).ToList());
      GlobalClass.voucher.VoucherDetails.ForEach(async(x)=>{
        x.selProj = (await LoadCharging(x.ProjectName)).FirstOrDefault()?? new();
        x.selProjSubLedger = projects.Where(x=>x.ProjectName == "None").FirstOrDefault()?? new();
        x.selSubConProject = (projects.Where(x=>x.ProjectName.Contains("None",StringComparison.InvariantCultureIgnoreCase)).Select(x=>new SubContractorProjectModel()
        {
          SubContractorName = x.SubLedgerName,
          SubContractorId = x.SubLedgerId,
        })).FirstOrDefault()?? new();
        x.selSOW = (GlobalClassList.scopeOfWork.Where(x=>x.ScopeName.Contains("None",StringComparison.InvariantCultureIgnoreCase)).Select(x=>new SubContractorProjectModel(){
          ScopeOfWork = x.ScopeName,
          ScopeOfWorkId = x.Id,
        })).FirstOrDefault()?? new();
        //Set subledger for saving
          x.SubLedgerId = x.selSubConProject.SubContractorId;
          x.SubLedgerCategoryId = x.SubLedgerCategoryId;
          x.SubLedgerName = x.selSubConProject.SubContractorName;
        //Set sow for saving
        x.ScopeOfWorkId = x.selSOW.ScopeOfWorkId;
        x.ScopeOfWorkName = x.selSOW.ScopeOfWork;
        x.RFPDetailType = requestForPayment.RFPDetailTypeId;

        x.DivisionId = x.selDiv.Id;
        x.DivisionName = x.selDiv.divisionName;
        
      });
    }
    StateHasChanged();
  }
  private async Task<IEnumerable<Project>> LoadCharging(string chargingName)
  {
    var filterParameter = new FilterParameter()
    {
      IsProject = true,
      ProjectName = chargingName,
      IsId = false
    };
    var charging = await globalService.LoadChargeProjectLine(filterParameter, GlobalClass.token);
    return charging;
  }
  private void OpenSideFilter()
  {
      openSideFilter = !openSideFilter;
  }
  void CloseDialog()
  {
    MudDialog.Close();
  }
  private async Task SearchPettyCash()
  {
    filterParameter = new FilterParameter();
    filterParameter = GlobalVariable.filterParameter;
    if (payee == null)
        payee = new Project();
    GlobalClassList.notLiquidatedPettyCashList = await liquidationService.GetPettyCashNotLiquidated(filterParameter, GlobalClass.token);
  }
  private async Task<IEnumerable<Project>> LoadProject(string projectName)
  {
    var filterParameter = new FilterParameter()
    {
      IsProject = true,
      ProjectName = projectName,
      IsId = false
    };
    var projects = await globalService.LoadPayees(filterParameter, GlobalClass.token);
    return projects;
  }
  private async Task FilterTable()
  {
    filterParameter = new FilterParameter();
    filterParameter = GlobalVariable.filterParameter;
    if (lookUpType == Enums.LookUpType.PettyCash)
        await SearchPettyCash();
      if (lookUpType == Enums.LookUpType.POBilling)
        await SearchPOBilling(true);
      if(lookUpType == Enums.LookUpType.PO)
        await LoadPOs(true);
      if(lookUpType == Enums.LookUpType.Voucher)
        await SearchVoucher();
      if(lookUpType == Enums.LookUpType.Liquidation)
        await LoadNotInRFPLiquidation();
      if(lookUpType == Enums.LookUpType.RFPVoucher)
        await LoadNotInVoucher();
      StateHasChanged();
  }
  private void TableCollapse(Enums.LookUpType lookUpType)
  {
    isSubTableCollaped = !isSubTableCollaped;
    if (lookUpType == Enums.LookUpType.Liquidation && isSubTableCollaped)
      foreach (var item in GlobalClassList.LiquidationNotInRFP)
        item.ShowSubTable = true;
    else if(lookUpType == Enums.LookUpType.Liquidation && !isSubTableCollaped)
     foreach (var item in GlobalClassList.LiquidationNotInRFP)
        item.ShowSubTable = false;
  }
  private void SelectVoucher(VoucherModel voucher)
  {
    if(isValidatedVoucher(voucher))
    {
      selectedVouchers = new();
      GlobalClass.checkModel.Amount = totalAmounts += voucher.currentCheckAmount;
      GlobalClass.checkModel.AmountInWords = Common.AmountToWords.DecimalToWords(GlobalClass.checkModel.Amount);
      voucherNotInCheck.Remove(voucher);
      selectedVouchers.CheckId = GlobalClass.checkModel.Id;
      selectedVouchers.VoucherId = voucher.Id;
      selectedVouchers.Amount = voucher.currentCheckAmount;
      GlobalClass.checkModel.CheckVouchers.Add(selectedVouchers);
    }
    else
    {
      Extensions.ShowAlert("Check amount should not be greater than the current balance or equal to zero",Variant.Filled,SnackbarService,Severity.Error);
    }
  }
  private bool isValidatedVoucher(VoucherModel voucher)
  {
      return  voucher.currentCheckAmount != 0 && voucher.currentCheckAmount <= voucher.CheckBalance;
  }
  private string AccountingStatus(List<string> selectedStatus)
  {
      var status = "";
      foreach (var item in hasAccountingStatus)
      {
      status = string.Join(", ", hasAccountingStatus.Select(x => x.StatusName));      
      }
      return $"{status}";
  }
  private async void LookUp(Enums.LookUpType type, string lookFor)
    {
        var parameters = new DialogParameters();
        string dialogTitle = string.Empty;
        string searchPlaceholderText = string.Empty;
        dialogTitle = lookFor+" Look Up";
        searchPlaceholderText = lookFor;
        parameters.Add("lookUpType", type);
        parameters.Add("dialogTitle", dialogTitle);
        parameters.Add("buttonText", "Select");
        parameters.Add("searchPlaceholderText", searchPlaceholderText);
        parameters.Add("color", Color.Success);
        var options = new DialogOptions()
        {
            CloseButton = false,
            MaxWidth = MaxWidth.Small,
            FullWidth = true,
            NoHeader = false,
            DisableBackdropClick = false
        };
        var resultDialog = await dialogService.Show<Shared.Dialogs.LookUpDialog.GlobalGenericLookup>(dialogTitle, parameters, options).Result;
        if (!resultDialog.Canceled) {
            if(type == Enums.LookUpType.Employee)
                requestor = (UserAccount) resultDialog.Data;
            else if (type == Enums.LookUpType.Project)
                payee = (Project) resultDialog.Data;
            filterParameter.RequestorId = requestor.EmployeeId;
            filterParameter.PayeeId = payee.ProjectId;
            filterParameter.PayeeCategoryId = payee.ProjectCategoryId;
        }
        StateHasChanged();
    }

     private async Task ReloadTable()
    {
        filterParameter = new FilterParameter();
        if(lookUpType == Enums.LookUpType.POBilling)
          await SearchPOBilling(false);
        else if(lookUpType == Enums.LookUpType.PO)
          await LoadPOs(false);
        else
          await FilterTable();
        @* await tableVariable.ReloadServerData(); *@
    }
    private void FillCheckAmount(VoucherModel v)
    {
        v.currentCheckAmount = v.CheckBalance;
        StateHasChanged();
    }
}