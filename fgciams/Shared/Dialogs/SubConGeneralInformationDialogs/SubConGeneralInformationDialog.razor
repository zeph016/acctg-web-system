@inject ISubConGeneralInformationService subConGeneralInformationService
@inject ISubContractorPositionService subConPositionService
@inject ISubContractorCompanyService subConCompanyService

<MudDialog Class="customdialog">
  <TitleContent>
    <div class='d-flex align-center'>
      @if (GlobalClass.subConGeneralInformation.Id != 0)
      {
        <MudIcon Icon="@Icons.Filled.Edit" Class="mr-3 mb-n1ank" />
      }
      else
      {
        <MudIcon Icon="@Icons.Filled.Add" Class="mr-3 mb-n1" />
      }
      <MudText Typo='Typo.h6'>@dialogTitle</MudText>
    </div>
  </TitleContent>
  <DialogContent>
    <div class='customdialog__content-container'>
      <MudGrid Spacing='1'>
        <MudItem xs='12'>
          <MudTextField @bind-Value='@GlobalClass.subConGeneralInformation.FirstName' Label='First Name' />
        </MudItem>
        <MudItem xs='12'>
          <MudTextField @bind-Value='@GlobalClass.subConGeneralInformation.MiddleName' Label='Middle Name' />
        </MudItem>
        <MudItem xs='9'>
          <MudTextField @bind-Value='@GlobalClass.subConGeneralInformation.LastName' Label='Last Name' />
        </MudItem>
        <MudItem xs='3'>
          <MudNumericField @bind-Value='@GlobalClass.subConGeneralInformation.Age' Label='Age' />
        </MudItem>
        <MudItem xs='6'>
          <MudTextField @bind-Value='@GlobalClass.subConGeneralInformation.NameExtention' Label='Name Ext.' />
        </MudItem>
        <MudItem xs='3'>
          <MudSelect @bind-Value='@GlobalClass.subConGeneralInformation.Gender' Label="Gender">
            @foreach (Enums.Gender gender in Enum.GetValues(typeof(Enums.Gender)))
            {
              <MudSelectItem Value="gender">@Extensions.GetEnumDescription(gender)</MudSelectItem>
            }
          </MudSelect>
        </MudItem>
        <MudItem Class='d-flex align-center' xs='3'>
          <MudCheckBox @bind-Checked='@GlobalClass.subConGeneralInformation.IsActive' Label='Active' />
        </MudItem>
        <MudItem xs='6'>
          <BlazoredTypeahead SearchMethod=LoadPosition @bind-Value='position' Debounce="500" placeholder='Position'>
            <SelectedTemplate>
              @context.PositionName
            </SelectedTemplate>
            <ResultTemplate>
              @context.PositionName
            </ResultTemplate>
          </BlazoredTypeahead>
        </MudItem>
        <MudItem xs='6'>
          <BlazoredTypeahead SearchMethod=LoadCompany @bind-Value='company' Debounce="500" placeholder='Company'>
            <SelectedTemplate>
              @context.CompanyName
            </SelectedTemplate>
            <ResultTemplate>
              @context.CompanyName
            </ResultTemplate>
          </BlazoredTypeahead>
        </MudItem>
        <MudItem xs="6">
          <MudDatePicker @bind-Date='@GlobalClass.subConGeneralInformation.DateStart' Label='Date Start' />
        </MudItem>
        <MudItem xs="6">
          <MudDatePicker @bind-Date='@GlobalClass.subConGeneralInformation.DateEnd' MinDate='@GlobalClass.subConGeneralInformation.DateStart' Label='Date End' />
        </MudItem>
      </MudGrid>
    </div>
  </DialogContent>
  <DialogActions>
    <MudButton OnClick="Cancel" Variant='Variant.Text'>Cancel</MudButton>
    <MudButton OnClick="Submit" Variant='Variant.Filled' Color="@color">@buttonText</MudButton>
  </DialogActions>
</MudDialog>
@code {
  [CascadingParameter] MudDialogInstance MudDialog { get; set; } = default!;
  [Parameter] public Color color { get; set; }
  [Parameter] public string dialogTitle { get; set; } = string.Empty;
  [Parameter] public string buttonText { get; set; } = string.Empty;
  SubContractorPositionModel position = new();
  SubContractorCompanyModel company = new();

  protected override async Task OnInitializedAsync()
  {
    await Task.Delay(1);
    if (GlobalClass.subConGeneralInformation.Id == 0)
      GlobalClass.subConGeneralInformation.IsActive = true;
    else
    {
      MapExistingPosition();
      MapExistingCompany();
    }
  }
  void Cancel()
  {
    MudDialog.Cancel();
  }
  private async Task Submit()
  {
    if (GlobalClass.subConGeneralInformation.Id != 0)
    {
      await subConGeneralInformationService.UpdateSubConGenInfo(MapProperties(), GlobalClass.token);
      MudDialog.Close(DialogResult.Ok(1));
    }
    else
    {
      GlobalClass.subConGeneralInformation = await subConGeneralInformationService.AddSubConGenInfo(MapProperties(),
      GlobalClass.token);
      GlobalClassList.subConGeneralInformations.Add(GlobalClass.subConGeneralInformation);
      MudDialog.Close(DialogResult.Ok(0));
    }
  }

  private void MapExistingPosition()
  {
    foreach (var item in GlobalClassList.subContractorPositions)
    {
      if (item.Id == GlobalClass.subConGeneralInformation.PositionId)
      {
        position = item;
        break;
      }
    }
  }

  private void MapExistingCompany()
  {
    foreach (var item in GlobalClassList.subContractorCompanies)
    {
      if (item.Id == GlobalClass.subConGeneralInformation.CompanyId)
      {
        company = item;
        break;
      }
    }
  }

  async Task<IEnumerable<SubContractorPositionModel>> LoadPosition(string positionName)
  {
    var positions = await Task.Run(() => GlobalClassList.subContractorPositions.Where(x =>
    x.PositionName.Contains(positionName, StringComparison.OrdinalIgnoreCase)));
    return positions;
  }
  async Task<IEnumerable<SubContractorCompanyModel>> LoadCompany(string companyName)
  {
    var companies = await Task.Run(() => GlobalClassList.subContractorCompanies.Where(x =>
    x.CompanyName.Contains(companyName, StringComparison.OrdinalIgnoreCase)));
    return companies;
  }
  SubConGeneralInformationModel MapProperties()
  {
    GlobalClass.subConGeneralInformation.PositionId = position.Id;
    GlobalClass.subConGeneralInformation.CompanyId = company.Id;
    return GlobalClass.subConGeneralInformation;
  }
}
