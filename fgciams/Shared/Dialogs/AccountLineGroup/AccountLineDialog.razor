@inject IAccountingLineService accountLineService
@inject IAccountLineTypeService accountLineTypeService
@inject ISnackbar snackbar

<MudDialog Class='customdialog'>
    <TitleContent>
        <div class='d-flex align-center'>
            @if (GlobalClass.accountLineType.Id != 0 || GlobalClass.accountLineType.Id != 0)
            {
                <MudIcon Icon="@Icons.Filled.Edit" Class="mr-3 mb-n1" />
            }
            else
            {
                <MudIcon Icon="@Icons.Filled.Add" Class="mr-3 mb-n1" />
            }
            <MudText Typo='Typo.h6'>@dialogTitle</MudText>
        </div>
    </TitleContent>
    <DialogContent>
        <div class='customdialog__content-container'>
            @switch (accountLine)
            {
                case 0:
                    <MudGrid Spacing='1'>
                        <MudItem xs='12'>
                            <MudTextField @bind-Value='@GlobalClass.accountLineGroup.LineGroupName' Label='Group Name' Error=@reqGName ErrorText='Group name is required' />
                        </MudItem>
                        <MudItem xs='9'>
                            <MudTextField @bind-Value='@GlobalClass.accountLineGroup.Remarks' Label='Remarks' />
                        </MudItem>
                        @if(GlobalClass.accountLineGroup.Id != 0) {

                        <MudItem Class='d-flex align-center' xs='3'>
                            <MudCheckBox @bind-Checked='@GlobalClass.accountLineGroup.IsActive' Label='Active' />
                        </MudItem>

                        }
 
                    </MudGrid>
                    break;
                case 1:
                    <MudGrid Spacing='1'>
                        <MudItem xs='12'>
                            <MudTextField @bind-Value='@GlobalClass.accountLineType.LineTypeName' Label='Type Name'  Error=@reqTName ErrorText='Type name is required'/>
                        </MudItem>
                        <MudItem xs='9'>
                            <MudTextField @bind-Value='@GlobalClass.accountLineType.Remarks' Label='Remarks' />
                        </MudItem>
                        @if(GlobalClass.accountLineType.Id != 0) {

                        <MudItem Class='d-flex align-center' xs='3'>
                            <MudCheckBox @bind-Checked='@GlobalClass.accountLineType.IsActive' Label='Active' />
                        </MudItem>
                        
                        }
                    </MudGrid>
                    break;
            }


        </div>
    </DialogContent>
    <DialogActions>
        <MudButton OnClick="Cancel" Variant='Variant.Text'>Cancel</MudButton>
        <MudButton OnClick="Submit" Variant='Variant.Filled' Color="@color">@buttonText</MudButton>
    </DialogActions>
</MudDialog>
@code{
    [CascadingParameter] public MudDialogInstance MudDialog { get; set; } = default!;
    [Parameter] public Color color { get; set; }
    [Parameter] public string dialogTitle { get; set; } = string.Empty;
    [Parameter] public string buttonText { get; set; } = string.Empty;
    [Parameter] public int accountLine { get; set; } = 0;
    private bool reqGName , reqTName;
    protected override async Task OnInitializedAsync()
    {
        if (GlobalClass.accountLineType.Id == 0 || GlobalClass.accountLineGroup.Id == 0)
        {
            GlobalClass.accountLineType.IsActive = true;
            GlobalClass.accountLineGroup.IsActive = true;
        }

        await Task.Delay(1);
    }
    void Cancel()
    {
        MudDialog.Cancel();
    }

    private async Task Submit()
    {
        switch (accountLine)
        {
            case 0:
                if (GlobalClass.accountLineGroup.Id != 0)
                {
                    try
                    {
                      if(ValidateEntries()) {

                        GlobalClass.accountLineGroup = await accountLineService.UpdateAccountLineGroup(GlobalClass.accountLineGroup, GlobalClass.token);
                        MudDialog.Close(DialogResult.Ok(1));

                      } else Extensions.ShowAlert("Please complete all required fields", Variant.Filled, snackbar, Severity.Error);
  
                    }
                    catch (System.Exception ex)
                    {
                        Extensions.ShowAlert(ex.Message, Variant.Filled, snackbar, Severity.Normal);
                        MudDialog.Close();
                    }
                }
                else
                {
                    try
                    {
                       if(ValidateEntries()) {

                        GlobalClass.accountLineGroup = await accountLineService.AddAccountLineGroup(GlobalClass.accountLineGroup, GlobalClass.token);
                        MudDialog.Close(DialogResult.Ok(0));

                       } else Extensions.ShowAlert("Please complete all required fields", Variant.Filled, snackbar, Severity.Error);
 
                    }
                    catch (System.Exception ex)
                    {
                        Extensions.ShowAlert(ex.Message, Variant.Filled, snackbar, Severity.Normal);
                        MudDialog.Close();
                    }
                }
                if(GlobalVariable.AMSHubConnection != null && ValidateEntries())
                    await GlobalVariable.AMSHubConnection.InvokeAsync("SaveAccountLineGroup", GlobalClass.accountLineGroup);

                break;
            case 1:
                if (GlobalClass.accountLineType.Id != 0)
                {
                    try
                    {
                      if(ValidateEntries()) {
                        
                        GlobalClass.accountLineType = await accountLineTypeService.UpdateAccountLineType(GlobalClass.accountLineType, GlobalClass.token);
                        MudDialog.Close(DialogResult.Ok(1));

                      } else Extensions.ShowAlert("Please complete all required fields", Variant.Filled, snackbar, Severity.Error);
 
                    }
                    catch (System.Exception ex)
                    {
                        // TODO
                        Extensions.ShowAlert(ex.Message, Variant.Filled, snackbar, Severity.Normal);
                        MudDialog.Close();
                    }

                }
                else
                {
                    try
                    {
                      if(ValidateEntries()) {

                        GlobalClass.accountLineType = await accountLineTypeService.AddAccountLineType(GlobalClass.accountLineType, GlobalClass.token);
                        GlobalClassList.accountLineTypes.Add(GlobalClass.accountLineType);
                        MudDialog.Close(DialogResult.Ok(0));

                      } else Extensions.ShowAlert("Please complete all required fields", Variant.Filled, snackbar, Severity.Error);
                    }
                    catch (System.Exception ex)
                    {
                        // TODO
                        Extensions.ShowAlert(ex.Message, Variant.Filled, snackbar, Severity.Normal);
                        MudDialog.Close();
                    }
                }
                if(GlobalVariable.AMSHubConnection != null)
                    await GlobalVariable.AMSHubConnection.InvokeAsync("SaveAccountLineType", GlobalClass.accountLineGroup);

                break;
        }
    }
    private bool ValidateEntries()
    {
      bool valid = true;
      switch(accountLine) {
        case 0 : 
             if(string.IsNullOrEmpty(GlobalClass.accountLineGroup.LineGroupName)) {
                reqGName = true;
                valid = false;
              } else reqGName = false;
              break;
              case 1 :
                if(string.IsNullOrEmpty(GlobalClass.accountLineType.LineTypeName)) {
                  reqTName = true;
                  valid = false;
                } else reqTName = false;
                break;
      }
      return valid;
    }
}