@inject ISubContractorPositionService subContractorPositionService
@inject ISnackbar snackbarService

<MudDialog Class="customdialog">
  <TitleContent>
    <div class='d-flex align-center'>
      @if (GlobalClass.subContractorPosition.Id != 0)
      {
        <MudIcon Icon="@Icons.Filled.Edit" Class="mr-3 mb-n1ank" />
      }
      else
      {
        <MudIcon Icon="@Icons.Filled.Add" Class="mr-3 mb-n1" />
      }
      <MudText Typo='Typo.h6'>@dialogTitle</MudText>
    </div>
  </TitleContent>
  <DialogContent>
    <div class='customdialog__content-container'>
      <MudGrid Spacing='1'>
        <MudItem xs='9'>
          <MudTextField @bind-Value='@GlobalClass.subContractorPosition.PositionName' Label='Position Name' Error=@reqPosition ErrorText='Position name is required' />
        </MudItem>
        @if(GlobalClass.subContractorPosition.Id != 0) {

        <MudItem Class='d-flex align-center' xs='3'>
          <MudCheckBox @bind-Checked='@GlobalClass.subContractorPosition.IsActive' Label='Active' />
        </MudItem>

        }

        <MudItem xs='12'>
          <MudTextField @bind-Value='@GlobalClass.subContractorPosition.Remarks' Variant='Variant.Filled' Lines='3'
            Label='Remarks' />
        </MudItem>
      </MudGrid>
    </div>
  </DialogContent>
  <DialogActions>
    <MudButton OnClick="Cancel" Variant='Variant.Text'>Cancel</MudButton>
    <MudButton OnClick="Submit" Variant='Variant.Filled' Color="@color">@buttonText</MudButton>
  </DialogActions>
</MudDialog>
@code {
  [CascadingParameter] MudDialogInstance MudDialog { get; set; } = default!;
  [Parameter] public Color color { get; set; }
  [Parameter] public string dialogTitle { get; set; } = string.Empty;
  [Parameter] public string buttonText { get; set; } = string.Empty;
  private bool reqPosition;
  protected override async Task OnInitializedAsync()
  {
    if (GlobalClass.subContractorPosition.Id == 0)
      GlobalClass.subContractorPosition.IsActive = true;
    await Task.Delay(1);
  }
  void Cancel()
  {
    MudDialog.Cancel();
  }

  private async Task Submit()
  {
    if (GlobalClass.subContractorPosition.Id != 0)
    {
      if(ValidateEntries()) {

        await subContractorPositionService.UpdateSubContractorPosition(GlobalClass.subContractorPosition, GlobalClass.token);
        MudDialog.Close(DialogResult.Ok(1));

      } else Extensions.ShowAlert("Please complete all required fields", Variant.Filled, snackbarService, Severity.Error);

    }
    else
    {
      if(ValidateEntries()) {

        GlobalClass.subContractorPosition = await
        subContractorPositionService.AddSubContractorPosition(GlobalClass.subContractorPosition, GlobalClass.token);
        GlobalClassList.subContractorPositions.Add(GlobalClass.subContractorPosition);
        MudDialog.Close(DialogResult.Ok(0));
      } else Extensions.ShowAlert("Please complete all required fields", Variant.Filled, snackbarService, Severity.Error);
    }
      if(GlobalVariable.AMSHubConnection != null && ValidateEntries())
        await GlobalVariable.AMSHubConnection.InvokeAsync("SaveSubContractorPosition", GlobalClass.subContractorPosition);
  }
  private bool ValidateEntries()
  {
    bool valid = true;
    if(string.IsNullOrEmpty(GlobalClass.subContractorPosition.PositionName)) {
      reqPosition = true;
      valid = false;
    } else reqPosition = false;
    
    return valid;
  }
}