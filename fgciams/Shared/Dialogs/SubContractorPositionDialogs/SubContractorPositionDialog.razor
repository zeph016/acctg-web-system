@inject ISubContractorPositionService subContractorPositionService
@inject ISnackbar snackbarService
@inject IDialogService dialogService

<MudDialog Class="customdialog2">
  <TitleContent>
    <div class='d-flex align-center'>
      @if (GlobalClass.subContractorPosition.Id != 0)
      {
        <MudIcon Icon="@Icons.Filled.Edit" Class="mr-3 mb-n1ank" />
      }
      else
      {
        <MudIcon Icon="@Icons.Filled.Add" Class="mr-3 mb-n1" />
      }
      <MudText Class='txt-uppercase' Typo='Typo.h6'>@dialogTitle</MudText>
    </div>
  </TitleContent>
  <DialogContent>
    <MudPaper Class='pa-2' Elevation='0'>
      <MudGrid Class='pa-2' Spacing='1'>
        <MudItem xs='12'>
          <MudTextField @bind-Value='@GlobalClass.subContractorPosition.PositionName' Label='Position Name' Error=@reqPosition ErrorText='Position name is required' 
            HelperText='Required*' Margin='Margin.Dense' />
        </MudItem>
        <MudItem xs='12'>
          <MudTextField @bind-Value='@GlobalClass.subContractorPosition.Remarks' Variant='Variant.Filled' Lines='2' Label='Remarks' 
            HelperText='Optional' Margin='Margin.Dense' />
        </MudItem>
      </MudGrid>
    </MudPaper>
  </DialogContent>
  <DialogActions>
    @if(GlobalClass.subContractorPosition.Id != 0) {
      <MudCheckBox @bind-Checked='@GlobalClass.subContractorPosition.IsActive' Label='Active' 
        Size='Size.Small' Color='Color.Dark' Dense/>
    }
    <MudSpacer />
    <MudButton Class='btn-ios-d font12' OnClick="Cancel" Variant='Variant.Text' Size='Size.Small' DisableElevation>Cancel</MudButton>
    <MudButton Class='btn-ios-d font12' OnClick="Submit" Variant='Variant.Filled' Color='@(!GlobalClass.subContractorPosition.IsActive ? Color.Error : @color)' Size='Size.Small' DisableElevation>
      @(!GlobalClass.subContractorPosition.IsActive ? "Deactivate" : @buttonText)
    </MudButton>
  </DialogActions>
</MudDialog>
@code {
  [CascadingParameter] MudDialogInstance MudDialog { get; set; } = default!;
  [Parameter] public Color color { get; set; }
  [Parameter] public string dialogTitle { get; set; } = string.Empty;
  [Parameter] public string buttonText { get; set; } = string.Empty;
  [Parameter] public Enums.ActionMode currentAction {get;set;}
  private bool reqPosition;
  protected override async Task OnInitializedAsync()
  {
    if (currentAction == Enums.ActionMode.Create)
      GlobalClass.subContractorPosition.IsActive = true;
    await Task.Delay(1);
  }
  void Cancel()
  {
    GlobalClass.subContractorPosition.IsActive = !GlobalClass.subContractorPosition.IsActive ? true : true;
    MudDialog.Cancel();
  }

  private async Task Submit()
  {
    if (!GlobalClass.subContractorPosition.IsActive)
    {
      currentAction = Enums.ActionMode.Deactivate;
      await PromptMessage();
    }
    else if (ValidateEntries())
      await PromptMessage();
    else
      Extensions.ShowAlert("Cannot "+currentAction.ToString().ToLower()+" subcontractor position "+GlobalVariable.errorPromptText,Variant.Filled,snackbarService,Severity.Error);
    
  }
  private bool ValidateEntries()
  {
    bool valid = true;
    if(string.IsNullOrEmpty(GlobalClass.subContractorPosition.PositionName)) {
      reqPosition = true;
      valid = false;
    } else reqPosition = false;
    
    return valid;
  }
    private async Task PromptMessage()
    {
        var parameters = new DialogParameters();
        string contentText = "position ";
        string dialogTitle = currentAction.ToString();
        parameters.Add("dialogTitle", dialogTitle);
        parameters.Add("contentText", contentText);
        parameters.Add("actionMode", currentAction);
        var options = new DialogOptions() { CloseButton = false, MaxWidth = MaxWidth.ExtraSmall, FullWidth = true, NoHeader = false, DisableBackdropClick = true };
        var resultDialog = await dialogService.Show<Shared.Dialogs.GenericPromptDialogs.GenericPrompt>(dialogTitle, parameters, options).Result;
        if (!resultDialog.Cancelled)
        {
          try
          {
            if (currentAction == Enums.ActionMode.Create) {
              GlobalClass.subContractorPosition = await subContractorPositionService.AddSubContractorPosition(GlobalClass.subContractorPosition, GlobalClass.token);
              GlobalClassList.subContractorPositions.Add(GlobalClass.subContractorPosition);
            }
            else
              await subContractorPositionService.UpdateSubContractorPosition(GlobalClass.subContractorPosition, GlobalClass.token);
            if(GlobalVariable.AMSHubConnection != null && ValidateEntries())
              await GlobalVariable.AMSHubConnection.InvokeAsync("SaveSubContractorPosition", GlobalClass.subContractorPosition);
            MudDialog.Close(DialogResult.Ok(currentAction));
          }
          catch (System.Exception ex) {
            Extensions.ShowAlert(ex.Message, Variant.Filled, snackbarService, Severity.Error);
          }
        }
        else if (currentAction == Enums.ActionMode.Deactivate)
        {
          GlobalClass.subContractorPosition.IsActive = !GlobalClass.subContractorPosition.IsActive;
          MudDialog.Cancel();
        }
    }
}