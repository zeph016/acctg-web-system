@inject IExpenseLineService expenseLineService
@inject ISnackbar SnackbarService
@inject IDialogService dialogService

<MudDialog Class='customdialog2'>
    <TitleContent>
        <div class='d-flex align-center'>
            @if (GlobalClass.expenseLine.Id != 0)
            {
                <MudIcon Icon="@Icons.Material.Filled.Edit" Class="mr-3" />
            }
            else
            {
                <MudIcon Icon="@Icons.Material.Filled.Add" Class="mr-3" />
            }
            <MudText Class='txt-uppercase' Typo='Typo.h6'>@dialogTitle</MudText>
        </div>
    </TitleContent>
    <DialogContent>
        <MudPaper Class='pa-2' Elevation='0'>
            <MudGrid Class='pa-2' Spacing='1'>
                <MudItem xs='12'>
                    <MudTextField @bind-Value='@GlobalClass.expenseLine.ExpenseName' Label='Expense Line Name' Error=@notValidExpenseName ErrorText="Required*" 
                        HelperText="Required*" Margin='Margin.Dense' />
                </MudItem>
                <MudItem xs='6'>
                    <MudSelect @bind-Value="GlobalClass.expenseLine.AccountTypeId" Text="@GlobalClass.expenseLine.AccountTypeName" Placeholder="Account Type" HelperText="Required*" Margin='Margin.Dense'
                    AnchorOrigin="Origin.BottomCenter" Error=@notValidAccountType ErrorText="Required*">
                        @foreach (var accountTypes in GlobalClassList.listOfAccountTypes)
                        {
                            <MudSelectItem Value="@accountTypes.Id">@accountTypes.TypeName</MudSelectItem>
                        }
                    </MudSelect>
                </MudItem>
                <MudItem xs='6'>
                    <MudSelect @bind-Value="GlobalClass.expenseLine.AccountLineTypeId" Text="@GlobalClass.expenseLine.AccountLineTypeName" Placeholder="Account Line Type" HelperText="Required*" Margin='Margin.Dense'
                    AnchorOrigin="Origin.BottomCenter" Error=@notValidAccountLineType ErrorText="Required*">
                        @foreach (var accountLineType in GlobalClassList.accountLineTypes)
                        {
                            <MudSelectItem Value="@accountLineType.Id">@accountLineType.LineTypeName</MudSelectItem>
                        }
                    </MudSelect>
                </MudItem>
                <MudItem xs='12'>
                    <MudSelect @bind-Value="GlobalClass.expenseLine.AccountLineGroupId" Text="@GlobalClass.expenseLine.AccountLineGroupName" Placeholder="Account Line Group"  HelperText="Required*" Margin='Margin.Dense'
                    AnchorOrigin="Origin.BottomCenter" Error=@notValidAccountLineGroup ErrorText="Required*">
                        @foreach (var accountLineGroup in GlobalClassList.accountLineGroups)
                        {
                            <MudSelectItem Value="@accountLineGroup.Id">@accountLineGroup.LineGroupName</MudSelectItem>
                        }
                    </MudSelect>
                </MudItem>
                <MudItem xs='6'>
                    <MudSelect @bind-Value="GlobalClass.expenseLine.AccountReportGroupId" Text="@Extensions.GetEnumDescription(GlobalClass.expenseLine.AccountReportGroupId)" Placeholder="Account Report Group" HelperText='Required*' Margin='Margin.Dense'
                        AnchorOrigin="Origin.BottomCenter">
                        @foreach (Enums.AccountReportGroup accountReportGroup in Enum.GetValues(typeof(Enums.AccountReportGroup)))
                        {
                            <MudSelectItem Value="@accountReportGroup">@Extensions.GetEnumDescription(accountReportGroup)</MudSelectItem>
                        }
                    </MudSelect>
                </MudItem>
                <MudItem xs='6'>
                    <MudSelect @bind-Value="GlobalClass.expenseLine.AccountDefaultBalanceId" Text="@Extensions.GetEnumDescription(GlobalClass.expenseLine.AccountDefaultBalanceId)" Placeholder="Account Default Balance" HelperText='Required*' Margin='Margin.Dense'
                        AnchorOrigin="Origin.BottomCenter">
                        @foreach (Enums.AccountDefaultBalance accountDefaultBalance in Enum.GetValues(typeof(Enums.AccountDefaultBalance)))
                        {
                            <MudSelectItem Value="@accountDefaultBalance">@Extensions.GetEnumDescription(accountDefaultBalance)</MudSelectItem>
                        }
                    </MudSelect>
                </MudItem>
                <MudItem xs='12'>
                    <MudTextField @bind-Value='@GlobalClass.expenseLine.Remarks' Label='Remarks' Lines='2' Variant='Variant.Filled' HelperText='Optional' Margin='Margin.Dense' />
                </MudItem>
            </MudGrid>
        </MudPaper>
    </DialogContent>
    <DialogActions>
        @if(GlobalClass.expenseLine.Id != 0)
        {
            <MudCheckBox @bind-Checked='@GlobalClass.expenseLine.IsActive' Label='Active' ReadOnly=@isReadOnly
                Size='Size.Small' Color='Color.Dark' Dense />
        }
        <MudSpacer />
        <MudCheckBox @bind-Checked='@GlobalClass.expenseLine.WithLedger' Label='w/Ledger' Size='Size.Small' Color='Color.Dark' Dense/>   
        <MudCheckBox @bind-Checked='@GlobalClass.expenseLine.IsEWT' Label='is EWT' ReadOnly=@DontAllowEdit() Size='Size.Small' Color='Color.Dark' Dense/>
        <MudSpacer /> 
        <MudButton Class='btn-ios-d font12' OnClick="Cancel" Variant='Variant.Text' Size='Size.Small' DisableElevation>Cancel</MudButton>
        <MudButton Class='btn-ios-d font12' OnClick="(() => Submit())" Variant='Variant.Filled' Color='@(!GlobalClass.expenseLine.IsActive ? Color.Error : @color)' Size='Size.Small' DisableElevation>
            @(!GlobalClass.expenseLine.IsActive ? "Deactivate" : @buttonText)
        </MudButton>
    </DialogActions>
</MudDialog>
@code{
    [CascadingParameter] public MudDialogInstance MudDialog { get; set; } = default!;
    [Parameter] public Color color { get; set; }
    [Parameter] public string dialogTitle { get; set; } = string.Empty;
    [Parameter] public string buttonText { get; set; } = string.Empty;
    [Parameter] public Enums.ActionMode currentAction {get;set;}
    private bool isReadOnly = false;
    
    private bool notValidExpenseName,notValidAccountType,notValidAccountLineType,notValidAccountLineGroup = false;
     protected override async Task OnInitializedAsync()
    {
        if (currentAction == Enums.ActionMode.Create)
        {
            GlobalClass.expenseLine.IsActive = true;
            isReadOnly = true;
        }
        ResetValidation();
        await Task.Delay(1);
    }   
    void Cancel() 
    {
        GlobalClass.expenseLine.IsActive = !GlobalClass.expenseLine.IsActive ? true : true;
        MudDialog.Cancel();
    }
    private async Task Submit()
    {
        if(!GlobalClass.expenseLine.IsActive)
        {
            if(!Common.Privileges.isPrivilegeFunction(Enums.AISModuleFunctions.Delete))
            {
                Extensions.ShowAlert("Account has been restricted to deactivate expense line.", Variant.Filled, SnackbarService, Severity.Error);
                return;
            }
            currentAction = Enums.ActionMode.Deactivate;
            await Prompt();
        }
        else if(IsValidated())
            await Prompt();
        else 
            Extensions.ShowAlert("Cannot "+currentAction.ToString().ToLower()+" expense line"+GlobalVariable.errorPromptText,Variant.Filled,SnackbarService,Severity.Error);
    }
    private async Task Prompt()
    {
        var parameters = new DialogParameters();
        string contentText = " Expense Line";
        string dialogTitle = currentAction.ToString();
        parameters.Add("contentText", contentText);
        parameters.Add("dialogTitle", dialogTitle);
        parameters.Add("actionMode", currentAction);
        var options = new DialogOptions() { CloseButton = false, MaxWidth = MaxWidth.ExtraSmall, FullWidth = true, NoHeader = false, DisableBackdropClick = true };
        var resultDialog = await dialogService.Show<Shared.Dialogs.GenericPromptDialogs.GenericPrompt>(dialogTitle, parameters, options).Result;
        if (!resultDialog.Canceled) 
        {   
           try
            {
                if(currentAction == Enums.ActionMode.Create) 
                {
                    GlobalClass.expenseLine = await expenseLineService.AddExpenseLine(GlobalClass.expenseLine, GlobalClass.token);
                    GlobalClassList.expenseLineList.Add(GlobalClass.expenseLine);
                } else 
                    await expenseLineService.UpdateExpenseLine(GlobalClass.expenseLine, GlobalClass.token);
                if(GlobalVariable.AMSHubConnection != null)
                    await GlobalVariable.AMSHubConnection.InvokeAsync("SaveExpenseLine",GlobalClass.expenseLine);
                MudDialog.Close(DialogResult.Ok(currentAction));
            }catch(Exception ex)
            {
                Extensions.ShowAlert(ex.Message,Variant.Filled,SnackbarService,Severity.Info);
            }
        }
        else if (currentAction == Enums.ActionMode.Deactivate)
        {
            GlobalClass.expenseLine.IsActive = !GlobalClass.expenseLine.IsActive;
            MudDialog.Cancel();
        }
    }
    private bool IsValidated()
    {
        ResetValidation();
        if(String.IsNullOrEmpty(GlobalClass.expenseLine.ExpenseName))
            notValidExpenseName = true;
        if(GlobalClass.expenseLine.AccountTypeId == 0)
            notValidAccountType = true;
        if(GlobalClass.expenseLine.AccountLineTypeId == 0)
            notValidAccountLineType = true;
        if(GlobalClass.expenseLine.AccountLineGroupId == 0)
            notValidAccountLineGroup = true;
        if(notValidExpenseName || notValidAccountType || notValidAccountLineType || notValidAccountLineGroup) {
            GlobalVariable.errorPromptText = " incomplete field/s."; return false; }
        if(GlobalClassList.expenseLineList.Any(x=>x.ExpenseName == GlobalClass.expenseLine.ExpenseName && x.Id != GlobalClass.expenseLine.Id)) {
            GlobalVariable.errorPromptText = " duplicate entry found for expense name."; return false; }
        return true;
    }
    private void ResetValidation()
    {
        notValidExpenseName = false;
        notValidAccountType = false;
        notValidAccountLineType = false;
        notValidAccountLineGroup = false;
    }
    private bool DontAllowEdit()
    {
        if(GlobalClassList.expenseLineList.Any(x=>x.IsEWT == true && GlobalClass.expenseLine.IsEWT == false))
            return true;
        return false;
    }
}