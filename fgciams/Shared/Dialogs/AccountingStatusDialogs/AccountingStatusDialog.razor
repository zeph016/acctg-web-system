@inject IAccountingStatusService accountingStatusService
@inject IDialogService dialogService
@inject NavigationManager NavigationManager
@inject ISnackbar snackbar
<MudDialog Class="customdialog">
    <TitleContent>
        <div class='d-flex align-center'>
            @if (GlobalClass.acctgStatus.Id != 0)
            {
                <MudIcon Icon="@Icons.Filled.Edit" Class="mr-3 mb-n1ank" />
            }
            else
            {
                <MudIcon Icon="@Icons.Filled.Add" Class="mr-3 mb-n1" />
            }
            <MudText Typo='Typo.h6'>@dialogTitle</MudText>
        </div>
    </TitleContent>
    <DialogContent>
        <div class='customdialog__content-container'>
            <MudGrid Spacing='1'>
                <MudItem xs='9'>
                    <MudTextField @bind-Value='@GlobalClass.acctgStatus.StatusName' Label='Accounting Status' />
                </MudItem>
                <MudItem Class='d-flex align-center' xs='3'>
                    <MudCheckBox @bind-Checked="@GlobalClass.acctgStatus.IsActive" Label='Active' />
                </MudItem>
                <MudItem xs='9'>
                    <div class='smallColorBox' style='@($"background-color:{GlobalClass.acctgStatus.StatusColor};")'>
                    </div>
                    <MudColorPicker Label='Color' ColorPickerView='ColorPickerView.Grid' ColorPickerMode='ColorPickerMode.HEX' Value="GlobalClass.acctgStatus.StatusColor" ValueChanged='UpdateSelectedColor' />
                </MudItem>
                <MudItem xs='9'>
                    <MudIcon Icon="@GlobalClass.selectedIcon" Color="Color.Primary" />
                    <MudTextField @bind-Value="@GlobalClass.acctgStatus.StatusIcon" class="mud-grid-item mud-grid-item-xs-9" Label="Icon" Variant="Variant.Text"
                        Adornment="Adornment.End" AdornmentIcon="@Icons.Filled.InsertEmoticon" OnAdornmentClick="(() => ShowIcons())"></MudTextField>
                </MudItem>
                <MudItem xs='9'>
                    <MudSelect @bind-Value="GlobalClass.acctgStatus.StatusEnumCategoryId" AnchorOrigin="Origin.BottomCenter">
                        @foreach (Enums.AccountingStatusEnumCategory enums in Enum.GetValues(typeof(Enums.AccountingStatusEnumCategory)))
                        {
                            <MudSelectItem Value="enums">@Extensions.GetEnumDescription(enums)</MudSelectItem>
                        }
                    </MudSelect>
                </MudItem>
            </MudGrid>
        </div>
    </DialogContent>
    <DialogActions>
        <MudButton OnClick="Cancel" Variant='Variant.Text'>Cancel</MudButton>
        <MudButton OnClick="Submit" Variant='Variant.Filled' Color="@color">@buttonText</MudButton>
    </DialogActions>
</MudDialog>

@code {
    [CascadingParameter] MudDialogInstance MudDialog { get; set; } = default!;
    [Parameter] public Color color { get; set; }
    [Parameter] public string dialogTitle { get; set; } = string.Empty;
    [Parameter] public string buttonText { get; set; } = string.Empty;
    protected override async Task OnInitializedAsync()
    {
        if (GlobalClass.acctgStatus.Id == 0) {
            GlobalClass.acctgStatus.IsActive = true;
            GlobalClass.acctgStatus.StatusColor = "#FFFF00";
            GlobalClass.selectedIcon = Icons.Filled.NotInterested;
            GlobalClass.acctgStatus.StatusIcon = "Icons.Filled.NotInterested";
        } else {
            GlobalClass.selectedIcon = Extensions.Icon(GlobalClass.acctgStatus.StatusIcon);
        }
        await Task.Delay(1);
    }
    void Cancel()
    {
        MudDialog.Cancel();
    }

    private async Task Submit()
    {
        try
        {
            if (GlobalClass.acctgStatus.Id != 0)
            {
                await accountingStatusService.UpdateAccountingStatus(GlobalClass.acctgStatus, GlobalClass.token);
                MudDialog.Close(DialogResult.Ok(1));
            }
            else
            {
                GlobalClass.acctgStatus = await accountingStatusService.AddAccountingStatus(GlobalClass.acctgStatus, GlobalClass.token);
                GlobalClassList.accountingStatusList.Add(GlobalClass.acctgStatus);
                MudDialog.Close(DialogResult.Ok(0));
            }
            await GlobalVariable.AMSHubConnection.InvokeAsync("SaveAccountingStatus",GlobalClass.acctgStatus);
        }
        catch(System.Exception ex)
        {
            Extensions.ShowAlert(ex.Message, Variant.Filled, snackbar, Severity.Info);
        }
    }
    private void UpdateSelectedColor(MudColor colorValue)
    {
        GlobalClass.acctgStatus.StatusColor = colorValue.ToString();
    }
    private async Task ShowIcons()
    {
        //NavigationManager.NavigateTo($"/iconpage");
        var resultDialog = await dialogService.Show<Shared.Dialogs.IconsDialogs.IconsDialog>("").Result;
        if(resultDialog.Cancelled)
            if(resultDialog.Data.Equals(101))
                Console.WriteLine(GlobalClass.acctgStatus.StatusIcon);
    }
}
