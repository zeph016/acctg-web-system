@inject IRequestTypeService requestTypeService
@inject ISnackbar Snackbar

<MudDialog Class="customdialog">
  <TitleContent>
    <div class='d-flex align-center'>
      @if (GlobalClass.requestType.Id != 0)
      {
        <MudIcon Icon="@Icons.Filled.Edit" Class="mr-3 mb-n1ank" />
      }
      else
      {
        <MudIcon Icon="@Icons.Filled.Add" Class="mr-3 mb-n1" />
      }
      <MudText Typo='Typo.h6'>@dialogTitle</MudText>
    </div>
  </TitleContent>
  <DialogContent>
    <div class='customdialog__content-container'>
      <MudGrid Spacing='1'>
        <MudItem xs='9'>
          <MudTextField @bind-Value='@GlobalClass.requestType.TypeName' Label='Request Type Name' Error=@reqTypeName ErrorText='Type name is require'/>
        </MudItem>
        @if(GlobalClass.requestType.Id != 0) {
        <MudItem Class='d-flex align-center' xs='3'>
          <MudCheckBox @bind-Checked='@GlobalClass.requestType.IsActive' Label='Active'/>
        </MudItem>
        }
        <MudItem xs='12'>
          <MudTextField @bind-Value='@GlobalClass.requestType.Remarks' Variant='Variant.Filled' Lines='3' Label='Remarks'/>
        </MudItem>
      </MudGrid>
    </div>
  </DialogContent>
  <DialogActions>
    <MudButton OnClick="Cancel" Variant='Variant.Text'>Cancel</MudButton>
    <MudButton OnClick="Submit" Variant='Variant.Filled' Color="@color">@buttonText</MudButton>
  </DialogActions>
</MudDialog>
@code{
  [CascadingParameter] MudDialogInstance MudDialog { get; set; } = default!;
  [Parameter] public Color color { get; set; }
  [Parameter] public string dialogTitle { get; set; } = string.Empty;
  [Parameter] public string buttonText { get; set; } = string.Empty;
  private bool reqTypeName;

   protected override async Task OnInitializedAsync()
    {
      if (GlobalClass.requestType.Id == 0)
        GlobalClass.requestType.IsActive = true;
      await Task.Delay(1);
    }

  void Cancel()
  {
    MudDialog.Cancel();
  }
  private async Task Submit()
  {
    if (GlobalClass.requestType.Id != 0)
    {
      try
      {
        if(ValidateEntries()) {

          GlobalClass.requestType = await requestTypeService.UpdateRequestType(GlobalClass.requestType, GlobalClass.token);
          MudDialog.Close(DialogResult.Ok(1));

        } else Extensions.ShowAlert("Please complete all required fields", Variant.Filled, Snackbar, Severity.Error);
        
      }
      catch (System.Exception ex)
      {
         // TODO
         Extensions.ShowAlert(ex.Message, Variant.Filled, Snackbar, Severity.Normal);
      }

    }
    else
    {
      try
      {
        if(ValidateEntries()) {

          GlobalClass.requestType = await requestTypeService.AddRequestType(GlobalClass.requestType, GlobalClass.token);
          GlobalClassList.requestTypes.Add(GlobalClass.requestType);
          MudDialog.Close(DialogResult.Ok(0));  

        } else Extensions.ShowAlert("Please complete all required fields", Variant.Filled, Snackbar, Severity.Error);
      }
      catch (System.Exception ex)
      {
         // TODO
         Extensions.ShowAlert(ex.Message, Variant.Filled, Snackbar, Severity.Normal);
      }

    }
    if(GlobalVariable.AMSHubConnection != null && ValidateEntries())
      await GlobalVariable.AMSHubConnection.InvokeAsync("SaveRequestType", GlobalClass.requestType);
  }
  private bool ValidateEntries()
  {
    bool valid = true;
    if(string.IsNullOrEmpty(GlobalClass.requestType.TypeName)) {
      reqTypeName = true;
      valid = false;
    } else reqTypeName = false;

    return valid;
  }
}