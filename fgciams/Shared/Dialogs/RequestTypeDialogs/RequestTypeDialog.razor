@inject IRequestTypeService requestTypeService
@inject ISnackbar snackbarService
@inject IDialogService dialogService

<MudDialog Class="customdialog2">
  <TitleContent>
    <div class='d-flex align-center'>
      @if (GlobalClass.requestType.Id != 0)
      {
        <MudIcon Icon="@Icons.Material.Filled.Edit" Class="mr-3 mb-n1ank" />
      }
      else
      {
        <MudIcon Icon="@Icons.Material.Filled.Add" Class="mr-3 mb-n1" />
      }
      <MudText Class='txt-uppercase' Typo='Typo.h6'>@dialogTitle</MudText>
    </div>
  </TitleContent>
  <DialogContent>
    <MudPaper Class='pa-2' Elevation='0'>
      <MudGrid Spacing='1'>
        <MudItem xs='12'>
          <MudTextField @bind-Value='@GlobalClass.requestType.TypeName' Label='Request Type Name' Error=@reqTypeName ErrorText='Type name is require'
            HelperText='Required*' Margin='Margin.Dense'/>
        </MudItem>
        <MudItem xs='12'>
          <MudTextField @bind-Value='@GlobalClass.requestType.Remarks' Variant='Variant.Filled' Lines='3' Label='Remarks'
            Margin='Margin.Dense' />
        </MudItem>
      </MudGrid>
    </MudPaper>
  </DialogContent>
  <DialogActions>
     @if(GlobalClass.requestType.Id != 0) {
        <MudCheckBox @bind-Checked='@GlobalClass.requestType.IsActive' Label='Active'
          Size='Size.Small' Color='Color.Dark' Dense />
      }
    <MudSpacer />
    <MudButton Class='btn-ios-d font12' OnClick="Cancel" Variant='Variant.Text' Size='Size.Small' DisableElevation>Cancel</MudButton>
    <MudButton Class='btn-ios-d font12' OnClick="Submit" Variant='Variant.Filled' Color='@(!GlobalClass.requestType.IsActive ? Color.Error : @color)' Size='Size.Small' DisableElevation>
      @(!GlobalClass.requestType.IsActive ? "Deactivate" : @buttonText)
    </MudButton>
  </DialogActions>
</MudDialog>
@code{
  [CascadingParameter] MudDialogInstance MudDialog { get; set; } = default!;
  [Parameter] public Color color { get; set; }
  [Parameter] public string dialogTitle { get; set; } = string.Empty;
  [Parameter] public string buttonText { get; set; } = string.Empty;
  [Parameter] public Enums.ActionMode currentAction { get; set; }
  private bool reqTypeName;

   protected override async Task OnInitializedAsync()
    {
      if (currentAction == Enums.ActionMode.Create)
        GlobalClass.requestType.IsActive = true;
      await Task.Delay(1);
    }

  void Cancel()
  {
    GlobalClass.requestType.IsActive = !GlobalClass.requestType.IsActive ? true : true;
    MudDialog.Cancel();
  }
  private async Task Submit()
  {
    if(!GlobalClass.requestType.IsActive)
    {
      currentAction = Enums.ActionMode.Deactivate;
      await PromptMessage();
    }
    else if (ValidateEntries())
      await PromptMessage();
    else
      Extensions.ShowAlert("Cannot " 
      + (currentAction == Enums.ActionMode.Create ? "add" : (currentAction == Enums.ActionMode.Update ? "update" : "")) 
      + " Request Type, Incomplete fields.", Variant.Filled, snackbarService, Severity.Error);
  }
  private bool ValidateEntries()
  {
    bool valid = true;
    if(string.IsNullOrEmpty(GlobalClass.requestType.TypeName)) {
      reqTypeName = true;
      valid = false;
    } else reqTypeName = false;

    return valid;
  }
    private async Task PromptMessage()
    {
        var parameters = new DialogParameters();
        string contentText = "request type ";
        string dialogTitle = currentAction.ToString();
        parameters.Add("actionMode", currentAction);
        parameters.Add("dialogTitle", dialogTitle);
        parameters.Add("contentText", contentText);
        var options = new DialogOptions() { CloseButton = false, MaxWidth = MaxWidth.ExtraSmall, FullWidth = true, NoHeader = false, DisableBackdropClick = true };
        var resultDialog = await dialogService.Show<Shared.Dialogs.GenericPromptDialogs.GenericPrompt>(dialogTitle, parameters, options).Result;
        if (!resultDialog.Canceled)
        {
          try
          {
            if (currentAction == Enums.ActionMode.Create) {
              GlobalClass.requestType = await requestTypeService.AddRequestType(GlobalClass.requestType, GlobalClass.token);
              GlobalClassList.requestTypes.Add(GlobalClass.requestType);
            }
            else
              GlobalClass.requestType = await requestTypeService.UpdateRequestType(GlobalClass.requestType, GlobalClass.token);
            if(GlobalVariable.AMSHubConnection != null && ValidateEntries())
              await GlobalVariable.AMSHubConnection.InvokeAsync("SaveRequestType", GlobalClass.requestType);
            MudDialog.Close(DialogResult.Ok(currentAction));
          }
          catch (System.Exception ex) {
            Extensions.ShowAlert(ex.Message, Variant.Filled, snackbarService, Severity.Error);
          }
        }
        else if (currentAction == Enums.ActionMode.Deactivate)
        {
          GlobalClass.requestType.IsActive = !GlobalClass.requestType.IsActive;
          MudDialog.Cancel();
        }
    }
}