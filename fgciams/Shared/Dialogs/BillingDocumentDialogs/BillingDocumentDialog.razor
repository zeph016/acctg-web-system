@inject IBillingDocumentService billingDocumentService

<MudDialog class="customdialog">
    <TitleContent>
        <div class='d-flex align-center'>
            @if (GlobalClass.billingDoc.Id != 0)
            {
                <MudIcon Icon='@Icons.Filled.Edit' Class="mr-3 mb-n1" />
            }
            else
            {
                <MudIcon Icon="@Icons.Filled.Add" Class="mr-3 mb-n1" />
            }
            <MudText Typo='Typo.h6'>@dialogTitle</MudText>
        </div>
    </TitleContent>
    <DialogContent>
        <div class='customdialog__content-container'>
            <MudGrid Spacing='1'>
                <MudItem xs='9'>
                    <MudTextField @bind-Value='@GlobalClass.billingDoc.DocumentName' Label='Billing Document' />
                </MudItem>
                <MudItem Class='d-flex align-center' xs='3'>
                    <MudCheckBox @bind-Checked="@GlobalClass.billingDoc.IsActive" Label='Active' />
                </MudItem>
                <MudItem xs='12'>
                    <MudTextField @bind-Value='@GlobalClass.billingDoc.Remarks' Label='Remarks' Lines='2' />
                </MudItem>
            </MudGrid>
        </div>
    </DialogContent>
    <DialogActions>
        <MudButton OnClick="Cancel" Variant='Variant.Text'>Cancel</MudButton>
        <MudButton OnClick="Submit" Variant='Variant.Filled' Color="@color">@buttonText</MudButton>
    </DialogActions>
</MudDialog>
@code {
    [CascadingParameter] public MudDialogInstance MudDialog { get; set; } = default!;
    [Parameter] public Color color { get; set; }
    [Parameter] public string dialogTitle { get; set; } = string.Empty;
    [Parameter] public string buttonText { get; set; } = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        if (GlobalClass.billingDoc.Id == 0)
            GlobalClass.billingDoc.IsActive = true;
        await Task.Delay(1);
    }

    private void Cancel()
    {
        MudDialog.Cancel();
    }

    private async Task Submit()
    {
        if (GlobalClass.billingDoc.Id != 0)
        {
            await billingDocumentService.UpdateBillingDocument(GlobalClass.billingDoc, GlobalClass.token);
            MudDialog.Close(DialogResult.Ok(1));
        }
        else
        {
            GlobalClass.billingDoc = await billingDocumentService.AddBillingDocument(GlobalClass.billingDoc, GlobalClass.token);
            GlobalClassList.billingDocumentList.Add(GlobalClass.billingDoc);
            MudDialog.Close(DialogResult.Ok(0));
        }

        await GlobalVariable.AMSHubConnection.InvokeAsync("SaveBillingDocument", GlobalClass.billingDoc);
    }
}