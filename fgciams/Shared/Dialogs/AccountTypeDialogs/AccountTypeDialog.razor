@inject IAccountTypeService accountTypeService
@inject ISnackbar snackBar

<MudDialog Class='customdialog'>
    <TitleContent>
        <div class='d-flex align-center'>
            @if (GlobalClass.accountTypeModel.Id != 0)
            {
                <MudIcon Icon="@Icons.Filled.Edit" Class="mr-3 mb-n1" />
            }
            else
            {
                <MudIcon Icon="@Icons.Filled.Add" Class="mr-3 mb-n1" />
            }
            <MudText Typo='Typo.h6'>@dialogTitle</MudText>
        </div>
    </TitleContent>
    <DialogContent>
        <div class='customdialog__content-container'>
            <MudGrid Spacing='1'>
                <MudItem xs='12'>
                    <MudTextField @bind-Value='@GlobalClass.accountTypeModel.TypeName' Label='Type name' />
                </MudItem>
                <MudItem xs='9'>
                    <MudTextField @bind-Value='@GlobalClass.accountTypeModel.Remarks' Label='Remarks' />
                </MudItem>
                <MudItem Class='d-flex align-center' xs='3'>
                    <MudCheckBox @bind-Checked='@GlobalClass.accountTypeModel.IsActive' Label='Active' />
                </MudItem>
            </MudGrid>
        </div>
    </DialogContent>
    <DialogActions>
        <MudButton OnClick="Cancel" Variant='Variant.Text'>Cancel</MudButton>
        <MudButton OnClick="(() => Submit())" Variant='Variant.Filled' Color="@color">@buttonText</MudButton>
    </DialogActions>
</MudDialog>
@code
{
    [CascadingParameter]public MudDialogInstance MudDialog { get; set; } = default!;
    [Parameter] public Color color { get; set; }
    [Parameter] public string dialogTitle { get; set; } = string.Empty;
    [Parameter] public string buttonText { get; set; } = string.Empty;
    protected override async Task OnInitializedAsync()
    {
        if (GlobalClass.accountTypeModel.Id == 0)
            GlobalClass.accountTypeModel.IsActive = true;
        await Task.Delay(1);
    }
    void Cancel() 
    {
        MudDialog.Cancel();
    }
    private async Task Submit()
    {
        try
        {
            if (GlobalClass.accountTypeModel.Id == 0)
            {
                await accountTypeService.AddAccountType(GlobalClass.accountTypeModel, GlobalClass.token);
                GlobalClassList.listOfAccountTypes.Insert(0,GlobalClass.accountTypeModel);
                MudDialog.Close(DialogResult.Ok(0));
            }
            else
            { 
                GlobalClass.accountTypeModel = await accountTypeService.UpdateAccountType(GlobalClass.accountTypeModel, GlobalClass.token);
                MudDialog.Close(DialogResult.Ok(1));
            }
            await GlobalVariable.AMSHubConnection.InvokeAsync("SaveAccountType",GlobalClass.accountTypeModel);
        } catch (Exception ex)
        {
            Extensions.ShowAlert(ex.Message,Variant.Filled,snackBar,Severity.Info);
        }
    }
}