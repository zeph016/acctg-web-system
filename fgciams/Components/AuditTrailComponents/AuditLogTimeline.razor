@inject IAccountingStatusService AccountingStatusService


<div class='fade-in'>
    @if(!dataFetched)
    {

    }
    else
    {
        <MudContainer Fixed='false' MaxWidth='MaxWidth.Medium'>
            <div class='atrail-timeline'>
                <div class='atrail-timeline__container'>
                    @foreach (var item in CurrentAuditTrail)
                    {
                        <div class='atrail-timeline__dot' style="@ActionColor(true, item.Activity)"></div>
                        <div class='atrail-timeline__subline' style='@ActionColor(false, item.Activity)'></div>
                        <div class='atrail-timeline__body' style='@ActionColor(false, item.Activity)'>
                            <div class='atrail-timeline__header-container'>
                                <MudChip Label Size='Size.Small' Style='@ActionColor(false, item.Activity)' Variant='Variant.Outlined'>
                                    <p>@ActionTaken(item.Activity)</p>
                                </MudChip>
                                <MudSpacer />
                                <p class='atrail-timeline__lbl-logdate'>@item.LogDateTime.ToString("dddd, dd MMMM yyyy")</p>
                                <p class='atrail-timeline__lbl-logtime'>@item.LogDateTime.ToString("h:mm tt")</p>
                            </div>
                            <div class='atrail-timeline__content-container'>
                                <p class='atrail-timeline__lbl-activity'>@Extensions.AuditTrailActivity(item.Activity)</p>
                            </div>
                            @if(!String.IsNullOrEmpty(Extensions.AuditTrailRemarks(item.Activity)))
                            {
                                <div class='atrail-timeline__content-container'>
                                    <p class='atrail-timeline__lbl-activity'>@Extensions.AuditTrailRemarks(item.Activity)</p>
                                </div>
                            }
                            <div class='atrail-timeline__footer-container'>
                                <p class='atrail-timeline__lbl-logtime'>By:</p>
                                <SignatoriesComponent employeeId='@item.UserId' avatarSize='Size.Small' />
                            </div>
                        </div>    
                    }
                </div>    
            </div>
        </MudContainer>
     }
</div>

@code {
    [Parameter] public bool IsPettyCash { get; set; }
    [Parameter] public bool IsLiquidation { get; set; }
    [Parameter] public bool IsRFP { get; set; }
    [Parameter] public bool IsVoucher { get; set; }
    [Parameter] public bool IsCheckWriter { get; set; }
    [Parameter] public List<PettyCashAuditTrail> PettyCashAuditTrail { get; set; } = new List<PettyCashAuditTrail>();
    [Parameter] public List<LiquidationAuditTrailModel> LiquidationAuditTrail { get; set; } = new List<LiquidationAuditTrailModel>();
    [Parameter] public List<RequestForPaymentAuditTrailModel> RequestForPaymentAuditTrail { get; set; } = new List<RequestForPaymentAuditTrailModel>();
    [Parameter] public List<VoucherAuditTrailModel> VoucherAuditTrail { get; set; } = new();
    [Parameter] public List<CheckAuditTrailModel> CheckWriterTrail { get; set; } = new();
    [Parameter] public string  ModuleName { get; set; } = string.Empty;
    private List<GeneralAuditTrailModel> CurrentAuditTrail = new List<GeneralAuditTrailModel>();
    private bool dataFetched;
    protected override async Task OnInitializedAsync()
    {
        while (GlobalClassList.accountingStatusList.Count() == 0)
            await Task.Delay(1);
        Task t = Task.WhenAll(MapAuditTrail());
        await t;
        if (t.Status == TaskStatus.RanToCompletion)
            CompletedFetch();
    }
    private void CompletedFetch()
    {
        dataFetched = true;
        StateHasChanged();
    }
    private string ActionTaken(string activity) 
    {
        return Extensions.DetermineActionTaken(activity);
    }

    private string ActionColor(bool isBGColor, string activity) 
    {
        return Extensions.DetermineActionColor(isBGColor, activity, ModuleName);
    } 

    private async Task MapAuditTrail()
    {
        if(IsPettyCash)
            CurrentAuditTrail = await MapPCToCurrent();
        else if(IsLiquidation)
            CurrentAuditTrail = await MapLiqToCurrent();
        else if(IsRFP)
            CurrentAuditTrail = await MapRFPToCurrent();
        else if(IsVoucher)
            CurrentAuditTrail = await MapVoucherToCurrent();
        else if(IsCheckWriter)
            CurrentAuditTrail = await MapCheckTrailToCurrent();
    }

    private async Task<List<GeneralAuditTrailModel>> MapPCToCurrent()
    {
        List<GeneralAuditTrailModel> trailList = new List<GeneralAuditTrailModel>();
        await Task.Run(() => {
            foreach(var item in PettyCashAuditTrail)
            {
                var itemTrail = new GeneralAuditTrailModel();
                itemTrail.Id = item.Id;
                itemTrail.AuditTrailId = item.PettyCashId;
                itemTrail.Activity = item.Activity;
                itemTrail.LogDateTime = item.LogDateTime;
                itemTrail.UserId = item.UserId;
                trailList.Add(itemTrail);
            }
        });
        return trailList ?? new List<GeneralAuditTrailModel>();
    }
    private async Task<List<GeneralAuditTrailModel>> MapLiqToCurrent()
    {
        List<GeneralAuditTrailModel> trailList = new List<GeneralAuditTrailModel>();
        await Task.Run(() => {
            foreach(var item in LiquidationAuditTrail)
            {
                var itemTrail = new GeneralAuditTrailModel();
                itemTrail.Id = item.Id;
                itemTrail.AuditTrailId = item.LiquidationId;
                itemTrail.Activity = item.Activity;
                itemTrail.LogDateTime = item.LogDateTime;
                itemTrail.UserId = item.UserId;
                trailList.Add(itemTrail);
            }
        });
        return trailList ?? new List<GeneralAuditTrailModel>();
    }
    private async Task<List<GeneralAuditTrailModel>> MapRFPToCurrent()
    {
        List<GeneralAuditTrailModel> trailList = new List<GeneralAuditTrailModel>();
            await Task.Run(() => {
            foreach(var item in RequestForPaymentAuditTrail)
            {
                var itemTrail = new GeneralAuditTrailModel();
                itemTrail.Id = item.Id;
                itemTrail.AuditTrailId = item.RequestForPaymentId;
                itemTrail.Activity = item.Activity;
                itemTrail.LogDateTime = item.LogDateTime;
                itemTrail.UserId = item.UserId;
                trailList.Add(itemTrail);
            }
        });
         return trailList ?? new List<GeneralAuditTrailModel>();
    }
    private async Task<List<GeneralAuditTrailModel>> MapVoucherToCurrent()
    {
        List<GeneralAuditTrailModel> trailList = new List<GeneralAuditTrailModel>();
            await Task.Run(() => {
            foreach(var item in VoucherAuditTrail)
            {
                var itemTrail = new GeneralAuditTrailModel();
                itemTrail.Id = item.Id;
                itemTrail.AuditTrailId = item.VoucherId;
                itemTrail.Activity = item.Activity;
                itemTrail.LogDateTime = item.LogDateTime;
                itemTrail.UserId = item.UserId;
                trailList.Add(itemTrail);
            }
        });
        return trailList ?? new List<GeneralAuditTrailModel>();
    }
    private async Task<List<GeneralAuditTrailModel>> MapCheckTrailToCurrent()
    {
        List<GeneralAuditTrailModel> trailList = new List<GeneralAuditTrailModel>();
            await Task.Run(() => {
            foreach(var item in CheckWriterTrail)
            {
                var itemTrail = new GeneralAuditTrailModel();
                itemTrail.Id = Convert.ToInt64(item.Id);
                itemTrail.AuditTrailId = Convert.ToInt64(item.Id);
                itemTrail.Activity = item.Activity;
                itemTrail.LogDateTime = item.LogDateTime;
                itemTrail.UserId = item.UserId;
                trailList.Add(itemTrail);
            }
        });
        return trailList ?? new List<GeneralAuditTrailModel>();
    }
}