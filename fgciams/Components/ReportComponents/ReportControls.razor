
<div class='rptctrls-container @controlPosition'>
    <div Class='rptctrls-container__controls'>
        @if(!isCloseOnly)
        {
            <MudButton Class='btn-ios-d font12' OnClick="Back"  Color='Color.Error' Variant='Variant.Filled' DisableElevation Size='Size.Small'>@(isSaved ? "RETURN" : "CANCEL")</MudButton>
            @if (processing) {
                <MudButton Class='btn-ios-d font12' OnClick="Prompt" Variant='Variant.Filled' DisableElevation Disabled='processing' Color='Color.Success' Size='Size.Small'>
                    <MudText Class='font12 pr-2'>SAVING VOUCHER</MudText>
                    <MudProgressCircular Class="progsize-21" Size="Size.Small" Indeterminate />
                </MudButton>
            } else {
                <MudButton Class='btn-ios-d font12' OnClick="Prompt" Variant='Variant.Filled' DisableElevation 
                    Disabled='isSaved' Color='Color.Success' Size='Size.Small' FullWidth 
                    EndIcon='@(!processing ? Icons.Material.Filled.Save:"")'>
                    @confirmStr
                </MudButton>
            }
        }
        else
        {
            <MudButton Class='btn-ios-d font12' OnClick="Back" Variant='Variant.Filled' DisableElevation 
                    Color='Color.Error' Size='Size.Small' FullWidth 
                    EndIcon='@Icons.Material.Filled.Close'>
                    @confirmStr
            </MudButton>
        }
    </div>
</div>

@code {
    [Parameter] public EventCallback BackEventClick { get; set; }
    [Parameter] public EventCallback PromptEventClick { get; set; }
    [Parameter] public string confirmStr { get; set; } = string.Empty;
    [Parameter] public string cancelStr { get; set; } = string.Empty;
    [Parameter] public bool processing { get; set; }
    [Parameter] public bool isSaved { get; set; }
    [Parameter] public bool isCloseOnly { get; set; }
    [Parameter] public string controlPosition { get; set; } = string.Empty;
    public override async Task SetParametersAsync(ParameterView parameters)
    {
        await base.SetParametersAsync(parameters);
    }

    protected async Task Back() => await BackEventClick.InvokeAsync();
    
    protected async Task Prompt() => await PromptEventClick.InvokeAsync();
}