@inject ICheckService checkService
@inject NavigationManager navigationManager
@inject IDialogService dialogService
@inject ISnackbar snackBarService

<div class='page-cont'>
    @* <div class='drawer-right'>
        <MudDrawer Class='pa-1' @bind-Open='openSideFilter' Fixed='false' Anchor='Anchor.Right' Elevation='0' Variant='DrawerVariant.Mini' OpenMiniOnHover='false'>
            <div class='drawer-right__filtercont'>
                <div class="icon-area d-flex align-center">
                    <MudIconButton OnClick='OpenSideFilter' Icon="@Icons.Filled.FilterList" aria-label="Filter" Size='Size.Medium' />
                </div>
                <div class="filter-title d-flex align-center">
                    <p class='title875'>Filter</p>
                    <MudSpacer />
                    <MudIconButton OnClick='OpenSideFilter' Icon="@Icons.Filled.Close" aria-label="Close Filter" Size='Size.Medium' />
                </div>
                <div class='filter-content d-flex flex-column pl-4 pr-4 gap-1 @visibility'>
                    <MudTextField Immediate=true Class='txtfield-75' @bind-Value='searchTerm' Placeholder='Check No'
                    Adornment='Adornment.Start' AdornmentIcon='@Icons.Material.Filled.Search' IconSize='Size.Small'
                    Clearable='true' Variant='Variant.Outlined' />
                    <MudButton Variant='Variant.Filled' Color='Color.Secondary'>Apply Filter</MudButton>
                </div>
            </div>
        </MudDrawer>
    </div> *@
    <MudContainer Class='checklistpage' Fixed='false' MaxWidth='MaxWidth.ExtraExtraLarge'>
        @if(!dataFetched)
        {
            <MudPaper Class='ma-1 pa-1' style="height: calc(100vh - 125px);">
                <MudSkeleton SkeletonType='SkeletonType.Text' Height='100px' Animation='Animation.Wave' />
                <MudSkeleton SkeletonType='SkeletonType.Rectangle' Height='71vh' Animation='Animation.Wave' />
            </MudPaper>
        }
        else
        {
            <MudTable Class='configtables' ServerData='new Func<TableState, Task<TableData<CheckModel>>>(LoadCheck)' Hover="true" 
            Breakpoint="Breakpoint.Sm" FixedHeader='true' FixedFooter='true' Bordered='true' Dense='true'
            RowsPerPage='10' Striped='true' @ref='tableVariable'>
                <ToolBarContent>
                    <MudSpacer/>
                    <MudMenu StartIcon='@Icons.Filled.MoreVert' AnchorOrigin='Origin.BottomLeft' 
                    TransformOrigin='Origin.TopCenter' Dense='true' Size='Size.Small' Label='More'>
                         @* <MudMenuItem OnClick='OpenSideFilter'>
                            <div class='d-flex align-center gap-2'>
                                <MudIcon Icon='@Icons.Filled.FilterList' />
                                <MudText Typo='Typo.body2'>Filter</MudText>
                            </div>
                        </MudMenuItem> *@
                    </MudMenu>
                </ToolBarContent>
                <ColGroup>
                    <col style='width:1%;'/>
                    <col />
                    <col />
                    <col />
                    <col />
                    <col style='width:1%;' />
                    <col style='width:1%;' />
                    <col style='width:20px;' />
                </ColGroup>
                <HeaderContent>
                    <MudTh Class='customheader-1 pa-2'>
                        <MudTableSortLabel SortLabel='SortControlNumber' T='CheckModel' InitialDirection="SortDirection.Descending">
                            Check No.
                        </MudTableSortLabel>
                    </MudTh>
                    <MudTh Class='customheader-1 text-center pa-2'>
                        <MudTableSortLabel SortLabel='SortDate' T='CheckModel' InitialDirection="SortDirection.Descending">
                            Check Date
                        </MudTableSortLabel>
                    </MudTh>
                    <MudTh Class='customheader-1 text-center pa-2'>
                        <MudTableSortLabel InitialDirection="SortDirection.Descending" 
                            SortBy="new Func<CheckModel, object>(x=>x.IssuedDate != null)">
                            Issued
                        </MudTableSortLabel>
                    </MudTh>
                    <MudTh Class='customheader-1 text-center pa-2'>Payee</MudTh>
                    <MudTh Class='customheader-1 text-center pa-2'>Bank</MudTh>
                    <MudTh Class='customheader-1 text-center pa-2'>Status</MudTh>
                    <MudTh Class='customheader-1 text-right pa-2'>Amount</MudTh>
                    <MudTh Class='customheader-1 text-center pa-2'>Action</MudTh>
                </HeaderContent>
                <RowTemplate>
                    <MudTd Class='wspace-nowrap pa-2' DataLabel='Check No.'>
                        <div class='d-flex align-center justify-center gap-2'>
                            <MudChip Class='chip-radius-5 txt-uppercase font-bold font10' Color='Color.Error' Size='Size.Small'>@context.CheckNo</MudChip>
                        </div>
                    </MudTd>
                    <MudTd Class='text-center pa-2' DataLabel='Date'>
                        <MudText Class='font12 wspace-nowrap'>@(context.CheckDate?.ToString("MM/dd/yyyy"))</MudText>
                    </MudTd>
                    <MudTd Class='pa-2' DataLabel='Date Issued'>
                         <MudText Class='font12 wspace-nowrap'>@context.IssuedDate?.ToString("MM/dd/yyyy")</MudText>          
                    </MudTd>
                    <MudTd Class='pa-2' DataLabel='Payee Name'>
                        <MudText Class='font12 font-bold wspace-nowra pt-1'>@context.PayeeName</MudText>
                    </MudTd>
                    <MudTd Class='pa-2' DataLabel='Bank Name'>
                        <MudText Class='font12 font-bold wspace-nowra pt-1'>@context.BankName</MudText>
                    </MudTd>
                    <MudTd Class='pa-2' DataLabel='Status'>
                        <div class='d-flex align-center'>
                            @if(GlobalClassList.accountingStatusList != null)
                            {
                                <MudChip Class='chip-radius-5 font-bold font10' Size='Size.Small' Color='Color.Info'>
                                    @context.CheckCategory
                                </MudChip>
                                <MudChip Class='chip-radius-5 font-bold font10' Size='Size.Small' Style='@GetAcctgStatusColor(context.AccountingStatusId)'>
                                    @Extensions.GetEnumDescription((Enums.AccountingStatusEnumCategory)context.AccountingStatusId)
                                </MudChip>
                            }
                        </div>
                    </MudTd>
                    <MudTd Class='pa-2' DataLabel='Amount'>
                        <div class='d-flex align-center gap-2'>
                            @if (context.Amount > 0) {
                                <MudText Class='wspace-nowrap font-bold font12 color-green'>
                                 @Extensions.GetEnumDescription(Enums.BankCurrency.PhilippinePeso)
                                </MudText>
                                <MudSpacer />
                                <MudText Class='wspace-nowrap font-bold font12 color-green'>
                                    @context.Amount.ToString("N2")
                                </MudText>
                            } else {
                                 <MudText Class='wspace-nowrap font-bold font12' Color='Color.Error'>
                                 @Extensions.GetEnumDescription(Enums.BankCurrency.PhilippinePeso)
                                </MudText>
                                <MudSpacer />
                                <MudText Class='wspace-nowrap font-bold font12' Color='Color.Error'>
                                    @context.Amount.ToString("N2")
                                </MudText>
                            }
                        </div>
                    </MudTd>
                    <MudTd Class='text-center pa-2' DataLabel='Actions'>
                        <MudMenu Icon='@Icons.Filled.MoreVert' AnchorOrigin='Origin.BottomLeft' ActivationEvent='MouseEvent.MouseOver'
                        TransformOrigin='Origin.TopRight' Dense='true' Size='Size.Small'>
                             <MudMenuItem OnClick="(()=>UpdateStatus(context,Enums.AccountingStatusEnumCategory.CCLRD,Enums.ActionMode.Cleared))">
                                <div class='d-flex align-center gap-2'>
                                    <MudIcon Icon='@Icons.Filled.ClearAll' Size='Size.Small' />
                                    <MudText Typo='Typo.body2'>Clear Check</MudText>
                                </div>
                            </MudMenuItem>
                            <MudMenuItem OnClick="(()=>UpdateStatus(context,Enums.AccountingStatusEnumCategory.CC,Enums.ActionMode.Cancel))">
                                <div class='d-flex align-center gap-2'>
                                    <MudIcon Icon='@Icons.Filled.Cancel' Size='Size.Small' />
                                    <MudText Typo='Typo.body2'>Cancel</MudText>
                                </div>
                            </MudMenuItem>
                            <MudMenuItem OnClick="(()=>UpdateStatus(context,Enums.AccountingStatusEnumCategory.CR,Enums.ActionMode.Released))">
                                <div class='d-flex align-center gap-2'>
                                    <MudIcon Icon='fa-solid fa-check-double' Size='Size.Small' />
                                    <MudText Typo='Typo.body2'>Release</MudText>
                                </div>
                            </MudMenuItem>
                        </MudMenu>
                    </MudTd>
                </RowTemplate>
                <NoRecordsContent>
                    <MudText Class='txt-uppercase font-bold font12' Color='Color.Error'>No records found</MudText>
                </NoRecordsContent>
                <ChildRowContent>
                    @if(context.isShowChild)
                    {
                        <td colspan='5'>
                            <MudTr Class='d-flex justify-end align-center'>
                                <MudCard Class='pa-2 ma-2 d-flex align-center gap-6'>
                                <div class='d-flex align-center gap-2'>
                                    <MudIcon Icon="@Icons.Filled.Message" Title="Account type" />
                                    <MudText Typo='Typo.body2'>
                                   
                                    </MudText>
                                </div>
                                </MudCard>
                            </MudTr>
                        </td>
                    }
                </ChildRowContent>
                <PagerContent>
                    <MudTablePager PageSizeOptions='@pageSize' />
                </PagerContent>
            </MudTable>
        }
    </MudContainer>
</div>

@code
{
    [Parameter]
    public string stringChecks {get;set;} = string.Empty;
    private bool dataFetched;
    private int[] pageSize = new int[] {30, 50, 100, 500, 1000 };
    private string searchTerm = string.Empty, visibility = "visibility-animation-hide";
    private IEnumerable<CheckModel>? pageData;
    private MudTable<CheckModel> tableVariable = new();
    protected override async Task OnInitializedAsync()
    {
        GlobalClass.pageTitle = "Check List";
        while (GlobalClass.currentUserAccount == null || GlobalClassList.listOfChecks == null)
            await Task.Delay(1);
        GlobalClass.checkModel = new();
        CompletedFetch();
    }
    private void CompletedFetch()
    {
        dataFetched = true;
        StateHasChanged();
    }
    private async Task UpdateStatus(CheckModel check, Enums.AccountingStatusEnumCategory status,Enums.ActionMode actionMode)
    {
      
        //Prompt confirmation
        var parameters = new DialogParameters();
        string contentText = "Check";
        string dialogTitle = actionMode == Enums.ActionMode.Released ? "RELEASE " + contentText 
                    : (actionMode == Enums.ActionMode.Cleared ? "CLEAR " + contentText :"CANCEL " + contentText );
        parameters.Add("contentText", contentText);
        parameters.Add("actionMode", actionMode);
        var options = new DialogOptions()
        {
            CloseButton = false,
            MaxWidth = MaxWidth.ExtraSmall,
            FullWidth = true,
            NoHeader = false,
            DisableBackdropClick = true
        };
        var resultDialog = await dialogService.Show<Shared.Dialogs.GenericPromptDialogs.GenericPrompt>(dialogTitle, parameters, options).Result;
        if (!resultDialog.Cancelled) 
        {
            //Audit Trail
            check.UserId = GlobalClass.currentUserAccount.EmployeeId;
            check.Activity = status == Enums.AccountingStatusEnumCategory.CR ? "Released"
            :(status == Enums.AccountingStatusEnumCategory.CCLRD ? "Clear Check":"Cancel Check");
            check.StatusName = status.ToString();
            check.AccountingStatusId = (int) status;
            await UpdateCheckStatus(check);
            Extensions.ShowAlert("Check has been "+Extensions.GetEnumDescription(actionMode),Variant.Filled,snackBarService,Severity.Success);
        }
    }
    private async Task UpdateCheckStatus(CheckModel check)
    {
        await checkService.UpdateCheckStatus(check,GlobalClass.token);
    }
    public static string GetAcctgStatusColor(long acctgStatusId)
    {
        var acctgStatus = new AccountingStatusModel();
        acctgStatus = GlobalClassList.accountingStatusList.Where(x => (int)x.StatusEnumCategoryId == acctgStatusId).FirstOrDefault();
        return "background-color:" + acctgStatus?.StatusColor;
    }
    private async Task<TableData<CheckModel>> LoadCheck(TableState tableState)
    {
        IEnumerable<CheckModel> data = await checkService.LoadCheck(new FilterParameter(){isActive =true}, GlobalClass.token);
        switch (tableState.SortLabel)
        {
            case "SortControlNumber":
                data = data.OrderByDirection(tableState.SortDirection, x=>x.Id);
                break;
            case "SortDate":
                data = data.OrderByDirection(tableState.SortDirection, x=>x.CheckDate);
                break;
            case "SortDateIssued":
                data = data.OrderByDirection(tableState.SortDirection, x=>x.IssuedDate);
                break;
        }
        //Vouchers Check List
        GlobalClassList.listOfChecks.Clear();
        if(!String.IsNullOrEmpty(stringChecks))
          GlobalClassList.listOfChecks = data.ToList();
        GlobalClassList.listOfChecks.RemoveAll(ch => stringChecks.Split(',').ToList().Any(a=>a==ch.ControlNumber));

        pageData = GlobalClassList.listOfChecks.Skip(tableState.Page * tableState.PageSize).Take(tableState.PageSize).ToArray();
        var total = GlobalClassList.listOfChecks.Count();
        return new TableData<CheckModel>()
        {
            TotalItems = total,
            Items = pageData
        };
    }
}