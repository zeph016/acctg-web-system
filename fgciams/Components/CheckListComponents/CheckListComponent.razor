@inject ICheckService checkService
@inject NavigationManager navigationManager
@inject IDialogService dialogService
@inject ISnackbar snackBarService
@inject ApplicationState AppState
@implements IDisposable


<MudContainer Class='py-4 bgc-4d43521a' Fixed='false' MaxWidth='MaxWidth.ExtraExtraLarge'>
    @if(!dataFetched)
    {
        <SkeletonCLComponent />
    }
    else
    {
        <MudTable Class='table-style-1' ServerData='new Func<TableState, Task<TableData<CheckModel>>>(LoadCheck)' 
            Breakpoint="Breakpoint.Sm" Hover FixedHeader Bordered Dense Height='auto'
            RowsPerPage='10' @ref='tableVariable'>
            <ColGroup>
                <col style='width:1%;' />
                <col style='width:1%;' />
                <col style='width:1%;' />
                <col />
                <col style='width:20%;'/>
                <col style='width:1%;' />
                <col style='width:3%;' />
            </ColGroup>
            <HeaderContent>
                <MudTh Class='customheader-6'>
                    <div class='d-flex justify-space-around'>
                        <MudTableSortLabel SortLabel='SortControlNumber' T='CheckModel' InitialDirection="SortDirection.Descending">
                            Control No
                        </MudTableSortLabel>
                        <MudTableSortLabel SortLabel='SortCheckNumber' T='CheckModel' InitialDirection="SortDirection.None">
                            Check No.
                        </MudTableSortLabel>
                    </div>
                </MudTh>
                <MudTh Class='customheader-6'>
                    <MudTableSortLabel SortLabel='SortDate' T='CheckModel' InitialDirection="SortDirection.Descending">
                        Check Date
                    </MudTableSortLabel>
                </MudTh>
                <MudTh Class='customheader-6'>
                    <MudTableSortLabel InitialDirection="SortDirection.Descending" 
                        SortBy="new Func<CheckModel, object>(x=>x.IssuedDate != null)">
                        Issued
                    </MudTableSortLabel>
                </MudTh>
                <MudTh Class='customheader-6 text-left'>Payee</MudTh>
                <MudTh Class='customheader-6 text-left'>Bank</MudTh>
                <MudTh Class='customheader-6 text-center'>Status</MudTh>
                <MudTh Class='customheader-6 text-center'>Amount</MudTh>
            </HeaderContent>
            <RowTemplate>
                <MudTd DataLabel='Check No.'>
                    <div class='d-flex gap-2'>
                        <MudChip Class='chip-radius-5 txt-uppercase font-bold font10' Size='Size.Small' Variant='Variant.Outlined'>
                            @context.ControlNumber
                        </MudChip>
                        <MudChip Class='chip-radius-5 txt-uppercase font-bold font10' Color='Color.Error' Size='Size.Small' Variant='Variant.Outlined'>
                            @context.CheckNo
                        </MudChip>
                    </div>
                </MudTd>
                <MudTd Class='text-center' DataLabel='Date'>
                    <MudChip Class='chip-radius-5 font-bold font10' Size='Size.Small' Variant='Variant.Outlined'>
                        @(context.CheckDate?.ToShortDateString())
                    </MudChip>
                </MudTd>
                <MudTd DataLabel='Date Issued'>
                    <MudChip Class='chip-radius-5 font-bold font10' Size='Size.Small' Variant='Variant.Outlined'>
                        @(context.IssuedDate?.ToShortDateString())
                    </MudChip>
                </MudTd>
                <MudTd DataLabel='Payee Name'>
                    <MudText Class='font12 wspace-nowra pt-1'>@context.PayeeName</MudText>
                </MudTd>
                <MudTd DataLabel='Bank Name'>
                    <MudText Class='font12 wspace-nowra pt-1'>@context.BankName</MudText>
                </MudTd>
                <MudTd DataLabel='Status'>
                    <div class='d-flex align-center justify-space-around'>
                        @if(GlobalClassList.accountingStatusList != null)
                        {
                            <MudChip Class='chip-radius-5 font-bold font10' Size='Size.Small' Color='Color.Info' Variant='Variant.Outlined'>
                                @context.CheckCategory
                            </MudChip>
                            <MudChip Class='chip-radius-5 font-bold font10' Size='Size.Small' Style='@GetAcctgStatusColor(context.AccountingStatusId)'
                                Variant='Variant.Outlined'>
                                @GlobalClassList.accountingStatusList.Where( acctg => context.AccountingStatusId == acctg.Id).Select( acctg => acctg.StatusName).FirstOrDefault()
                            </MudChip>
                        }
                    </div>
                </MudTd>
                <MudTd DataLabel='Amount'>
                    <div class='d-flex align-center gap-2'>
                        @if (context.Amount > 0) {
                            <MudText Class='wspace-nowrap font-bold font12 color-green'>
                                @Extensions.GetEnumDescription(Enums.BankCurrency.PhilippinePeso)
                            </MudText>
                            <MudSpacer />
                            <MudText Class='wspace-nowrap font-bold font12 color-green'>
                                @context.Amount.ToString("N2")
                            </MudText>
                        } else {
                                <MudText Class='wspace-nowrap font-bold font12' Color='Color.Error'>
                                @Extensions.GetEnumDescription(Enums.BankCurrency.PhilippinePeso)
                            </MudText>
                            <MudSpacer />
                            <MudText Class='wspace-nowrap font-bold font12' Color='Color.Error'>
                                @context.Amount.ToString("N2")
                            </MudText>
                        }
                    </div>
                </MudTd>
            </RowTemplate>
            <NoRecordsContent>
                <MudText Class='txt-uppercase font-bold font12' Color='Color.Error'>No records found</MudText>
            </NoRecordsContent>
        </MudTable>
    }
</MudContainer>

@code
{
    [Parameter] public string stringChecks {get;set;} = string.Empty;
    private bool dataFetched;
    private IEnumerable<CheckModel>? pageData;
    private MudTable<CheckModel> tableVariable = new();

    protected override async Task OnInitializedAsync()
    {
        while (GlobalClass.currentUserAccount == null || GlobalClassList.listOfChecks == null)
            await Task.Delay(1);
        GlobalClass.checkModel = new();
        AppState.OnChange += StateHasChanged;
        CompletedFetch();
    }
    private void CompletedFetch()
    {
        dataFetched = true;
        StateHasChanged();
    }
    private async Task UpdateStatus(CheckModel check, Enums.AccountingStatusEnumCategory status,Enums.ActionMode actionMode)
    {
        //Prompt confirmation
        var parameters = new DialogParameters();
        string contentText = "Check";
        string dialogTitle = actionMode.ToString();
        parameters.Add("dialogTitle", dialogTitle);
        parameters.Add("actionMode", actionMode);
        parameters.Add("contentText", contentText);
        var options = new DialogOptions()
        {
            CloseButton = false,
            MaxWidth = MaxWidth.ExtraSmall,
            FullWidth = true,
            NoHeader = false,
            DisableBackdropClick = true
        };
        var resultDialog = await dialogService.Show<Shared.Dialogs.GenericPromptDialogs.GenericPrompt>(dialogTitle, parameters, options).Result;
        if (!resultDialog.Canceled) 
        {
            //Audit Trail
            check.UserId = GlobalClass.currentUserAccount.EmployeeId;
            check.Activity = status == Enums.AccountingStatusEnumCategory.CR ? "Released"
            :(status == Enums.AccountingStatusEnumCategory.CCLRD ? "Clear Check":"Cancel Check");
            check.StatusName = status.ToString();
            check.AccountingStatusId = (int) status;
            await UpdateCheckStatus(check);
            Extensions.ShowAlert("Check updated successfully.",Variant.Filled,snackBarService,Severity.Success);
        }
    }
    private async Task UpdateCheckStatus(CheckModel check)
    {
        await checkService.UpdateCheckStatus(check,GlobalClass.token);
    }
    public static string GetAcctgStatusColor(long acctgStatusId)
    {
        var acctgStatus = new AccountingStatusModel();
        acctgStatus = GlobalClassList.accountingStatusList.Where(x => (int)x.StatusEnumCategoryId == acctgStatusId).FirstOrDefault();
        return "background-color:" + acctgStatus?.StatusColor;
    }
    private async Task<TableData<CheckModel>> LoadCheck(TableState tableState)
    {
        IEnumerable<CheckModel> data = await checkService.LoadCheck(new FilterParameter(){isActive =true}, GlobalClass.token);
        switch (tableState.SortLabel)
        {
            case "SortControlNumber":
                data = data.OrderByDirection(tableState.SortDirection, x=>x.Id);
                break;
            case "SortDate":
                data = data.OrderByDirection(tableState.SortDirection, x=>x.CheckDate);
                break;
            case "SortDateIssued":
                data = data.OrderByDirection(tableState.SortDirection, x=>x.IssuedDate);
                break;
        }
        //Vouchers Check List
        GlobalClassList.listOfChecks.Clear();
        if(!String.IsNullOrEmpty(stringChecks))
            GlobalClassList.listOfChecks = data.ToList();

        //Fixable
        var checkLists = stringChecks.Split(',').Distinct();
        var newCheckLists = new List<CheckModel>();
        newCheckLists.Clear();
        foreach(var check in checkLists)
        {
            newCheckLists.Add(GlobalClassList.listOfChecks.Where(x=>x.ControlNumber.Contains(check.ToString())).First());
        }
        GlobalClassList.listOfChecks = newCheckLists;
        pageData = GlobalClassList.listOfChecks.Skip(tableState.Page * tableState.PageSize).Take(tableState.PageSize).ToArray();
        var total = GlobalClassList.listOfChecks.Count();
        return new TableData<CheckModel>()
        {
            TotalItems = total,
            Items = pageData
        };
    }  

    void IDisposable.Dispose()
    {
        AppState.OnChange -= StateHasChanged;
    }  
}