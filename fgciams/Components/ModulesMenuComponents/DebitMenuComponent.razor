@inject ISnackbar SnackbarService

<MudMenuItem OnClick='PreviewDebit'>
    <div class='d-flex align-center gap-2'>
        <MudIcon Icon='@Icons.Material.Filled.Preview' Size='Size.Small' Color='Color.Dark'/>
        <MudText Typo='Typo.body2'>View</MudText>
    </div>
</MudMenuItem>
<MudMenuItem OnClick='EditDebit'>
    <div class='d-flex align-center gap-2 '>
        <MudIcon Icon='@Icons.Material.Filled.Edit' Size='Size.Small' Color='Color.Dark' />
        <MudText Typo='Typo.body2' Color='Color.Dark'>Edit</MudText>
    </div>
</MudMenuItem>
<MudMenuItem OnClick='Prompt'>
    <div class='d-flex align-center gap-2 '>
        <MudIcon Icon='@Icons.Material.Filled.Cancel' Size='Size.Small' Color='Color.Dark' />
        <MudText Typo='Typo.body2' Color='Color.Dark'>Cancel</MudText>
    </div>
</MudMenuItem>
<MudMenuItem OnClick="ViewAuditTrail">
    <div class='d-flex align-center gap-2 '>
        <MudIcon Icon='@Icons.Material.Filled.ListAlt' Size='Size.Small' Color='Color.Dark'/>
        <MudText Typo='Typo.body2' Color='Color.Dark'>Audit Trail</MudText>
    </div>
 </MudMenuItem>
@code{
    [Parameter] public DebitModel DebitModel {get;set;} = new();
    [Parameter] public string ModuleName { get; set; } = string.Empty;
    [Parameter] public EventCallback EditDebitClick {get;set;}
    [Parameter] public EventCallback PreviewClick { get; set; }
    [Parameter] public EventCallback CancelDebitClick {get;set;}
    [Parameter] public EventCallback AuditTrailClick {get; set;}

    private async Task isAllowed(EventCallback callback, Enums.AISModuleFunctions function)
    {
        if(Common.Privileges.isPrivilegeFunction(function))
            await callback.InvokeAsync();
        else
            Extensions.ShowAlert(String.Format("Account has been restricted to {0} {1}.",function.ToString().ToLower(), ModuleName), Variant.Filled, SnackbarService, Severity.Error);
    }

    private async Task EditDebit() => await isAllowed(EditDebitClick, Enums.AISModuleFunctions.Edit);
    private async Task Prompt() => await isAllowed(CancelDebitClick, Enums.AISModuleFunctions.Cancel); 
    private async Task ViewAuditTrail() => await isAllowed(AuditTrailClick,Enums.AISModuleFunctions.View);
    private async Task PreviewDebit() => await isAllowed(PreviewClick, Enums.AISModuleFunctions.View);
}