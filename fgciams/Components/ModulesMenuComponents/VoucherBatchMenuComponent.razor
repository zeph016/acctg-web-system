@inject ISnackbar SnackbarService

<MudMenuItem OnClick='EditView'>
    <a class='d-flex align-center gap-2 '>
        <MudIcon Icon='@Icons.Material.Filled.Edit' Size='Size.Small' Color='Color.Dark' />
        <MudText Typo='Typo.body2' Color='Color.Dark'>Edit</MudText>
    </a>
</MudMenuItem>
<MudMenuItem OnClick='NavigateAuditrail'>
    <a class='d-flex align-center gap-2 '>
        <MudIcon Icon='@Icons.Material.Filled.ListAlt' Size='Size.Small' Color='Color.Dark' />
        <MudText Typo='Typo.body2' Color='Color.Dark'>Audit Trail</MudText>
    </a>
</MudMenuItem>
<MudMenuItem OnClick='ShowReport'>
    <a class='d-flex align-center gap-2 '>
        <MudIcon Icon='@Icons.Material.Filled.PictureAsPdf' Size='Size.Small' Color='Color.Dark' />
        <MudText Typo='Typo.body2' Color='Color.Dark'>Show Report</MudText>
    </a>
</MudMenuItem>

@code
{
    [Parameter] public EventCallback EditClick { get; set; }
    [Parameter] public EventCallback NavigateClick { get; set; }
    [Parameter] public EventCallback ShowReportClick { get; set; }
    [Parameter] public string ModuleName { get; set; } = string.Empty;

    private async Task EditView() => await isAllowed(EditClick, Enums.AISModuleFunctions.Edit); 
    private async Task NavigateAuditrail() => await isAllowed(NavigateClick, Enums.AISModuleFunctions.View); 
    private async Task ShowReport() => await isAllowed(ShowReportClick, Enums.AISModuleFunctions.View); 
    private async Task isAllowed(EventCallback callback, Enums.AISModuleFunctions function)
    {
        if(Common.Privileges.isPrivilegeFunction(function))
            await callback.InvokeAsync();
        else
            Extensions.ShowAlert(String.Format("Account has been restricted to {0} {1}.",function.ToString().ToLower(), ModuleName), Variant.Filled, SnackbarService, Severity.Error);
    }
}